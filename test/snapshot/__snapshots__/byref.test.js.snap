// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`byref call result 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Call {
          "arguments": [
            Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #4 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #5 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "what": Name {
            "kind": "name",
            "name": "CONSTANT",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #6 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #7 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "test",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable #8 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "call",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref callable variable 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref closure 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Closure {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": [
            Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "message",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref foreach (key/value) 1`] = `
Program {
  "children": [
    Foreach {
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "key",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "arr",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "val",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref foreach 1`] = `
Program {
  "children": [
    Foreach {
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "arr",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "value",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref function definition 1`] = `
Program {
  "children": [
    _Function {
      "arguments": [
        Parameter {
          "attrGroups": [],
          "byref": true,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": [],
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "byref": true,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref new class 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": New {
          "arguments": [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref offset lookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Variable {
          "byref": true,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref propertylookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref return statement 1`] = `
Program {
  "children": [
    Return {
      "expr": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
      "kind": "return",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref static lookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
          },
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test",
              },
            },
          },
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #4 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "test",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #5 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #6 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test",
              },
            },
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #7 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getElementByPath",
            },
            "what": ParentReference {
              "kind": "parentreference",
              "raw": "parent",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup #8 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getElementByPath",
            },
            "what": SelfReference {
              "kind": "selfreference",
              "raw": "self",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref staticlookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "test",
          },
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref variable 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref variadic 1`] = `
Program {
  "children": [
    _Function {
      "arguments": [
        Parameter {
          "attrGroups": [],
          "byref": true,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "var",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": true,
        },
      ],
      "attrGroups": [],
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref with bin #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": AssignRef {
          "kind": "assignref",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "1",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`byref with bin 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": AssignRef {
          "kind": "assignref",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "type": "||",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
