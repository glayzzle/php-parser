// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test variables Chained encapsed vars 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": ""{$a->foo()[$bar[$foo]]}"",
          "type": "string",
          "value": [
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bar",
                  },
                },
                "what": Call {
                  "arguments": [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "foo",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                  },
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables Check errors should be ? 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "?",
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": [
        "{",
        "$",
        222,
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '?' on line 1",
      "token": "'?'",
    },
  ],
  "kind": "program",
}
`;

exports[`Test variables Check errors should fail $foo->bar::! 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "!",
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": [
        105,
        222,
        "$",
        "{",
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '!' on line 1",
      "token": "'!'",
    },
  ],
  "kind": "program",
}
`;

exports[`Test variables Check errors should fail foo::bar::baz 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "baz",
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '::' (T_DOUBLE_COLON) on line 1",
      "token": "'::' (T_DOUBLE_COLON)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test variables Check errors should fail on double static lookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "baz",
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": Name {
              "kind": "name",
              "name": "this",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '::' (T_DOUBLE_COLON) on line 1",
      "token": "'::' (T_DOUBLE_COLON)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test variables Check errors should fail on property lookup on static lookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "baz",
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "this",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '->' (T_OBJECT_OPERATOR) on line 1",
      "token": "'->' (T_OBJECT_OPERATOR)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test variables Class constants 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": StaticReference {
            "kind": "staticreference",
            "raw": "static",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": SelfReference {
            "kind": "selfreference",
            "raw": "self",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": ParentReference {
            "kind": "parentreference",
            "raw": "parent",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "class",
        },
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "this",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "qux",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""baz"",
              "unicode": false,
              "value": "baz",
            },
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "bar",
              },
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "foo",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "this",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables Dynamic variables 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""bar"",
          "unicode": false,
          "value": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""bar"",
          "unicode": false,
          "value": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": true,
          "kind": "variable",
          "name": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""bar"",
              "unicode": false,
              "value": "bar",
            },
            "type": ".",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""bar"",
          "unicode": false,
          "value": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""bar"",
              "unicode": false,
              "value": "bar",
            },
            "type": ".",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""bar"",
          "unicode": false,
          "value": "bar",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables Encaps var offset 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": ""{$a[1]}"",
          "type": "string",
          "value": [
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": ""{$a["a"]}"",
          "type": "string",
          "value": [
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": ""a"",
                  "unicode": false,
                  "value": "a",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": ""{$a[$b]}"",
          "type": "string",
          "value": [
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables Variable chains 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Number {
          "kind": "number",
          "value": "2",
        },
        "what": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "1",
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "what": Name {
              "kind": "name",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables array destructuring 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "id1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "name1",
              },
            },
          ],
          "kind": "list",
          "shortForm": true,
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "data",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables default variables 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""foo"",
          "unicode": false,
          "value": "foo",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "c",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables fix #167 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Literal {
              "kind": "literal",
              "value": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'baz'",
                  "unicode": false,
                  "value": "baz",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bar",
                },
              },
            },
            "what": Name {
              "kind": "name",
              "name": "Foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'baz'",
            "unicode": false,
            "value": "baz",
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bar",
            },
            "what": Name {
              "kind": "name",
              "name": "Foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables fix #185 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "0",
            },
            "parenthesizedExpression": true,
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "1",
            },
            "parenthesizedExpression": true,
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "0",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "1",
            },
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "0",
              },
              "parenthesizedExpression": true,
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "1",
            },
            "parenthesizedExpression": true,
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "0",
              },
              "parenthesizedExpression": true,
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": New {
            "arguments": [],
            "kind": "new",
            "parenthesizedExpression": true,
            "what": Name {
              "kind": "name",
              "name": "Foo",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "wrap",
        },
        "what": Call {
          "arguments": [
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "resource",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "this",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables fix 248 - broken ast for \`$$$$$\` 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables fix 248 - test curly 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": EncapsedPart {
          "curly": false,
          "expression": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "property",
            },
          },
          "kind": "encapsedpart",
          "syntax": "complex",
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "property",
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo_",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables fix 253 - can't be parsed \`global\` with multiple \`$\` 1`] = `
Program {
  "children": [
    Global {
      "items": [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      ],
      "kind": "global",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables simple variable #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables simple variable #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Variable {
          "curly": true,
          "kind": "variable",
          "name": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
            "type": "+",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables simple variable #4 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables simple variable 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test variables valid offset lookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": Variable {
                "curly": false,
                "kind": "variable",
                "name": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "property",
                },
              },
            },
          },
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
