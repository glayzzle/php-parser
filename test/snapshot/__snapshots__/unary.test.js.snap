// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test unary boolean 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "type": "-",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Unary {
          "kind": "unary",
          "parenthesizedExpression": true,
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple (4) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Unary {
          "kind": "unary",
          "parenthesizedExpression": true,
          "type": "-",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple (5) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Unary {
          "kind": "unary",
          "type": "!",
          "what": Unary {
            "kind": "unary",
            "type": "!",
            "what": Unary {
              "kind": "unary",
              "type": "!",
              "what": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "var",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Unary {
          "kind": "unary",
          "type": "!",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary multiple 2`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "~",
        "what": Unary {
          "kind": "unary",
          "type": "~",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary number (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Number {
          "kind": "number",
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary number (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "~",
        "what": Number {
          "kind": "number",
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary number (4) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Number {
          "kind": "number",
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary number 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Number {
          "kind": "number",
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
          "parenthesizedExpression": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "parenthesizedExpression": true,
        "type": "-",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (4) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
          "parenthesizedExpression": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (5) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "parenthesizedExpression": true,
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (6) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
          "parenthesizedExpression": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (7) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "~",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
          "parenthesizedExpression": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (8) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "parenthesizedExpression": true,
        "type": "~",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (9) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "parenthesizedExpression": true,
        "type": "-",
        "what": Number {
          "kind": "number",
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens (10) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": Number {
          "kind": "number",
          "parenthesizedExpression": true,
          "value": "100",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary parens 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "parenthesizedExpression": true,
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary simple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary string (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "-",
        "what": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""string"",
          "unicode": false,
          "value": "string",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary string (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "~",
        "what": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""string"",
          "unicode": false,
          "value": "string",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary string (4) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "!",
        "what": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""string"",
          "unicode": false,
          "value": "string",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test unary string 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "type": "+",
        "what": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""string"",
          "unicode": false,
          "value": "string",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
