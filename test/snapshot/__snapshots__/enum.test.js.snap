// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test enums can alias cases 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Bar",
          },
          "value": null,
        },
        ClassConstant {
          "attrGroups": [],
          "constants": [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "Baz",
              },
              "value": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "Bar",
                },
                "what": SelfReference {
                  "kind": "selfreference",
                  "raw": "self",
                },
              },
            },
          ],
          "final": false,
          "kind": "classconstant",
          "visibility": "public",
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums can have functions 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "MyCase",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isReadonly": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "void",
            "raw": "void",
          },
          "visibility": "public",
        },
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [
              Echo {
                "expressions": [
                  PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "value",
                    },
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "MyCase",
                      },
                      "what": SelfReference {
                        "kind": "selfreference",
                        "raw": "self",
                      },
                    },
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isReadonly": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "baz",
          },
          "nullable": false,
          "type": null,
          "visibility": "protected",
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": Name {
        "kind": "name",
        "name": "int",
        "resolution": "uqn",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums can implement interfaces 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [],
      "implements": [
        Name {
          "kind": "name",
          "name": "Bar",
          "resolution": "uqn",
        },
        Name {
          "kind": "name",
          "name": "Baz",
          "resolution": "uqn",
        },
      ],
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums can use traits 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [
        TraitUse {
          "adaptations": [
            TraitPrecedence {
              "instead": [
                Name {
                  "kind": "name",
                  "name": "Bar",
                  "resolution": "uqn",
                },
              ],
              "kind": "traitprecedence",
              "method": Identifier {
                "kind": "identifier",
                "name": "hello",
              },
              "trait": Name {
                "kind": "name",
                "name": "Baz",
                "resolution": "uqn",
              },
            },
            TraitAlias {
              "as": Identifier {
                "kind": "identifier",
                "name": "earth",
              },
              "kind": "traitalias",
              "method": Identifier {
                "kind": "identifier",
                "name": "world",
              },
              "trait": Name {
                "kind": "name",
                "name": "Baz",
                "resolution": "uqn",
              },
              "visibility": "",
            },
          ],
          "kind": "traituse",
          "traits": [
            Name {
              "kind": "name",
              "name": "Bar",
              "resolution": "uqn",
            },
            Name {
              "kind": "name",
              "name": "Baz",
              "resolution": "uqn",
            },
          ],
        },
        TraitUse {
          "adaptations": null,
          "kind": "traituse",
          "traits": [
            Name {
              "kind": "name",
              "name": "Bax",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums can't be parsed with PHP < 8 1`] = `"Parse Error : syntax error, unexpected 'Foo' (T_STRING), expecting ';' on line 1"`;

exports[`Test enums cannot have properties 1`] = `"Parse Error : syntax error, unexpected 'int' (T_STRING) on line 3"`;

exports[`Test enums doesn't confuse enums with identifiers 1`] = `
Program {
  "children": [
    Class {
      "attrGroups": [],
      "body": [
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isReadonly": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "enum",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "isReadonly": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    Interface {
      "attrGroups": [],
      "body": [],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    Trait {
      "body": [],
      "kind": "trait",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    _Function {
      "arguments": [],
      "attrGroups": [],
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "enum",
      },
      "nullable": false,
      "type": null,
    },
    Class {
      "attrGroups": [],
      "body": [],
      "extends": Name {
        "kind": "name",
        "name": "Foo",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "isReadonly": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    Class {
      "attrGroups": [],
      "body": [],
      "extends": null,
      "implements": [
        Name {
          "kind": "name",
          "name": "Foo",
          "resolution": "uqn",
        },
      ],
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "isReadonly": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    Class {
      "attrGroups": [],
      "body": [],
      "extends": Name {
        "kind": "name",
        "name": "Foo",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "isReadonly": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Enum",
      },
    },
    Enum {
      "attrGroups": [],
      "body": [],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "extendsFoo",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums empty 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums may have a backing type 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Hearts",
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'H'",
            "unicode": false,
            "value": "H",
          },
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Diamonds",
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'D'",
            "unicode": false,
            "value": "D",
          },
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Clubs",
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'C'",
            "unicode": false,
            "value": "C",
          },
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Spades",
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'S'",
            "unicode": false,
            "value": "S",
          },
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Suit",
      },
      "valueType": Name {
        "kind": "name",
        "name": "string",
        "resolution": "uqn",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test enums non-empty 1`] = `
Program {
  "children": [
    Enum {
      "attrGroups": [],
      "body": [
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Hearts",
          },
          "value": null,
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Diamonds",
          },
          "value": null,
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Clubs",
          },
          "value": null,
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Spades",
          },
          "value": null,
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Suit",
      },
      "valueType": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
