// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`yield assign (key and value) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Yield {
          "key": Variable {
            "curly": false,
            "kind": "variable",
            "name": "key",
          },
          "kind": "yield",
          "parenthesizedExpression": true,
          "value": Variable {
            "curly": false,
            "kind": "variable",
            "name": "value",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield assign (parens) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Yield {
          "key": null,
          "kind": "yield",
          "parenthesizedExpression": true,
          "value": Variable {
            "curly": false,
            "kind": "variable",
            "name": "value",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield assign 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Yield {
          "key": null,
          "kind": "yield",
          "value": Variable {
            "curly": false,
            "kind": "variable",
            "name": "value",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield expression as generator key 1`] = `
Program {
  "children": [
    _Function {
      "arguments": [],
      "attrGroups": [],
      "body": Block {
        "children": [
          ExpressionStatement {
            "expression": Yield {
              "key": Encapsed {
                "kind": "encapsed",
                "raw": ""bar {$test}" ",
                "type": "string",
                "value": [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "bar ",
                      "unicode": false,
                      "value": "bar ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                ],
              },
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "123",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield inside function 1`] = `
Program {
  "children": [
    _Function {
      "arguments": [],
      "attrGroups": [],
      "body": Block {
        "children": [
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield null 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Yield {
        "key": null,
        "kind": "yield",
        "value": null,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield simple (key and value) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Yield {
        "key": Variable {
          "curly": false,
          "kind": "variable",
          "name": "id",
        },
        "kind": "yield",
        "value": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fields",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`yield simple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Yield {
        "key": null,
        "kind": "yield",
        "value": Variable {
          "curly": false,
          "kind": "variable",
          "name": "i",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
