// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interface extends 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [],
      "extends": [
        Name {
          "kind": "name",
          "name": "B",
          "resolution": "uqn",
        },
      ],
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`interface interface name as identifier 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`interface invalid private flag 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [
        ClassConstant {
          "attrGroups": [],
          "constants": [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "B",
              },
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
          ],
          "final": false,
          "kind": "classconstant",
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
  ],
  "errors": [
    Error {
      "expected": [
        195,
        196,
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected 'private' (T_PRIVATE) on line 1",
      "token": "'private' (T_PRIVATE)",
    },
  ],
  "kind": "program",
}
`;

exports[`interface multiple extends 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [],
      "extends": [
        Name {
          "kind": "name",
          "name": "B",
          "resolution": "uqn",
        },
        Name {
          "kind": "name",
          "name": "C",
          "resolution": "uqn",
        },
      ],
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`interface property hooks get + set 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [
        PropertyStatement {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "propertystatement",
          "properties": [
            Property {
              "attrGroups": [],
              "hooks": [
                PropertyHook {
                  "body": null,
                  "byref": false,
                  "isFinal": false,
                  "kind": "propertyhook",
                  "name": "get",
                  "parameter": null,
                },
                PropertyHook {
                  "body": null,
                  "byref": false,
                  "isFinal": false,
                  "kind": "propertyhook",
                  "name": "set",
                  "parameter": null,
                },
              ],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "readable",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "int",
                "raw": "int",
              },
              "value": null,
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "I",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`interface property hooks getter 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [
        PropertyStatement {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "propertystatement",
          "properties": [
            Property {
              "attrGroups": [],
              "hooks": [
                PropertyHook {
                  "body": null,
                  "byref": false,
                  "isFinal": false,
                  "kind": "propertyhook",
                  "name": "get",
                  "parameter": null,
                },
              ],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "readable",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "int",
                "raw": "int",
              },
              "value": null,
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "I",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`interface property hooks setter 1`] = `
Program {
  "children": [
    Interface {
      "attrGroups": [],
      "body": [
        PropertyStatement {
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "propertystatement",
          "properties": [
            Property {
              "attrGroups": [],
              "hooks": [
                PropertyHook {
                  "body": null,
                  "byref": false,
                  "isFinal": false,
                  "kind": "propertyhook",
                  "name": "set",
                  "parameter": null,
                },
              ],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "readable",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "int",
                "raw": "int",
              },
              "value": null,
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "I",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
