// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`staticreference call 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": StaticReference {
            "kind": "staticreference",
            "raw": "static",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`staticreference constant 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "CONSTANT",
        },
        "what": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`staticreference uppercase 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": StaticReference {
            "kind": "staticreference",
            "raw": "STATIC",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`staticreference variable 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "what": StaticReference {
          "kind": "staticreference",
          "raw": "static",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
