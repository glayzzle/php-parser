// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test call array 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": ""Foo"",
                "unicode": false,
                "value": "Foo",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": ""bar"",
                "unicode": false,
                "value": "bar",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call array parens 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": ""Foo"",
                "unicode": false,
                "value": "Foo",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": ""bar"",
                "unicode": false,
                "value": "bar",
              },
            },
          ],
          "kind": "array",
          "parenthesizedExpression": true,
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call comments 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Array {
            "items": [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "leadingComments": [
                  CommentLine {
                    "kind": "commentline",
                    "offset": 10,
                    "value": "// comment
",
                  },
                ],
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "100",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "comments": [
    CommentLine {
      "kind": "commentline",
      "offset": 10,
      "value": "// comment
",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call doesnt confused static methods with named arguments 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Call {
            "arguments": [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "bar",
              },
              "what": Name {
                "kind": "name",
                "name": "a",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call handles spread operator at call site 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bar",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "baz",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bar",
            },
          },
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "baz",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside offsetlookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""offset"",
          "unicode": false,
          "value": "offset",
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside propertylookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": PropertyLookup {
        "kind": "propertylookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "property",
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Call {
            "arguments": [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "call",
              },
              "what": Call {
                "arguments": [],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "call",
                  },
                  "what": Call {
                    "arguments": [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "obj",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "get_class",
                      "resolution": "uqn",
                    },
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "property",
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (4) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": false,
          "kind": "variable",
          "name": "property",
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Variable {
              "curly": false,
              "kind": "variable",
              "name": "property",
            },
            "what": Call {
              "arguments": [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "obj",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "get_class",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (5) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "CONSTANT",
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (6) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (7) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "curly": false,
              "kind": "variable",
              "name": "property",
            },
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Variable {
              "curly": true,
              "kind": "variable",
              "name": Variable {
                "curly": false,
                "kind": "variable",
                "name": "property",
              },
            },
            "what": Call {
              "arguments": [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "var",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "get_class",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (8) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""property"",
            "unicode": false,
            "value": "property",
          },
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (9) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "curly": true,
          "kind": "variable",
          "name": Variable {
            "curly": false,
            "kind": "variable",
            "name": "property",
          },
        },
        "what": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "var",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_class",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (10) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Call {
          "arguments": [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "call",
            },
            "what": Name {
              "kind": "name",
              "name": "Order",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup (11) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Literal {
            "kind": "literal",
            "value": Call {
              "arguments": [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "call",
                "resolution": "uqn",
              },
            },
          },
          "what": Name {
            "kind": "name",
            "name": "Order",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call inside staticlookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Call {
            "arguments": [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "get_class",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call keyword as named argument 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          namedargument {
            "kind": "namedargument",
            "name": "array",
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call mix of unnamed and named arguments 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Number {
            "kind": "number",
            "value": "50",
          },
          namedargument {
            "kind": "namedargument",
            "name": "num",
            "value": Number {
              "kind": "number",
              "value": "100",
            },
          },
          namedargument {
            "kind": "namedargument",
            "name": "start_index",
            "value": Number {
              "kind": "number",
              "value": "0",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call multiple (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Call {
            "arguments": [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "call",
              },
              "what": Call {
                "arguments": [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "call",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "obj",
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call multiple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Call {
          "arguments": [],
          "kind": "call",
          "what": Call {
            "arguments": [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "call",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call multiple arguments 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call named arguments in php 8.0 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          namedargument {
            "kind": "namedargument",
            "name": "a",
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call nested 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Call {
            "arguments": [
              Call {
                "arguments": [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "call",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "call",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call nullsafepropertylookup (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": NullSafePropertyLookup {
          "kind": "nullsafepropertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": NullSafePropertyLookup {
            "kind": "nullsafepropertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "property",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call nullsafepropertylookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": NullSafePropertyLookup {
          "kind": "nullsafepropertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call offsetlookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""index"",
            "unicode": false,
            "value": "index",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "array",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call parent 1`] = `
Program {
  "children": [
    Class {
      "attrGroups": [],
      "body": [
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [
              ExpressionStatement {
                "expression": Call {
                  "arguments": [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "call",
                    },
                    "what": ParentReference {
                      "kind": "parentreference",
                      "raw": "parent",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call propertylookup (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "property",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call propertylookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call self 1`] = `
Program {
  "children": [
    Class {
      "attrGroups": [],
      "body": [
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [
              ExpressionStatement {
                "expression": Call {
                  "arguments": [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "call",
                    },
                    "what": SelfReference {
                      "kind": "selfreference",
                      "raw": "self",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call simple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call single argument 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call static 1`] = `
Program {
  "children": [
    Class {
      "attrGroups": [],
      "body": [
        Method {
          "arguments": [],
          "attrGroups": [],
          "body": Block {
            "children": [
              ExpressionStatement {
                "expression": Call {
                  "arguments": [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "call",
                    },
                    "what": StaticReference {
                      "kind": "staticreference",
                      "raw": "static",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call staticlookup (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call staticlookup 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "call",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call string 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": ""func"",
          "unicode": false,
          "value": "func",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call trailing comma #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""method"",
            "unicode": false,
            "value": "method",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""bar"",
            "unicode": false,
            "value": "bar",
          },
        ],
        "kind": "call",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call trailing comma #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""method"",
            "unicode": false,
            "value": "method",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""bar"",
            "unicode": false,
            "value": "bar",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call trailing comma 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""method"",
            "unicode": false,
            "value": "method",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""bar"",
            "unicode": false,
            "value": "bar",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call variable function (2) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call variable function (3) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Variable {
            "curly": false,
            "kind": "variable",
            "name": "func",
          },
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test call variable function 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Call {
        "arguments": [],
        "kind": "call",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
