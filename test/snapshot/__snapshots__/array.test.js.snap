// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Array without keys array with empty values #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'baz'",
              "unicode": false,
              "value": "baz",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with empty values #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'baz'",
              "unicode": false,
              "value": "baz",
            },
          },
          Noop {
            "kind": "noop",
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with empty values 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'baz'",
              "unicode": false,
              "value": "baz",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with multiple trailing commas #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
          Noop {
            "kind": "noop",
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with multiple trailing commas 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
          Noop {
            "kind": "noop",
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with trailing commas #3 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with trailing commas #4 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array with trailing commas #5 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array without trailing commas #2 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys array without trailing commas 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'foo'",
              "unicode": false,
              "value": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys byRef 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test'",
                "unicode": false,
                "value": "test",
              },
            },
            Entry {
              "byRef": true,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
            },
            Entry {
              "byRef": true,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test'",
                "unicode": false,
                "value": "test",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys deference array 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Call {
          "arguments": [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "foo",
            },
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "offset": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Call {
                  "arguments": [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "bar",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "foo",
                    },
                  },
                },
              },
              "what": Call {
                "arguments": [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                ],
                "kind": "call",
                "what": Array {
                  "items": [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": ""a"",
                        "unicode": false,
                        "value": "a",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": ""b"",
                        "unicode": false,
                        "value": "b",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys mixed tests / coverage test empty array 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Array {
          "items": [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Array {
          "items": [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys mixed tests / coverage test short form / keys 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": true,
            "key": Number {
              "kind": "number",
              "value": "0",
            },
            "kind": "entry",
            "unpack": false,
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "foo",
            },
          },
          Entry {
            "byRef": false,
            "key": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bar",
            },
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""foobar"",
              "unicode": false,
              "value": "foobar",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys non empty array 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1.1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test'",
                "unicode": false,
                "value": "test",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": ""test"",
                "unicode": false,
                "value": "test",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "2",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "3",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Foo",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Call {
                "arguments": [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "call",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of arrays 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Array {
              "items": [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item1"",
                    "unicode": false,
                    "value": "item1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item2"",
                    "unicode": false,
                    "value": "item2",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Array {
              "items": [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item3"",
                    "unicode": false,
                    "value": "item3",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item4"",
                    "unicode": false,
                    "value": "item4",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Array {
              "items": [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item5"",
                    "unicode": false,
                    "value": "item5",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": ""item6"",
                    "unicode": false,
                    "value": "item6",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of numbers 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "2.5",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x1000",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of objects 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": New {
              "arguments": [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "uqn",
              },
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": New {
              "arguments": [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "stdClass",
                "resolution": "uqn",
              },
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": New {
              "arguments": [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "bar",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of strings 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""item1"",
              "unicode": false,
              "value": "item1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""item2"",
              "unicode": false,
              "value": "item2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""item3"",
              "unicode": false,
              "value": "item3",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of strings and numbers 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""item2"",
              "unicode": false,
              "value": "item2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "3",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": ""item4"",
              "unicode": false,
              "value": "item4",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys of variables 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj3",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys single and empty (short form) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [],
        "kind": "array",
        "shortForm": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys single and empty 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Array {
        "items": [],
        "kind": "array",
        "shortForm": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys spread operator 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'banana'",
                "unicode": false,
                "value": "banana",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'orange'",
                "unicode": false,
                "value": "orange",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "parts",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'watermelon'",
                "unicode": false,
                "value": "watermelon",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr1",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr1",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr2",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "111",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr1",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Call {
                "arguments": [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "getArr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'c'",
                "unicode": false,
                "value": "c",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": New {
                "arguments": [
                  Array {
                    "items": [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'b'",
                          "unicode": false,
                          "value": "b",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'c'",
                          "unicode": false,
                          "value": "c",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": true,
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "ArrayIterator",
                  "resolution": "uqn",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Array without keys spread operator with reference 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Array {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": true,
              "value": Variable {
                "byref": true,
                "curly": false,
                "kind": "variable",
                "name": "arr",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '&' on line 1",
      "token": "'&'",
    },
  ],
  "kind": "program",
}
`;
