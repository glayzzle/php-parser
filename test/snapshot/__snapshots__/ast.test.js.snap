// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test AST structure #176 - lost \`?>\` in program node 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Magic {
        "kind": "magic",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 2,
            "offset": 18,
          },
          "source": "__LINE__",
          "start": Position {
            "column": 4,
            "line": 2,
            "offset": 10,
          },
        },
        "raw": "__LINE__",
        "value": "__LINE__",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 2,
          "offset": 18,
        },
        "source": "__LINE__",
        "start": Position {
          "column": 4,
          "line": 2,
          "offset": 10,
        },
      },
    },
  ],
  "errors": [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 6,
      "line": 3,
      "offset": 25,
    },
    "source": "<?php
    __LINE__
    ?>",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test AST structure fix #120 1`] = `
Program {
  "children": [
    Echo {
      "expressions": [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'World'",
          "unicode": false,
          "value": "World",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": "
 !",
      "value": " !",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #127 - echo statements 1`] = `
Program {
  "children": [
    Echo {
      "expressions": [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""hello"",
          "unicode": false,
          "value": "hello",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": " world",
      "value": " world",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #127 - inline 1`] = `
Program {
  "children": [
    Inline {
      "kind": "inline",
      "raw": "?>?>",
      "value": "?>?>",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #370 - classreference instead identifier(classreferent) 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #370 - nullkeyword 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "Null",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test clone 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Clone {
          "kind": "clone",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test coalesce operator 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
          "right": Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
          "type": "??",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test constants 1`] = `
Program {
  "children": [
    ConstantStatement {
      "constants": [
        Constant {
          "kind": "constant",
          "name": Identifier {
            "kind": "identifier",
            "name": "FOO",
          },
          "value": Number {
            "kind": "number",
            "value": "3.14",
          },
        },
      ],
      "kind": "constantstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test die/exit 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""bye"",
          "unicode": false,
          "value": "bye",
        },
        "kind": "exit",
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Exit {
        "expression": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1",
          },
        },
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test echo, isset, unset, empty 1`] = `
Program {
  "children": [
    Echo {
      "expressions": [
        RetIf {
          "falseExpr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""ko"",
            "unicode": false,
            "value": "ko",
          },
          "kind": "retif",
          "test": Variable {
            "curly": false,
            "kind": "variable",
            "name": "expr",
            "parenthesizedExpression": true,
          },
          "trueExpr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""ok"",
            "unicode": false,
            "value": "ok",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""some text"",
          "unicode": false,
          "value": "some text",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Isset {
        "kind": "isset",
        "variables": [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
        ],
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      ],
    },
    ExpressionStatement {
      "expression": Empty {
        "expression": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "kind": "empty",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test eval 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Eval {
        "kind": "eval",
        "source": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""return true;"",
          "unicode": false,
          "value": "return true;",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test include / require 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""file.php"",
          "unicode": false,
          "value": "file.php",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Name {
            "kind": "name",
            "name": "PATH",
            "resolution": "uqn",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": ""/file.php"",
            "unicode": false,
            "value": "/file.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""req.php"",
          "unicode": false,
          "value": "req.php",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": ""file.php"",
          "unicode": false,
          "value": "file.php",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test inline 1`] = `
Program {
  "children": [
    Inline {
      "kind": "inline",
      "raw": "Hello ",
      "value": "Hello ",
    },
    Echo {
      "expressions": [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'World'",
          "unicode": false,
          "value": "World",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": "
 !",
      "value": " !",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test invalid namespace separator 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Error {
        "expected": "SCALAR",
        "kind": "error",
        "line": 1,
        "message": "Parse Error : syntax error, unexpected '\\' (T_NS_SEPARATOR) on line 1",
        "token": "'\\' (T_NS_SEPARATOR)",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
 !",
      "value": " !",
    },
  ],
  "errors": [
    Error {
      "expected": "SCALAR",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '\\' (T_NS_SEPARATOR) on line 1",
      "token": "'\\' (T_NS_SEPARATOR)",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '$var' (T_VARIABLE), expecting ';' on line 1",
      "token": "'$var' (T_VARIABLE)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test AST structure test magics 1`] = `
Program {
  "children": [
    Echo {
      "expressions": [
        Magic {
          "kind": "magic",
          "raw": "__FILE__",
          "value": "__FILE__",
        },
        Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test program 1`] = `
Program {
  "children": [],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test shell 1`] = `
Program {
  "children": [
    Echo {
      "expressions": [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`ls -larth\`",
          "type": "shell",
          "value": [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "ls -larth",
                "unicode": false,
                "value": "ls -larth",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test AST structure test syntax error 1`] = `"Parse Error : syntax error, unexpected '$b' (T_VARIABLE), expecting ';' on line 3"`;
