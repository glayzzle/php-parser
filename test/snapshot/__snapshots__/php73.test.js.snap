// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test syntax parsing with PHP 73 support https://wiki.php.net/rfc/list_reference_assignment 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
            },
            Entry {
              "byRef": true,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
            },
          ],
          "kind": "list",
          "shortForm": true,
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
            },
            Entry {
              "byRef": true,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
            },
          ],
          "kind": "list",
          "shortForm": false,
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test syntax parsing with PHP 73 support https://wiki.php.net/rfc/trailing-comma-function-calls 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "newArray",
        },
        "operator": "=",
        "right": Call {
          "arguments": [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "arrayOne",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "arrayTwo",
            },
            Array {
              "items": [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'foo'",
                    "unicode": false,
                    "value": "foo",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'bar'",
                    "unicode": false,
                    "value": "bar",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_merge",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "operator": "=",
        "right": New {
          "arguments": [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'constructor'",
              "unicode": false,
              "value": "constructor",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'bar'",
              "unicode": false,
              "value": "bar",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'method'",
            "unicode": false,
            "value": "method",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bar'",
            "unicode": false,
            "value": "bar",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'invoke'",
            "unicode": false,
            "value": "invoke",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bar'",
            "unicode": false,
            "value": "bar",
          },
        ],
        "kind": "call",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          Isset {
            "kind": "isset",
            "variables": [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "bar",
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`Test syntax parsing with PHP 73 support https://wiki.php.net/rfc/trailing-comma-function-calls#errors 1`] = `
Program {
  "children": [
    _Function {
      "arguments": [
        Parameter {
          "attrGroups": [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": null,
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": [],
      "body": Block {
        "children": [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "bar",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          undefined,
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'function'",
            "unicode": false,
            "value": "function",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bar'",
            "unicode": false,
            "value": "bar",
          },
          Noop {
            "kind": "noop",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": undefined,
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": undefined,
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": [
          undefined,
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": String {
        "isDoubleQuote": false,
        "kind": "string",
        "raw": "'function'",
        "unicode": false,
        "value": "function",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": undefined,
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": String {
        "isDoubleQuote": false,
        "kind": "string",
        "raw": "'bar'",
        "unicode": false,
        "value": "bar",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": undefined,
      "kind": "expressionstatement",
    },
  ],
  "errors": [
    Error {
      "expected": 222,
      "kind": "error",
      "line": 3,
      "message": "Parse Error : syntax error, unexpected ')', expecting T_VARIABLE on line 3",
      "token": "')'",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 7,
      "message": "Parse Error : syntax error, unexpected ',' on line 7",
      "token": "','",
    },
    Error {
      "expected": ")",
      "kind": "error",
      "line": 10,
      "message": "Parse Error : syntax error, unexpected ',', expecting ')' on line 10",
      "token": "','",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 10,
      "message": "Parse Error : syntax error, unexpected ',', expecting ';' on line 10",
      "token": "','",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 10,
      "message": "Parse Error : syntax error, unexpected ',' on line 10",
      "token": "','",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 10,
      "message": "Parse Error : syntax error, unexpected ')', expecting ';' on line 10",
      "token": "')'",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 10,
      "message": "Parse Error : syntax error, unexpected ')' on line 10",
      "token": "')'",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ',' on line 12",
      "token": "','",
    },
    Error {
      "expected": ")",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ''function'' (T_CONSTANT_ENCAPSED_STRING), expecting ')' on line 12",
      "token": "''function'' (T_CONSTANT_ENCAPSED_STRING)",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ''function'' (T_CONSTANT_ENCAPSED_STRING), expecting ';' on line 12",
      "token": "''function'' (T_CONSTANT_ENCAPSED_STRING)",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ',', expecting ';' on line 12",
      "token": "','",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ',' on line 12",
      "token": "','",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ''bar'' (T_CONSTANT_ENCAPSED_STRING), expecting ';' on line 12",
      "token": "''bar'' (T_CONSTANT_ENCAPSED_STRING)",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ')', expecting ';' on line 12",
      "token": "')'",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 12,
      "message": "Parse Error : syntax error, unexpected ')' on line 12",
      "token": "')'",
    },
  ],
  "kind": "program",
}
`;
