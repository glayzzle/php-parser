// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exit argument 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit die 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit die with empty expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit die with expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "10",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "+",
        },
        "kind": "exit",
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit die without expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": true,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit exit with empty expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit exit with expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "10",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
          "type": "+",
        },
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit exit without expression 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;

exports[`exit simple 1`] = `
Program {
  "children": [
    ExpressionStatement {
      "expression": Exit {
        "expression": null,
        "kind": "exit",
        "useDie": false,
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": [],
  "kind": "program",
}
`;
