// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test locations #164 : expr should avoid ?> 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
            "source": "$a",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": "a",
        },
        "loc": Location {
          "end": Position {
            "column": 17,
            "line": 1,
            "offset": 17,
          },
          "source": "$a = $b + 1",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "$b",
              "start": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
            },
            "name": "b",
          },
          "loc": Location {
            "end": Position {
              "column": 17,
              "line": 1,
              "offset": 17,
            },
            "source": "$b + 1",
            "start": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "1",
              "start": Position {
                "column": 16,
                "line": 1,
                "offset": 16,
              },
            },
            "value": "1",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 17,
          "line": 1,
          "offset": 17,
        },
        "source": "$a = $b + 1",
        "start": Position {
          "column": 6,
          "line": 1,
          "offset": 6,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "<?php $a = $b + 1 ?>",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test #164 : expr must include ; 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 2,
              "line": 1,
              "offset": 2,
            },
            "source": "$a",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "a",
        },
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "$a = $b + 1;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
              "source": "$b",
              "start": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
            },
            "name": "b",
          },
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$b + 1",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "1",
              "start": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
            },
            "value": "1",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "$a = $b + 1;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "$a = $b + 1;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test #202 : include calling argument 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
              "source": "$arg",
              "start": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
            },
            "name": "arg",
          },
        ],
        "kind": "call",
        "loc": Location {
          "end": Position {
            "column": 21,
            "line": 1,
            "offset": 21,
          },
          "source": "$foo->bar->baz($arg);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "loc": Location {
            "end": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
            "source": "$foo->bar->baz",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "offset": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
              "source": "baz",
              "start": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
            },
            "name": "baz",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "loc": Location {
              "end": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
              "source": "$foo->bar",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "offset": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 9,
                  "line": 1,
                  "offset": 9,
                },
                "source": "bar",
                "start": Position {
                  "column": 6,
                  "line": 1,
                  "offset": 6,
                },
              },
              "name": "bar",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 4,
                  "line": 1,
                  "offset": 4,
                },
                "source": "$foo",
                "start": Position {
                  "column": 0,
                  "line": 1,
                  "offset": 0,
                },
              },
              "name": "foo",
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 21,
          "line": 1,
          "offset": 21,
        },
        "source": "$foo->bar->baz($arg);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 21,
      "line": 1,
      "offset": 21,
    },
    "source": "$foo->bar->baz($arg);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test #230 : check location 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
              "source": "$var1",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "name": "var1",
          },
          "loc": Location {
            "end": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
            "source": "$var1 + $var2",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "$var2",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "name": "var2",
          },
          "type": "+",
        },
        "loc": Location {
          "end": Position {
            "column": 22,
            "line": 1,
            "offset": 22,
          },
          "source": "$var1 + $var2 + $var3;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 22,
              "line": 1,
              "offset": 22,
            },
            "source": "$var3",
            "start": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
          },
          "name": "var3",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 22,
          "line": 1,
          "offset": 22,
        },
        "source": "$var1 + $var2 + $var3;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 22,
      "line": 1,
      "offset": 22,
    },
    "source": "$var1 + $var2 + $var3;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test #230 : check location on cast 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Cast {
          "expr": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "$var1",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "name": "var1",
          },
          "kind": "cast",
          "loc": Location {
            "end": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
            "source": "(string)$var1",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "raw": "(string)",
          "type": "string",
        },
        "loc": Location {
          "end": Position {
            "column": 22,
            "line": 1,
            "offset": 22,
          },
          "source": "(string)$var1 + $var2;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 22,
              "line": 1,
              "offset": 22,
            },
            "source": "$var2",
            "start": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
          },
          "name": "var2",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 22,
          "line": 1,
          "offset": 22,
        },
        "source": "(string)$var1 + $var2;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 22,
      "line": 1,
      "offset": 22,
    },
    "source": "(string)$var1 + $var2;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test #230 : check location on retif 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 57,
              "line": 1,
              "offset": 57,
            },
            "source": "$innerFalse",
            "start": Position {
              "column": 45,
              "line": 1,
              "offset": 45,
            },
          },
          "name": "innerFalse",
        },
        "kind": "retif",
        "loc": Location {
          "end": Position {
            "column": 57,
            "line": 1,
            "offset": 57,
          },
          "source": "$var1 + $var2 ? true : $false ? $innerTrue : $innerFalse;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "test": RetIf {
          "falseExpr": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 29,
                "line": 1,
                "offset": 29,
              },
              "source": "$false",
              "start": Position {
                "column": 23,
                "line": 1,
                "offset": 23,
              },
            },
            "name": "false",
          },
          "kind": "retif",
          "loc": Location {
            "end": Position {
              "column": 29,
              "line": 1,
              "offset": 29,
            },
            "source": "$var1 + $var2 ? true : $false",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "test": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 5,
                  "line": 1,
                  "offset": 5,
                },
                "source": "$var1",
                "start": Position {
                  "column": 0,
                  "line": 1,
                  "offset": 0,
                },
              },
              "name": "var1",
            },
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "$var1 + $var2",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 13,
                  "line": 1,
                  "offset": 13,
                },
                "source": "$var2",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "name": "var2",
            },
            "type": "+",
          },
          "trueExpr": Boolean {
            "kind": "boolean",
            "loc": Location {
              "end": Position {
                "column": 20,
                "line": 1,
                "offset": 20,
              },
              "source": "true",
              "start": Position {
                "column": 16,
                "line": 1,
                "offset": 16,
              },
            },
            "raw": "true",
            "value": true,
          },
        },
        "trueExpr": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 42,
              "line": 1,
              "offset": 42,
            },
            "source": "$innerTrue",
            "start": Position {
              "column": 32,
              "line": 1,
              "offset": 32,
            },
          },
          "name": "innerTrue",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 57,
          "line": 1,
          "offset": 57,
        },
        "source": "$var1 + $var2 ? true : $false ? $innerTrue : $innerFalse;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 57,
      "line": 1,
      "offset": 57,
    },
    "source": "$var1 + $var2 ? true : $false ? $innerTrue : $innerFalse;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test abstract class (inner statement) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Class {
            "attrGroups": Array [],
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": true,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "loc": Location {
              "end": Position {
                "column": 38,
                "line": 1,
                "offset": 38,
              },
              "source": "abstract class Foo {}",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "name": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 35,
                  "line": 1,
                  "offset": 35,
                },
                "source": "Foo",
                "start": Position {
                  "column": 32,
                  "line": 1,
                  "offset": 32,
                },
              },
              "name": "Foo",
            },
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 40,
            "line": 1,
            "offset": 40,
          },
          "source": "{ abstract class Foo {} }",
          "start": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
        },
      },
      "byref": false,
      "kind": "function",
      "loc": Location {
        "end": Position {
          "column": 40,
          "line": 1,
          "offset": 40,
        },
        "source": "function foo()",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "foo",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 40,
      "line": 1,
      "offset": 40,
    },
    "source": "function foo() { abstract class Foo {} }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test abstract class 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": true,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 21,
          "line": 1,
          "offset": 21,
        },
        "source": "abstract class Foo {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 18,
            "line": 1,
            "offset": 18,
          },
          "source": "Foo",
          "start": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 21,
      "line": 1,
      "offset": 21,
    },
    "source": "abstract class Foo {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test array 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
              "source": "1",
              "start": Position {
                "column": 6,
                "line": 1,
                "offset": 6,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 7,
                  "line": 1,
                  "offset": 7,
                },
                "source": "1",
                "start": Position {
                  "column": 6,
                  "line": 1,
                  "offset": 6,
                },
              },
              "value": "1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
              "source": "2",
              "start": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 10,
                  "line": 1,
                  "offset": 10,
                },
                "source": "2",
                "start": Position {
                  "column": 9,
                  "line": 1,
                  "offset": 9,
                },
              },
              "value": "2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "3",
              "start": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 13,
                  "line": 1,
                  "offset": 13,
                },
                "source": "3",
                "start": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
              },
              "value": "3",
            },
          },
        ],
        "kind": "array",
        "loc": Location {
          "end": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
          "source": "array(1, 2, 3);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "shortForm": false,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 15,
          "line": 1,
          "offset": 15,
        },
        "source": "array(1, 2, 3);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 15,
      "line": 1,
      "offset": 15,
    },
    "source": "array(1, 2, 3);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test array nested 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 20,
                "line": 1,
                "offset": 20,
              },
              "source": "array(1, 2, 3)",
              "start": Position {
                "column": 6,
                "line": 1,
                "offset": 6,
              },
            },
            "unpack": false,
            "value": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 13,
                      "line": 1,
                      "offset": 13,
                    },
                    "source": "1",
                    "start": Position {
                      "column": 12,
                      "line": 1,
                      "offset": 12,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 13,
                        "line": 1,
                        "offset": 13,
                      },
                      "source": "1",
                      "start": Position {
                        "column": 12,
                        "line": 1,
                        "offset": 12,
                      },
                    },
                    "value": "1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 16,
                      "line": 1,
                      "offset": 16,
                    },
                    "source": "2",
                    "start": Position {
                      "column": 15,
                      "line": 1,
                      "offset": 15,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 16,
                        "line": 1,
                        "offset": 16,
                      },
                      "source": "2",
                      "start": Position {
                        "column": 15,
                        "line": 1,
                        "offset": 15,
                      },
                    },
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 19,
                      "line": 1,
                      "offset": 19,
                    },
                    "source": "3",
                    "start": Position {
                      "column": 18,
                      "line": 1,
                      "offset": 18,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 19,
                        "line": 1,
                        "offset": 19,
                      },
                      "source": "3",
                      "start": Position {
                        "column": 18,
                        "line": 1,
                        "offset": 18,
                      },
                    },
                    "value": "3",
                  },
                },
              ],
              "kind": "array",
              "loc": Location {
                "end": Position {
                  "column": 20,
                  "line": 1,
                  "offset": 20,
                },
                "source": "array(1, 2, 3)",
                "start": Position {
                  "column": 6,
                  "line": 1,
                  "offset": 6,
                },
              },
              "shortForm": false,
            },
          },
        ],
        "kind": "array",
        "loc": Location {
          "end": Position {
            "column": 22,
            "line": 1,
            "offset": 22,
          },
          "source": "array(array(1, 2, 3));",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "shortForm": false,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 22,
          "line": 1,
          "offset": 22,
        },
        "source": "array(array(1, 2, 3));",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 22,
      "line": 1,
      "offset": 22,
    },
    "source": "array(array(1, 2, 3));",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test array short form 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 2,
                "line": 1,
                "offset": 2,
              },
              "source": "1",
              "start": Position {
                "column": 1,
                "line": 1,
                "offset": 1,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 2,
                  "line": 1,
                  "offset": 2,
                },
                "source": "1",
                "start": Position {
                  "column": 1,
                  "line": 1,
                  "offset": 1,
                },
              },
              "value": "1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
              "source": "2",
              "start": Position {
                "column": 4,
                "line": 1,
                "offset": 4,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 5,
                  "line": 1,
                  "offset": 5,
                },
                "source": "2",
                "start": Position {
                  "column": 4,
                  "line": 1,
                  "offset": 4,
                },
              },
              "value": "2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
              "source": "3",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "unpack": false,
            "value": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
                "source": "3",
                "start": Position {
                  "column": 7,
                  "line": 1,
                  "offset": 7,
                },
              },
              "value": "3",
            },
          },
        ],
        "kind": "array",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "[1, 2, 3];",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "shortForm": true,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 10,
          "line": 1,
          "offset": 10,
        },
        "source": "[1, 2, 3];",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 10,
      "line": 1,
      "offset": 10,
    },
    "source": "[1, 2, 3];",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test array short form nested 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "loc": Location {
              "end": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
              "source": "[1, 2, 3]",
              "start": Position {
                "column": 1,
                "line": 1,
                "offset": 1,
              },
            },
            "unpack": false,
            "value": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 3,
                      "line": 1,
                      "offset": 3,
                    },
                    "source": "1",
                    "start": Position {
                      "column": 2,
                      "line": 1,
                      "offset": 2,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 3,
                        "line": 1,
                        "offset": 3,
                      },
                      "source": "1",
                      "start": Position {
                        "column": 2,
                        "line": 1,
                        "offset": 2,
                      },
                    },
                    "value": "1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 6,
                      "line": 1,
                      "offset": 6,
                    },
                    "source": "2",
                    "start": Position {
                      "column": 5,
                      "line": 1,
                      "offset": 5,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 6,
                        "line": 1,
                        "offset": 6,
                      },
                      "source": "2",
                      "start": Position {
                        "column": 5,
                        "line": 1,
                        "offset": 5,
                      },
                    },
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "loc": Location {
                    "end": Position {
                      "column": 9,
                      "line": 1,
                      "offset": 9,
                    },
                    "source": "3",
                    "start": Position {
                      "column": 8,
                      "line": 1,
                      "offset": 8,
                    },
                  },
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "loc": Location {
                      "end": Position {
                        "column": 9,
                        "line": 1,
                        "offset": 9,
                      },
                      "source": "3",
                      "start": Position {
                        "column": 8,
                        "line": 1,
                        "offset": 8,
                      },
                    },
                    "value": "3",
                  },
                },
              ],
              "kind": "array",
              "loc": Location {
                "end": Position {
                  "column": 10,
                  "line": 1,
                  "offset": 10,
                },
                "source": "[1, 2, 3]",
                "start": Position {
                  "column": 1,
                  "line": 1,
                  "offset": 1,
                },
              },
              "shortForm": true,
            },
          },
        ],
        "kind": "array",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "[[1, 2, 3]];",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "shortForm": true,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "[[1, 2, 3]];",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "[[1, 2, 3]];",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test array with keys, byRef and unpack 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 60,
            "line": 1,
            "offset": 60,
          },
          "source": "$var = [1, 'foo', 'test' => $foo, 'test' => &$foo, ...$var];",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 9,
                  "line": 1,
                  "offset": 9,
                },
                "source": "1",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "unpack": false,
              "value": Number {
                "kind": "number",
                "loc": Location {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                    "offset": 9,
                  },
                  "source": "1",
                  "start": Position {
                    "column": 8,
                    "line": 1,
                    "offset": 8,
                  },
                },
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 16,
                  "line": 1,
                  "offset": 16,
                },
                "source": "'foo'",
                "start": Position {
                  "column": 11,
                  "line": 1,
                  "offset": 11,
                },
              },
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 16,
                    "line": 1,
                    "offset": 16,
                  },
                  "source": "'foo'",
                  "start": Position {
                    "column": 11,
                    "line": 1,
                    "offset": 11,
                  },
                },
                "raw": "'foo'",
                "unicode": false,
                "value": "foo",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 24,
                    "line": 1,
                    "offset": 24,
                  },
                  "source": "'test'",
                  "start": Position {
                    "column": 18,
                    "line": 1,
                    "offset": 18,
                  },
                },
                "raw": "'test'",
                "unicode": false,
                "value": "test",
              },
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 32,
                  "line": 1,
                  "offset": 32,
                },
                "source": "'test' => $foo",
                "start": Position {
                  "column": 18,
                  "line": 1,
                  "offset": 18,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 32,
                    "line": 1,
                    "offset": 32,
                  },
                  "source": "$foo",
                  "start": Position {
                    "column": 28,
                    "line": 1,
                    "offset": 28,
                  },
                },
                "name": "foo",
              },
            },
            Entry {
              "byRef": true,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 40,
                    "line": 1,
                    "offset": 40,
                  },
                  "source": "'test'",
                  "start": Position {
                    "column": 34,
                    "line": 1,
                    "offset": 34,
                  },
                },
                "raw": "'test'",
                "unicode": false,
                "value": "test",
              },
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 49,
                  "line": 1,
                  "offset": 49,
                },
                "source": "'test' => &$foo",
                "start": Position {
                  "column": 34,
                  "line": 1,
                  "offset": 34,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 49,
                    "line": 1,
                    "offset": 49,
                  },
                  "source": "$foo",
                  "start": Position {
                    "column": 45,
                    "line": 1,
                    "offset": 45,
                  },
                },
                "name": "foo",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 58,
                  "line": 1,
                  "offset": 58,
                },
                "source": "...$var",
                "start": Position {
                  "column": 51,
                  "line": 1,
                  "offset": 51,
                },
              },
              "unpack": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 58,
                    "line": 1,
                    "offset": 58,
                  },
                  "source": "$var",
                  "start": Position {
                    "column": 54,
                    "line": 1,
                    "offset": 54,
                  },
                },
                "name": "var",
              },
            },
          ],
          "kind": "array",
          "loc": Location {
            "end": Position {
              "column": 59,
              "line": 1,
              "offset": 59,
            },
            "source": "[1, 'foo', 'test' => $foo, 'test' => &$foo, ...$var]",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 60,
          "line": 1,
          "offset": 60,
        },
        "source": "$var = [1, 'foo', 'test' => $foo, 'test' => &$foo, ...$var];",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 60,
      "line": 1,
      "offset": 60,
    },
    "source": "$var = [1, 'foo', 'test' => $foo, 'test' => &$foo, ...$var];",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test assign [] 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "[]",
            "start": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
          },
          "offset": false,
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 4,
                "line": 1,
                "offset": 4,
              },
              "source": "$var",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "name": "var",
          },
        },
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "$var[] = $var",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
            "source": "$var",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 13,
          "line": 1,
          "offset": 13,
        },
        "source": "$var[] = $var",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 13,
      "line": 1,
      "offset": 13,
    },
    "source": "$var[] = $var",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test assign 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "$var = true;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "true",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "true",
          "value": true,
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "$var = true;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "$var = true;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test assign by ref 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "$var = &$var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
            "source": "$var",
            "start": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 13,
          "line": 1,
          "offset": 13,
        },
        "source": "$var = &$var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 13,
      "line": 1,
      "offset": 13,
    },
    "source": "$var = &$var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test assign mutliple 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 21,
            "line": 1,
            "offset": 21,
          },
          "source": "$var = $other = true;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "$other",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "other",
          },
          "loc": Location {
            "end": Position {
              "column": 20,
              "line": 1,
              "offset": 20,
            },
            "source": "$other = true",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "operator": "=",
          "right": Boolean {
            "kind": "boolean",
            "loc": Location {
              "end": Position {
                "column": 20,
                "line": 1,
                "offset": 20,
              },
              "source": "true",
              "start": Position {
                "column": 16,
                "line": 1,
                "offset": 16,
              },
            },
            "raw": "true",
            "value": true,
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 21,
          "line": 1,
          "offset": 21,
        },
        "source": "$var = $other = true;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 21,
      "line": 1,
      "offset": 21,
    },
    "source": "$var = $other = true;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test bin 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 18,
            "line": 1,
            "offset": 18,
          },
          "source": "$var = $var + 100;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "$var",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "var",
          },
          "loc": Location {
            "end": Position {
              "column": 17,
              "line": 1,
              "offset": 17,
            },
            "source": "$var + 100",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "100",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "value": "100",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 1,
          "offset": 18,
        },
        "source": "$var = $var + 100;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 18,
      "line": 1,
      "offset": 18,
    },
    "source": "$var = $var + 100;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test bin 2`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "$var + 2112;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Number {
          "kind": "number",
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "2112",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "value": "2112",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "$var + 2112;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "$var + 2112;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test bin nested (2) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 4,
                "line": 1,
                "offset": 4,
              },
              "source": "$var",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "name": "var",
          },
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$var + $var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "$var",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "var",
          },
          "type": "+",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 1,
            "offset": 19,
          },
          "source": "$var + $var + 2112;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Number {
          "kind": "number",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "2112",
            "start": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
          },
          "value": "2112",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 1,
          "offset": 19,
        },
        "source": "$var + $var + 2112;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 19,
      "line": 1,
      "offset": 19,
    },
    "source": "$var + $var + 2112;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test bin nested 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 4,
                "line": 1,
                "offset": 4,
              },
              "source": "$var",
              "start": Position {
                "column": 0,
                "line": 1,
                "offset": 0,
              },
            },
            "name": "var",
          },
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$var + 2112",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "2112",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "value": "2112",
          },
          "type": "+",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 1,
            "offset": 19,
          },
          "source": "$var + 2112 + $var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "$var",
            "start": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
          },
          "name": "var",
        },
        "type": "+",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 1,
          "offset": 19,
        },
        "source": "$var + 2112 + $var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 19,
      "line": 1,
      "offset": 19,
    },
    "source": "$var + 2112 + $var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test break 1`] = `
Program {
  "children": Array [
    Break {
      "kind": "break",
      "level": null,
      "loc": Location {
        "end": Position {
          "column": 6,
          "line": 1,
          "offset": 6,
        },
        "source": "break;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 6,
      "line": 1,
      "offset": 6,
    },
    "source": "break;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test cast 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 1,
            "offset": 19,
          },
          "source": "$var = (int) \\"2112\\"",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Cast {
          "expr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
              "source": "\\"2112\\"",
              "start": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
            },
            "raw": "\\"2112\\"",
            "unicode": false,
            "value": "2112",
          },
          "kind": "cast",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "(int) \\"2112\\"",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "(int)",
          "type": "int",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 1,
          "offset": 19,
        },
        "source": "$var = (int) \\"2112\\"",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 19,
      "line": 1,
      "offset": 19,
    },
    "source": "$var = (int) \\"2112\\"",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test class (inner statement) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Class {
            "attrGroups": Array [],
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "loc": Location {
              "end": Position {
                "column": 29,
                "line": 1,
                "offset": 29,
              },
              "source": "class Foo {}",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "name": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 26,
                  "line": 1,
                  "offset": 26,
                },
                "source": "Foo",
                "start": Position {
                  "column": 23,
                  "line": 1,
                  "offset": 23,
                },
              },
              "name": "Foo",
            },
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 31,
            "line": 1,
            "offset": 31,
          },
          "source": "{ class Foo {} }",
          "start": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
        },
      },
      "byref": false,
      "kind": "function",
      "loc": Location {
        "end": Position {
          "column": 31,
          "line": 1,
          "offset": 31,
        },
        "source": "function foo()",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "foo",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 31,
      "line": 1,
      "offset": 31,
    },
    "source": "function foo() { class Foo {} }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test class 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "class Foo {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "class Foo {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test clone 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Clone {
        "kind": "clone",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 1,
            "offset": 11,
          },
          "source": "clone $var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 10,
              "line": 1,
              "offset": 10,
            },
            "source": "$var",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 1,
          "offset": 11,
        },
        "source": "clone $var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 11,
      "line": 1,
      "offset": 11,
    },
    "source": "clone $var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test conststatement 1`] = `
Program {
  "children": Array [
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "loc": Location {
            "end": Position {
              "column": 31,
              "line": 1,
              "offset": 31,
            },
            "source": "CONSTANT = \\"Hello world!\\"",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
              "source": "CONSTANT",
              "start": Position {
                "column": 6,
                "line": 1,
                "offset": 6,
              },
            },
            "name": "CONSTANT",
          },
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 31,
                "line": 1,
                "offset": 31,
              },
              "source": "\\"Hello world!\\"",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "raw": "\\"Hello world!\\"",
            "unicode": false,
            "value": "Hello world!",
          },
        },
      ],
      "kind": "constantstatement",
      "loc": Location {
        "end": Position {
          "column": 32,
          "line": 1,
          "offset": 32,
        },
        "source": "const CONSTANT = \\"Hello world!\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 32,
      "line": 1,
      "offset": 32,
    },
    "source": "const CONSTANT = \\"Hello world!\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test conststatement multiple 1`] = `
Program {
  "children": Array [
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "loc": Location {
            "end": Position {
              "column": 31,
              "line": 1,
              "offset": 31,
            },
            "source": "CONSTANT = \\"Hello world!\\"",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
              "source": "CONSTANT",
              "start": Position {
                "column": 6,
                "line": 1,
                "offset": 6,
              },
            },
            "name": "CONSTANT",
          },
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 31,
                "line": 1,
                "offset": 31,
              },
              "source": "\\"Hello world!\\"",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "raw": "\\"Hello world!\\"",
            "unicode": false,
            "value": "Hello world!",
          },
        },
        Constant {
          "kind": "constant",
          "loc": Location {
            "end": Position {
              "column": 70,
              "line": 1,
              "offset": 70,
            },
            "source": "OTHER_CONSTANT = \\"Other hello world!\\"",
            "start": Position {
              "column": 33,
              "line": 1,
              "offset": 33,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 47,
                "line": 1,
                "offset": 47,
              },
              "source": "OTHER_CONSTANT",
              "start": Position {
                "column": 33,
                "line": 1,
                "offset": 33,
              },
            },
            "name": "OTHER_CONSTANT",
          },
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 70,
                "line": 1,
                "offset": 70,
              },
              "source": "\\"Other hello world!\\"",
              "start": Position {
                "column": 50,
                "line": 1,
                "offset": 50,
              },
            },
            "raw": "\\"Other hello world!\\"",
            "unicode": false,
            "value": "Other hello world!",
          },
        },
      ],
      "kind": "constantstatement",
      "loc": Location {
        "end": Position {
          "column": 71,
          "line": 1,
          "offset": 71,
        },
        "source": "const CONSTANT = \\"Hello world!\\", OTHER_CONSTANT = \\"Other hello world!\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 71,
      "line": 1,
      "offset": 71,
    },
    "source": "const CONSTANT = \\"Hello world!\\", OTHER_CONSTANT = \\"Other hello world!\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test continue 1`] = `
Program {
  "children": Array [
    Continue {
      "kind": "continue",
      "level": null,
      "loc": Location {
        "end": Position {
          "column": 9,
          "line": 1,
          "offset": 9,
        },
        "source": "continue;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 9,
      "line": 1,
      "offset": 9,
    },
    "source": "continue;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test declare 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "ticks",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "name": "ticks",
          },
          "kind": "declaredirective",
          "loc": Location {
            "end": Position {
              "column": 15,
              "line": 1,
              "offset": 15,
            },
            "source": "ticks=1",
            "start": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
          },
          "value": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
              "source": "1",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "loc": Location {
        "end": Position {
          "column": 17,
          "line": 1,
          "offset": 17,
        },
        "source": "declare(ticks=1);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "mode": "none",
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 17,
      "line": 1,
      "offset": 17,
    },
    "source": "declare(ticks=1);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test declare block 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [
        Echo {
          "expressions": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 35,
                  "line": 1,
                  "offset": 35,
                },
                "source": "\\"something\\"",
                "start": Position {
                  "column": 24,
                  "line": 1,
                  "offset": 24,
                },
              },
              "raw": "\\"something\\"",
              "unicode": false,
              "value": "something",
            },
          ],
          "kind": "echo",
          "loc": Location {
            "end": Position {
              "column": 36,
              "line": 1,
              "offset": 36,
            },
            "source": "echo \\"something\\";",
            "start": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
          },
          "shortForm": false,
        },
      ],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "ticks",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "name": "ticks",
          },
          "kind": "declaredirective",
          "loc": Location {
            "end": Position {
              "column": 15,
              "line": 1,
              "offset": 15,
            },
            "source": "ticks=1",
            "start": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
          },
          "value": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
              "source": "1",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "loc": Location {
        "end": Position {
          "column": 38,
          "line": 1,
          "offset": 38,
        },
        "source": "declare(ticks=1) { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "mode": "block",
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 38,
      "line": 1,
      "offset": 38,
    },
    "source": "declare(ticks=1) { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test declare directive (multiple) 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
              "source": "A",
              "start": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
            },
            "name": "A",
          },
          "kind": "declaredirective",
          "loc": Location {
            "end": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
            "source": "A='B'",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
              "source": "'B'",
              "start": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
            },
            "raw": "'B'",
            "unicode": false,
            "value": "B",
          },
        },
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "C",
              "start": Position {
                "column": 16,
                "line": 1,
                "offset": 16,
              },
            },
            "name": "C",
          },
          "kind": "declaredirective",
          "loc": Location {
            "end": Position {
              "column": 21,
              "line": 1,
              "offset": 21,
            },
            "source": "C='D'",
            "start": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
          },
          "value": String {
            "isDoubleQuote": false,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
              "source": "'D'",
              "start": Position {
                "column": 18,
                "line": 1,
                "offset": 18,
              },
            },
            "raw": "'D'",
            "unicode": false,
            "value": "D",
          },
        },
      ],
      "kind": "declare",
      "loc": Location {
        "end": Position {
          "column": 26,
          "line": 1,
          "offset": 26,
        },
        "source": "declare (A='B', C='D') { }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "mode": "block",
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 26,
      "line": 1,
      "offset": 26,
    },
    "source": "declare (A='B', C='D') { }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test declare directive 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
              "source": "strict_types",
              "start": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
            },
            "name": "strict_types",
          },
          "kind": "declaredirective",
          "loc": Location {
            "end": Position {
              "column": 23,
              "line": 1,
              "offset": 23,
            },
            "source": "strict_types=1",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "value": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 23,
                "line": 1,
                "offset": 23,
              },
              "source": "1",
              "start": Position {
                "column": 22,
                "line": 1,
                "offset": 22,
              },
            },
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "loc": Location {
        "end": Position {
          "column": 25,
          "line": 1,
          "offset": 25,
        },
        "source": "declare (strict_types=1);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "mode": "none",
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 25,
      "line": 1,
      "offset": 25,
    },
    "source": "declare (strict_types=1);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test do 1`] = `
Program {
  "children": Array [
    Do {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 12,
                    "line": 1,
                    "offset": 12,
                  },
                  "source": "$i",
                  "start": Position {
                    "column": 10,
                    "line": 1,
                    "offset": 10,
                  },
                },
                "name": "i",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "echo $i;",
              "start": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
          "source": "{ echo $i; }",
          "start": Position {
            "column": 3,
            "line": 1,
            "offset": 3,
          },
        },
      },
      "kind": "do",
      "loc": Location {
        "end": Position {
          "column": 28,
          "line": 1,
          "offset": 28,
        },
        "source": "do { echo $i; } while(true);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "test": Boolean {
        "kind": "boolean",
        "loc": Location {
          "end": Position {
            "column": 26,
            "line": 1,
            "offset": 26,
          },
          "source": "true",
          "start": Position {
            "column": 22,
            "line": 1,
            "offset": 22,
          },
        },
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 28,
      "line": 1,
      "offset": 28,
    },
    "source": "do { echo $i; } while(true);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test echo 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
            "source": "\\"something\\"",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "raw": "\\"something\\"",
          "unicode": false,
          "value": "something",
        },
      ],
      "kind": "echo",
      "loc": Location {
        "end": Position {
          "column": 17,
          "line": 1,
          "offset": 17,
        },
        "source": "echo \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 17,
      "line": 1,
      "offset": 17,
    },
    "source": "echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test empty 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 1,
            "offset": 19,
          },
          "source": "$var = empty($var);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "$var",
              "start": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
            },
            "name": "var",
          },
          "kind": "empty",
          "loc": Location {
            "end": Position {
              "column": 18,
              "line": 1,
              "offset": 18,
            },
            "source": "empty($var)",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 1,
          "offset": 19,
        },
        "source": "$var = empty($var);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 19,
      "line": 1,
      "offset": 19,
    },
    "source": "$var = empty($var);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed heredoc 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Encapsed {
        "kind": "encapsed",
        "label": "EOD",
        "loc": Location {
          "end": Position {
            "column": 4,
            "line": 3,
            "offset": 16,
          },
          "source": "<<<EOD
Text
EOD;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "<<<EOD
Text
EOD",
        "type": "heredoc",
        "value": Array [
          EncapsedPart {
            "curly": false,
            "expression": String {
              "isDoubleQuote": false,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 0,
                  "line": 3,
                  "offset": 12,
                },
                "source": "Text
",
                "start": Position {
                  "column": 0,
                  "line": 2,
                  "offset": 7,
                },
              },
              "raw": "Text
",
              "unicode": false,
              "value": "Text",
            },
            "kind": "encapsedpart",
            "loc": Location {
              "end": Position {
                "column": 0,
                "line": 3,
                "offset": 12,
              },
              "source": "Text
",
              "start": Position {
                "column": 0,
                "line": 2,
                "offset": 7,
              },
            },
            "syntax": null,
          },
        ],
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 4,
          "line": 3,
          "offset": 16,
        },
        "source": "<<<EOD
Text
EOD;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 3,
      "offset": 16,
    },
    "source": "<<<EOD
Text
EOD;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed heredoc assign 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 4,
            "line": 3,
            "offset": 23,
          },
          "source": "$var = <<<EOD
Text
EOD;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOD",
          "loc": Location {
            "end": Position {
              "column": 3,
              "line": 3,
              "offset": 22,
            },
            "source": "<<<EOD
Text
EOD",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "<<<EOD
Text
EOD",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 0,
                    "line": 3,
                    "offset": 19,
                  },
                  "source": "Text
",
                  "start": Position {
                    "column": 0,
                    "line": 2,
                    "offset": 14,
                  },
                },
                "raw": "Text
",
                "unicode": false,
                "value": "Text",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 0,
                  "line": 3,
                  "offset": 19,
                },
                "source": "Text
",
                "start": Position {
                  "column": 0,
                  "line": 2,
                  "offset": 14,
                },
              },
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 4,
          "line": 3,
          "offset": 23,
        },
        "source": "$var = <<<EOD
Text
EOD;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 3,
      "offset": 23,
    },
    "source": "$var = <<<EOD
Text
EOD;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed shell 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 17,
            "line": 1,
            "offset": 17,
          },
          "source": "$var = \`command\`;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "loc": Location {
            "end": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
            "source": "\`command\`",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "\`command\`",
          "type": "shell",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 15,
                    "line": 1,
                    "offset": 15,
                  },
                  "source": "command",
                  "start": Position {
                    "column": 8,
                    "line": 1,
                    "offset": 8,
                  },
                },
                "raw": "command",
                "unicode": false,
                "value": "command",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 15,
                  "line": 1,
                  "offset": 15,
                },
                "source": "command",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 17,
          "line": 1,
          "offset": 17,
        },
        "source": "$var = \`command\`;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 17,
      "line": 1,
      "offset": 17,
    },
    "source": "$var = \`command\`;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed shell multiline 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 2,
            "line": 5,
            "offset": 38,
          },
          "source": "$var = \`
command;
command;
command;
\`;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "loc": Location {
            "end": Position {
              "column": 1,
              "line": 5,
              "offset": 37,
            },
            "source": "\`
command;
command;
command;
\`",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "\`
command;
command;
command;
\`",
          "type": "shell",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 0,
                    "line": 5,
                    "offset": 36,
                  },
                  "source": "
command;
command;
command;
",
                  "start": Position {
                    "column": 8,
                    "line": 1,
                    "offset": 8,
                  },
                },
                "raw": "
command;
command;
command;
",
                "unicode": false,
                "value": "
command;
command;
command;",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 0,
                  "line": 5,
                  "offset": 36,
                },
                "source": "
command;
command;
command;
",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 2,
          "line": 5,
          "offset": 38,
        },
        "source": "$var = \`
command;
command;
command;
\`;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 2,
      "line": 5,
      "offset": 38,
    },
    "source": "$var = \`
command;
command;
command;
\`;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed string 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Encapsed {
        "kind": "encapsed",
        "loc": Location {
          "end": Position {
            "column": 21,
            "line": 1,
            "offset": 21,
          },
          "source": "\\"string $var string\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "\\"string $var string\\"",
        "type": "string",
        "value": Array [
          EncapsedPart {
            "curly": false,
            "expression": String {
              "isDoubleQuote": false,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
                "source": "string ",
                "start": Position {
                  "column": 1,
                  "line": 1,
                  "offset": 1,
                },
              },
              "raw": "string ",
              "unicode": false,
              "value": "string ",
            },
            "kind": "encapsedpart",
            "loc": Location {
              "end": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
              "source": "string ",
              "start": Position {
                "column": 1,
                "line": 1,
                "offset": 1,
              },
            },
            "syntax": null,
          },
          EncapsedPart {
            "curly": false,
            "expression": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
                "source": "$var",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "name": "var",
            },
            "kind": "encapsedpart",
            "loc": Location {
              "end": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
              "source": "$var",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "syntax": "simple",
          },
          EncapsedPart {
            "curly": false,
            "expression": String {
              "isDoubleQuote": false,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
                "source": " string",
                "start": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
              },
              "raw": " string",
              "unicode": false,
              "value": " string",
            },
            "kind": "encapsedpart",
            "loc": Location {
              "end": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
              "source": " string",
              "start": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
            },
            "syntax": null,
          },
        ],
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 21,
          "line": 1,
          "offset": 21,
        },
        "source": "\\"string $var string\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 21,
      "line": 1,
      "offset": 21,
    },
    "source": "\\"string $var string\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed string assign 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 28,
            "line": 1,
            "offset": 28,
          },
          "source": "$var = \\"string $var string\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "loc": Location {
            "end": Position {
              "column": 27,
              "line": 1,
              "offset": 27,
            },
            "source": "\\"string $var string\\"",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "\\"string $var string\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 15,
                    "line": 1,
                    "offset": 15,
                  },
                  "source": "string ",
                  "start": Position {
                    "column": 8,
                    "line": 1,
                    "offset": 8,
                  },
                },
                "raw": "string ",
                "unicode": false,
                "value": "string ",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 15,
                  "line": 1,
                  "offset": 15,
                },
                "source": "string ",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 19,
                    "line": 1,
                    "offset": 19,
                  },
                  "source": "$var",
                  "start": Position {
                    "column": 15,
                    "line": 1,
                    "offset": 15,
                  },
                },
                "name": "var",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
                "source": "$var",
                "start": Position {
                  "column": 15,
                  "line": 1,
                  "offset": 15,
                },
              },
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 26,
                    "line": 1,
                    "offset": 26,
                  },
                  "source": " string",
                  "start": Position {
                    "column": 19,
                    "line": 1,
                    "offset": 19,
                  },
                },
                "raw": " string",
                "unicode": false,
                "value": " string",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 26,
                  "line": 1,
                  "offset": 26,
                },
                "source": " string",
                "start": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
              },
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 28,
          "line": 1,
          "offset": 28,
        },
        "source": "$var = \\"string $var string\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 28,
      "line": 1,
      "offset": 28,
    },
    "source": "$var = \\"string $var string\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test encapsed string multiline 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 3,
            "offset": 28,
          },
          "source": "$var = \\"string
$var
string\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "loc": Location {
            "end": Position {
              "column": 7,
              "line": 3,
              "offset": 27,
            },
            "source": "\\"string
$var
string\\"",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "\\"string
$var
string\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 0,
                    "line": 2,
                    "offset": 15,
                  },
                  "source": "string
",
                  "start": Position {
                    "column": 8,
                    "line": 1,
                    "offset": 8,
                  },
                },
                "raw": "string
",
                "unicode": false,
                "value": "string
",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 0,
                  "line": 2,
                  "offset": 15,
                },
                "source": "string
",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 4,
                    "line": 2,
                    "offset": 19,
                  },
                  "source": "$var",
                  "start": Position {
                    "column": 0,
                    "line": 2,
                    "offset": 15,
                  },
                },
                "name": "var",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 4,
                  "line": 2,
                  "offset": 19,
                },
                "source": "$var",
                "start": Position {
                  "column": 0,
                  "line": 2,
                  "offset": 15,
                },
              },
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 6,
                    "line": 3,
                    "offset": 26,
                  },
                  "source": "
string",
                  "start": Position {
                    "column": 4,
                    "line": 2,
                    "offset": 19,
                  },
                },
                "raw": "
string",
                "unicode": false,
                "value": "
string",
              },
              "kind": "encapsedpart",
              "loc": Location {
                "end": Position {
                  "column": 6,
                  "line": 3,
                  "offset": 26,
                },
                "source": "
string",
                "start": Position {
                  "column": 4,
                  "line": 2,
                  "offset": 19,
                },
              },
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 8,
          "line": 3,
          "offset": 28,
        },
        "source": "$var = \\"string
$var
string\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 3,
      "offset": 28,
    },
    "source": "$var = \\"string
$var
string\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test eval 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Eval {
        "kind": "eval",
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "eval(\\"code\\");",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "source": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "\\"code\\"",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "raw": "\\"code\\"",
          "unicode": false,
          "value": "code",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 13,
          "line": 1,
          "offset": 13,
        },
        "source": "eval(\\"code\\");",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 13,
      "line": 1,
      "offset": 13,
    },
    "source": "eval(\\"code\\");",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test exit 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Exit {
        "expression": Number {
          "kind": "number",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "1",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "value": "1",
        },
        "kind": "exit",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
          "source": "exit(1);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "useDie": false,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 8,
          "line": 1,
          "offset": 8,
        },
        "source": "exit(1);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 1,
      "offset": 8,
    },
    "source": "exit(1);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test final class (inner statement) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Class {
            "attrGroups": Array [],
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": true,
            "kind": "class",
            "loc": Location {
              "end": Position {
                "column": 35,
                "line": 1,
                "offset": 35,
              },
              "source": "final class Foo {}",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "name": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 32,
                  "line": 1,
                  "offset": 32,
                },
                "source": "Foo",
                "start": Position {
                  "column": 29,
                  "line": 1,
                  "offset": 29,
                },
              },
              "name": "Foo",
            },
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 37,
            "line": 1,
            "offset": 37,
          },
          "source": "{ final class Foo {} }",
          "start": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
        },
      },
      "byref": false,
      "kind": "function",
      "loc": Location {
        "end": Position {
          "column": 37,
          "line": 1,
          "offset": 37,
        },
        "source": "function foo()",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "foo",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 37,
      "line": 1,
      "offset": 37,
    },
    "source": "function foo() { final class Foo {} }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test final class 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": true,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 1,
          "offset": 18,
        },
        "source": "final class Foo {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
          "source": "Foo",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 18,
      "line": 1,
      "offset": 18,
    },
    "source": "final class Foo {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test for 1`] = `
Program {
  "children": Array [
    For {
      "body": Echo {
        "expressions": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 45,
                "line": 1,
                "offset": 45,
              },
              "source": "\\"something\\"",
              "start": Position {
                "column": 34,
                "line": 1,
                "offset": 34,
              },
            },
            "raw": "\\"something\\"",
            "unicode": false,
            "value": "something",
          },
        ],
        "kind": "echo",
        "loc": Location {
          "end": Position {
            "column": 46,
            "line": 1,
            "offset": 46,
          },
          "source": "echo \\"something\\";",
          "start": Position {
            "column": 29,
            "line": 1,
            "offset": 29,
          },
        },
        "shortForm": false,
      },
      "increment": Array [
        Post {
          "kind": "post",
          "loc": Location {
            "end": Position {
              "column": 27,
              "line": 1,
              "offset": 27,
            },
            "source": "$i++",
            "start": Position {
              "column": 23,
              "line": 1,
              "offset": 23,
            },
          },
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 25,
                "line": 1,
                "offset": 25,
              },
              "source": "$i",
              "start": Position {
                "column": 23,
                "line": 1,
                "offset": 23,
              },
            },
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
              "source": "$i",
              "start": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
            },
            "name": "i",
          },
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$i = 1",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "1",
              "start": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
            },
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "loc": Location {
        "end": Position {
          "column": 46,
          "line": 1,
          "offset": 46,
        },
        "source": "for ($i = 1; $i <= 10; $i++) echo \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
              "source": "$i",
              "start": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
            },
            "name": "i",
          },
          "loc": Location {
            "end": Position {
              "column": 21,
              "line": 1,
              "offset": 21,
            },
            "source": "$i <= 10",
            "start": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
              "source": "10",
              "start": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
            },
            "value": "10",
          },
          "type": "<=",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 46,
      "line": 1,
      "offset": 46,
    },
    "source": "for ($i = 1; $i <= 10; $i++) echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test for block 1`] = `
Program {
  "children": Array [
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 47,
                    "line": 1,
                    "offset": 47,
                  },
                  "source": "\\"something\\"",
                  "start": Position {
                    "column": 36,
                    "line": 1,
                    "offset": 36,
                  },
                },
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 48,
                "line": 1,
                "offset": 48,
              },
              "source": "echo \\"something\\";",
              "start": Position {
                "column": 31,
                "line": 1,
                "offset": 31,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 50,
            "line": 1,
            "offset": 50,
          },
          "source": "{ echo \\"something\\"; }",
          "start": Position {
            "column": 29,
            "line": 1,
            "offset": 29,
          },
        },
      },
      "increment": Array [
        Post {
          "kind": "post",
          "loc": Location {
            "end": Position {
              "column": 27,
              "line": 1,
              "offset": 27,
            },
            "source": "$i++",
            "start": Position {
              "column": 23,
              "line": 1,
              "offset": 23,
            },
          },
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 25,
                "line": 1,
                "offset": 25,
              },
              "source": "$i",
              "start": Position {
                "column": 23,
                "line": 1,
                "offset": 23,
              },
            },
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
              "source": "$i",
              "start": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
            },
            "name": "i",
          },
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$i = 1",
            "start": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "1",
              "start": Position {
                "column": 10,
                "line": 1,
                "offset": 10,
              },
            },
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "loc": Location {
        "end": Position {
          "column": 50,
          "line": 1,
          "offset": 50,
        },
        "source": "for ($i = 1; $i <= 10; $i++) { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
              "source": "$i",
              "start": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
            },
            "name": "i",
          },
          "loc": Location {
            "end": Position {
              "column": 21,
              "line": 1,
              "offset": 21,
            },
            "source": "$i <= 10",
            "start": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
          },
          "right": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
              "source": "10",
              "start": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
            },
            "value": "10",
          },
          "type": "<=",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 50,
      "line": 1,
      "offset": 50,
    },
    "source": "for ($i = 1; $i <= 10; $i++) { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test foreach 1`] = `
Program {
  "children": Array [
    Foreach {
      "body": Echo {
        "expressions": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 41,
                "line": 1,
                "offset": 41,
              },
              "source": "\\"something\\"",
              "start": Position {
                "column": 30,
                "line": 1,
                "offset": 30,
              },
            },
            "raw": "\\"something\\"",
            "unicode": false,
            "value": "something",
          },
        ],
        "kind": "echo",
        "loc": Location {
          "end": Position {
            "column": 42,
            "line": 1,
            "offset": 42,
          },
          "source": "echo \\"something\\";",
          "start": Position {
            "column": 25,
            "line": 1,
            "offset": 25,
          },
        },
        "shortForm": false,
      },
      "key": null,
      "kind": "foreach",
      "loc": Location {
        "end": Position {
          "column": 42,
          "line": 1,
          "offset": 42,
        },
        "source": "foreach ($arr as $value) echo \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "$arr",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "arr",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 23,
            "line": 1,
            "offset": 23,
          },
          "source": "$value",
          "start": Position {
            "column": 17,
            "line": 1,
            "offset": 17,
          },
        },
        "name": "value",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 42,
      "line": 1,
      "offset": 42,
    },
    "source": "foreach ($arr as $value) echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test foreach block 1`] = `
Program {
  "children": Array [
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 43,
                    "line": 1,
                    "offset": 43,
                  },
                  "source": "\\"something\\"",
                  "start": Position {
                    "column": 32,
                    "line": 1,
                    "offset": 32,
                  },
                },
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 44,
                "line": 1,
                "offset": 44,
              },
              "source": "echo \\"something\\";",
              "start": Position {
                "column": 27,
                "line": 1,
                "offset": 27,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 46,
            "line": 1,
            "offset": 46,
          },
          "source": "{ echo \\"something\\"; }",
          "start": Position {
            "column": 25,
            "line": 1,
            "offset": 25,
          },
        },
      },
      "key": null,
      "kind": "foreach",
      "loc": Location {
        "end": Position {
          "column": 46,
          "line": 1,
          "offset": 46,
        },
        "source": "foreach ($arr as $value) { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "$arr",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "arr",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 23,
            "line": 1,
            "offset": 23,
          },
          "source": "$value",
          "start": Position {
            "column": 17,
            "line": 1,
            "offset": 17,
          },
        },
        "name": "value",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 46,
      "line": 1,
      "offset": 46,
    },
    "source": "foreach ($arr as $value) { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test function 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 33,
                    "line": 1,
                    "offset": 33,
                  },
                  "source": "\\"something\\"",
                  "start": Position {
                    "column": 22,
                    "line": 1,
                    "offset": 22,
                  },
                },
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 34,
                "line": 1,
                "offset": 34,
              },
              "source": "echo \\"something\\";",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 36,
            "line": 1,
            "offset": 36,
          },
          "source": "{ echo \\"something\\"; }",
          "start": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
        },
      },
      "byref": false,
      "kind": "function",
      "loc": Location {
        "end": Position {
          "column": 36,
          "line": 1,
          "offset": 36,
        },
        "source": "function foo()",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "foo",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 36,
      "line": 1,
      "offset": 36,
    },
    "source": "function foo() { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test global 1`] = `
Program {
  "children": Array [
    Global {
      "items": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
            "source": "$a",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "name": "a",
        },
      ],
      "kind": "global",
      "loc": Location {
        "end": Position {
          "column": 10,
          "line": 1,
          "offset": 10,
        },
        "source": "global $a;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 10,
      "line": 1,
      "offset": 10,
    },
    "source": "global $a;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test goto #2 1`] = `
Program {
  "children": Array [
    Goto {
      "kind": "goto",
      "label": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "longName",
          "start": Position {
            "column": 5,
            "line": 1,
            "offset": 5,
          },
        },
        "name": "longName",
      },
      "loc": Location {
        "end": Position {
          "column": 14,
          "line": 1,
          "offset": 14,
        },
        "source": "goto longName;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 14,
      "line": 1,
      "offset": 14,
    },
    "source": "goto longName;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test goto 1`] = `
Program {
  "children": Array [
    Goto {
      "kind": "goto",
      "label": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
          "source": "a",
          "start": Position {
            "column": 5,
            "line": 1,
            "offset": 5,
          },
        },
        "name": "a",
      },
      "loc": Location {
        "end": Position {
          "column": 7,
          "line": 1,
          "offset": 7,
        },
        "source": "goto a;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 7,
      "line": 1,
      "offset": 7,
    },
    "source": "goto a;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test if/elseif/else 1`] = `
Program {
  "children": Array [
    If {
      "alternate": If {
        "alternate": Echo {
          "expressions": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 87,
                  "line": 1,
                  "offset": 87,
                },
                "source": "\\"something\\"",
                "start": Position {
                  "column": 76,
                  "line": 1,
                  "offset": 76,
                },
              },
              "raw": "\\"something\\"",
              "unicode": false,
              "value": "something",
            },
          ],
          "kind": "echo",
          "loc": Location {
            "end": Position {
              "column": 88,
              "line": 1,
              "offset": 88,
            },
            "source": "echo \\"something\\";",
            "start": Position {
              "column": 71,
              "line": 1,
              "offset": 71,
            },
          },
          "shortForm": false,
        },
        "body": Echo {
          "expressions": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 64,
                  "line": 1,
                  "offset": 64,
                },
                "source": "\\"something\\"",
                "start": Position {
                  "column": 53,
                  "line": 1,
                  "offset": 53,
                },
              },
              "raw": "\\"something\\"",
              "unicode": false,
              "value": "something",
            },
          ],
          "kind": "echo",
          "loc": Location {
            "end": Position {
              "column": 65,
              "line": 1,
              "offset": 65,
            },
            "source": "echo \\"something\\";",
            "start": Position {
              "column": 48,
              "line": 1,
              "offset": 48,
            },
          },
          "shortForm": false,
        },
        "kind": "if",
        "loc": Location {
          "end": Position {
            "column": 88,
            "line": 1,
            "offset": 88,
          },
          "source": "elseif ($a < $b) echo \\"something\\"; else echo \\"something\\";",
          "start": Position {
            "column": 31,
            "line": 1,
            "offset": 31,
          },
        },
        "shortForm": false,
        "test": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 41,
                "line": 1,
                "offset": 41,
              },
              "source": "$a",
              "start": Position {
                "column": 39,
                "line": 1,
                "offset": 39,
              },
            },
            "name": "a",
          },
          "loc": Location {
            "end": Position {
              "column": 46,
              "line": 1,
              "offset": 46,
            },
            "source": "$a < $b",
            "start": Position {
              "column": 39,
              "line": 1,
              "offset": 39,
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 46,
                "line": 1,
                "offset": 46,
              },
              "source": "$b",
              "start": Position {
                "column": 44,
                "line": 1,
                "offset": 44,
              },
            },
            "name": "b",
          },
          "type": "<",
        },
      },
      "body": Echo {
        "expressions": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 29,
                "line": 1,
                "offset": 29,
              },
              "source": "\\"something\\"",
              "start": Position {
                "column": 18,
                "line": 1,
                "offset": 18,
              },
            },
            "raw": "\\"something\\"",
            "unicode": false,
            "value": "something",
          },
        ],
        "kind": "echo",
        "loc": Location {
          "end": Position {
            "column": 30,
            "line": 1,
            "offset": 30,
          },
          "source": "echo \\"something\\";",
          "start": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
        },
        "shortForm": false,
      },
      "kind": "if",
      "loc": Location {
        "end": Position {
          "column": 88,
          "line": 1,
          "offset": 88,
        },
        "source": "if ($a > $b) echo \\"something\\"; elseif ($a < $b) echo \\"something\\"; else echo \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "$a",
            "start": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
          },
          "name": "a",
        },
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 1,
            "offset": 11,
          },
          "source": "$a > $b",
          "start": Position {
            "column": 4,
            "line": 1,
            "offset": 4,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$b",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "name": "b",
        },
        "type": ">",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 88,
      "line": 1,
      "offset": 88,
    },
    "source": "if ($a > $b) echo \\"something\\"; elseif ($a < $b) echo \\"something\\"; else echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test if/elseif/else block 1`] = `
Program {
  "children": Array [
    If {
      "alternate": If {
        "alternate": Block {
          "children": Array [
            Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "loc": Location {
                    "end": Position {
                      "column": 97,
                      "line": 1,
                      "offset": 97,
                    },
                    "source": "\\"something\\"",
                    "start": Position {
                      "column": 86,
                      "line": 1,
                      "offset": 86,
                    },
                  },
                  "raw": "\\"something\\"",
                  "unicode": false,
                  "value": "something",
                },
              ],
              "kind": "echo",
              "loc": Location {
                "end": Position {
                  "column": 98,
                  "line": 1,
                  "offset": 98,
                },
                "source": "echo \\"something\\";",
                "start": Position {
                  "column": 81,
                  "line": 1,
                  "offset": 81,
                },
              },
              "shortForm": false,
            },
          ],
          "kind": "block",
          "loc": Location {
            "end": Position {
              "column": 100,
              "line": 1,
              "offset": 100,
            },
            "source": "{ echo \\"something\\"; }",
            "start": Position {
              "column": 79,
              "line": 1,
              "offset": 79,
            },
          },
        },
        "body": Block {
          "children": Array [
            Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "loc": Location {
                    "end": Position {
                      "column": 70,
                      "line": 1,
                      "offset": 70,
                    },
                    "source": "\\"something\\"",
                    "start": Position {
                      "column": 59,
                      "line": 1,
                      "offset": 59,
                    },
                  },
                  "raw": "\\"something\\"",
                  "unicode": false,
                  "value": "something",
                },
              ],
              "kind": "echo",
              "loc": Location {
                "end": Position {
                  "column": 71,
                  "line": 1,
                  "offset": 71,
                },
                "source": "echo \\"something\\";",
                "start": Position {
                  "column": 54,
                  "line": 1,
                  "offset": 54,
                },
              },
              "shortForm": false,
            },
          ],
          "kind": "block",
          "loc": Location {
            "end": Position {
              "column": 73,
              "line": 1,
              "offset": 73,
            },
            "source": "{ echo \\"something\\"; }",
            "start": Position {
              "column": 52,
              "line": 1,
              "offset": 52,
            },
          },
        },
        "kind": "if",
        "loc": Location {
          "end": Position {
            "column": 100,
            "line": 1,
            "offset": 100,
          },
          "source": "elseif ($a < $b) { echo \\"something\\"; } else { echo \\"something\\"; }",
          "start": Position {
            "column": 35,
            "line": 1,
            "offset": 35,
          },
        },
        "shortForm": false,
        "test": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 45,
                "line": 1,
                "offset": 45,
              },
              "source": "$a",
              "start": Position {
                "column": 43,
                "line": 1,
                "offset": 43,
              },
            },
            "name": "a",
          },
          "loc": Location {
            "end": Position {
              "column": 50,
              "line": 1,
              "offset": 50,
            },
            "source": "$a < $b",
            "start": Position {
              "column": 43,
              "line": 1,
              "offset": 43,
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 50,
                "line": 1,
                "offset": 50,
              },
              "source": "$b",
              "start": Position {
                "column": 48,
                "line": 1,
                "offset": 48,
              },
            },
            "name": "b",
          },
          "type": "<",
        },
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 31,
                    "line": 1,
                    "offset": 31,
                  },
                  "source": "\\"something\\"",
                  "start": Position {
                    "column": 20,
                    "line": 1,
                    "offset": 20,
                  },
                },
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 32,
                "line": 1,
                "offset": 32,
              },
              "source": "echo \\"something\\";",
              "start": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 34,
            "line": 1,
            "offset": 34,
          },
          "source": "{ echo \\"something\\"; }",
          "start": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
        },
      },
      "kind": "if",
      "loc": Location {
        "end": Position {
          "column": 100,
          "line": 1,
          "offset": 100,
        },
        "source": "if ($a > $b) { echo \\"something\\"; } elseif ($a < $b) { echo \\"something\\"; } else { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "$a",
            "start": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
          },
          "name": "a",
        },
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 1,
            "offset": 11,
          },
          "source": "$a > $b",
          "start": Position {
            "column": 4,
            "line": 1,
            "offset": 4,
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
            "source": "$b",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "name": "b",
        },
        "type": ">",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 100,
      "line": 1,
      "offset": 100,
    },
    "source": "if ($a > $b) { echo \\"something\\"; } elseif ($a < $b) { echo \\"something\\"; } else { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test include 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "loc": Location {
          "end": Position {
            "column": 20,
            "line": 1,
            "offset": 20,
          },
          "source": "include \\"something\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "\\"something\\"",
            "start": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
          },
          "raw": "\\"something\\"",
          "unicode": false,
          "value": "something",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 20,
          "line": 1,
          "offset": 20,
        },
        "source": "include \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "include \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test interface 1`] = `
Program {
  "children": Array [
    Interface {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "kind": "interface",
      "loc": Location {
        "end": Position {
          "column": 16,
          "line": 1,
          "offset": 16,
        },
        "source": "interface Foo {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 13,
            "line": 1,
            "offset": 13,
          },
          "source": "Foo",
          "start": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 16,
      "line": 1,
      "offset": 16,
    },
    "source": "interface Foo {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test isset 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 1,
            "offset": 19,
          },
          "source": "$var = isset($var);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Isset {
          "kind": "isset",
          "loc": Location {
            "end": Position {
              "column": 18,
              "line": 1,
              "offset": 18,
            },
            "source": "isset($var)",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "variables": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 17,
                  "line": 1,
                  "offset": 17,
                },
                "source": "$var",
                "start": Position {
                  "column": 13,
                  "line": 1,
                  "offset": 13,
                },
              },
              "name": "var",
            },
          ],
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 1,
          "offset": 19,
        },
        "source": "$var = isset($var);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 19,
      "line": 1,
      "offset": 19,
    },
    "source": "$var = isset($var);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test label #2 1`] = `
Program {
  "children": Array [
    Label {
      "kind": "label",
      "loc": Location {
        "end": Position {
          "column": 9,
          "line": 1,
          "offset": 9,
        },
        "source": "longName:",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
          "source": "longName",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "name": "longName",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 26,
              "line": 1,
              "offset": 26,
            },
            "source": "\\"something\\"",
            "start": Position {
              "column": 15,
              "line": 1,
              "offset": 15,
            },
          },
          "raw": "\\"something\\"",
          "unicode": false,
          "value": "something",
        },
      ],
      "kind": "echo",
      "loc": Location {
        "end": Position {
          "column": 27,
          "line": 1,
          "offset": 27,
        },
        "source": "echo \\"something\\";",
        "start": Position {
          "column": 10,
          "line": 1,
          "offset": 10,
        },
      },
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 27,
      "line": 1,
      "offset": 27,
    },
    "source": "longName: echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test label 1`] = `
Program {
  "children": Array [
    Label {
      "kind": "label",
      "loc": Location {
        "end": Position {
          "column": 2,
          "line": 1,
          "offset": 2,
        },
        "source": "a:",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 1,
            "line": 1,
            "offset": 1,
          },
          "source": "a",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "name": "a",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "\\"something\\"",
            "start": Position {
              "column": 8,
              "line": 1,
              "offset": 8,
            },
          },
          "raw": "\\"something\\"",
          "unicode": false,
          "value": "something",
        },
      ],
      "kind": "echo",
      "loc": Location {
        "end": Position {
          "column": 20,
          "line": 1,
          "offset": 20,
        },
        "source": "echo \\"something\\";",
        "start": Position {
          "column": 3,
          "line": 1,
          "offset": 3,
        },
      },
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "a: echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test list 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 7,
                  "line": 1,
                  "offset": 7,
                },
                "source": "$a",
                "start": Position {
                  "column": 5,
                  "line": 1,
                  "offset": 5,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 7,
                    "line": 1,
                    "offset": 7,
                  },
                  "source": "$a",
                  "start": Position {
                    "column": 5,
                    "line": 1,
                    "offset": 5,
                  },
                },
                "name": "a",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 11,
                  "line": 1,
                  "offset": 11,
                },
                "source": "$b",
                "start": Position {
                  "column": 9,
                  "line": 1,
                  "offset": 9,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 11,
                    "line": 1,
                    "offset": 11,
                  },
                  "source": "$b",
                  "start": Position {
                    "column": 9,
                    "line": 1,
                    "offset": 9,
                  },
                },
                "name": "b",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 15,
                  "line": 1,
                  "offset": 15,
                },
                "source": "$c",
                "start": Position {
                  "column": 13,
                  "line": 1,
                  "offset": 13,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 15,
                    "line": 1,
                    "offset": 15,
                  },
                  "source": "$c",
                  "start": Position {
                    "column": 13,
                    "line": 1,
                    "offset": 13,
                  },
                },
                "name": "c",
              },
            },
          ],
          "kind": "list",
          "loc": Location {
            "end": Position {
              "column": 16,
              "line": 1,
              "offset": 16,
            },
            "source": "list($a, $b, $c)",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "shortForm": false,
        },
        "loc": Location {
          "end": Position {
            "column": 24,
            "line": 1,
            "offset": 24,
          },
          "source": "list($a, $b, $c) = $var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 23,
              "line": 1,
              "offset": 23,
            },
            "source": "$var",
            "start": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 24,
          "line": 1,
          "offset": 24,
        },
        "source": "list($a, $b, $c) = $var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 24,
      "line": 1,
      "offset": 24,
    },
    "source": "list($a, $b, $c) = $var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test list short form 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 3,
                  "line": 1,
                  "offset": 3,
                },
                "source": "$a",
                "start": Position {
                  "column": 1,
                  "line": 1,
                  "offset": 1,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 3,
                    "line": 1,
                    "offset": 3,
                  },
                  "source": "$a",
                  "start": Position {
                    "column": 1,
                    "line": 1,
                    "offset": 1,
                  },
                },
                "name": "a",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 7,
                  "line": 1,
                  "offset": 7,
                },
                "source": "$b",
                "start": Position {
                  "column": 5,
                  "line": 1,
                  "offset": 5,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 7,
                    "line": 1,
                    "offset": 7,
                  },
                  "source": "$b",
                  "start": Position {
                    "column": 5,
                    "line": 1,
                    "offset": 5,
                  },
                },
                "name": "b",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "loc": Location {
                "end": Position {
                  "column": 11,
                  "line": 1,
                  "offset": 11,
                },
                "source": "$c",
                "start": Position {
                  "column": 9,
                  "line": 1,
                  "offset": 9,
                },
              },
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "loc": Location {
                  "end": Position {
                    "column": 11,
                    "line": 1,
                    "offset": 11,
                  },
                  "source": "$c",
                  "start": Position {
                    "column": 9,
                    "line": 1,
                    "offset": 9,
                  },
                },
                "name": "c",
              },
            },
          ],
          "kind": "list",
          "loc": Location {
            "end": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
            "source": "[$a, $b, $c]",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "shortForm": true,
        },
        "loc": Location {
          "end": Position {
            "column": 20,
            "line": 1,
            "offset": 20,
          },
          "source": "[$a, $b, $c] = $var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "$var",
            "start": Position {
              "column": 15,
              "line": 1,
              "offset": 15,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 20,
          "line": 1,
          "offset": 20,
        },
        "source": "[$a, $b, $c] = $var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "[$a, $b, $c] = $var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test magic 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Magic {
        "kind": "magic",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
          "source": "__DIR__;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "__DIR__",
        "value": "__DIR__",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 8,
          "line": 1,
          "offset": 8,
        },
        "source": "__DIR__;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 1,
      "offset": 8,
    },
    "source": "__DIR__;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test method (public) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
            "loc": Location {
              "end": Position {
                "column": 39,
                "line": 1,
                "offset": 39,
              },
              "source": "{}",
              "start": Position {
                "column": 37,
                "line": 1,
                "offset": 37,
              },
            },
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "loc": Location {
            "end": Position {
              "column": 39,
              "line": 1,
              "offset": 39,
            },
            "source": "public function method()",
            "start": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 34,
                "line": 1,
                "offset": 34,
              },
              "source": "method",
              "start": Position {
                "column": 28,
                "line": 1,
                "offset": 28,
              },
            },
            "name": "method",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 41,
          "line": 1,
          "offset": 41,
        },
        "source": "class Foo { public function method() {} }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 41,
      "line": 1,
      "offset": 41,
    },
    "source": "class Foo { public function method() {} }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test method 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
            "loc": Location {
              "end": Position {
                "column": 32,
                "line": 1,
                "offset": 32,
              },
              "source": "{}",
              "start": Position {
                "column": 30,
                "line": 1,
                "offset": 30,
              },
            },
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "loc": Location {
            "end": Position {
              "column": 32,
              "line": 1,
              "offset": 32,
            },
            "source": "function method()",
            "start": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 27,
                "line": 1,
                "offset": 27,
              },
              "source": "method",
              "start": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
            },
            "name": "method",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 34,
          "line": 1,
          "offset": 34,
        },
        "source": "class Foo { function method() {} }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 34,
      "line": 1,
      "offset": 34,
    },
    "source": "class Foo { function method() {} }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test namespace 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [],
      "kind": "namespace",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 1,
          "offset": 18,
        },
        "source": "namespace my\\\\name;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": "my\\\\name",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 18,
      "line": 1,
      "offset": 18,
    },
    "source": "namespace my\\\\name;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test namespace backets 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        Echo {
          "expressions": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 36,
                  "line": 1,
                  "offset": 36,
                },
                "source": "\\"something\\"",
                "start": Position {
                  "column": 25,
                  "line": 1,
                  "offset": 25,
                },
              },
              "raw": "\\"something\\"",
              "unicode": false,
              "value": "something",
            },
          ],
          "kind": "echo",
          "loc": Location {
            "end": Position {
              "column": 37,
              "line": 1,
              "offset": 37,
            },
            "source": "echo \\"something\\";",
            "start": Position {
              "column": 20,
              "line": 1,
              "offset": 20,
            },
          },
          "shortForm": false,
        },
      ],
      "kind": "namespace",
      "loc": Location {
        "end": Position {
          "column": 39,
          "line": 1,
          "offset": 39,
        },
        "source": "namespace my\\\\name { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": "my\\\\name",
      "withBrackets": true,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 39,
      "line": 1,
      "offset": 39,
    },
    "source": "namespace my\\\\name { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test negative number 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "loc": Location {
          "end": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
          "source": "-2112;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "type": "-",
        "what": Number {
          "kind": "number",
          "loc": Location {
            "end": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
            "source": "2112",
            "start": Position {
              "column": 1,
              "line": 1,
              "offset": 1,
            },
          },
          "value": "2112",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 6,
          "line": 1,
          "offset": 6,
        },
        "source": "-2112;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 6,
      "line": 1,
      "offset": 6,
    },
    "source": "-2112;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test new 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "new Foo();",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "what": Name {
          "kind": "name",
          "loc": Location {
            "end": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
            "source": "Foo",
            "start": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
          },
          "name": "Foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 10,
          "line": 1,
          "offset": 10,
        },
        "source": "new Foo();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 10,
      "line": 1,
      "offset": 10,
    },
    "source": "new Foo();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test new anonymous class 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 20,
            "line": 1,
            "offset": 20,
          },
          "source": "$var = new class {};",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "loc": Location {
            "end": Position {
              "column": 19,
              "line": 1,
              "offset": 19,
            },
            "source": "new class {}",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "what": Class {
            "attrGroups": Array [],
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "loc": Location {
              "end": Position {
                "column": 19,
                "line": 1,
                "offset": 19,
              },
              "source": "class {}",
              "start": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
            },
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 20,
          "line": 1,
          "offset": 20,
        },
        "source": "$var = new class {};",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "$var = new class {};",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test nowdoc 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Nowdoc {
        "kind": "nowdoc",
        "label": "EOD",
        "loc": Location {
          "end": Position {
            "column": 4,
            "line": 3,
            "offset": 18,
          },
          "source": "<<<'EOD'
Text
EOD;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "<<<'EOD'
Text
EOD",
        "value": "Text",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 4,
          "line": 3,
          "offset": 18,
        },
        "source": "<<<'EOD'
Text
EOD;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 3,
      "offset": 18,
    },
    "source": "<<<'EOD'
Text
EOD;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test nowdoc assign 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 4,
            "line": 3,
            "offset": 25,
          },
          "source": "$var = <<<'EOD'
Text
EOD;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "EOD",
          "loc": Location {
            "end": Position {
              "column": 3,
              "line": 3,
              "offset": 24,
            },
            "source": "<<<'EOD'
Text
EOD",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "raw": "<<<'EOD'
Text
EOD",
          "value": "Text",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 4,
          "line": 3,
          "offset": 25,
        },
        "source": "$var = <<<'EOD'
Text
EOD;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 3,
      "offset": 25,
    },
    "source": "$var = <<<'EOD'
Text
EOD;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test number 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Number {
        "kind": "number",
        "loc": Location {
          "end": Position {
            "column": 5,
            "line": 1,
            "offset": 5,
          },
          "source": "2112;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "value": "2112",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 5,
          "line": 1,
          "offset": 5,
        },
        "source": "2112;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 5,
      "line": 1,
      "offset": 5,
    },
    "source": "2112;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test offsetlookup 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 12,
              "line": 2,
              "offset": 13,
            },
            "source": "$var",
            "start": Position {
              "column": 8,
              "line": 2,
              "offset": 9,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 18,
            "line": 10,
            "offset": 212,
          },
          "source": "$var = $var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar'] // Comment
          // Comment
          ['baz'] // Comment
          // Comment
          ['qqq'];",
          "start": Position {
            "column": 8,
            "line": 2,
            "offset": 9,
          },
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "loc": Location {
            "end": Position {
              "column": 17,
              "line": 10,
              "offset": 211,
            },
            "source": "$var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar'] // Comment
          // Comment
          ['baz'] // Comment
          // Comment
          ['qqq']",
            "start": Position {
              "column": 15,
              "line": 2,
              "offset": 16,
            },
          },
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 16,
                "line": 10,
                "offset": 210,
              },
              "source": "'qqq'",
              "start": Position {
                "column": 11,
                "line": 10,
                "offset": 205,
              },
            },
            "raw": "'qqq'",
            "unicode": false,
            "value": "qqq",
          },
          "what": OffsetLookup {
            "kind": "offsetlookup",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 8,
                "offset": 161,
              },
              "source": "$var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar'] // Comment
          // Comment
          ['baz']",
              "start": Position {
                "column": 15,
                "line": 2,
                "offset": 16,
              },
            },
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "loc": Location {
                "end": Position {
                  "column": 16,
                  "line": 8,
                  "offset": 160,
                },
                "source": "'baz'",
                "start": Position {
                  "column": 11,
                  "line": 8,
                  "offset": 155,
                },
              },
              "raw": "'baz'",
              "unicode": false,
              "value": "baz",
            },
            "what": OffsetLookup {
              "kind": "offsetlookup",
              "loc": Location {
                "end": Position {
                  "column": 17,
                  "line": 6,
                  "offset": 111,
                },
                "source": "$var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar']",
                "start": Position {
                  "column": 15,
                  "line": 2,
                  "offset": 16,
                },
              },
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 16,
                    "line": 6,
                    "offset": 110,
                  },
                  "source": "'bar'",
                  "start": Position {
                    "column": 11,
                    "line": 6,
                    "offset": 105,
                  },
                },
                "raw": "'bar'",
                "unicode": false,
                "value": "bar",
              },
              "what": OffsetLookup {
                "kind": "offsetlookup",
                "loc": Location {
                  "end": Position {
                    "column": 19,
                    "line": 4,
                    "offset": 61,
                  },
                  "source": "$var
          // Comment
          [ 'foo' ]",
                  "start": Position {
                    "column": 15,
                    "line": 2,
                    "offset": 16,
                  },
                },
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "loc": Location {
                    "end": Position {
                      "column": 17,
                      "line": 4,
                      "offset": 59,
                    },
                    "source": "'foo'",
                    "start": Position {
                      "column": 12,
                      "line": 4,
                      "offset": 54,
                    },
                  },
                  "raw": "'foo'",
                  "unicode": false,
                  "value": "foo",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "loc": Location {
                    "end": Position {
                      "column": 19,
                      "line": 2,
                      "offset": 20,
                    },
                    "source": "$var",
                    "start": Position {
                      "column": 15,
                      "line": 2,
                      "offset": 16,
                    },
                  },
                  "name": "var",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 10,
          "offset": 212,
        },
        "source": "$var = $var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar'] // Comment
          // Comment
          ['baz'] // Comment
          // Comment
          ['qqq'];",
        "start": Position {
          "column": 8,
          "line": 2,
          "offset": 9,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 11,
      "offset": 221,
    },
    "source": "
        $var = $var
          // Comment
          [ 'foo' ] // Comment
          // Comment
          ['bar'] // Comment
          // Comment
          ['baz'] // Comment
          // Comment
          ['qqq'];
        ",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test parameter 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "loc": Location {
            "end": Position {
              "column": 29,
              "line": 1,
              "offset": 29,
            },
            "source": "?int $foo = 2112",
            "start": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
          },
          "name": Identifier {
            "kind": "identifier",
            "loc": Location {
              "end": Position {
                "column": 22,
                "line": 1,
                "offset": 22,
              },
              "source": "$foo",
              "start": Position {
                "column": 18,
                "line": 1,
                "offset": 18,
              },
            },
            "name": "foo",
          },
          "nullable": true,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "int",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "name": "int",
            "raw": "int",
          },
          "value": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 29,
                "line": 1,
                "offset": 29,
              },
              "source": "2112",
              "start": Position {
                "column": 25,
                "line": 1,
                "offset": 25,
              },
            },
            "value": "2112",
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 33,
            "line": 1,
            "offset": 33,
          },
          "source": "{}",
          "start": Position {
            "column": 31,
            "line": 1,
            "offset": 31,
          },
        },
      },
      "byref": false,
      "kind": "function",
      "loc": Location {
        "end": Position {
          "column": 33,
          "line": 1,
          "offset": 33,
        },
        "source": "function foo(?int $foo = 2112)",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
          "source": "foo",
          "start": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
        },
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 33,
      "line": 1,
      "offset": 33,
    },
    "source": "function foo(?int $foo = 2112) {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test post 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Post {
        "kind": "post",
        "loc": Location {
          "end": Position {
            "column": 7,
            "line": 1,
            "offset": 7,
          },
          "source": "$var++;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 7,
          "line": 1,
          "offset": 7,
        },
        "source": "$var++;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 7,
      "line": 1,
      "offset": 7,
    },
    "source": "$var++;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test pre 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Pre {
        "kind": "pre",
        "loc": Location {
          "end": Position {
            "column": 7,
            "line": 1,
            "offset": 7,
          },
          "source": "++$var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "type": "+",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "$var",
            "start": Position {
              "column": 2,
              "line": 1,
              "offset": 2,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 7,
          "line": 1,
          "offset": 7,
        },
        "source": "++$var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 7,
      "line": 1,
      "offset": 7,
    },
    "source": "++$var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test print 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 17,
              "line": 1,
              "offset": 17,
            },
            "source": "\\"something\\"",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "raw": "\\"something\\"",
          "unicode": false,
          "value": "something",
        },
        "kind": "print",
        "loc": Location {
          "end": Position {
            "column": 18,
            "line": 1,
            "offset": 18,
          },
          "source": "print \\"something\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 1,
          "offset": 18,
        },
        "source": "print \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 18,
      "line": 1,
      "offset": 18,
    },
    "source": "print \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test propertylookup 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 12,
              "line": 2,
              "offset": 13,
            },
            "source": "$var",
            "start": Position {
              "column": 8,
              "line": 2,
              "offset": 9,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 10,
            "offset": 214,
          },
          "source": "$var = $var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first() // Comment
          // Comment
          ->dump();",
          "start": Position {
            "column": 8,
            "line": 2,
            "offset": 9,
          },
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "loc": Location {
            "end": Position {
              "column": 18,
              "line": 10,
              "offset": 213,
            },
            "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first() // Comment
          // Comment
          ->dump()",
            "start": Position {
              "column": 15,
              "line": 2,
              "offset": 16,
            },
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "loc": Location {
              "end": Position {
                "column": 16,
                "line": 10,
                "offset": 211,
              },
              "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first() // Comment
          // Comment
          ->dump",
              "start": Position {
                "column": 15,
                "line": 2,
                "offset": 16,
              },
            },
            "offset": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 16,
                  "line": 10,
                  "offset": 211,
                },
                "source": "dump",
                "start": Position {
                  "column": 12,
                  "line": 10,
                  "offset": 207,
                },
              },
              "name": "dump",
            },
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "loc": Location {
                "end": Position {
                  "column": 19,
                  "line": 8,
                  "offset": 162,
                },
                "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first()",
                "start": Position {
                  "column": 15,
                  "line": 2,
                  "offset": 16,
                },
              },
              "what": PropertyLookup {
                "kind": "propertylookup",
                "loc": Location {
                  "end": Position {
                    "column": 17,
                    "line": 8,
                    "offset": 160,
                  },
                  "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first",
                  "start": Position {
                    "column": 15,
                    "line": 2,
                    "offset": 16,
                  },
                },
                "offset": Identifier {
                  "kind": "identifier",
                  "loc": Location {
                    "end": Position {
                      "column": 17,
                      "line": 8,
                      "offset": 160,
                    },
                    "source": "first",
                    "start": Position {
                      "column": 12,
                      "line": 8,
                      "offset": 155,
                    },
                  },
                  "name": "first",
                },
                "what": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "loc": Location {
                    "end": Position {
                      "column": 17,
                      "line": 6,
                      "offset": 110,
                    },
                    "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map()",
                    "start": Position {
                      "column": 15,
                      "line": 2,
                      "offset": 16,
                    },
                  },
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "loc": Location {
                      "end": Position {
                        "column": 15,
                        "line": 6,
                        "offset": 108,
                      },
                      "source": "$var
          // Comment
          ->each() // Comment
          // Comment
          ->map",
                      "start": Position {
                        "column": 15,
                        "line": 2,
                        "offset": 16,
                      },
                    },
                    "offset": Identifier {
                      "kind": "identifier",
                      "loc": Location {
                        "end": Position {
                          "column": 15,
                          "line": 6,
                          "offset": 108,
                        },
                        "source": "map",
                        "start": Position {
                          "column": 12,
                          "line": 6,
                          "offset": 105,
                        },
                      },
                      "name": "map",
                    },
                    "what": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "loc": Location {
                        "end": Position {
                          "column": 18,
                          "line": 4,
                          "offset": 60,
                        },
                        "source": "$var
          // Comment
          ->each()",
                        "start": Position {
                          "column": 15,
                          "line": 2,
                          "offset": 16,
                        },
                      },
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "loc": Location {
                          "end": Position {
                            "column": 16,
                            "line": 4,
                            "offset": 58,
                          },
                          "source": "$var
          // Comment
          ->each",
                          "start": Position {
                            "column": 15,
                            "line": 2,
                            "offset": 16,
                          },
                        },
                        "offset": Identifier {
                          "kind": "identifier",
                          "loc": Location {
                            "end": Position {
                              "column": 16,
                              "line": 4,
                              "offset": 58,
                            },
                            "source": "each",
                            "start": Position {
                              "column": 12,
                              "line": 4,
                              "offset": 54,
                            },
                          },
                          "name": "each",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "loc": Location {
                            "end": Position {
                              "column": 19,
                              "line": 2,
                              "offset": 20,
                            },
                            "source": "$var",
                            "start": Position {
                              "column": 15,
                              "line": 2,
                              "offset": 16,
                            },
                          },
                          "name": "var",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 10,
          "offset": 214,
        },
        "source": "$var = $var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first() // Comment
          // Comment
          ->dump();",
        "start": Position {
          "column": 8,
          "line": 2,
          "offset": 9,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 11,
      "offset": 223,
    },
    "source": "
        $var = $var
          // Comment
          ->each() // Comment
          // Comment
          ->map() // Comment
          // Comment
          ->first() // Comment
          // Comment
          ->dump();
        ",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test retif 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 27,
            "line": 1,
            "offset": 27,
          },
          "source": "$var = $var ? true : false;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": RetIf {
          "falseExpr": Boolean {
            "kind": "boolean",
            "loc": Location {
              "end": Position {
                "column": 26,
                "line": 1,
                "offset": 26,
              },
              "source": "false",
              "start": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
            },
            "raw": "false",
            "value": false,
          },
          "kind": "retif",
          "loc": Location {
            "end": Position {
              "column": 26,
              "line": 1,
              "offset": 26,
            },
            "source": "$var ? true : false",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "test": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
              "source": "$var",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "var",
          },
          "trueExpr": Boolean {
            "kind": "boolean",
            "loc": Location {
              "end": Position {
                "column": 18,
                "line": 1,
                "offset": 18,
              },
              "source": "true",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "raw": "true",
            "value": true,
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 27,
          "line": 1,
          "offset": 27,
        },
        "source": "$var = $var ? true : false;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 27,
      "line": 1,
      "offset": 27,
    },
    "source": "$var = $var ? true : false;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test retif nested 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 79,
            "line": 1,
            "offset": 79,
          },
          "source": "$var = ($one ? true : false) ? ($two ? true : false) : ($three ? true : false);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": RetIf {
          "falseExpr": RetIf {
            "falseExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 77,
                  "line": 1,
                  "offset": 77,
                },
                "source": "false",
                "start": Position {
                  "column": 72,
                  "line": 1,
                  "offset": 72,
                },
              },
              "raw": "false",
              "value": false,
            },
            "kind": "retif",
            "loc": Location {
              "end": Position {
                "column": 77,
                "line": 1,
                "offset": 77,
              },
              "source": "$three ? true : false",
              "start": Position {
                "column": 56,
                "line": 1,
                "offset": 56,
              },
            },
            "parenthesizedExpression": true,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 62,
                  "line": 1,
                  "offset": 62,
                },
                "source": "$three",
                "start": Position {
                  "column": 56,
                  "line": 1,
                  "offset": 56,
                },
              },
              "name": "three",
            },
            "trueExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 69,
                  "line": 1,
                  "offset": 69,
                },
                "source": "true",
                "start": Position {
                  "column": 65,
                  "line": 1,
                  "offset": 65,
                },
              },
              "raw": "true",
              "value": true,
            },
          },
          "kind": "retif",
          "loc": Location {
            "end": Position {
              "column": 78,
              "line": 1,
              "offset": 78,
            },
            "source": "($one ? true : false) ? ($two ? true : false) : ($three ? true : false)",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "test": RetIf {
            "falseExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 27,
                  "line": 1,
                  "offset": 27,
                },
                "source": "false",
                "start": Position {
                  "column": 22,
                  "line": 1,
                  "offset": 22,
                },
              },
              "raw": "false",
              "value": false,
            },
            "kind": "retif",
            "loc": Location {
              "end": Position {
                "column": 27,
                "line": 1,
                "offset": 27,
              },
              "source": "$one ? true : false",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "parenthesizedExpression": true,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
                "source": "$one",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "name": "one",
            },
            "trueExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
                "source": "true",
                "start": Position {
                  "column": 15,
                  "line": 1,
                  "offset": 15,
                },
              },
              "raw": "true",
              "value": true,
            },
          },
          "trueExpr": RetIf {
            "falseExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 51,
                  "line": 1,
                  "offset": 51,
                },
                "source": "false",
                "start": Position {
                  "column": 46,
                  "line": 1,
                  "offset": 46,
                },
              },
              "raw": "false",
              "value": false,
            },
            "kind": "retif",
            "loc": Location {
              "end": Position {
                "column": 51,
                "line": 1,
                "offset": 51,
              },
              "source": "$two ? true : false",
              "start": Position {
                "column": 32,
                "line": 1,
                "offset": 32,
              },
            },
            "parenthesizedExpression": true,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 36,
                  "line": 1,
                  "offset": 36,
                },
                "source": "$two",
                "start": Position {
                  "column": 32,
                  "line": 1,
                  "offset": 32,
                },
              },
              "name": "two",
            },
            "trueExpr": Boolean {
              "kind": "boolean",
              "loc": Location {
                "end": Position {
                  "column": 43,
                  "line": 1,
                  "offset": 43,
                },
                "source": "true",
                "start": Position {
                  "column": 39,
                  "line": 1,
                  "offset": 39,
                },
              },
              "raw": "true",
              "value": true,
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 79,
          "line": 1,
          "offset": 79,
        },
        "source": "$var = ($one ? true : false) ? ($two ? true : false) : ($three ? true : false);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 79,
      "line": 1,
      "offset": 79,
    },
    "source": "$var = ($one ? true : false) ? ($two ? true : false) : ($three ? true : false);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test return 1`] = `
Program {
  "children": Array [
    Return {
      "expr": Number {
        "kind": "number",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
          "source": "1",
          "start": Position {
            "column": 7,
            "line": 1,
            "offset": 7,
          },
        },
        "value": "1",
      },
      "kind": "return",
      "loc": Location {
        "end": Position {
          "column": 9,
          "line": 1,
          "offset": 9,
        },
        "source": "return 1;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 9,
      "line": 1,
      "offset": 9,
    },
    "source": "return 1;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test silent 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "$var",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
          "source": "$var = @call();",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "operator": "=",
        "right": Silent {
          "expr": Call {
            "arguments": Array [],
            "kind": "call",
            "loc": Location {
              "end": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
              "source": "call()",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "what": Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
                "source": "call",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "name": "call",
              "resolution": "uqn",
            },
          },
          "kind": "silent",
          "loc": Location {
            "end": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
            "source": "@call()",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 15,
          "line": 1,
          "offset": 15,
        },
        "source": "$var = @call();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 15,
      "line": 1,
      "offset": 15,
    },
    "source": "$var = @call();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test silent 2`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [],
          "kind": "call",
          "loc": Location {
            "end": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
            "source": "call()",
            "start": Position {
              "column": 1,
              "line": 1,
              "offset": 1,
            },
          },
          "what": Name {
            "kind": "name",
            "loc": Location {
              "end": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
              "source": "call",
              "start": Position {
                "column": 1,
                "line": 1,
                "offset": 1,
              },
            },
            "name": "call",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
          "source": "@call();",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 8,
          "line": 1,
          "offset": 8,
        },
        "source": "@call();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 1,
      "offset": 8,
    },
    "source": "@call();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test single call 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "loc": Location {
          "end": Position {
            "column": 7,
            "line": 1,
            "offset": 7,
          },
          "source": "call();",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "what": Name {
          "kind": "name",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "call",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 7,
          "line": 1,
          "offset": 7,
        },
        "source": "call();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 7,
      "line": 1,
      "offset": 7,
    },
    "source": "call();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test static 1`] = `
Program {
  "children": Array [
    Static {
      "kind": "static",
      "loc": Location {
        "end": Position {
          "column": 14,
          "line": 1,
          "offset": 14,
        },
        "source": "static $a = 1;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "variables": Array [
        StaticVariable {
          "defaultValue": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "1",
              "start": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
            },
            "value": "1",
          },
          "kind": "staticvariable",
          "loc": Location {
            "end": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
            "source": "$a = 1",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
              "source": "$a",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "a",
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 14,
      "line": 1,
      "offset": 14,
    },
    "source": "static $a = 1;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test static multiple 1`] = `
Program {
  "children": Array [
    Static {
      "kind": "static",
      "loc": Location {
        "end": Position {
          "column": 30,
          "line": 1,
          "offset": 30,
        },
        "source": "static $a = 1, $b = 2, $c = 3;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "variables": Array [
        StaticVariable {
          "defaultValue": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 13,
                "line": 1,
                "offset": 13,
              },
              "source": "1",
              "start": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
            },
            "value": "1",
          },
          "kind": "staticvariable",
          "loc": Location {
            "end": Position {
              "column": 13,
              "line": 1,
              "offset": 13,
            },
            "source": "$a = 1",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 9,
                "line": 1,
                "offset": 9,
              },
              "source": "$a",
              "start": Position {
                "column": 7,
                "line": 1,
                "offset": 7,
              },
            },
            "name": "a",
          },
        },
        StaticVariable {
          "defaultValue": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 21,
                "line": 1,
                "offset": 21,
              },
              "source": "2",
              "start": Position {
                "column": 20,
                "line": 1,
                "offset": 20,
              },
            },
            "value": "2",
          },
          "kind": "staticvariable",
          "loc": Location {
            "end": Position {
              "column": 21,
              "line": 1,
              "offset": 21,
            },
            "source": "$b = 2",
            "start": Position {
              "column": 15,
              "line": 1,
              "offset": 15,
            },
          },
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "$b",
              "start": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
            },
            "name": "b",
          },
        },
        StaticVariable {
          "defaultValue": Number {
            "kind": "number",
            "loc": Location {
              "end": Position {
                "column": 29,
                "line": 1,
                "offset": 29,
              },
              "source": "3",
              "start": Position {
                "column": 28,
                "line": 1,
                "offset": 28,
              },
            },
            "value": "3",
          },
          "kind": "staticvariable",
          "loc": Location {
            "end": Position {
              "column": 29,
              "line": 1,
              "offset": 29,
            },
            "source": "$c = 3",
            "start": Position {
              "column": 23,
              "line": 1,
              "offset": 23,
            },
          },
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 25,
                "line": 1,
                "offset": 25,
              },
              "source": "$c",
              "start": Position {
                "column": 23,
                "line": 1,
                "offset": 23,
              },
            },
            "name": "c",
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 30,
      "line": 1,
      "offset": 30,
    },
    "source": "static $a = 1, $b = 2, $c = 3;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test staticlookup 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 12,
              "line": 2,
              "offset": 13,
            },
            "source": "$var",
            "start": Position {
              "column": 8,
              "line": 2,
              "offset": 9,
            },
          },
          "name": "var",
        },
        "loc": Location {
          "end": Position {
            "column": 19,
            "line": 10,
            "offset": 214,
          },
          "source": "$var = $var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first() // Comment
          // Comment
          ::dump();",
          "start": Position {
            "column": 8,
            "line": 2,
            "offset": 9,
          },
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "loc": Location {
            "end": Position {
              "column": 18,
              "line": 10,
              "offset": 213,
            },
            "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first() // Comment
          // Comment
          ::dump()",
            "start": Position {
              "column": 15,
              "line": 2,
              "offset": 16,
            },
          },
          "what": StaticLookup {
            "kind": "staticlookup",
            "loc": Location {
              "end": Position {
                "column": 16,
                "line": 10,
                "offset": 211,
              },
              "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first() // Comment
          // Comment
          ::dump",
              "start": Position {
                "column": 15,
                "line": 2,
                "offset": 16,
              },
            },
            "offset": Identifier {
              "kind": "identifier",
              "loc": Location {
                "end": Position {
                  "column": 16,
                  "line": 10,
                  "offset": 211,
                },
                "source": "dump",
                "start": Position {
                  "column": 12,
                  "line": 10,
                  "offset": 207,
                },
              },
              "name": "dump",
            },
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "loc": Location {
                "end": Position {
                  "column": 19,
                  "line": 8,
                  "offset": 162,
                },
                "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first()",
                "start": Position {
                  "column": 15,
                  "line": 2,
                  "offset": 16,
                },
              },
              "what": StaticLookup {
                "kind": "staticlookup",
                "loc": Location {
                  "end": Position {
                    "column": 17,
                    "line": 8,
                    "offset": 160,
                  },
                  "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first",
                  "start": Position {
                    "column": 15,
                    "line": 2,
                    "offset": 16,
                  },
                },
                "offset": Identifier {
                  "kind": "identifier",
                  "loc": Location {
                    "end": Position {
                      "column": 17,
                      "line": 8,
                      "offset": 160,
                    },
                    "source": "first",
                    "start": Position {
                      "column": 12,
                      "line": 8,
                      "offset": 155,
                    },
                  },
                  "name": "first",
                },
                "what": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "loc": Location {
                    "end": Position {
                      "column": 17,
                      "line": 6,
                      "offset": 110,
                    },
                    "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map()",
                    "start": Position {
                      "column": 15,
                      "line": 2,
                      "offset": 16,
                    },
                  },
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "loc": Location {
                      "end": Position {
                        "column": 15,
                        "line": 6,
                        "offset": 108,
                      },
                      "source": "$var
          // Comment
          ::each() // Comment
          // Comment
          ::map",
                      "start": Position {
                        "column": 15,
                        "line": 2,
                        "offset": 16,
                      },
                    },
                    "offset": Identifier {
                      "kind": "identifier",
                      "loc": Location {
                        "end": Position {
                          "column": 15,
                          "line": 6,
                          "offset": 108,
                        },
                        "source": "map",
                        "start": Position {
                          "column": 12,
                          "line": 6,
                          "offset": 105,
                        },
                      },
                      "name": "map",
                    },
                    "what": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "loc": Location {
                        "end": Position {
                          "column": 18,
                          "line": 4,
                          "offset": 60,
                        },
                        "source": "$var
          // Comment
          ::each()",
                        "start": Position {
                          "column": 15,
                          "line": 2,
                          "offset": 16,
                        },
                      },
                      "what": StaticLookup {
                        "kind": "staticlookup",
                        "loc": Location {
                          "end": Position {
                            "column": 16,
                            "line": 4,
                            "offset": 58,
                          },
                          "source": "$var
          // Comment
          ::each",
                          "start": Position {
                            "column": 15,
                            "line": 2,
                            "offset": 16,
                          },
                        },
                        "offset": Identifier {
                          "kind": "identifier",
                          "loc": Location {
                            "end": Position {
                              "column": 16,
                              "line": 4,
                              "offset": 58,
                            },
                            "source": "each",
                            "start": Position {
                              "column": 12,
                              "line": 4,
                              "offset": 54,
                            },
                          },
                          "name": "each",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "loc": Location {
                            "end": Position {
                              "column": 19,
                              "line": 2,
                              "offset": 20,
                            },
                            "source": "$var",
                            "start": Position {
                              "column": 15,
                              "line": 2,
                              "offset": 16,
                            },
                          },
                          "name": "var",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 19,
          "line": 10,
          "offset": 214,
        },
        "source": "$var = $var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first() // Comment
          // Comment
          ::dump();",
        "start": Position {
          "column": 8,
          "line": 2,
          "offset": 9,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 8,
      "line": 11,
      "offset": 223,
    },
    "source": "
        $var = $var
          // Comment
          ::each() // Comment
          // Comment
          ::map() // Comment
          // Comment
          ::first() // Comment
          // Comment
          ::dump();
        ",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test string double quotes 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": String {
        "isDoubleQuote": true,
        "kind": "string",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "\\"string\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "\\"string\\"",
        "unicode": false,
        "value": "string",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 9,
          "line": 1,
          "offset": 9,
        },
        "source": "\\"string\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 9,
      "line": 1,
      "offset": 9,
    },
    "source": "\\"string\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test string single quotes 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": String {
        "isDoubleQuote": false,
        "kind": "string",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "'string';",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "raw": "'string'",
        "unicode": false,
        "value": "string",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 9,
          "line": 1,
          "offset": 9,
        },
        "source": "'string';",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 9,
      "line": 1,
      "offset": 9,
    },
    "source": "'string';",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test switch 1`] = `
Program {
  "children": Array [
    Switch {
      "body": Block {
        "children": Array [],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 14,
            "line": 1,
            "offset": 14,
          },
          "source": "{}",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
      },
      "kind": "switch",
      "loc": Location {
        "end": Position {
          "column": 14,
          "line": 1,
          "offset": 14,
        },
        "source": "switch ($i) {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "$i",
          "start": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
        },
        "name": "i",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 14,
      "line": 1,
      "offset": 14,
    },
    "source": "switch ($i) {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test switch case 1`] = `
Program {
  "children": Array [
    Switch {
      "body": Block {
        "children": Array [
          Case {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "loc": Location {
                        "end": Position {
                          "column": 38,
                          "line": 1,
                          "offset": 38,
                        },
                        "source": "\\"something\\"",
                        "start": Position {
                          "column": 27,
                          "line": 1,
                          "offset": 27,
                        },
                      },
                      "raw": "\\"something\\"",
                      "unicode": false,
                      "value": "something",
                    },
                  ],
                  "kind": "echo",
                  "loc": Location {
                    "end": Position {
                      "column": 39,
                      "line": 1,
                      "offset": 39,
                    },
                    "source": "echo \\"something\\";",
                    "start": Position {
                      "column": 22,
                      "line": 1,
                      "offset": 22,
                    },
                  },
                  "shortForm": false,
                },
                Break {
                  "kind": "break",
                  "level": null,
                  "loc": Location {
                    "end": Position {
                      "column": 46,
                      "line": 1,
                      "offset": 46,
                    },
                    "source": "break;",
                    "start": Position {
                      "column": 40,
                      "line": 1,
                      "offset": 40,
                    },
                  },
                },
              ],
              "kind": "block",
              "loc": Location {
                "end": Position {
                  "column": 46,
                  "line": 1,
                  "offset": 46,
                },
                "source": "echo \\"something\\"; break;",
                "start": Position {
                  "column": 22,
                  "line": 1,
                  "offset": 22,
                },
              },
            },
            "kind": "case",
            "loc": Location {
              "end": Position {
                "column": 46,
                "line": 1,
                "offset": 46,
              },
              "source": "case 0: echo \\"something\\"; break;",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "test": Number {
              "kind": "number",
              "loc": Location {
                "end": Position {
                  "column": 20,
                  "line": 1,
                  "offset": 20,
                },
                "source": "0",
                "start": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
              },
              "value": "0",
            },
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 48,
            "line": 1,
            "offset": 48,
          },
          "source": "{ case 0: echo \\"something\\"; break; }",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
      },
      "kind": "switch",
      "loc": Location {
        "end": Position {
          "column": 48,
          "line": 1,
          "offset": 48,
        },
        "source": "switch ($i) { case 0: echo \\"something\\"; break; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "$i",
          "start": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
        },
        "name": "i",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 48,
      "line": 1,
      "offset": 48,
    },
    "source": "switch ($i) { case 0: echo \\"something\\"; break; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test switch default 1`] = `
Program {
  "children": Array [
    Switch {
      "body": Block {
        "children": Array [
          Case {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "loc": Location {
                        "end": Position {
                          "column": 39,
                          "line": 1,
                          "offset": 39,
                        },
                        "source": "\\"something\\"",
                        "start": Position {
                          "column": 28,
                          "line": 1,
                          "offset": 28,
                        },
                      },
                      "raw": "\\"something\\"",
                      "unicode": false,
                      "value": "something",
                    },
                  ],
                  "kind": "echo",
                  "loc": Location {
                    "end": Position {
                      "column": 40,
                      "line": 1,
                      "offset": 40,
                    },
                    "source": "echo \\"something\\";",
                    "start": Position {
                      "column": 23,
                      "line": 1,
                      "offset": 23,
                    },
                  },
                  "shortForm": false,
                },
              ],
              "kind": "block",
              "loc": Location {
                "end": Position {
                  "column": 40,
                  "line": 1,
                  "offset": 40,
                },
                "source": "echo \\"something\\";",
                "start": Position {
                  "column": 23,
                  "line": 1,
                  "offset": 23,
                },
              },
            },
            "kind": "case",
            "loc": Location {
              "end": Position {
                "column": 40,
                "line": 1,
                "offset": 40,
              },
              "source": "default: echo \\"something\\";",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "test": null,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 42,
            "line": 1,
            "offset": 42,
          },
          "source": "{ default: echo \\"something\\"; }",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
      },
      "kind": "switch",
      "loc": Location {
        "end": Position {
          "column": 42,
          "line": 1,
          "offset": 42,
        },
        "source": "switch ($i) { default: echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "$i",
          "start": Position {
            "column": 8,
            "line": 1,
            "offset": 8,
          },
        },
        "name": "i",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 42,
      "line": 1,
      "offset": 42,
    },
    "source": "switch ($i) { default: echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test ternary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 21,
              "line": 1,
              "offset": 21,
            },
            "source": "\\"no\\"",
            "start": Position {
              "column": 17,
              "line": 1,
              "offset": 17,
            },
          },
          "raw": "\\"no\\"",
          "unicode": false,
          "value": "no",
        },
        "kind": "retif",
        "loc": Location {
          "end": Position {
            "column": 22,
            "line": 1,
            "offset": 22,
          },
          "source": "$valid ? \\"yes\\" : \\"no\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "test": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "$valid",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "valid",
        },
        "trueExpr": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
            "source": "\\"yes\\"",
            "start": Position {
              "column": 9,
              "line": 1,
              "offset": 9,
            },
          },
          "raw": "\\"yes\\"",
          "unicode": false,
          "value": "yes",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 22,
          "line": 1,
          "offset": 22,
        },
        "source": "$valid ? \\"yes\\" : \\"no\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 22,
      "line": 1,
      "offset": 22,
    },
    "source": "$valid ? \\"yes\\" : \\"no\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test ternary no true expression 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": String {
          "isDoubleQuote": true,
          "kind": "string",
          "loc": Location {
            "end": Position {
              "column": 14,
              "line": 1,
              "offset": 14,
            },
            "source": "\\"no\\"",
            "start": Position {
              "column": 10,
              "line": 1,
              "offset": 10,
            },
          },
          "raw": "\\"no\\"",
          "unicode": false,
          "value": "no",
        },
        "kind": "retif",
        "loc": Location {
          "end": Position {
            "column": 15,
            "line": 1,
            "offset": 15,
          },
          "source": "$valid ?: \\"no\\";",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "test": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
            "source": "$valid",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "valid",
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 15,
          "line": 1,
          "offset": 15,
        },
        "source": "$valid ?: \\"no\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 15,
      "line": 1,
      "offset": 15,
    },
    "source": "$valid ?: \\"no\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test trait 1`] = `
Program {
  "children": Array [
    Trait {
      "body": Array [],
      "kind": "trait",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "trait Foo {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "trait Foo {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test traituse 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        TraitUse {
          "adaptations": null,
          "kind": "traituse",
          "loc": Location {
            "end": Position {
              "column": 22,
              "line": 1,
              "offset": 22,
            },
            "source": "use Hello;",
            "start": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
          },
          "traits": Array [
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 21,
                  "line": 1,
                  "offset": 21,
                },
                "source": "Hello",
                "start": Position {
                  "column": 16,
                  "line": 1,
                  "offset": 16,
                },
              },
              "name": "Hello",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 24,
          "line": 1,
          "offset": 24,
        },
        "source": "class Foo { use Hello; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 24,
      "line": 1,
      "offset": 24,
    },
    "source": "class Foo { use Hello; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test traituse adaptations 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        TraitUse {
          "adaptations": Array [
            TraitPrecedence {
              "instead": Array [
                Name {
                  "kind": "name",
                  "loc": Location {
                    "end": Position {
                      "column": 47,
                      "line": 1,
                      "offset": 47,
                    },
                    "source": "A",
                    "start": Position {
                      "column": 46,
                      "line": 1,
                      "offset": 46,
                    },
                  },
                  "name": "A",
                  "resolution": "uqn",
                },
              ],
              "kind": "traitprecedence",
              "loc": Location {
                "end": Position {
                  "column": 47,
                  "line": 1,
                  "offset": 47,
                },
                "source": "B::smallTalk insteadof A",
                "start": Position {
                  "column": 23,
                  "line": 1,
                  "offset": 23,
                },
              },
              "method": Identifier {
                "kind": "identifier",
                "loc": Location {
                  "end": Position {
                    "column": 35,
                    "line": 1,
                    "offset": 35,
                  },
                  "source": "smallTalk",
                  "start": Position {
                    "column": 26,
                    "line": 1,
                    "offset": 26,
                  },
                },
                "name": "smallTalk",
              },
              "trait": Name {
                "kind": "name",
                "loc": Location {
                  "end": Position {
                    "column": 24,
                    "line": 1,
                    "offset": 24,
                  },
                  "source": "B",
                  "start": Position {
                    "column": 23,
                    "line": 1,
                    "offset": 23,
                  },
                },
                "name": "B",
                "resolution": "uqn",
              },
            },
            TraitAlias {
              "as": Identifier {
                "kind": "identifier",
                "loc": Location {
                  "end": Position {
                    "column": 68,
                    "line": 1,
                    "offset": 68,
                  },
                  "source": "talk",
                  "start": Position {
                    "column": 64,
                    "line": 1,
                    "offset": 64,
                  },
                },
                "name": "talk",
              },
              "kind": "traitalias",
              "loc": Location {
                "end": Position {
                  "column": 68,
                  "line": 1,
                  "offset": 68,
                },
                "source": "B::bigTalk as talk",
                "start": Position {
                  "column": 50,
                  "line": 1,
                  "offset": 50,
                },
              },
              "method": Identifier {
                "kind": "identifier",
                "loc": Location {
                  "end": Position {
                    "column": 60,
                    "line": 1,
                    "offset": 60,
                  },
                  "source": "bigTalk",
                  "start": Position {
                    "column": 53,
                    "line": 1,
                    "offset": 53,
                  },
                },
                "name": "bigTalk",
              },
              "trait": Name {
                "kind": "name",
                "loc": Location {
                  "end": Position {
                    "column": 51,
                    "line": 1,
                    "offset": 51,
                  },
                  "source": "B",
                  "start": Position {
                    "column": 50,
                    "line": 1,
                    "offset": 50,
                  },
                },
                "name": "B",
                "resolution": "uqn",
              },
              "visibility": "",
            },
            TraitAlias {
              "as": null,
              "kind": "traitalias",
              "loc": Location {
                "end": Position {
                  "column": 91,
                  "line": 1,
                  "offset": 91,
                },
                "source": "sayHello as protected",
                "start": Position {
                  "column": 70,
                  "line": 1,
                  "offset": 70,
                },
              },
              "method": "sayHello",
              "trait": null,
              "visibility": "protected",
            },
            TraitAlias {
              "as": Identifier {
                "kind": "identifier",
                "loc": Location {
                  "end": Position {
                    "column": 127,
                    "line": 1,
                    "offset": 127,
                  },
                  "source": "myPrivateHello",
                  "start": Position {
                    "column": 113,
                    "line": 1,
                    "offset": 113,
                  },
                },
                "name": "myPrivateHello",
              },
              "kind": "traitalias",
              "loc": Location {
                "end": Position {
                  "column": 127,
                  "line": 1,
                  "offset": 127,
                },
                "source": "sayHello as private myPrivateHello",
                "start": Position {
                  "column": 93,
                  "line": 1,
                  "offset": 93,
                },
              },
              "method": "sayHello",
              "trait": null,
              "visibility": "private",
            },
          ],
          "kind": "traituse",
          "loc": Location {
            "end": Position {
              "column": 130,
              "line": 1,
              "offset": 130,
            },
            "source": "use A, B { B::smallTalk insteadof A;  B::bigTalk as talk; sayHello as protected; sayHello as private myPrivateHello; }",
            "start": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
          },
          "traits": Array [
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 17,
                  "line": 1,
                  "offset": 17,
                },
                "source": "A",
                "start": Position {
                  "column": 16,
                  "line": 1,
                  "offset": 16,
                },
              },
              "name": "A",
              "resolution": "uqn",
            },
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 20,
                  "line": 1,
                  "offset": 20,
                },
                "source": "B",
                "start": Position {
                  "column": 19,
                  "line": 1,
                  "offset": 19,
                },
              },
              "name": "B",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 132,
          "line": 1,
          "offset": 132,
        },
        "source": "class Foo { use A, B { B::smallTalk insteadof A;  B::bigTalk as talk; sayHello as protected; sayHello as private myPrivateHello; } }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 132,
      "line": 1,
      "offset": 132,
    },
    "source": "class Foo { use A, B { B::smallTalk insteadof A;  B::bigTalk as talk; sayHello as protected; sayHello as private myPrivateHello; } }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test traituse multiple 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        TraitUse {
          "adaptations": null,
          "kind": "traituse",
          "loc": Location {
            "end": Position {
              "column": 29,
              "line": 1,
              "offset": 29,
            },
            "source": "use Hello, World;",
            "start": Position {
              "column": 12,
              "line": 1,
              "offset": 12,
            },
          },
          "traits": Array [
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 21,
                  "line": 1,
                  "offset": 21,
                },
                "source": "Hello",
                "start": Position {
                  "column": 16,
                  "line": 1,
                  "offset": 16,
                },
              },
              "name": "Hello",
              "resolution": "uqn",
            },
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 28,
                  "line": 1,
                  "offset": 28,
                },
                "source": "World",
                "start": Position {
                  "column": 23,
                  "line": 1,
                  "offset": 23,
                },
              },
              "name": "World",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "loc": Location {
        "end": Position {
          "column": 31,
          "line": 1,
          "offset": 31,
        },
        "source": "class Foo { use Hello, World; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "name": Identifier {
        "kind": "identifier",
        "loc": Location {
          "end": Position {
            "column": 9,
            "line": 1,
            "offset": 9,
          },
          "source": "Foo",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "name": "Foo",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 31,
      "line": 1,
      "offset": 31,
    },
    "source": "class Foo { use Hello, World; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test try 1`] = `
Program {
  "children": Array [
    Try {
      "always": null,
      "body": ExpressionStatement {
        "expression": New {
          "arguments": Array [],
          "kind": "new",
          "loc": Location {
            "end": Position {
              "column": 20,
              "line": 1,
              "offset": 20,
            },
            "source": "new Exception();",
            "start": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
          },
          "what": Name {
            "kind": "name",
            "loc": Location {
              "end": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
              "source": "Exception",
              "start": Position {
                "column": 8,
                "line": 1,
                "offset": 8,
              },
            },
            "name": "Exception",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
        "loc": Location {
          "end": Position {
            "column": 20,
            "line": 1,
            "offset": 20,
          },
          "source": "new Exception();",
          "start": Position {
            "column": 4,
            "line": 1,
            "offset": 4,
          },
        },
      },
      "catches": Array [],
      "kind": "try",
      "loc": Location {
        "end": Position {
          "column": 20,
          "line": 1,
          "offset": 20,
        },
        "source": "try new Exception();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 20,
      "line": 1,
      "offset": 20,
    },
    "source": "try new Exception();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test try/catch/finally 1`] = `
Program {
  "children": Array [
    Try {
      "always": Block {
        "children": Array [],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 41,
            "line": 1,
            "offset": 41,
          },
          "source": "{}",
          "start": Position {
            "column": 39,
            "line": 1,
            "offset": 39,
          },
        },
      },
      "body": Block {
        "children": Array [],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
          "source": "{}",
          "start": Position {
            "column": 4,
            "line": 1,
            "offset": 4,
          },
        },
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
            "loc": Location {
              "end": Position {
                "column": 30,
                "line": 1,
                "offset": 30,
              },
              "source": "{}",
              "start": Position {
                "column": 28,
                "line": 1,
                "offset": 28,
              },
            },
          },
          "kind": "catch",
          "loc": Location {
            "end": Position {
              "column": 30,
              "line": 1,
              "offset": 30,
            },
            "source": "catch (Exception $e) {}",
            "start": Position {
              "column": 7,
              "line": 1,
              "offset": 7,
            },
          },
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "loc": Location {
              "end": Position {
                "column": 26,
                "line": 1,
                "offset": 26,
              },
              "source": "$e",
              "start": Position {
                "column": 24,
                "line": 1,
                "offset": 24,
              },
            },
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "loc": Location {
                "end": Position {
                  "column": 23,
                  "line": 1,
                  "offset": 23,
                },
                "source": "Exception",
                "start": Position {
                  "column": 14,
                  "line": 1,
                  "offset": 14,
                },
              },
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
      "loc": Location {
        "end": Position {
          "column": 41,
          "line": 1,
          "offset": 41,
        },
        "source": "try {} catch (Exception $e) {} finally {}",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 41,
      "line": 1,
      "offset": 41,
    },
    "source": "try {} catch (Exception $e) {} finally {}",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test unary 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Unary {
        "kind": "unary",
        "loc": Location {
          "end": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
          "source": "!$var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 5,
              "line": 1,
              "offset": 5,
            },
            "source": "$var",
            "start": Position {
              "column": 1,
              "line": 1,
              "offset": 1,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 6,
          "line": 1,
          "offset": 6,
        },
        "source": "!$var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 6,
      "line": 1,
      "offset": 6,
    },
    "source": "!$var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test unset 1`] = `
Program {
  "children": Array [
    Unset {
      "kind": "unset",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 1,
          "offset": 12,
        },
        "source": "unset($foo);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 10,
              "line": 1,
              "offset": 10,
            },
            "source": "$foo",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": "foo",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 12,
      "line": 1,
      "offset": 12,
    },
    "source": "unset($foo);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test variable 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Variable {
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 5,
            "line": 1,
            "offset": 5,
          },
          "source": "$var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "name": "var",
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 5,
          "line": 1,
          "offset": 5,
        },
        "source": "$var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 5,
      "line": 1,
      "offset": 5,
    },
    "source": "$var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test variadic 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          variadic {
            "kind": "variadic",
            "loc": Location {
              "end": Position {
                "column": 12,
                "line": 1,
                "offset": 12,
              },
              "source": "...$var",
              "start": Position {
                "column": 5,
                "line": 1,
                "offset": 5,
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "loc": Location {
                "end": Position {
                  "column": 12,
                  "line": 1,
                  "offset": 12,
                },
                "source": "$var",
                "start": Position {
                  "column": 8,
                  "line": 1,
                  "offset": 8,
                },
              },
              "name": "var",
            },
          },
        ],
        "kind": "call",
        "loc": Location {
          "end": Position {
            "column": 14,
            "line": 1,
            "offset": 14,
          },
          "source": "call(...$var);",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "what": Name {
          "kind": "name",
          "loc": Location {
            "end": Position {
              "column": 4,
              "line": 1,
              "offset": 4,
            },
            "source": "call",
            "start": Position {
              "column": 0,
              "line": 1,
              "offset": 0,
            },
          },
          "name": "call",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 14,
          "line": 1,
          "offset": 14,
        },
        "source": "call(...$var);",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 14,
      "line": 1,
      "offset": 14,
    },
    "source": "call(...$var);",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test while 1`] = `
Program {
  "children": Array [
    While {
      "body": Echo {
        "expressions": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "loc": Location {
              "end": Position {
                "column": 28,
                "line": 1,
                "offset": 28,
              },
              "source": "\\"something\\"",
              "start": Position {
                "column": 17,
                "line": 1,
                "offset": 17,
              },
            },
            "raw": "\\"something\\"",
            "unicode": false,
            "value": "something",
          },
        ],
        "kind": "echo",
        "loc": Location {
          "end": Position {
            "column": 29,
            "line": 1,
            "offset": 29,
          },
          "source": "echo \\"something\\";",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
        "shortForm": false,
      },
      "kind": "while",
      "loc": Location {
        "end": Position {
          "column": 29,
          "line": 1,
          "offset": 29,
        },
        "source": "while(true) echo \\"something\\";",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "true",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 29,
      "line": 1,
      "offset": 29,
    },
    "source": "while(true) echo \\"something\\";",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test while block 1`] = `
Program {
  "children": Array [
    While {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "loc": Location {
                  "end": Position {
                    "column": 30,
                    "line": 1,
                    "offset": 30,
                  },
                  "source": "\\"something\\"",
                  "start": Position {
                    "column": 19,
                    "line": 1,
                    "offset": 19,
                  },
                },
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "loc": Location {
              "end": Position {
                "column": 31,
                "line": 1,
                "offset": 31,
              },
              "source": "echo \\"something\\";",
              "start": Position {
                "column": 14,
                "line": 1,
                "offset": 14,
              },
            },
            "shortForm": false,
          },
        ],
        "kind": "block",
        "loc": Location {
          "end": Position {
            "column": 33,
            "line": 1,
            "offset": 33,
          },
          "source": "{ echo \\"something\\"; }",
          "start": Position {
            "column": 12,
            "line": 1,
            "offset": 12,
          },
        },
      },
      "kind": "while",
      "loc": Location {
        "end": Position {
          "column": 33,
          "line": 1,
          "offset": 33,
        },
        "source": "while(true) { echo \\"something\\"; }",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 1,
            "offset": 10,
          },
          "source": "true",
          "start": Position {
            "column": 6,
            "line": 1,
            "offset": 6,
          },
        },
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 33,
      "line": 1,
      "offset": 33,
    },
    "source": "while(true) { echo \\"something\\"; }",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test yield 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Yield {
        "key": null,
        "kind": "yield",
        "loc": Location {
          "end": Position {
            "column": 11,
            "line": 1,
            "offset": 11,
          },
          "source": "yield $var;",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "value": Variable {
          "curly": false,
          "kind": "variable",
          "loc": Location {
            "end": Position {
              "column": 10,
              "line": 1,
              "offset": 10,
            },
            "source": "$var",
            "start": Position {
              "column": 6,
              "line": 1,
              "offset": 6,
            },
          },
          "name": "var",
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 1,
          "offset": 11,
        },
        "source": "yield $var;",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 11,
      "line": 1,
      "offset": 11,
    },
    "source": "yield $var;",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test locations test yield from 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": YieldFrom {
        "kind": "yieldfrom",
        "loc": Location {
          "end": Position {
            "column": 18,
            "line": 1,
            "offset": 18,
          },
          "source": "yield from from();",
          "start": Position {
            "column": 0,
            "line": 1,
            "offset": 0,
          },
        },
        "value": Call {
          "arguments": Array [],
          "kind": "call",
          "loc": Location {
            "end": Position {
              "column": 17,
              "line": 1,
              "offset": 17,
            },
            "source": "from()",
            "start": Position {
              "column": 11,
              "line": 1,
              "offset": 11,
            },
          },
          "what": Name {
            "kind": "name",
            "loc": Location {
              "end": Position {
                "column": 15,
                "line": 1,
                "offset": 15,
              },
              "source": "from",
              "start": Position {
                "column": 11,
                "line": 1,
                "offset": 11,
              },
            },
            "name": "from",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
      "loc": Location {
        "end": Position {
          "column": 18,
          "line": 1,
          "offset": 18,
        },
        "source": "yield from from();",
        "start": Position {
          "column": 0,
          "line": 1,
          "offset": 0,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 18,
      "line": 1,
      "offset": 18,
    },
    "source": "yield from from();",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;
