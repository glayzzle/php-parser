// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_poll_mixing_insert_select.phpt
  it("mysqli_poll() & INSERT SELECT", function () {
    expect(parser.parseCode("<?php\n    require_once('table.inc');\n    function get_connection() {\n        global $host, $user, $passwd, $db, $port, $socket;\n        if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n            printf(\"[001] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n        return $link;\n    }\n    // Note: some queries will fail! They are supposed to fail.\n    $queries = array(\n            'CREATE TABLE IF NOT EXISTS bogus(id INT)',\n            'SET @a = 1',\n            'SELECT * FROM test ORDER BY id ASC LIMIT 2',\n            \"INSERT INTO test(id, label) VALUES (100, 'z')\",\n            'SELECT * FROM test ORDER BY id ASC LIMIT 2',\n            'SELECT',\n            'UPDATE test SET id = 101 WHERE id > 3',\n            'UPDATE_FIX test SET id = 101 WHERE id > 3',\n            'DROP TABLE IF EXISTS bogus',\n            'DELETE FROM test WHERE id = @a',\n            'DELETE FROM test WHERE id = 1',\n    );\n    $link = get_connection();\n    $have_proc = false;\n    mysqli_real_query($link, \"DROP PROCEDURE IF EXISTS p\");\n    if (mysqli_real_query($link, 'CREATE PROCEDURE p(IN ver_in VARCHAR(25), OUT ver_out VARCHAR(25)) BEGIN SELECT ver_in INTO ver_out; END;')) {\n            $have_proc = true;\n            $queries[] = \"CALL p('myversion', @version)\";\n    }\n    mysqli_close($link);\n    $links = array();\n    for ($i = 0; $i < count($queries); $i++) {\n        $link = get_connection();\n        if (true !== ($tmp = mysqli_query($link, $queries[$i], MYSQLI_ASYNC |  MYSQLI_USE_RESULT)))\n            printf(\"[002] Expecting true got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n        // WARNING KLUDGE NOTE\n        // Add a tiny delay to ensure that queries get executed in a certain order\n        // If your MySQL server is very slow the test may randomly fail!\n        usleep(20000);\n        $links[mysqli_thread_id($link)] = array(\n            'query' => $queries[$i],\n            'link' => $link,\n            'processed' => false,\n        );\n    }\n    $saved_errors = array();\n    do {\n        $poll_links = $poll_errors = $poll_reject = array();\n        foreach ($links as $thread_id => $link) {\n            if (!$link['processed']) {\n                $poll_links[] = $link['link'];\n                $poll_errors[] = $link['link'];\n                $poll_reject[] = $link['link'];\n            }\n        }\n        if (0 == count($poll_links))\n            break;\n        if (0 === ($num_ready = mysqli_poll($poll_links, $poll_errors, $poll_reject, 0, 200000)))\n            continue;\n        if (!empty($poll_errors)) {\n            die(var_dump($poll_errors));\n        }\n        if (FALSE === $num_ready) {\n            die(\"Some mysqli indicated error\");\n        }\n        foreach ($poll_links as $link) {\n            $thread_id = mysqli_thread_id($link);\n            $links[$thread_id]['processed'] = true;\n            if (is_object($res = mysqli_reap_async_query($link))) {\n                // result set object\n                while ($row = mysqli_fetch_assoc($res)) {\n                    // eat up all results\n                    ;\n                }\n                mysqli_free_result($res);\n            } else {\n                // either there is no result (no SELECT) or there is an error\n                if (mysqli_errno($link) > 0) {\n                    $saved_errors[$thread_id] = mysqli_errno($link);\n                }\n            }\n        }\n    } while (true);\n    // Checking if all lines are still usable\n    foreach ($links as $thread_id => $link) {\n        if (isset($saved_errors[$thread_id])) {\n            printf(\"[003] '%s' caused %d\\n\",\n                $links[$thread_id]['query'], $saved_errors[$thread_id]);\n            if ($saved_errors[$thread_id] != mysqli_errno($link['link'])) {\n                printf(\"[004] Error state not saved for query '%s', %d != %d\\n\", $link['query'],\n                    $saved_errors[$thread_id], mysqli_errno($link['link']));\n            }\n        }\n        if (!$res = mysqli_query($link['link'], 'SELECT * FROM test WHERE id = 100'))\n            printf(\"[005] Expecting true got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n        if (!$row = mysqli_fetch_row($res))\n            printf(\"[006] Expecting true got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n        mysqli_free_result($res);\n    }\n    if ($res = mysqli_query($link['link'], \"SELECT * FROM test WHERE id = 100\")) {\n        $row = mysqli_fetch_assoc($res);\n        var_dump($row);\n        mysqli_free_result($res);\n    }\n    if ($have_proc && ($res = mysqli_query($link['link'], \"SELECT @version as _version\"))) {\n        $row = mysqli_fetch_assoc($res);\n        if ($row['_version'] != 'myversion') {\n            printf(\"[007] Check procedures\\n\");\n        }\n        mysqli_free_result($res);\n    }\n    foreach ($links as $link)\n        mysqli_close($link['link']);\n    $link = get_connection();\n    if (!mysqli_query($link, 'SELECT 1', MYSQLI_ASYNC))\n        printf(\"[008] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_query($link, 'SELECT 1', MYSQLI_ASYNC))\n        printf(\"[009] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
