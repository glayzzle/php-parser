// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pgsql/tests/03sync_query.phpt
  it("PostgreSQL sync query", function () {
    expect(parser.parseCode("<?php\ninclude('config.inc');\n$db = pg_connect($conn_str);\n$result = pg_query($db, \"SELECT * FROM \".$table_name.\";\");\nif (!($rows   = pg_num_rows($result)))\n{\n    echo \"pg_num_row() error\\n\";\n}\nfor ($i=0; $i < $rows; $i++)\n{\n    pg_fetch_array($result, $i, PGSQL_NUM);\n}\nfor ($i=0; $i < $rows; $i++)\n{\n    pg_fetch_object($result);\n}\nfor ($i=0; $i < $rows; $i++)\n{\n    pg_fetch_row($result, $i);\n}\nfor ($i=0; $i < $rows; $i++)\n{\n    pg_fetch_result($result, $i, 0);\n}\ntry {\n    pg_fetch_result($result, 0, -1);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_fetch_result($result, 0, 3);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_fetch_result($result, 0, \"unknown\");\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_fetch_all_columns($result, -1);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_fetch_all_columns($result, 3);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\npg_result_error($result);\nif (function_exists('pg_result_error_field')) {\n    pg_result_error_field($result, PGSQL_DIAG_SEVERITY);\n    pg_result_error_field($result, PGSQL_DIAG_SQLSTATE);\n    pg_result_error_field($result, PGSQL_DIAG_MESSAGE_PRIMARY);\n    pg_result_error_field($result, PGSQL_DIAG_MESSAGE_DETAIL);\n    pg_result_error_field($result, PGSQL_DIAG_MESSAGE_HINT);\n    pg_result_error_field($result, PGSQL_DIAG_STATEMENT_POSITION);\n    if (defined('PGSQL_DIAG_INTERNAL_POSITION'))\n    {\n        pg_result_error_field($result, PGSQL_DIAG_INTERNAL_POSITION);\n    }\n    if (defined('PGSQL_DIAG_INTERNAL_QUERY'))\n    {\n        pg_result_error_field($result, PGSQL_DIAG_INTERNAL_QUERY);\n    }\n    pg_result_error_field($result, PGSQL_DIAG_CONTEXT);\n    pg_result_error_field($result, PGSQL_DIAG_SOURCE_FILE);\n    pg_result_error_field($result, PGSQL_DIAG_SOURCE_LINE);\n    pg_result_error_field($result, PGSQL_DIAG_SOURCE_FUNCTION);\n}\npg_num_rows(pg_query($db, \"SELECT * FROM \".$table_name.\";\"));\npg_num_fields(pg_query($db, \"SELECT * FROM \".$table_name.\";\"));\npg_field_name($result, 0);\npg_field_num($result, $field_name);\npg_field_size($result, 0);\npg_field_type($result, 0);\npg_field_prtlen($result, 0);\npg_field_is_null($result, 0);\ntry {\n    pg_field_is_null($result, -1);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_is_null($result, 3);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_is_null($result, \"unknown\");\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_name($result, -1);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_name($result, 3);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_table($result, -1);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    pg_field_table($result, 3);\n} catch (ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n$result = pg_query($db, \"INSERT INTO \".$table_name.\" VALUES (9999, 'ABC');\");\npg_last_oid($result);\nvar_dump(pg_fetch_all($result));\npg_free_result($result);\npg_close($db);\necho \"OK\";\n?>")).toMatchSnapshot();
  });
});
