// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/attributes/gh8421.phpt
  it("Bug GH-8421: Attributes that target functions are not valid for anonymous functions defined within a method", function () {
    expect(parser.parseCode("<?php\n#[Attribute(Attribute::TARGET_FUNCTION)]\nclass FunctionAttribute\n{\n    public int $number = 1;\n}\n$globalClosure = #[FunctionAttribute]\nfn() => true;\n$globalStaticClosure = #[FunctionAttribute]\nstatic fn() => true;\nclass ClosureHolder\n{\n    public function getClosureDefinedInScope(): Closure\n    {\n        return #[FunctionAttribute]\n        fn() => true;\n    }\n    public function getStaticClosureDefinedInScope(): Closure\n    {\n        return #[FunctionAttribute]\n        static fn() => true;\n    }\n    public static function getClosureDefinedInScopeStatically(): Closure\n    {\n        return #[FunctionAttribute]\n        fn() => true;\n    }\n    public static function getStaticClosureDefinedInScopeStatically(): Closure\n    {\n        return #[FunctionAttribute]\n        static fn() => true;\n    }\n}\nvar_dump((new ReflectionFunction($globalClosure))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\nvar_dump((new ReflectionFunction($globalStaticClosure))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\nvar_dump((new ReflectionFunction(ClosureHolder::getClosureDefinedInScopeStatically()))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\nvar_dump((new ReflectionFunction(ClosureHolder::getStaticClosureDefinedInScopeStatically()))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\n$holder = new ClosureHolder;\nvar_dump((new ReflectionFunction($holder->getClosureDefinedInScope()))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\nvar_dump((new ReflectionFunction($holder->getStaticClosureDefinedInScope()))->getAttributes(FunctionAttribute::class)[0]->newInstance()->number);\n?>")).toMatchSnapshot();
  });
});
