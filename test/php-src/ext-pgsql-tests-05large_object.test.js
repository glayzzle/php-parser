// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pgsql/tests/05large_object.phpt
  it("PostgreSQL large object", function () {
    expect(parser.parseCode("<?php\ninclude('config.inc');\n$db = pg_connect($conn_str);\necho \"create/write/close LO\\n\";\npg_exec ($db, \"begin\");\n$oid = pg_lo_create ($db);\nif (!$oid) echo (\"pg_lo_create() error\\n\");\n$handle = pg_lo_open ($db, $oid, \"w\");\nif (!$handle) echo (\"pg_lo_open() error\\n\");\npg_lo_write ($handle, \"large object data\");\npg_lo_close ($handle);\npg_exec ($db, \"commit\");\necho \"open/read/tell/seek/close LO\\n\";\npg_exec ($db, \"begin\");\n$handle = pg_lo_open ($db, $oid, \"w\");\nvar_dump(pg_lo_read($handle, 5));\nvar_dump(pg_lo_tell($handle));\nvar_dump(pg_lo_seek($handle, 2, /* PGSQL_SEEK_CUR */)); // This is the default so move cursor from 5\nvar_dump(pg_lo_read($handle, 100)); // Read to the end because chunk is larger then remaining content\nvar_dump(pg_lo_tell($handle));\nvar_dump(pg_lo_seek($handle, 0, PGSQL_SEEK_SET)); /* Reset cursor to beginning */\nvar_dump(pg_lo_read($handle));\nvar_dump(pg_lo_seek($handle, -4, PGSQL_SEEK_END)); /* Seek from the end */\nvar_dump(pg_lo_read($handle));\npg_lo_close($handle);\npg_exec ($db, \"commit\");\necho \"open/read_all/close LO\\n\";\npg_exec ($db, \"begin\");\n$handle = pg_lo_open ($db, $oid, \"w\");\n/* Will write to stdout */\n$bytesWritten = pg_lo_read_all($handle);\necho \"\\n\";\nvar_dump($bytesWritten);\nif (pg_last_error($db)) echo \"pg_lo_read_all() error\\n\".pg_last_error();\npg_lo_close($handle);\npg_exec ($db, \"commit\");\necho \"unlink LO\\n\";\npg_exec ($db, \"begin\");\npg_lo_unlink($db, $oid) or print(\"pg_lo_unlink() error 1\\n\");\npg_exec ($db, \"commit\");\n// more pg_lo_unlink() tests\necho \"Test without connection\\n\";\npg_exec ($db, \"begin\");\n$oid = pg_lo_create ($db) or print(\"pg_lo_create() error\\n\");\npg_lo_unlink($oid) or print(\"pg_lo_unlink() error 2\\n\");\npg_exec ($db, \"commit\");\necho \"Test with string oid value\\n\";\npg_exec ($db, \"begin\");\n$oid = pg_lo_create ($db) or print(\"pg_lo_create() error\\n\");\npg_lo_unlink($db, (string)$oid) or print(\"pg_lo_unlink() error 3\\n\");\npg_exec ($db, \"commit\");\necho \"import/export LO\\n\";\n$path = __DIR__ . '/';\npg_query($db, 'begin');\n$oid = pg_lo_import($db, $path . 'php.gif');\npg_query($db, 'commit');\npg_query($db, 'begin');\n@unlink($path . 'php.gif.exported');\npg_lo_export($db, $oid, $path . 'php.gif.exported');\nif (!file_exists($path . 'php.gif.exported')) {\n    echo \"Export failed\\n\";\n}\n@unlink($path . 'php.gif.exported');\npg_query($db, 'commit');\n/* invalid OID values */\ntry {\n    pg_lo_create(-15);\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    pg_lo_create($db, -15);\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    pg_lo_create('giberrish');\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    pg_lo_create($db, 'giberrish');\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\necho \"OK\";\n?>")).toMatchSnapshot();
  });
});
