// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_pgsql/tests/bug72294.phpt
  it("Bug #72294 Segmentation fault/invalid pointer in connection with pgsql_stmt_dtor", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\nfunction handleError($errno, $errstr, $errfile, $errline)\n{\n    if (!($errno & error_reporting())) {\n        return false;\n    }\n    throw new RuntimeException( $errstr, $errno );\n}\nabstract class PHPUnit_Framework_TestCase\n{\n    private $name = null;\n    private $result;\n    public function run(PHPUnit_Framework_TestResult $result = null)\n    {\n        $result->run($this);\n    }\n    public function runBare()\n    {\n        $class  = new ReflectionClass($this);\n        $method = $class->getMethod($this->name);\n        $method->invoke($this);\n        if( $x ) {\n        }\n    }\n    public function setName($name)\n    {\n        $this->name = $name;\n    }\n}\nclass PHPUnit_Framework_TestFailure\n{\n    private $testName;\n    protected $failedTest;\n    protected $thrownException;\n    public function __construct( $failedTest, $t)\n    {\n        if ($failedTest instanceof PHPUnit_Framework_SelfDescribing) {\n            $this->testName = $failedTest->toString();\n        } else {\n            $this->testName = get_class($failedTest);\n        }\n        $this->thrownException = $t;\n    }\n}\nclass PHPUnit_Framework_TestResult\n{\n    public function run( $test)\n    {\n        $error      = false;\n        $oldErrorHandler = set_error_handler(\n            'handleError',\n            E_ALL\n        );\n        try {\n            $test->runBare();\n        } catch (RuntimeException $e) {\n            $error = true;\n        }\n        restore_error_handler();\n        if ($error === true) {\n            $this->errors[] = new PHPUnit_Framework_TestFailure($test, $e);\n        }\n    }\n}\n$result = new PHPUnit_Framework_TestResult();\nclass PreparedStatementCache\n{\n    private $cached_statements = array();\n    public function prepare( $pdo, $sql )\n    {\n        //return $pdo->prepare( $sql );\n        $this->cached_statements[$sql] = $pdo->prepare( $sql );\n    return $this->cached_statements[$sql];\n    }\n}\nclass DatabaseTest extends PHPUnit_Framework_TestCase\n{\n    public function testIt()\n    {\n    $pdo = PDOTest::test_factory(__DIR__ . '/common.phpt');\n    $prepared_statement_cache = new PreparedStatementCache( $pdo );\n    for( $i = 1; $i <= 300; ++$i ) {\n        $statement = $prepared_statement_cache->prepare( $pdo,  <<<SQL\n                SELECT $i;\nSQL\n        );\n            $statement->execute();\n    }\n    }\n    public function test_construct()\n    {\n    $pdo = PDOTest::test_factory(__DIR__ . '/common.phpt');\n    $pdo->exec( 'CREATE TEMPORARY TABLE temp_table ( test_column INT NOT NULL );' );\n    $this->cache = new PreparedStatementCache( $pdo );\n    $statement = $this->cache->prepare( $pdo, 'SELECT * FROM temp_table WHERE test_column > 0' );\n    $statement->execute();\n    }\n}\n$test = new DatabaseTest();\n$test->setName( 'testIt' );\n$test->run( $result );\n$test->setName( 'test_construct' );\n$test->run( $result );\n?>\n==NOCRASH==")).toMatchSnapshot();
  });
});
