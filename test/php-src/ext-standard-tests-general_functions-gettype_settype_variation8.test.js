// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/gettype_settype_variation8.phpt
  it("Test gettype() & settype() functions : usage variations", function () {
    expect(parser.parseCode("<?php\n/* Test usage variation of gettype() and settype() functions:\n         settype() to string type.\n   Set type of the data to \"string\" and verify using gettype\n   Following are performed in the listed sequence:\n     get the current type of the variable\n     set the type of the variable to string type\n     dump the variable to see its new data\n     get the new type of the variable\n*/\n/* function to handle catchable errors */\nfunction foo($errno, $errstr, $errfile, $errline) {\n//\tvar_dump($errstr);\n   // print error no and error string\n   echo \"$errno: $errstr\\n\";\n}\n//set the error handler, this is required as\n// settype() would fail with catachable fatal error\nset_error_handler(\"foo\");\n$var1 = \"another string\";\n$var2 = array(2,3,4);\nclass point\n{\n  var $x;\n  var $y;\n  function __construct($x, $y) {\n     $this->x = $x;\n     $this->y = $y;\n  }\n  function __toString() {\n     return \"ObjectPoint\";\n  }\n}\n$var_values = array (\n  /* nulls */\n  null,\n  /* boolean */\n  FALSE,\n  TRUE,\n  true,\n  /* strings */\n  \"\\xFF\",\n  \"\\x66\",\n  \"\\0123\",\n  \"\",\n  '',\n  \" \",\n  ' ',\n  /* numerics in the form of string */\n  '10',\n  \"10\",\n  \"10string\",\n  '10string',\n  \"1\",\n  \"-1\",\n  \"1e2\",\n  \" 1\",\n  \"2974394749328742328432\",\n  \"-1e-2\",\n  '1',\n  '-1',\n  '1e2',\n  ' 1',\n  '2974394749328742328432',\n  '-1e-2',\n  \"0xff\",\n  '0x55',\n  '0XA55',\n  '0X123',\n  \"0123\",\n  '0123',\n  \"-0123\",\n  \"+0123\",\n  '-0123',\n  '+0123',\n  \"-0x80001\", // invalid numerics as its prefix with sign or have decimal points\n  \"+0x80001\",\n  \"-0x80001.5\",\n  \"0x80001.5\",\n  \"@$%#$%^$%^&^\",\n  /* arrays */\n  array(),\n  array(NULL),\n  array(1,2,3,4),\n  array(1 => \"one\", 2 => \"two\", \"3\" => \"three\", \"four\" => 4),\n  array(1.5, 2.4, 6.5e6),\n  /* integers */\n  -2147483648, // max -ne int value\n  2147483647,\n  2147483649,\n  1232147483649,\n  0x55,\n  0xF674593039, // a hex value > than max int\n  -0X558F,\n  0555,\n  -0555,\n  02224242434343152, // an octal value > than max int\n  /* floats */\n  1e5,\n  -1e5,\n  1E5,\n  -1E5,\n  -1.5,\n  .5,\n  -.5,\n  .5e6,\n  -.5e6,\n  -.5e-6,\n  .5e+6,\n  -.5e+6,\n  .512E6,\n  -.512E6,\n  .512E-6,\n  +.512E-6,\n  .512E+6,\n  -.512E+6,\n  new point(NULL, NULL),\n  new point(2.5, 40.5),\n  new point(0, 0),\n);\n/* test conversion to string type */\n$type = \"string\";\necho \"\\n*** Testing gettype() & settype() functions : usage variations ***\\n\";\necho \"\\n-- Setting type of data to $type --\\n\";\n$loop_count = 1;\nforeach ($var_values as $var) {\n  echo \"-- Iteration $loop_count --\\n\"; $loop_count++;\n  // get the current data type\n  var_dump( gettype($var) );\n  // convert it to null\n  var_dump( settype($var, $type) );\n  // dump the converted data\n  var_dump( $var );\n  // check the new type after conversion\n  var_dump( gettype($var) );\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
