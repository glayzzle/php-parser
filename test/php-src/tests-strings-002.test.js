// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/strings/002.phpt
  it("Formatted print functions", function () {
    expect(parser.parseCode("<?php\n$fp = fopen(\"php://stdout\", \"w\") or die(\"Bug!!\");\n$x = fprintf($fp, \"fprintf test 1:%.5s\", \"abcdefghij\");\necho \"\\n\";\nvar_dump($x);\nprintf(\"printf test 1:%s\\n\", \"simple string\");\nprintf(\"printf test 2:%d\\n\", 42);\nprintf(\"printf test 3:%f\\n\", 10.0/3);\nprintf(\"printf test 4:%.10f\\n\", 10.0/3);\nprintf(\"printf test 5:%-10.2f\\n\", 2.5);\nprintf(\"printf test 6:%-010.2f\\n\", 2.5);\nprintf(\"printf test 7:%010.2f\\n\", 2.5);\nprintf(\"printf test 8:<%20s>\\n\", \"foo\");\nprintf(\"printf test 9:<%-20s>\\n\", \"bar\");\nprintf(\"printf test 10: 123456789012345\\n\");\nprintf(\"printf test 10:<%15s>\\n\", \"hoyesterettsjustitiarius\");\nprintf(\"printf test 11: 123456789012345678901234567890\\n\");\nprintf(\"printf test 11:<%30s>\\n\", \"hoyesterettsjustitiarius\");\nprintf(\"printf test 12:%5.2f\\n\", -12.34);\nprintf(\"printf test 13:%5d\\n\", -12);\nprintf(\"printf test 14:%c\\n\", 64);\nprintf(\"printf test 15:%b\\n\", 170);\nprintf(\"printf test 16:%x\\n\", 170);\nprintf(\"printf test 17:%X\\n\", 170);\nprintf(\"printf test 18:%16b\\n\", 170);\nprintf(\"printf test 19:%16x\\n\", 170);\nprintf(\"printf test 20:%16X\\n\", 170);\nprintf(\"printf test 21:%016b\\n\", 170);\nprintf(\"printf test 22:%016x\\n\", 170);\nprintf(\"printf test 23:%016X\\n\", 170);\nprintf(\"printf test 24:%.5s\\n\", \"abcdefghij\");\nprintf(\"printf test 25:%-2s\\n\", \"gazonk\");\nprintf(\"printf test 26:%2\\$d %1\\$d\\n\", 1, 2);\nprintf(\"printf test 27:%3\\$d %d %d\\n\", 1, 2, 3);\nprintf(\"printf test 28:%2\\$02d %1\\$2d\\n\", 1, 2);\nprintf(\"printf test 29:%2\\$-2d %1\\$2d\\n\", 1, 2);\ntry {\n    print(\"printf test 30:\"); printf(\"%0\\$s\", 1); print(\"x\\n\");\n} catch(\\ValueError $e) {\n    print('Error found: '.$e->getMessage().\"\\n\");\n}\nvprintf(\"vprintf test 1:%2\\$-2d %1\\$2d\\n\", array(1, 2));\n?>")).toMatchSnapshot();
  });
});
