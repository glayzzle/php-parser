// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_variation9.phpt
  it("Test array_unshift() function : usage variations - heredoc strings for 'var' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_unshift() by passing different\n * heredoc strings for $var argument that is prepended to the array\n * passed through $array argument\n*/\necho \"*** Testing array_unshift() : heredoc strings for \\$var argument ***\\n\";\n// heredoc with empty value\n$empty_string = <<<EOT\nEOT;\n// heredoc with blank line\n$blank_line = <<<EOT\nEOT;\n// heredoc with multiline string\n$multiline_string = <<<EOT\nhello world\nThe big brown fox jumped over;\nthe lazy dog\nThis is a double quoted string\nEOT;\n// heredoc with different whitespaces\n$diff_whitespaces = <<<EOT\nhello\\r world\\t\n1111\\t\\t != 2222\\v\\v\nheredoc\\ndouble quoted string. with\\vdifferent\\fwhite\\vspaces\nEOT;\n// heredoc with numeric values\n$numeric_string = <<<EOT\n11 < 12. 123 >22\n2222 != 1111.\\t 0000 = 0000\\n\nEOT;\n// heredoc with quote chars & slash\n$quote_char_string = <<<EOT\nThis's a string with quotes:\n\"strings in double quote\";\n'strings in single quote';\nthis\\line is single quoted /with\\slashes\nEOT;\n// array to be passed to $array argument\n$array = array('f' => \"first\", \"s\" => 'second', 1, 2.222);\n// different heredoc strings to be passed to $var argument\n$vars = array(\n  $empty_string,\n  $blank_line,\n  $multiline_string,\n  $diff_whitespaces,\n  $numeric_string,\n  $quote_char_string\n);\n// loop through the various elements of $arrays to test array_unshift()\n$iterator = 1;\nforeach($vars as $var) {\n  echo \"-- Iteration $iterator --\\n\";\n  $temp_array = $array;  // assign $array to another temporary $temp_array\n  /* with default argument */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  var_dump( array_unshift($temp_array, $var) );\n  // dump the resulting array\n  var_dump($temp_array);\n  /* with all possible arguments */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var, \"hello\", 'world') );\n  // dump the resulting array\n  var_dump($temp_array);\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
