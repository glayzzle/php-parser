// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/falsetoarray.phpt
  it("Autovivification of false to array", function () {
    expect(parser.parseCode("<?php\n// control\n$undef[] = 42;\n// control\n$null = null;\n$null[] = 42;\n// control\n$false = false;\n$false = [42];\nprint \"[001]\\n\";\n$false = false;\n$false[] = 42;\nprint \"[002]\\n\";\n$ref = false;\n$ref2 = &$ref;\n$ref2[] = 42;\necho \"\\nFunction\\n\";\nfunction ffalse(bool $a, ?bool $b, &$c, ...$d) {\n    print \"[003]\\n\";\n    $a[] = 42;\n    print \"[004]\\n\";\n    $b[] = 42;\n    print \"[005]\\n\";\n    $c[] = 42;\n    print \"[006]\\n\";\n    $d[0][] = 42;\n}\n$ref = false;\nffalse(false, false, $ref, false);\necho \"\\nProperties\\n\";\nclass Cfalse {\n    public $def;\n    private $untyped = false;\n    static private $st = false;\n    static private $st2 = false;\n    static private $st3 = false;\n    public function __construct(public $pu, private $pr = false) {\n        print \"[007]\\n\";\n        $this->def = false;\n        $this->def[] = 42;\n        print \"[008]\\n\";\n        $this->untyped[] = 42;\n        print \"[009]\\n\";\n        self::$st[] = 42;\n        print \"[010]\\n\";\n        static::$st2[] = 42;\n        print \"[011]\\n\";\n        $this::$st3[] = 42;\n        print \"[012]\\n\";\n        $this->pu[] = 42;\n        print \"[013]\\n\";\n        $this->pr[] = 42;\n    }\n}\nnew Cfalse(false, false);\necho \"\\nDestructuring\\n\";\nprint \"[014]\\n\";\n$add = false;\nforeach ([42] as $add[]);\nprint \"[015]\\n\";\n$arr = false;\n[$arr[]] = [42];\nprint \"[016]\\n\";\n$arr = [ 0 => [ 0 => false ] ];\n$arr[0][0][0][] = 42;\nprint \"[017]\\n\";\n$false = false;\n$r42 = 42;\n$false[] &= $r42;\n$false = false;\n$false2 = false;\n$false3 = false;\nfunction &g(){\n    print \"[018]\\n\";\n    global $false;\n    $false[] = 42;\n    $var1 = false;\n    $GLOBALS[\"false2\"] =& $var1;\n    print \"[019]\\n\";\n    $GLOBALS[\"false3\"][] = 42;\n    print \"[020]\\n\";\n    static $f2 = false;\n    return $f2;\n}\n$false = &g();\n$false[] = 42;\nprint \"[021]\\n\";\n$false2[] = 42;\nprint \"[022]\\n\";\n$a = false;\nunset($a[0][0]);\nprint \"[023]\\n\";\n$a = false;\nunset($a[0]);\n?>")).toMatchSnapshot();
  });
});
