// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_class_mysqli_result_interface.phpt
  it("Interface of the class mysqli_result", function () {
    expect(parser.parseCode("<?php\n    require('connect.inc');\n    require('table.inc');\n    $mysqli = new my_mysqli($host, $user, $passwd, $db, $port, $socket);\n    $mysqli_result = $mysqli->query('SELECT * FROM test');\n    $row = $mysqli_result->fetch_row();\n    $link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket);\n    $res = mysqli_query($link, 'SELECT * FROM test');\n    assert(mysqli_fetch_row($res) === $row);\n    printf(\"Parent class:\\n\");\n    var_dump(get_parent_class($mysqli_result));\n    printf(\"\\nMethods:\\n\");\n    $methods = get_class_methods($mysqli_result);\n    $expected_methods = array(\n        '__construct'           => true,\n        'close'                 => true,\n        'data_seek'             => true,\n        'fetch_all'             => true,\n        'fetch_array'           => true,\n        'fetch_assoc'           => true,\n        'fetch_field'           => true,\n        'fetch_field_direct'    => true,\n        'fetch_fields'          => true,\n        'fetch_object'          => true,\n        'fetch_row'             => true,\n        'fetch_column'          => true,\n        'field_seek'            => true,\n        'free'                  => true,\n        'free_result'           => true,\n        'getIterator'           => true,\n    );\n    foreach ($methods as $k => $method) {\n        if (isset($expected_methods[$method])) {\n            unset($expected_methods[$method]);\n            unset($methods[$k]);\n        }\n        if ($method == 'mysqli_result') {\n            // get_class_method reports different constructor names\n            unset($expected_methods['__construct']);\n            unset($methods[$k]);\n        }\n    }\n    if (!empty($expected_methods)) {\n        printf(\"Dumping list of missing methods.\\n\");\n        var_dump($expected_methods);\n    }\n    if (!empty($methods)) {\n        printf(\"Dumping list of unexpected methods.\\n\");\n        var_dump($methods);\n    }\n    if (empty($expected_methods) && empty($methods))\n        printf(\"ok\\n\");\n    printf(\"\\nClass variables:\\n\");\n    $variables = array_keys(get_class_vars(get_class($mysqli_result)));\n    sort($variables);\n    foreach ($variables as $k => $var)\n        printf(\"%s\\n\", $var);\n    printf(\"\\nObject variables:\\n\");\n    $variables = array_keys(get_object_vars($mysqli_result));\n    foreach ($variables as $k => $var)\n        printf(\"%s\\n\", $var);\n    printf(\"\\nMagic, magic properties:\\n\");\n    assert(($tmp = mysqli_field_tell($res)) === $mysqli_result->current_field);\n    printf(\"mysqli_result->current_field = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli_result->current_field, gettype($mysqli_result->current_field),\n        $tmp, gettype($tmp));\n    assert(($tmp = mysqli_field_count($link)) === $mysqli_result->field_count);\n    printf(\"mysqli_result->field_count = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli_result->field_count, gettype($mysqli_result->field_count),\n        $tmp, gettype($tmp));\n    assert(($tmp = mysqli_fetch_lengths($res)) === $mysqli_result->lengths);\n    printf(\"mysqli_result->lengths -> '%s'/%s ('%s'/%s)\\n\",\n        ((is_array($mysqli_result->lengths)) ? implode(' ', $mysqli_result->lengths) : 'n/a'),\n        gettype($mysqli_result->lengths),\n        ((is_array($tmp)) ? implode(' ', $tmp) : 'n/a'),\n        gettype($tmp));\n    assert(($tmp = mysqli_num_rows($res)) === $mysqli_result->num_rows);\n    printf(\"mysqli_result->num_rows = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli_result->num_rows, gettype($mysqli_result->num_rows),\n        $tmp, gettype($tmp));\n    assert(in_array($mysqli_result->type, array(MYSQLI_STORE_RESULT, MYSQLI_USE_RESULT)));\n    printf(\"mysqli_result->type = '%s'/%s\\n\",\n        ((MYSQLI_STORE_RESULT == $mysqli_result->type) ? 'store' : 'use'),\n        gettype($mysqli_result->type));\n    printf(\"\\nAccess to undefined properties:\\n\");\n    printf(\"mysqli_result->unknown = '%s'\\n\", @$mysqli_result->unknown);\n    printf(\"\\nConstructor:\\n\");\n    if (!is_object($res = new mysqli_result($link)))\n        printf(\"[001] Expecting object/mysqli_result got %s/%s\\n\", gettye($res), $res);\n    try {\n        $res->num_rows;\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    if (!mysqli_query($link, \"SELECT id FROM test ORDER BY id\"))\n        printf(\"[003] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!is_object($res = new mysqli_result($link)))\n        printf(\"[004] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!is_object($res = new mysqli_result($link, MYSQLI_STORE_RESULT)))\n        printf(\"[005] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!is_object($res = new mysqli_result($link, MYSQLI_USE_RESULT)))\n        printf(\"[006] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    $valid = array(MYSQLI_STORE_RESULT, MYSQLI_USE_RESULT);\n    do {\n        $mode = mt_rand(-1000, 1000);\n    } while (in_array($mode, $valid));\n    if ($TEST_EXPERIMENTAL) {\n        ob_start();\n        if (!is_object($res = new mysqli_result($link, $mode)))\n            printf(\"[008] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        $content = ob_get_contents();\n        ob_end_clean();\n        if (!stristr($content, 'Invalid value for resultmode'))\n            printf(\"[009] Expecting warning because of invalid resultmode\\n\");\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
