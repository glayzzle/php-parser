// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/empty_str_offset.phpt
  it("Testing empty() with string offsets", function () {
    expect(parser.parseCode("<?php\nprint \"- empty ---\\n\";\n$str = \"test0123\";\nvar_dump(empty($str[-1]));\nvar_dump(empty($str[-10]));\nvar_dump(empty($str[-4])); // 0\nvar_dump(empty($str[0]));\nvar_dump(empty($str[1]));\nvar_dump(empty($str[4])); // 0\nvar_dump(empty($str[5])); // 1\nvar_dump(empty($str[8]));\nvar_dump(empty($str[10000]));\n// non-numeric offsets\nprint \"- string literal ---\\n\";\nvar_dump(empty($str['-1'])); // 3\nvar_dump(empty($str['-10']));\nvar_dump(empty($str['0']));\nvar_dump(empty($str['1']));\nvar_dump(empty($str['4'])); // 0\nvar_dump(empty($str['1.5']));\nvar_dump(empty($str['good']));\nvar_dump(empty($str['3 and a half']));\nprint \"- string variable ---\\n\";\nvar_dump(empty($str[$key = '-1'])); // 3\nvar_dump(empty($str[$key = '-10']));\nvar_dump(empty($str[$key = '0']));\nvar_dump(empty($str[$key = '1']));\nvar_dump(empty($str[$key = '4'])); // 0\nvar_dump(empty($str[$key = '1.5']));\nvar_dump(empty($str[$key = 'good']));\nvar_dump(empty($str[$key = '3 and a half']));\nprint \"- bool ---\\n\";\nvar_dump(empty($str[true]));\nvar_dump(empty($str[false]));\nvar_dump(empty($str[false][true]));\nprint \"- null ---\\n\";\nvar_dump(empty($str[null]));\nprint \"- double ---\\n\";\nvar_dump(empty($str[-1.1]));\nvar_dump(empty($str[-10.5]));\nvar_dump(empty($str[-4.1]));\nvar_dump(empty($str[-0.8]));\nvar_dump(empty($str[-0.1]));\nvar_dump(empty($str[0.2]));\nvar_dump(empty($str[0.9]));\nvar_dump(empty($str[M_PI]));\nvar_dump(empty($str[100.5001]));\nprint \"- array ---\\n\";\nvar_dump(empty($str[array()]));\nvar_dump(empty($str[array(1,2,3)]));\nprint \"- object ---\\n\";\nvar_dump(empty($str[new stdClass()]));\nprint \"- resource ---\\n\";\n$f = fopen(__FILE__, 'r');\nvar_dump(empty($str[$f]));\nprint \"done\\n\";\n?>")).toMatchSnapshot();
  });
});
