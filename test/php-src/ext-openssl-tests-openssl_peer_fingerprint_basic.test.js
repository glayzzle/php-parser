// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/openssl_peer_fingerprint_basic.phpt
  it("Testing peer fingerprint on connection", function () {
    expect(parser.parseCode("<?php\n$certFile = __DIR__ . DIRECTORY_SEPARATOR . 'openssl_peer_fingerprint_basic.pem.tmp';\n$cacertFile = __DIR__ . DIRECTORY_SEPARATOR . 'openssl_peer_fingerprint_basic-ca.pem.tmp';\n$serverCode = <<<'CODE'\n    $serverUri = \"ssl://127.0.0.1:64321\";\n    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;\n    $serverCtx = stream_context_create(['ssl' => [\n        'local_cert' => '%s'\n    ]]);\n    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);\n    phpt_notify();\n    @stream_socket_accept($server, 1);\n    @stream_socket_accept($server, 1);\nCODE;\n$serverCode = sprintf($serverCode, $certFile);\n$peerName = 'openssl_peer_fingerprint_basic';\n$clientCode = <<<'CODE'\n    $serverUri = \"ssl://127.0.0.1:64321\";\n    $clientFlags = STREAM_CLIENT_CONNECT;\n    $clientCtx = stream_context_create(['ssl' => [\n        'verify_peer'       => true,\n        'cafile'            => '%s',\n        'capture_peer_cert' => true,\n        'peer_name'         => '%s',\n    ]]);\n    phpt_wait();\n    stream_context_set_option($clientCtx, 'ssl', 'peer_fingerprint', '%s');\n    var_dump(stream_socket_client($serverUri, $errno, $errstr, 2, $clientFlags, $clientCtx));\n    stream_context_set_option($clientCtx, 'ssl', 'peer_fingerprint', [\n        'sha256' => '%s',\n    ]);\n    var_dump(stream_socket_client($serverUri, $errno, $errstr, 2, $clientFlags, $clientCtx));\nCODE;\ninclude 'CertificateGenerator.inc';\n$certificateGenerator = new CertificateGenerator();\n$certificateGenerator->saveCaCert($cacertFile);\n$certificateGenerator->saveNewCertAsFileWithKey($peerName, $certFile);\n$actualMd5 = $certificateGenerator->getCertDigest('md5');\n$lastCharacter = substr($actualMd5, -1, 1);\n$brokenLastCharacter = dechex(hexdec($lastCharacter) ^ 1);\n$brokenMd5 = substr($actualMd5, 0, -1) . $brokenLastCharacter;\n$actualSha256 = $certificateGenerator->getCertDigest('sha256');\n$clientCode = sprintf($clientCode, $cacertFile, $peerName, $brokenMd5, $actualSha256);\ninclude 'ServerClientTestCase.inc';\nServerClientTestCase::getInstance()->run($clientCode, $serverCode);\n?>")).toMatchSnapshot();
  });
});
