// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/date/tests/rfc-datetime_and_daylight_saving_time-type3-bd2.phpt
  it("RFC: DateTime and Daylight Saving Time Transitions (zone type 3, bd2)", function () {
    expect(parser.parseCode("<?php\ndate_default_timezone_set('America/New_York');\n$date_format = 'Y-m-d H:i:s T e';\n$interval_format = 'P%dDT%hH';\n/*\n * For backward transitions, must create objects with zone type 2\n * where specifying Daylight or Standard time is required\n * then converting them to zone type 3.\n */\n$tz = new DateTimeZone('America/New_York');\n/*\n * Backward Transitions, diff().\n */\n$end   = new DateTime('2010-11-07 01:00:00 EST');\n$end->setTimeZone($tz);\n$start = new DateTime('2010-11-07 01:59:59');\necho 'bd0 ' . $end->format($date_format) . ' - ' . $start->format($date_format)\n    . ' = ' . $start->diff($end)->format('P%dDT%hH%iM%sS') . \"\\n\";\n$end   = new DateTime('2010-11-07 01:30:00 EST');\n$end->setTimeZone($tz);\n$start = new DateTime('2010-11-06 04:30:00');\necho 'bd5 ' . $end->format($date_format) . ' - ' . $start->format($date_format)\n    . ' = ' . $start->diff($end)->format($interval_format) . \"\\n\";\n$end   = new DateTime('2010-11-07 01:30:00 EDT');\n$end->setTimeZone($tz);\n$start = new DateTime('2010-11-06 04:30:00');\necho 'bd6 ' . $end->format($date_format) . ' - ' . $start->format($date_format)\n    . ' = ' . $start->diff($end)->format($interval_format) . \"\\n\";\n$end   = new DateTime('2010-11-07 01:00:00 EST');\n$end->setTimeZone($tz);\n$start = new DateTime('2010-11-06 01:00:00');\necho 'bd8a ' . $end->format($date_format) . ' - ' . $start->format($date_format)\n    . ' = ' . $start->diff($end)->format($interval_format) . \"\\n\";\n$end   = new DateTime('2010-11-07 01:00:00 EDT');\n$end->setTimeZone($tz);\n$start = new DateTime('2010-11-06 01:00:00');\necho 'bd8b ' . $end->format($date_format) . ' - ' . $start->format($date_format)\n    . ' = ' . $start->diff($end)->format($interval_format) . \"\\n\";\necho \"\\n\";\n?>")).toMatchSnapshot();
  });
});
