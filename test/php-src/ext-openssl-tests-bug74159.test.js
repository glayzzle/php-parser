// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/bug74159.phpt
  it("Bug #74159: Writing a large buffer to non-blocking encrypted streams fails", function () {
    expect(parser.parseCode("<?php\n$certFile = __DIR__ . DIRECTORY_SEPARATOR . 'bug74159.pem.tmp';\n$cacertFile = __DIR__ . DIRECTORY_SEPARATOR . 'bug74159-ca.pem.tmp';\n// the server code is doing many readings in a short interval which is\n// not really reliable on more powerful machine but cover different\n// scenarios which might be useful. More reliable test is bug72333.phpt\n$serverCode = <<<'CODE'\n    $serverUri = \"ssl://127.0.0.1:10012\";\n    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;\n    $serverCtx = stream_context_create(['ssl' => [\n        'local_cert' => '%s',\n        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_SERVER,\n    ]]);\n    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);\n    phpt_notify();\n    $client = stream_socket_accept($server, 1);\n    if (!$client) {\n        exit();\n    }\n    $data = '';\n    while (strlen($data) < 0xfffff) {\n        $buffer = fread($client, 8192);\n        if (empty($buffer)) {\n            exit();\n        }\n        $data .= $buffer;\n        usleep(100);\n    }\n    fclose($client);\nCODE;\n$serverCode = sprintf($serverCode, $certFile);\n$peerName = 'bug74159';\n$clientCode = <<<'CODE'\n    function streamRead($stream) : int {\n        return strlen(fread($stream, 8192));\n    }\n    function streamWrite($stream, $data) : int {\n        return fwrite($stream, $data);\n    }\n    function waitForWrite(...$streams) : bool {\n        $read = null;\n        $except = null;\n        while($streams && !($n = stream_select($read, $streams, $except, 1)));\n        return $n > 0;\n    }\n    function waitForRead(...$streams) : bool {\n        $write = null;\n        $except = null;\n        while ($streams && !($n = stream_select($streams, $write, $except, 1)));\n        return $n > 0;\n    }\n    set_error_handler(function ($errno, $errstr) {\n        exit(\"$errstr\\n\");\n    });\n    $serverUri = \"tcp://127.0.0.1:10012\";\n    $clientFlags = STREAM_CLIENT_CONNECT;\n    $clientCtx = stream_context_create(['ssl' => [\n        'verify_peer' => true,\n        'cafile' => '%s',\n        'peer_name' => '%s',\n    ]]);\n    phpt_wait();\n    $fp = stream_socket_client($serverUri, $errno, $errstr, 1, $clientFlags, $clientCtx);\n    stream_set_blocking($fp, false);\n    while (0 === ($n = stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT)));\n    $data = str_repeat(\"a\", 0xfffff);\n    $written = 0;\n    $total = $written;\n    while(!empty($data)) {\n        $written = streamWrite($fp, $data);\n        $total += $written;\n        $data = substr($data, $written);\n        waitForWrite($fp);\n    }\n    printf(\"Written %%d bytes\\n\", $total);\n    while(waitForRead($fp)) {\n        streamRead($fp);\n        if (feof($fp)) {\n            break;\n        }\n    }\n    exit(\"DONE\\n\");\nCODE;\n$clientCode = sprintf($clientCode, $cacertFile, $peerName);\ninclude 'CertificateGenerator.inc';\n$certificateGenerator = new CertificateGenerator();\n$certificateGenerator->saveCaCert($cacertFile);\n$certificateGenerator->saveNewCertAsFileWithKey($peerName, $certFile);\ninclude 'ServerClientTestCase.inc';\nServerClientTestCase::getInstance()->run($clientCode, $serverCode);\n?>")).toMatchSnapshot();
  });
});
