// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_ps_select_union.phpt
  it("Prepared Statements and SELECT UNION", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require_once(\"table.inc\");\n    // Regular (non-prepared) queries\n    print \"Using CAST('somestring' AS CHAR)...\\n\";\n    if (!($res = $link->query(\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)\")))\n        printf(\"[001] [%d] %s\\n\", $link->errno, $link->error);\n    $data = array();\n    while ($row = $res->fetch_assoc()) {\n        $data[] = $row['column1'];\n        var_dump($row['column1']);\n    }\n    $res->free();\n    // Prepared Statements\n    if (!($stmt = $link->prepare(\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)\")))\n        printf(\"[002] [%d] %s\\n\", $link->errno, $link->error);\n    $column1 = null;\n    if (!$stmt->execute() || !$stmt->bind_result($column1))\n        printf(\"[003] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $index = 0;\n    while ($stmt->fetch()) {\n        if ($data[$index] != $column1) {\n            printf(\"[004] Row %d, expecting %s/%s got %s/%s\\n\",\n                $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n        }\n        $index++;\n    }\n    $stmt->close();\n    if ($IS_MYSQLND) {\n        /*\n        Advantage mysqlnd -\n        The metadata mysqlnd has available after prepare is better than\n        the one made available by the MySQL Client Library (libmysql).\n        \"libmysql\" will give wrong results and that is OK -\n        http://bugs.mysql.com/bug.php?id=47483\n        */\n        if (!($stmt = $link->prepare(\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)\")))\n            printf(\"[005] [%d] %s\\n\", $link->errno, $link->error);\n        $column1 = null;\n        /* Note: bind_result before execute */\n        if (!$stmt->bind_result($column1) || !$stmt->execute())\n            printf(\"[006] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $index = 0;\n        while ($stmt->fetch()) {\n            if ($data[$index] != $column1) {\n                printf(\"[007] Row %d, expecting %s/%s got %s/%s\\n\",\n                    $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n            }\n            $index++;\n        }\n        $stmt->close();\n    }\n    // Regular (non-prepared) queries\n    print \"Mixing CAST('somestring'AS CHAR), integer and CAST(integer AS CHAR)...\\n\";\n    if (!($res = $link->query(\"SELECT 1 AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST(2 AS CHAR)\")))\n        printf(\"[008] [%d] %s\\n\", $link->errno, $link->error);\n    $data = array();\n    while ($row = $res->fetch_assoc()) {\n        $data[] = $row['column1'];\n    }\n    $res->free();\n    // Prepared Statements\n    if (!($stmt = $link->prepare(\"SELECT 1 AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST(2 AS CHAR)\")))\n        printf(\"[009] [%d] %s\\n\", $link->errno, $link->error);\n    $column1 = null;\n    if (!$stmt->execute() || !$stmt->bind_result($column1))\n        printf(\"[010] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $index = 0;\n    while ($stmt->fetch()) {\n        if ($data[$index] != $column1) {\n            printf(\"[011] Row %d, expecting %s/%s got %s/%s\\n\",\n                $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n        }\n        var_dump($column1);\n        $index++;\n    }\n    $stmt->close();\n    if ($IS_MYSQLND) {\n        /* Advantage mysqlnd - see above... */\n        if (!($stmt = $link->prepare(\"SELECT 1 AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST(2 AS CHAR)\")))\n            printf(\"[012] [%d] %s\\n\", $link->errno, $link->error);\n        $column1 = null;\n        if (!$stmt->bind_result($column1) || !$stmt->execute())\n            printf(\"[013] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $index = 0;\n        while ($stmt->fetch()) {\n            if ($data[$index] != $column1) {\n                printf(\"[014] Row %d, expecting %s/%s got %s/%s\\n\",\n                    $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n            }\n            $index++;\n        }\n        $stmt->close();\n    }\n    print \"Using integer only...\\n\";\n    if (!($res = $link->query(\"SELECT 1 AS column1 UNION SELECT 303 UNION SELECT 2\")))\n        printf(\"[015] [%d] %s\\n\", $link->errno, $link->error);\n    $data = array();\n    while ($row = $res->fetch_assoc()) {\n        $data[] = $row['column1'];\n    }\n    $res->free();\n    // Prepared Statements\n    if (!($stmt = $link->prepare(\"SELECT 1 AS column1 UNION SELECT 303 UNION SELECT 2\")))\n        printf(\"[016] [%d] %s\\n\", $link->errno, $link->error);\n    $column1 = null;\n    if (!$stmt->execute() || !$stmt->bind_result($column1))\n        printf(\"[017] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $index = 0;\n    while ($stmt->fetch()) {\n        if ($data[$index] != $column1) {\n            printf(\"[018] Row %d, expecting %s/%s got %s/%s\\n\",\n                $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n        }\n        var_dump($column1);\n        $index++;\n    }\n    $stmt->close();\n    if ($IS_MYSQLND) {\n        /* Advantage mysqlnd - see above */\n        if (!($stmt = $link->prepare(\"SELECT 1 AS column1 UNION SELECT 303 UNION SELECT 2\")))\n            printf(\"[019] [%d] %s\\n\", $link->errno, $link->error);\n        $column1 = null;\n        if (!$stmt->bind_result($column1) || !$stmt->execute())\n            printf(\"[020] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $index = 0;\n        while ($stmt->fetch()) {\n            if ($data[$index] != $column1) {\n                printf(\"[021] Row %d, expecting %s/%s got %s/%s\\n\",\n                    $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n            }\n            $index++;\n        }\n        $stmt->close();\n    }\n    print \"Testing bind_param(), strings only...\\n\";\n    $two = 'two';\n    $three = 'three';\n    if (!($stmt = $link->prepare(\"SELECT 'one' AS column1 UNION SELECT ? UNION SELECT ?\")))\n        printf(\"[022] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $column1 = null;\n    if (!$stmt->bind_param('ss', $three, $two) || !$stmt->execute() || !$stmt->bind_result($column1))\n        printf(\"[023] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $index = 0;\n    $data = array();\n    while ($stmt->fetch()) {\n        $data[$index++] = $column1;\n        var_dump($column1);\n    }\n    $stmt->close();\n    if ($IS_MYSQLND) {\n        /* Advantage mysqlnd - see above */\n        $two = 'two';\n        $three = 'three';\n        if (!($stmt = $link->prepare(\"SELECT 'one' AS column1 UNION SELECT ? UNION SELECT ?\")))\n            printf(\"[024] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $column1 = null;\n        if (!$stmt->bind_param('ss', $three, $two) || !$stmt->bind_result($column1) || !$stmt->execute())\n            printf(\"[025] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $index = 0;\n        while ($stmt->fetch()) {\n            if ($data[$index] != $column1) {\n                printf(\"[26] Row %d, expecting %s/%s, got %s/%s\\n\",\n                    $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n            }\n            $index++;\n        }\n        $stmt->close();\n    }\n    print \"Testing bind_param(), strings only, with CAST AS CHAR...\\n\";\n    $two = 'two';\n    $three = 'three beers are more than enough';\n    if (!($stmt = $link->prepare(\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST(? AS CHAR) UNION SELECT CAST(? AS CHAR)\")))\n        printf(\"[027] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $column1 = null;\n    if (!$stmt->bind_param('ss', $three, $two) || !$stmt->execute() || !$stmt->bind_result($column1))\n        printf(\"[028] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $index = 0;\n    $data = array();\n    while ($stmt->fetch()) {\n        $data[$index++] = $column1;\n        var_dump($column1);\n    }\n    $stmt->close();\n    if ($IS_MYSQLND) {\n        /* Advantage mysqlnd - see above */\n        $two = 'two';\n        $three = 'three beers are more than enough';\n        if (!($stmt = $link->prepare(\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST(? AS CHAR) UNION SELECT CAST(? AS CHAR)\")))\n            printf(\"[029] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $column1 = null;\n        if (!$stmt->bind_param('ss', $three, $two) || !$stmt->bind_result($column1) || !$stmt->execute())\n            printf(\"[030] [%d] %s\\n\", $stmt->errno, $stmt->error);\n        $index = 0;\n        while ($stmt->fetch()) {\n            if ($data[$index] != $column1) {\n                printf(\"[31] Row %d, expecting %s/%s, got %s/%s\\n\",\n                    $index + 1, gettype($data[$index]), $data[$index], gettype($column1), $column1);\n            }\n            $index++;\n        }\n        $stmt->close();\n    }\n    $link->close();\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
