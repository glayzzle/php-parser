// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_convert_variables.phpt
  it("mb_convert_variables()", function () {
    expect(parser.parseCode("<?php\n// TODO: Add more tests\n//$debug = true; // Uncomment this line to view error/warning/notice message in *.out file\nini_set('include_path', __DIR__);\ninclude_once('common.inc');\n// SJIS string (BASE64 encoded)\n$sjis = base64_decode('k/qWe4zqg2WDTINYg2eCxYK3gUIwMTIzNIJUglWCVoJXgliBQg==');\n// JIS string (BASE64 encoded)\n$jis = base64_decode('GyRCRnxLXDhsJUYlLSU5JUgkRyQ5ISMbKEIwMTIzNBskQiM1IzYjNyM4IzkhIxsoQg==');\n// EUC-JP string\n$euc_jp = '���ܸ�ƥ����ȤǤ���01234������������';\n// Test for single scalar\necho \"== SCALAR TEST ==\\n\";\n$s = $sjis;\n$encoding = mb_convert_variables('EUC-JP', 'SJIS', $s);\nprint(\"$encoding\\n\"); // SJIS\nprint(\"$s\\n\"); // Converted to EUC-JP\n$s = $jis;\n$encoding = mb_convert_variables('EUC-JP', 'JIS', $s);\nprint(\"$encoding\\n\"); // JIS\nprint(\"$s\\n\"); // Converted to EUC-JP\n$s = $euc_jp;\n$encoding = mb_convert_variables('SJIS', 'EUC-JP', $s);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(base64_encode($s).\"\\n\"); // Converted to SJIS (base64 encoded)\n$s = $euc_jp;\n$encoding = mb_convert_variables('JIS', 'EUC-JP', $s);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(base64_encode($s).\"\\n\"); // Converted to JIS (base64 encoded)\n// Test for multiple slcaler\n$s1 = $euc_jp;\n$s2 = $euc_jp;\n$s3 = $euc_jp;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $s1, $s2, $s3);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(\"$s1$s2$s3\\n\"); // Converted to EUC-JP\n// Note: Mixing encoding in array/object is not supported?\n// Test for array\necho \"== ARRAY TEST ==\\n\";\n$a = array($s3, $s2, $s1);\n$aa = $a;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $aa);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(\"{$aa[0]}{$aa[1]}{$aa[2]}\\n\"); // Converted to EUC-JP\n$a = array($s1, $s2, $s3);\n$aa = $a;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $aa);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(\"{$aa[0]}{$aa[1]}{$aa[2]}\\n\"); // Converted to EUC-JP\n// Test for object\necho \"== OBJECT TEST ==\\n\";\nclass foo\n{\n    public $s1;\n    public $s2;\n    public $s3;\n    function __construct()\n    {\n        global $sjis, $jis, $euc_jp;\n        $this->s1 = $euc_jp;\n        $this->s2 = $euc_jp;\n        $this->s3 = $euc_jp;\n    }\n}\nclass bar\n{\n    public $s1;\n    public $s2;\n    public $s3;\n    function __construct()\n    {\n        global $sjis, $jis, $euc_jp;\n        $this->s1 = $euc_jp;\n        $this->s2 = $euc_jp;\n        $this->s3 = $euc_jp;\n    }\n}\n$o = new foo;\n$oo = $o;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $oo);\nprint(\"$encoding\\n\");   // EUC-JP\nprint(\"{$oo->s1}{$oo->s2}{$oo->s3}\\n\"); // Converted to EUC-JP\n$o = new bar;\n$oo = $o;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $oo);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(\"{$oo->s1}{$oo->s2}{$oo->s3}\\n\"); // Converted to EUC-JP\n// Test for scalar, array and object\necho \"== SCALAR, ARRAY AND OBJECT TEST ==\\n\";\n$s1 = $euc_jp;\n$s2 = $euc_jp;\n$s3 = $euc_jp;\n$aa = $a;\n$oo = $o;\n$encoding = mb_convert_variables('EUC-JP', 'auto', $s1, $s2, $s3, $aa, $oo);\nprint(\"$encoding\\n\"); // EUC-JP\nprint(\"$s1$s2$s3\\n\"); // Converted to EUC-JP\nprint(\"{$aa[0]}{$aa[1]}{$aa[2]}\\n\"); // Converted to EUC-JP\nprint(\"{$oo->s1}{$oo->s2}{$oo->s3}\\n\"); // Converted to EUC-JP\n?>")).toMatchSnapshot();
  });
});
