// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/throw/001.phpt
  it("throw expression", function () {
    expect(parser.parseCode("<?php\ntry {\n    $result = true && throw new Exception(\"true && throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = false && throw new Exception(\"false && throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = true and throw new Exception(\"true and throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = false and throw new Exception(\"false and throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = true || throw new Exception(\"true || throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = false || throw new Exception(\"false || throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = true or throw new Exception(\"true or throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = false or throw new Exception(\"false or throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = null ?? throw new Exception(\"null ?? throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = \"foo\" ?? throw new Exception('\"foo\" ?? throw');\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = null ?: throw new Exception(\"null ?: throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = \"foo\" ?: throw new Exception('\"foo\" ?: throw');\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $callable = fn() => throw new Exception(\"fn() => throw\");\n    var_dump(\"not yet\");\n    $callable();\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\n$result = \"bar\";\ntry {\n    $result = throw new Exception();\n} catch (Exception $e) {}\nvar_dump($result);\ntry {\n    var_dump(\n        throw new Exception(\"exception 1\"),\n        throw new Exception(\"exception 2\")\n    );\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = true ? true : throw new Exception(\"true ? true : throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    $result = false ? true : throw new Exception(\"false ? true : throw\");\n    var_dump($result);\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    throw new Exception() + 1;\n} catch (Throwable $e) {\n    var_dump($e->getMessage());\n}\ntry {\n    throw $exception = new Exception('throw $exception = new Exception();');\n} catch (Exception $e) {}\nvar_dump($exception->getMessage());\ntry {\n    $exception = null;\n    throw $exception ??= new Exception('throw $exception ??= new Exception();');\n} catch (Exception $e) {}\nvar_dump($exception->getMessage());\ntry {\n    throw null ?? new Exception('throw null ?? new Exception();');\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\n?>")).toMatchSnapshot();
  });
});
