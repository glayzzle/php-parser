// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/opcache/tests/phi_remove_001.phpt
  it("Phi sources remove 001", function () {
    expect(parser.parseCode("<?php\nfunction getOnlyMPEGaudioInfoBruteForce($info) {\n    $Distribution['bitrate']      = array();\n    $Distribution['frequency']    = array();\n    $Distribution['layer']        = array();\n    $Distribution['version']      = array();\n    $Distribution['padding']      = array();\n    $max_frames_scan = 5000;\n    $frames_scanned  = 0;\n    $previousvalidframe = $info['avdataoffset'];\n    while ($info) {\n        if (!isset($MPEGaudioHeaderDecodeCache[$head4])) {\n            $MPEGaudioHeaderDecodeCache[$head4] = MPEGaudioHeaderDecode($head4);\n        }\n        if (!isset($MPEGaudioHeaderValidCache[$head4])) {\n            $MPEGaudioHeaderValidCache[$head4] = MPEGaudioHeaderValid($MPEGaudioHeaderDecodeCache[$head4], false, false);\n        }\n        if ($MPEGaudioHeaderValidCache[$head4]) {\n            if ($MPEGaudioHeaderLengthCache[$head4] > 4) {\n                $WhereWeWere = mftell();\n                $next4 = test(4);\n                if ($next4[0] == \"\\xFF\") {\n                    if (!isset($MPEGaudioHeaderDecodeCache[$next4])) {\n                        $MPEGaudioHeaderDecodeCache[$next4] = MPEGaudioHeaderDecode($next4);\n                    }\n                    if (!isset($MPEGaudioHeaderValidCache[$next4])) {\n                        $MPEGaudioHeaderValidCache[$next4] = MPEGaudioHeaderValid($MPEGaudioHeaderDecodeCache[$next4], false, false);\n                    }\n                    if ($MPEGaudioHeaderValidCache[$next4]) {\n                        getid3_lib::safe_inc($Distribution['bitrate'][$LongMPEGbitrateLookup[$head4]]);\n                        getid3_lib::safe_inc($Distribution['layer'][$LongMPEGlayerLookup[$head4]]);\n                        getid3_lib::safe_inc($Distribution['version'][$LongMPEGversionLookup[$head4]]);\n                        getid3_lib::safe_inc($Distribution['padding'][intval($LongMPEGpaddingLookup[$head4])]);\n                        getid3_lib::safe_inc($Distribution['frequency'][$LongMPEGfrequencyLookup[$head4]]);\n                        if ($max_frames_scan && (++$frames_scanned >= $max_frames_scan)) {\n                            foreach ($Distribution as $key1 => $value1) {\n                                foreach ($value1 as $key2 => $value2) {\n                                    $Distribution[$key1][$key2] = round($value2 / $pct_data_scanned);\n                                }\n                            }\n                            break;\n                        }\n                        continue;\n                    }\n                }\n                unset($next4);\n            }\n        }\n    }\n    return true;\n}\n?>\nokey")).toMatchSnapshot();
  });
});
