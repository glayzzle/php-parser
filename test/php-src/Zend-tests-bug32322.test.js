// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/bug32322.phpt
  it("Bug #32322 (Return values by reference broken( using self::),example singleton instance)", function () {
    expect(parser.parseCode("<?php\nclass test\n{\n    private static $instance = null;\n    private $myname = '';\n    private function __construct( $value = '' )\n    {\n        echo \"New class $value created \\n\";\n        $this -> myname = $value;\n    }\n    private function __clone() {}\n    static public function getInstance()\n    {\n        if ( self::$instance == null )\n        {\n            self::$instance = new test('Singleton1');\n        }\n        else {\n            echo \"Using old class \" . self::$instance -> myname . \"\\n\";\n        }\n        return self::$instance;\n    }\n    static public function getInstance2()\n    {\n        static $instance2 = null;\n        if ( $instance2 == null )\n        {\n            $instance2 = new test('Singleton2');\n        }\n        else {\n            echo \"Using old class \" . $instance2 -> myname . \"\\n\";\n        }\n        return $instance2;\n    }\n    public function __destruct()\n    {\n        if ( defined('SCRIPT_END') )\n        {\n            echo \"Class \" . $this -> myname . \" destroyed at script end\\n\";\n        } else {\n            echo \"Class \" . $this -> myname . \" destroyed beforce script end\\n\";\n        }\n    }\n}\necho \"Try static instance inside class :\\n\";\n$getCopyofSingleton    = test::getInstance();\n$getCopyofSingleton    = null;\n$getCopyofSingleton    = &test::getInstance();\n$getCopyofSingleton    = null;\n$getCopyofSingleton    = test::getInstance();\necho \"Try static instance inside function :\\n\";\n$getCopyofSingleton2   = test::getInstance2();\n$getCopyofSingleton2   = null;\n$getCopyofSingleton2   = &test::getInstance2();\n$getCopyofSingleton2   = null;\n$getCopyofSingleton2   = test::getInstance2();\ndefine('SCRIPT_END',1);\n?>")).toMatchSnapshot();
  });
});
