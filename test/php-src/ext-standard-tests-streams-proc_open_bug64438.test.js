// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/streams/proc_open_bug64438.phpt
  it("Bug #64438 proc_open hangs with stdin/out with 4097+ bytes", function () {
    expect(parser.parseCode("<?php\nerror_reporting(E_ALL);\nif (substr(PHP_OS, 0, 3) == 'WIN') {\n    $cmd = PHP_BINARY . ' -n -r \"fwrite(STDOUT, $in = file_get_contents(\\'php://stdin\\')); fwrite(STDERR, $in);\"';\n} else {\n    $cmd = PHP_BINARY . ' -n -r \\'fwrite(STDOUT, $in = file_get_contents(\"php://stdin\")); fwrite(STDERR, $in);\\'';\n}\n$descriptors = array(array('pipe', 'r'), array('pipe', 'w'), array('pipe', 'w'));\n$stdin = str_repeat('*', 4097);\n$options = array_merge(array('suppress_errors' => true, 'bypass_shell' => false));\n$process = proc_open($cmd, $descriptors, $pipes, getcwd(), array(), $options);\nforeach ($pipes as $pipe) {\n    stream_set_blocking($pipe, false);\n}\n$writePipes = array($pipes[0]);\n$stdinLen = strlen($stdin);\n$stdinOffset = 0;\nunset($pipes[0]);\n$pipeEvents = [];\nwhile ($pipes || $writePipes) {\n    $r = $pipes;\n    $w = $writePipes;\n    $e = null;\n    $n = stream_select($r, $w, $e, 60);\n    if (false === $n) {\n        break;\n    } elseif ($n === 0) {\n        proc_terminate($process);\n    }\n    if ($w) {\n        $written = fwrite($writePipes[0], substr($stdin, $stdinOffset), 8192);\n        if (false !== $written) {\n            $stdinOffset += $written;\n        }\n        if ($stdinOffset >= $stdinLen) {\n            fclose($writePipes[0]);\n            $writePipes = null;\n        }\n    }\n    foreach ($r as $pipe) {\n        $type = array_search($pipe, $pipes);\n        $data = fread($pipe, 8192);\n        if (false === $data || feof($pipe)) {\n            $pipeEvents[(int)$pipe][] = \"Closing pipe\";\n            fclose($pipe);\n            unset($pipes[$type]);\n        } else {\n            $pipeEvents[(int)$pipe][] = \"Read \" . strlen($data) . \" bytes\";\n        }\n    }\n}\nvar_dump($pipeEvents);\n?>")).toMatchSnapshot();
  });
});
