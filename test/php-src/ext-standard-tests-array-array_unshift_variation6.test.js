// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_variation6.phpt
  it("Test array_unshift() function : usage variations - two dimensional arrays for 'array' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_unshift() by giving two-dimensional\n * arrays and also sub-arrays within the two-dimensional array for $array argument.\n * The $var argument passed is a fixed value\n*/\necho \"*** Testing array_unshift() : two dimensional arrays for \\$array argument ***\\n\";\n// initializing $var argument\n$var = 10;\n// two-dimensional array to be passed to $array argument\n$two_dimensional_array = array(\n   // associative array\n   array('color' => 'red', 'item' => 'pen', 'place' => 'LA'),\n   // numeric array\n   array(1, 2, 3, 4, 5),\n   // combination of numeric and associative arrays\n   array('a' => 'green', 'red', 'brown', 33, 88, 'orange', 'item' => 'ball')\n);\n/* Passing the entire $two_dimensional_array to $array */\n/* With default argument */\n// returns element count in the resulting array after arguments are pushed to\n// beginning of the given array\n$temp_array = $two_dimensional_array;\nvar_dump( array_unshift($temp_array, $var) );  // whole 2-d array\n// dumps the resulting array\nvar_dump($temp_array);\n/* With optional arguments */\n// returns element count in the resulting array after arguments are pushed to\n// beginning of the given array\n$temp_array = $two_dimensional_array;\nvar_dump( array_unshift($temp_array, $var, \"hello\", 'world') );  // whole 2-d array\n// dumps the resulting array\nvar_dump($temp_array);\n/* Passing the sub-array within the $two_dimensional_array to $array argument */\n/* With default argument */\n// returns element count in the resulting array after arguments are pushed to\n// beginning of the given array\n$temp_array = $two_dimensional_array[0];\nvar_dump( array_unshift($temp_array, $var) );  // sub array\n// dumps the resulting array\nvar_dump($temp_array);\n/* With optional arguments */\n// returns element count in the resulting array after arguments are pushed to\n// beginning of the given array\n$temp_array = $two_dimensional_array[0];\nvar_dump( array_unshift($temp_array, $var, \"hello\", 'world') );  // sub array\n// dumps the resulting array\nvar_dump($temp_array);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
