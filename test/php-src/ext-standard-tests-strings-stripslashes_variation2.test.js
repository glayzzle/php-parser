// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/stripslashes_variation2.phpt
  it("Test stripslashes() function : usage variations - un-quote strings quoted with addslashes()", function () {
    expect(parser.parseCode("<?php\n/*\n * Test stripslashes() with various strings containing characters that can be backslashed.\n * First adding slashes using addslashes() and then removing the slashes using stripslashes()\n*/\necho \"*** Testing stripslashes() : with various strings containing backslashed characters ***\\n\";\n// initialising a heredoc string\n$heredoc_string = <<<EOT\nThis is line 1 of 'heredoc' string\nThis is line 2 of \"heredoc\" string\nEOT;\n$heredoc_null_string =<<<EOT\nEOT;\n$heredoc_string_only_backslash =<<<EOT\n\\\nEOT;\n$heredoc_string_only_single_quote =<<<EOT\n'\nEOT;\n$heredoc_string_only_double_quote =<<<EOT\n\"\nEOT;\n// initialising the string array\n$str_array = array(\n                    // string without any characters that can be backslashed\n                    'Hello world',\n                    // string with single quotes\n                    \"how're you doing?\",\n                    \"don't disturb u'r neighbours\",\n                    \"don't disturb u'r neighbours''\",\n                    '',\n                    '\\'',\n                    \"'\",\n                    $heredoc_string_only_single_quote,\n                    // string with double quotes\n                    'he said, \"he will be on leave\"',\n                    'he said, \"\"he will be on leave\"',\n                    '\"\"\"PHP\"\"\"',\n                    \"\",\n                    \"\\\"\",\n                    '\"',\n            \"hello\\\"\",\n                    $heredoc_string_only_double_quote,\n                    // string with backslash characters\n                    'Is your name Ram\\Krishna?',\n                    '\\\\0.0.0.0',\n                    'c:\\php\\testcase\\stripslashes',\n                    '\\\\',\n                    $heredoc_string_only_backslash,\n                    // string with nul characters\n                    'hello'.chr(0).'world',\n                    chr(0).'hello'.chr(0),\n                    chr(0).chr(0).'hello',\n                    chr(0),\n                    // mixed strings\n                    \"'\\\\0.0.0.0'\",\n                    \"'\\\\0.0.0.0'\".chr(0),\n                    chr(0).\"'c:\\php\\'\",\n                    '\"\\\\0.0.0.0\"',\n                    '\"c:\\php\\\"'.chr(0).\"'\",\n                    '\"hello\"'.\"'world'\".chr(0).'//',\n            // string with hexadecimal number\n                    \"0xABCDEF0123456789\",\n                    \"\\x00\",\n                    '!@#$%&*@$%#&/;:,<>',\n                    \"hello\\x00world\",\n                    // heredoc strings\n                    $heredoc_string,\n                    $heredoc_null_string\n                  );\n$count = 1;\n// looping to test for all strings in $str_array\nforeach( $str_array as $str )  {\n  echo \"\\n-- Iteration $count --\\n\";\n  $str_addslashes = addslashes($str);\n  var_dump(\"The string after addslashes is:\", $str_addslashes);\n  $str_stripslashes = stripslashes($str_addslashes);\n  var_dump(\"The string after stripslashes is:\", $str_stripslashes);\n  if( strcmp($str, $str_stripslashes) != 0 )\n    echo \"\\nError: Original string and string from stripslash() donot match\\n\";\n  $count ++;\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
