// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/temporary_cleaning_013.phpt
  it("Exceptions thrown in operand cleaning must cause leak of return value", function () {
    expect(parser.parseCode("<?php\ntry {\n    var_dump(new class {\n        function __toString() { return \"a\"; }\n        function __destruct() { throw new Exception; }\n    } . \"foo\");\n} catch (Exception $e) { print \"caught Exception 1\\n\"; }\ntry {\n    var_dump([0] + [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 2\\n\"; }\ntry {\n    $foo = [0];\n    var_dump($foo += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 3\\n\"; }\ntry {\n    $foo = (object)[\"foo\" => [0]];\n    var_dump($foo->foo += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 4\\n\"; }\ntry {\n    $foo = new class {\n        function __get($x) { return [0]; }\n        function __set($x, $y) {}\n    };\n    var_dump($foo->foo += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 5\\n\"; }\ntry {\n    $foo = new class {\n        public $bar = [0];\n        function &__get($x) { return $this->bar; }\n    };\n    var_dump($foo->foo += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 6\\n\"; }\ntry {\n    $foo = new class implements ArrayAccess {\n        function offsetGet($x): mixed { return [0]; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n    };\n    var_dump($foo[0] += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 7\\n\"; }\ntry {\n    $foo = new class implements ArrayAccess {\n        public $foo = [0];\n        function &offsetGet($x): bool { return $this->foo; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n    };\n    var_dump($foo[0] += [new class {\n        function __destruct() { throw new Exception; }\n    }]);\n} catch (Exception $e) { print \"caught Exception 8\\n\"; }\ntry {\n    var_dump((function() { return new class {\n        function __construct() { $this->foo = new stdClass; }\n        function __destruct() { throw new Exception; }\n    }; })()->foo++);\n} catch (Exception $e) { print \"caught Exception 9\\n\"; }\ntry {\n    var_dump((function() { return new class {\n        function __get($x) { return new stdClass; }\n        function __set($x, $y) {}\n        function __destruct() { throw new Exception; }\n    }; })()->foo++);\n} catch (Exception $e) { print \"caught Exception 10\\n\"; }\ntry {\n    var_dump((function() { return new class {\n        function __construct() { $this->bar = new stdClass; }\n        function &__get($x) { return $this->bar; }\n        function __destruct() { throw new Exception; }\n    }; })()->foo++);\n} catch (Exception $e) { print \"caught Exception 11\\n\"; }\ntry {\n    var_dump(++(function() { return new class {\n        function __construct() { $this->foo = new stdClass; }\n        function __destruct() { throw new Exception; }\n    }; })()->foo);\n} catch (Exception $e) { print \"caught Exception 12\\n\"; }\ntry {\n    var_dump(++(function() { return new class {\n        function __get($x) { return new stdClass; }\n        function __set($x, $y) {}\n        function __destruct() { throw new Exception; }\n    }; })()->foo);\n} catch (Exception $e) { print \"caught Exception 13\\n\"; }\ntry {\n    var_dump(++(function() { return new class {\n        function __construct() { $this->bar = new stdClass; }\n        function &__get($x) { return $this->bar; }\n        function __destruct() { throw new Exception; }\n    }; })()->foo);\n} catch (Exception $e) { print \"caught Exception 14\\n\"; }\ntry {\n    var_dump((function() { return new class implements ArrayAccess {\n        function offsetGet($x): mixed { return [new stdClass]; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n        function __destruct() { throw new Exception; }\n    }; })()[0]++);\n} catch (Exception $e) { print \"caught Exception 15\\n\"; }\ntry {\n    var_dump(++(function() { return new class implements ArrayAccess {\n        function offsetGet($x): mixed { return [new stdClass]; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n        function __destruct() { throw new Exception; }\n    }; })()[0]);\n} catch (Exception $e) { print \"caught Exception 16\\n\"; }\ntry {\n    var_dump((new class {\n        function __construct() { $this->foo = new stdClass; }\n        function __destruct() { throw new Exception; }\n    })->foo);\n} catch (Exception $e) { print \"caught Exception 17\\n\"; }\ntry {\n    var_dump((new class {\n        function __get($x) { return new stdClass; }\n        function __set($x, $y) {}\n        function __destruct() { throw new Exception; }\n    })->foo);\n} catch (Exception $e) { print \"caught Exception 18\\n\"; }\ntry {\n    var_dump((new class implements ArrayAccess {\n        function offsetGet($x): mixed { return [new stdClass]; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n        function __destruct() { throw new Exception; }\n    })[0]);\n} catch (Exception $e) { print \"caught Exception 19\\n\"; }\ntry {\n    var_dump(isset((new class {\n        function __construct() { $this->foo = new stdClass; }\n        function __destruct() { throw new Exception; }\n    })->foo->bar));\n} catch (Exception $e) { print \"caught Exception 20\\n\"; }\ntry {\n    var_dump(isset((new class {\n        function __get($x) { return new stdClass; }\n        function __set($x, $y) {}\n        function __destruct() { throw new Exception; }\n    })->foo->bar));\n} catch (Exception $e) { print \"caught Exception 21\\n\"; }\ntry {\n    var_dump(isset((new class implements ArrayAccess {\n        function offsetGet($x): mixed { return [new stdClass]; }\n        function offsetSet($x, $y): void {}\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n        function __destruct() { throw new Exception; }\n    })[0]->bar));\n} catch (Exception $e) { print \"caught Exception 22\\n\"; }\ntry {\n    $foo = new class {\n        function __destruct() { throw new Exception; }\n    };\n    var_dump($foo = new stdClass);\n} catch (Exception $e) { print \"caught Exception 23\\n\"; }\ntry {\n    $foo = [new class {\n        function __destruct() { throw new Exception; }\n    }];\n    var_dump($foo[0] = new stdClass);\n} catch (Exception $e) { print \"caught Exception 24\\n\"; }\ntry {\n    $foo = (object) [\"foo\" => new class {\n        function __destruct() { throw new Exception; }\n    }];\n    var_dump($foo->foo = new stdClass);\n} catch (Exception $e) { print \"caught Exception 25\\n\"; }\ntry {\n    $foo = new class {\n        function __get($x) {}\n        function __set($x, $y) { throw new Exception; }\n    };\n    var_dump($foo->foo = new stdClass);\n} catch (Exception $e) { print \"caught Exception 26\\n\"; }\ntry {\n    $foo = new class implements ArrayAccess {\n        function offsetGet($x): mixed {}\n        function offsetSet($x, $y): void { throw new Exception; }\n        function offsetExists($x): bool { return true; }\n        function offsetUnset($x): void {}\n    };\n    var_dump($foo[0] = new stdClass);\n} catch (Exception $e) { print \"caught Exception 27\\n\"; }\ntry {\n    $foo = new class {\n        function __destruct() { throw new Exception; }\n    };\n    $bar = new stdClass;\n    var_dump($foo = &$bar);\n} catch (Exception $e) { print \"caught Exception 28\\n\"; }\ntry {\n    $f = function() {\n        return new class {\n            function __toString() { return \"a\"; }\n            function __destruct() { throw new Exception; }\n        };\n    };\n    var_dump(\"{$f()}foo\");\n} catch (Exception $e) { print \"caught Exception 29\\n\"; }\ntry {\n    $f = function() {\n        return new class {\n            function __toString() { return \"a\"; }\n            function __destruct() { throw new Exception; }\n        };\n    };\n    var_dump(\"bar{$f()}foo\");\n} catch (Exception $e) { print \"caught Exception 30\\n\"; }\ntry {\n    var_dump((string) new class {\n        function __toString() { $x = \"Z\"; return ++$x; }\n        function __destruct() { throw new Exception; }\n    });\n} catch (Exception $e) { print \"caught Exception 31\\n\"; }\ntry {\n    var_dump(clone (new class {\n        function __clone() { throw new Exception; }\n    }));\n} catch (Exception $e) { print \"caught Exception 32\\n\"; }\n?>")).toMatchSnapshot();
  });
});
