// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fnmatch_variation.phpt
  it("Test fnmatch() function: Variations", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing fnmatch() with file and various patterns ***\\n\";\n$file_name = __DIR__.\"/match.tmp\";\n/* avoid using \\, it breaks the pattern */\nif (substr(PHP_OS, 0, 3) == 'WIN') {\n    $file_name = str_replace('\\\\','/', $file_name);\n}\nfopen($file_name, \"w\");\n$pattern_arr = array(\n0 => \"*.tmp\",\n1 => \"match*\",\n2 => \"mat*\",\n3 => \"mat*tmp\",\n4 => \"m*t\",\n5 => \"ma[pt]ch*\",\n6 => \"*.t*\",\n7 => \"***.tmp\",\n8 => \"match**\",\n9 => \"*.t*p\",\n10 => \"\",\n11 => \"match\",\n12 => \".tmp\",\n13 => \"?match\",\n14 => \"match?tmp\",\n15 => \"?tmp\",\n16 => \"match?\",\n17 => \"?match?\",\n18 => \"match.tmp\",\n19 => \"/match.tmp\",\n20 => \"/match.tmp/\",\n21 => 'match.tmp',\n22 => 'match.tmp\\0',\n23 => \"match.tmp\\0\",\n24 => \"match\\0.tmp\",\n25 => chr(109).chr(97).\"tch.tmp\",\n26 => chr(109).chr(97).chr(116).chr(99).chr(104).\".tmp\",\n27 => chr(109).chr(97).chr(116).chr(99).chr(104).chr(46).chr(116).chr(120).chr(116),\n28 => chr(109).chr(97).chr(116).chr(99).chr(104).\".\".chr(116).chr(120).chr(116),\n29 => \"MATCH.TMP\",\n30 => \"MATCH*\",\n31 => $file_name,\n/* binary inputs */\n32 => b\"match*\",\n33 => b\"*.tmp\",\n34 => b\"mat*\",\n35 => b\"mat*tmp\",\n36 => b\"m*t\",\n);\nfor( $i = 0; $i<count($pattern_arr); $i++ ) {\n  echo \"-- Iteration $i --\\n\";\n  try {\n    var_dump( fnmatch($pattern_arr[$i], $file_name) );\n  } catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n}\nunlink($file_name);\necho \"\\n*** Testing fnmatch() with other types other than files ***\";\n/* defining a common function */\nfunction match_( $pattern, $string ) {\n  for( $i = 0; $i<count($pattern); $i++ ) {\n    echo \"-- Iteration $i --\\n\";\n    for( $j = 0; $j<count($string); $j++ ) {\n      try {\n        var_dump( fnmatch($pattern[$i], $string[$j]) );\n      } catch (Error $e) {\n        echo $e->getMessage(), \"\\n\";\n      }\n    }\n  }\n}\necho \"\\n--- With Integers ---\\n\";\n$int_arr = array(\n  16,\n  16.00,\n  020,\n  020.00,\n  0xF,\n  0xF0000\n);\nmatch_($int_arr, $int_arr);\necho \"\\n--- With Strings ---\\n\";\n$str_arr = array(\n  \"string\",\n  \"string\\0\",\n  'string',\n  \"str\\0ing\",\n  \"stringstring\",\n  /* binary input */\n  b\"string\"\n);\nmatch_($str_arr, $str_arr);\necho \"\\n--- With booleans ---\\n\";\n$bool_arr = array(\n  TRUE,\n  true,\n  1,\n  10,\n  FALSE,\n  false,\n  0,\n  \"\",\n  \"string\"\n);\nmatch_($bool_arr, $bool_arr);\necho \"\\n--- With NULL ---\\n\";\n$null_arr = array(\n  \"\",\n  \"\\0\",\n  \"string\",\n  0\n);\nmatch_($null_arr, $null_arr);\necho \"\\n*** Done ***\\n\";\n?>")).toMatchSnapshot();
  });
});
