// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gd/tests/imagecrop_auto.phpt
  it("Testing imagecropauto()", function () {
    expect(parser.parseCode("<?php\necho \"TC IMG_CROP_DEFAULT\\n\";\n$im = imagecreatetruecolor(99, 99);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_DEFAULT);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"Palette IMG_CROP_DEFAULT\\n\";\n$im = imagecreate(99, 99);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_DEFAULT);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"TC IMG_CROP_SIDES\\n\";\n$im = imagecreatetruecolor(99, 99);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_SIDES);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"Palette IMG_CROP_SIDES\\n\";\n$im = imagecreate(99, 99);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_SIDES);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"TC IMG_CROP_BLACK\\n\";\n$im = imagecreatetruecolor(50, 50);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_BLACK);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"Palette IMG_CROP_BLACK\\n\";\n$im = imagecreate(50, 50);\n$bgd = imagecolorallocate($im, 0, 0, 0);\n$b = imagecolorallocate($im, 0, 0, 255);\nimagefilledrectangle($im, 20, 20, 30, 30, 0xff);\n$im_crop = imagecropauto($im, IMG_CROP_BLACK);\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\necho \"IMG_CROP_THRESHOLD\\n\";\n$im = imagecreatefrompng(__DIR__ . \"/logo_noise.png\");\n$im_crop = imagecropauto($im, IMG_CROP_THRESHOLD, 0.1, 0x0);\nimagepng($im_crop, __DIR__ . \"/crop_threshold.png\");\nvar_dump(imagesx($im_crop));\nvar_dump(imagesy($im_crop));\n@unlink(__DIR__ . \"/crop_threshold.png\");\n?>")).toMatchSnapshot();
  });
});
