// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/crypt_sha256.phpt
  it("crypt() SHA-256", function () {
    expect(parser.parseCode("<?php\n$tests = array(\n    1 => array(\n        '$5$saltstring',\n        'Hello world!',\n        '$5$saltstring$5B8vYYiY.CVt1RlTTf8KbXBH3hsxY/GNooZaBBGWEc5'\n    ),\n    2 => array(\n        '$5$rounds=10000$saltstringsaltstring',\n        'Hello world!',\n        '$5$rounds=10000$saltstringsaltst$3xv.VbSHBb41AL9AvLeujZkZRBAwqFMz2.opqey6IcA'\n    ),\n    3 => array(\n        '$5$rounds=10000$saltstringsaltstring',\n        'Hello world!',\n        '$5$rounds=10000$saltstringsaltst$3xv.VbSHBb41AL9AvLeujZkZRBAwqFMz2.opqey6IcA'\n    ),\n    4 => array(\n        '$5$rounds=5000$toolongsaltstring',\n        'This is just a test',\n        '$5$rounds=5000$toolongsaltstrin$Un/5jzAHMgOGZ5.mWJpuVolil07guHPvOW8mGRcvxa5'\n    ),\n    5 => array(\n        '$5$rounds=1400$anotherlongsaltstring',\n        'a very much longer text to encrypt.  This one even stretches over morethan one line.',\n        '$5$rounds=1400$anotherlongsalts$Rx.j8H.h8HjEDGomFU8bDkXm3XIUnzyxf12oP84Bnq1'\n    ),\n    6 => array(\n        '$5$rounds=77777$short',\n        'we have a short salt string but not a short password',\n        '$5$rounds=77777$short$JiO1O3ZpDAxGJeaDIuqCoEFysAe1mZNJRs3pw0KQRd/'\n    ),\n    7 => array(\n        '$5$rounds=123456$asaltof16chars..',\n        'a short string',\n        '$5$rounds=123456$asaltof16chars..$gP3VQ/6X7UUEW3HkBn2w1/Ptq2jxPyzV/cZKmF/wJvD'\n    ),\n    8 => array(\n        '$5$rounds=10$roundstoolow',\n        'the number of rounds is too low',\n        '*0'\n    ),\n    9 => array(\n        '$5$rounds=1000000000$roundstoohigh',\n        'the number of rounds is too high',\n        '*0'\n    )\n);\nforeach ($tests as $iter => $t) {\n    $res = crypt($t[1], $t[0]);\n    if ($res != $t[2]) echo \"Iteration $iter failed.\nExpected: <$t[2]>\nGot       <$res>\\n\";\n}\necho \"Passes.\";?>")).toMatchSnapshot();
  });
});
