// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_send_long_data.phpt
  it("mysqli_stmt_send_long_data()", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require('table.inc');\n    if (!$stmt = mysqli_stmt_init($link))\n        printf(\"[003] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\"))\n        printf(\"[005] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_query($link, sprintf(\"CREATE TABLE test(id INT NOT NULL AUTO_INCREMENT, label LONGBLOB, PRIMARY KEY(id)) ENGINE = %s\", $engine)))\n        printf(\"[006] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[007] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = null;\n    $label = null;\n    if (!mysqli_stmt_bind_param($stmt, \"ib\", $id, $label))\n        printf(\"[008] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    if (!$res = mysqli_query($link, \"SHOW VARIABLES LIKE 'max_allowed_packet'\"))\n        printf(\"[009] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[010] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_free_result($res);\n    if (isset($row['VARIABLE_VALUE']) && !isset($row['Value']))\n        // MySQL 6.0\n        $row['Value'] = $row['VARIABLE_VALUE'];\n    if (0 === ($max_allowed_packet = (int)$row['Value']))\n        printf(\"[011] Cannot determine max_allowed_packet size and/or bogus max_allowed_packet setting used.\\n\");\n    // let's ignore upper limits for LONGBLOB (2^32) ...\n    // maximum packet size up to which we test is 10M\n    $tmp = '';\n    $blob = '';\n    for ($i = 0; $i < 1024; $i++) {\n        $tmp .= 'a';\n    }\n    $limit = min(floor($max_allowed_packet / 1024 / 2), 10240);\n    for ($i = 0; $i < $limit; $i++)\n            $blob .= $tmp;\n    /*\n    if (floor($max_allowed_packet / 1024) <= 10240) {\n            $limit = strlen($blob) - $max_allowed_packet - 1;\n            for ($i = 0; $i < $limit; $i++)\n                    $blob .= 'a';\n    }\n    */\n    assert(strlen($blob) <= $max_allowed_packet);\n    try {\n        $tmp = mysqli_stmt_send_long_data($stmt, -1, $blob);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    if (false !== ($tmp = mysqli_stmt_send_long_data($stmt, 999, $blob)))\n        printf(\"[014] Expecting boolean/false, got %s/%s. [%d] %s\\n\",\n            gettype($tmp), $tmp, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    if (true !== ($tmp = mysqli_stmt_send_long_data($stmt, 1, $blob)))\n        printf(\"[015] Expecting boolean/true, got %s/%s. [%d] %s\\n\",\n            gettype($tmp), $tmp, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = 1;\n    if (true !== mysqli_stmt_execute($stmt))\n        printf(\"[016] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    mysqli_stmt_close($stmt);\n    if (!$res = mysqli_query($link, \"SELECT id, label FROM test ORDER BY id\"))\n        printf(\"[017] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (1 != ($tmp = mysqli_num_rows($res)))\n        printf(\"[018] Expecting 1 rows, mysqli_num_rows() reports %d rows. [%d] %s\\n\",\n            $tmp, mysqli_errno($link), mysqli_error($link));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[019] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_free_result($res);\n    if (empty($row['id']) || empty($row['label']) || ($row['id'] != 1))\n        printf(\"[020] Record seems to be incomplete\\n\");\n    if ($blob != $row['label'])\n        printf(\"[021] Blob value has not been stored properly!\\n\");\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
