// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sockets/tests/socket_import_stream-4.phpt
  it("socket_import_stream: effects of closing", function () {
    expect(parser.parseCode("<?php\nfunction test($stream, $sock) {\n    if ($stream !== null) {\n        echo \"stream_set_blocking \";\n        try {\n            print_r(stream_set_blocking($stream, 0));\n        } catch (Error $e) {\n            echo get_class($e), \": \", $e->getMessage(), \"\\n\";\n        }\n        echo \"\\n\";\n    }\n    if ($sock !== null) {\n        echo \"socket_set_block \";\n        try {\n            print_r(socket_set_block($sock));\n        } catch (Error $e) {\n            echo get_class($e), \": \", $e->getMessage(), \"\\n\";\n        }\n        echo \"\\n\";\n        echo \"socket_get_option \";\n        try {\n            print_r(socket_get_option($sock, SOL_SOCKET, SO_TYPE));\n        } catch (Error $e) {\n            echo get_class($e), \": \", $e->getMessage(), \"\\n\";\n        }\n        echo \"\\n\";\n    }\n    echo \"\\n\";\n}\necho \"normal\\n\";\n$stream0 = stream_socket_server(\"udp://0.0.0.0:0\", $errno, $errstr, STREAM_SERVER_BIND);\n$sock0 = socket_import_stream($stream0);\ntest($stream0, $sock0);\necho \"\\nunset stream\\n\";\n$stream1 = stream_socket_server(\"udp://0.0.0.0:0\", $errno, $errstr, STREAM_SERVER_BIND);\n$sock1 = socket_import_stream($stream1);\nunset($stream1);\ntest(null, $sock1);\necho \"\\nunset socket\\n\";\n$stream2 = stream_socket_server(\"udp://0.0.0.0:0\", $errno, $errstr, STREAM_SERVER_BIND);\n$sock2 = socket_import_stream($stream2);\nunset($sock2);\ntest($stream2, null);\necho \"\\nclose stream\\n\";\n$stream3 = stream_socket_server(\"udp://0.0.0.0:0\", $errno, $errstr, STREAM_SERVER_BIND);\n$sock3 = socket_import_stream($stream3);\nfclose($stream3);\ntest($stream3, $sock3);\necho \"\\nclose socket\\n\";\n$stream4 = stream_socket_server(\"udp://0.0.0.0:0\", $errno, $errstr, STREAM_SERVER_BIND);\n$sock4 = socket_import_stream($stream4);\nsocket_close($sock4);\ntest($stream4, $sock4);\necho \"Done.\\n\";\n?>")).toMatchSnapshot();
  });
});
