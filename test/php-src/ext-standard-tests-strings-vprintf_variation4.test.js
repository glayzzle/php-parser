// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/vprintf_variation4.phpt
  it("Test vprintf() function : usage variations - int formats with non-integer values", function () {
    expect(parser.parseCode("<?php\n/*\n * Test vprintf() when different int formats and non-int values are passed to\n * the '$format' and '$args' arguments of the function\n*/\necho \"*** Testing vprintf() : int formats and non-integer values ***\\n\";\n// defining array of int formats\n$formats =\n  '%d %+d %-d\n   %ld %4d %-4d\n   %10.4d %-10.4d %.4d %04.4d\n   %\\'#2d %\\'2d %\\'$2d %\\'_2d\n   %3$d %4$d %1$d %2$d';\n// Arrays of non int values for the format defined in $format.\n// Each sub array contains non int values which correspond to each format in $format\n$args_array = array(\n  // array of float values\n  array(2.2, .2, 10.2,\n        123456.234, -1234.6789, +1234.6789,\n        2e10, +2e5, 4e3, 22e+6,\n        12345.780, 12.000000011111, -12.00000111111, -123456.234,\n        3.33, +4.44, 1.11,-2.22 ),\n  // array of strings\n  array(\" \", ' ', 'hello',\n        '123hello', '-123hello', '+123hello',\n        \"\\12345678hello\", \"-\\12345678hello\", '0123456hello', 'h123456ello',\n        \"1234hello\", \"hello\\0world\", \"NULL\", \"true\",\n        \"3\", \"4\", '1', '2'),\n  // different arrays\n  array( array(0), array(1, 2), array(-1, -1),\n         array(\"123\"), array('-123'), array(\"-123\"),\n         array(true), array(false), array(TRUE), array(FALSE),\n         array(\"123hello\"), array(\"1\", \"2\"), array('123hello'), array(12=>\"12twelve\"),\n         array(\"3\"), array(\"4\"), array(\"1\"), array(\"2\") ),\n  // array of boolean data\n  array( true, TRUE, false,\n         TRUE, FALSE, 1,\n         true, false, TRUE, FALSE,\n         0, 1, 1, 0,\n         1, TRUE, 0, FALSE),\n);\n// looping to test vprintf() with different int formats from the above $format array\n// and with non-int values from the above $args_array array\n$counter = 1;\nforeach($args_array as $args) {\n  echo \"\\n-- Iteration $counter --\\n\";\n  $result = vprintf($formats, $args);\n  echo \"\\n\";\n  var_dump($result);\n  $counter++;\n}\n?>")).toMatchSnapshot();
  });
});
