// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/gettype_settype_basic.phpt
  it("Test gettype() & settype() functions : basic functionalities", function () {
    expect(parser.parseCode("<?php\n/* Test the basic functionalities of settype() & gettype() functions.\n   Use the gettype() to get the type of regular data and use settype()\n   to change its type to other types */\n/* function to handle catchable errors */\nfunction foo($errno, $errstr, $errfile, $errline) {\n//\tvar_dump($errstr);\n   // print error no and error string\n   echo \"$errno: $errstr\\n\";\n}\n//set the error handler, this is required as\n// settype() would fail with catachable fatal error\nset_error_handler(\"foo\");\necho \"**** Testing gettype() and settype() functions ****\\n\";\n$fp = fopen(__FILE__, \"r\");\n$dfp = opendir( __DIR__ );\n$var1 = \"another string\";\n$var2 = array(2,3,4);\nclass point\n{\n  var $x;\n  var $y;\n  function __construct($x, $y) {\n     $this->x = $x;\n     $this->y = $y;\n  }\n  function __toString() {\n     return \"Object\";\n  }\n}\n$unset_var = 10;\nunset($unset_var);\n$values = array(\n  array(1,2,3),\n  $var1,\n  $var2,\n  1,\n  -20,\n  2.54,\n  -2.54,\n  NULL,\n  false,\n  \"some string\",\n  'string',\n  $fp,\n  $dfp,\n  new point(10,20)\n);\n$types = array(\n  \"null\",\n  \"integer\",\n  \"int\",\n  \"float\",\n  \"double\",\n  \"boolean\",\n  \"bool\",\n  \"resource\",\n  \"array\",\n  \"object\",\n  \"string\"\n);\necho \"\\n*** Testing gettype(): basic operations ***\\n\";\nforeach ($values as $value) {\n  var_dump( gettype($value) );\n}\necho \"\\n*** Testing settype(): basic operations ***\\n\";\nforeach ($types as $type) {\n  echo \"\\n-- Setting type of data to $type --\\n\";\n  $loop_count = 1;\n  foreach ($values as $var) {\n     echo \"-- Iteration $loop_count --\\n\"; $loop_count ++;\n     try {\n        // set to new type\n        var_dump( settype($var, $type) );\n        // dump the var\n        var_dump( $var );\n        // check the new type\n        var_dump( gettype($var) );\n     } catch (ValueError $exception) {\n         echo $exception->getMessage() . \"\\n\";\n     }\n  }\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
