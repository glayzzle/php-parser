// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_exec_load_data.phpt
  it("MySQL PDO->exec(), affected rows", function () {
    expect(parser.parseCode("<?php\n    function exec_and_count($offset, &$db, $sql, $exp) {\n        try {\n            $ret = $db->exec($sql);\n            if ($ret !== $exp) {\n                printf(\"[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s\\n\",\n                    $offset, $exp, gettype($exp), $ret, gettype($ret), $sql,\n                    $db->errorCode(), implode(' ', $db->errorInfo()));\n                return false;\n            }\n        } catch (PDOException $e) {\n            if (42000 == $db->errorCode()) {\n                // Error: 1148 SQLSTATE: 42000  (ER_NOT_ALLOWED_COMMAND)\n                // Load data infile not allowed\n                return false;\n            }\n            printf(\"[%03d] '%s' has failed, [%s] %s\\n\",\n                $offset, $sql, $db->errorCode(), implode(' ', $db->errorInfo()));\n            return false;\n        }\n        return true;\n    }\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    putenv('PDOTEST_ATTR='.serialize([PDO::MYSQL_ATTR_LOCAL_INFILE=>true]));\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    /* affected rows related */\n    exec_and_count(2, $db, 'DROP TABLE IF EXISTS test', 0);\n    exec_and_count(3, $db, sprintf('CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE), 0);\n    $stmt = $db->query(\"SHOW VARIABLES LIKE 'secure_file_priv'\");\n    if (($row = $stmt->fetch(PDO::FETCH_ASSOC)) && ($row['value'] != '')) {\n        $filename = $row['value'] . DIRECTORY_SEPARATOR  . \"pdo_mysql_exec_load_data.csv\";\n    } else {\n        $filename =  MySQLPDOTest::getTempDir() . DIRECTORY_SEPARATOR  . \"pdo_mysql_exec_load_data.csv\";\n    }\n    $fp = fopen($filename, \"w\");\n    fwrite($fp, \"1;foo\\n\");\n    fwrite($fp, \"2;bar\");\n    fclose($fp);\n    $sql = sprintf(\"LOAD DATA LOCAL INFILE %s INTO TABLE test FIELDS TERMINATED BY ';' LINES TERMINATED  BY '\\n'\", $db->quote($filename));\n    if (exec_and_count(4, $db, $sql, 2)) {\n        $stmt = $db->query('SELECT id, col1 FROM test ORDER BY id ASC');\n        $expected = array(array(\"id\" => 1, \"col1\" => \"foo\"), array(\"id\" => 2, \"col1\" => \"bar\"));\n        $ret = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        foreach ($expected as $offset => $exp) {\n            foreach ($exp as $key => $value) {\n                if ($ret[$offset][$key] != $value) {\n                    printf(\"Results seem wrong, check manually\\n\");\n                    var_dump($ret);\n                    var_dump($expected);\n                    break 2;\n                }\n            }\n        }\n    }\n    unlink($filename);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
