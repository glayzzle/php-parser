// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_debug_mysqlnd_only.phpt
  it("mysqli_debug() - mysqlnd only control strings", function () {
    expect(parser.parseCode("<?php\n    require_once('connect.inc');\n    require_once('table.inc');\n    function try_control_string($link, $control_string, $trace_file, $offset) {\n        @unlink($trace_file);\n        if (true !== ($tmp = @mysqli_debug($control_string))) {\n            printf(\"[%03d][control string '%s'] Expecting boolean/true, got %s/%s.\\n\",\n                $offset + 1,\n                $control_string,\n                gettype($tmp),\n                $tmp);\n            return false;\n        }\n        if (!$res = mysqli_query($link, 'SELECT * FROM test')) {\n            printf(\"[%03d][control string '%s'] [%d] %s.\\n\",\n                $offset + 2,\n                $control_string,\n                mysqli_errno($link),\n                mysqli_error($link));\n            return false;\n        }\n        while ($row = mysqli_fetch_assoc($res))\n            ;\n        mysqli_free_result($res);\n        clearstatcache();\n        if (!file_exists($trace_file)) {\n            printf(\"[%03d][control string '%s'] Trace file has not been written.\\n\",\n                $offset + 3,\n                $control_string,\n                gettype($tmp),\n                $tmp);\n            return false;\n        }\n        return trim(substr(file_get_contents($trace_file), 0, 100024));\n    }\n    $memory_funcs = array(\n        '_mysqlnd_ecalloc',\n        '_mysqlnd_emalloc',\n        '_mysqlnd_palloc_free_thd_cache_reference',\n        '_mysqlnd_pecalloc',\n        '_mysqlnd_pefree',\n        '_mysqlnd_pemalloc',\n        '_mysqlnd_perealloc',\n    );\n    $trace_file = sprintf('%s%s%s', sys_get_temp_dir(), DIRECTORY_SEPARATOR, 'mysqli_debug_phpt.trace');\n    $trace = try_control_string($link, 't:m:O,' . $trace_file, $trace_file, 10);\n    if (!strstr($trace, 'SELECT * FROM test') && !strstr($trace, 'mysql_real_query'))\n        printf(\"[015] SELECT query cannot be found in trace. Trace contents seems wrong.\\n\");\n    $lines_trace = explode(\"\\n\", $trace);\n    $functions_trace = array();\n    foreach ($lines_trace as $k => $line) {\n        $line = trim($line);\n        if (preg_match(\"@^[|\\s]*>([\\w:]+)@ism\", $line, $matches)) {\n            $functions_trace[$matches[1]] = $matches[1];\n        }\n    }\n    $found = 0;\n    foreach ($memory_funcs as $k => $name)\n        if (isset($functions_trace[$name]))\n            $found++;\n    if ($found < 1) {\n        printf(\"[016] Only %d memory functions have been found, expecting at least %d.\\n\",\n            $found, 1);\n        var_dump($trace);\n    }\n    $trace = try_control_string($link, 't:O,' . $trace_file, $trace_file, 20);\n    if (!strstr($trace, 'SELECT * FROM test') && !strstr($trace, 'mysql_real_query'))\n        printf(\"[025] SELECT query cannot be found in trace. Trace contents seems wrong.\\n\");\n    $lines_trace = explode(\"\\n\", $trace);\n    $functions_trace = array();\n    foreach ($lines_trace as $k => $line) {\n        $line = trim($line);\n        if (preg_match(\"@^[|\\s]*>([\\w:]+)@ism\", $line, $matches)) {\n            $functions_trace[$matches[1]] = $matches[1];\n        }\n    }\n    $found = 0;\n    foreach ($memory_funcs as $k => $name)\n        if (isset($functions_trace[$name]))\n            $found++;\n    if ($found > 2) {\n        printf(\"[026] More than %d memory functions have been recorded, that's strange.\\n\",\n            $found);\n        var_dump($trace);\n    }\n    mysqli_close($link);\n    @unlink($trace_file);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
