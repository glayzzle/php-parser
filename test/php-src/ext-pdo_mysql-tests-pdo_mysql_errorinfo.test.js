// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_errorinfo.phpt
  it("MySQL PDO->errorInfo()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db);\n    function check_error($offset, &$obj, $expected = '00000') {\n        $info = $obj->errorInfo();\n        $code = $info[0];\n        if (($code != $expected) && (($expected != '00000') && ($code != ''))) {\n            printf(\"[%03d] Expecting error code '%s' got code '%s'\\n\",\n                $offset, $expected, $code);\n        }\n        if ($expected != '00000') {\n            if (!isset($info[1]) || $info[1] == '')\n                printf(\"[%03d] Driver-specific error code not set\\n\", $offset);\n            if (!isset($info[2]) || $info[2] == '')\n                printf(\"[%03d] Driver-specific error message.not set\\n\", $offset);\n        }\n    }\n    function pdo_mysql_errorinfo($db, $offset) {\n        try {\n            /*\n            If you create a PDOStatement object through PDO->prepare()\n            or PDO->query() and invoke an error on the statement handle,\n            PDO->errorCode() will not reflect that error. You must call\n            PDOStatement->errorCode() to return the error code for an\n            operation performed on a particular statement handle.\n            */\n            $code = $db->errorCode();\n            check_error($offset + 2, $db);\n            $stmt = $db->query('SELECT id, label FROM test');\n            $stmt2 = &$stmt;\n            check_error($offset + 3, $db);\n            check_error($offset + 4, $stmt);\n            $db->exec('DROP TABLE IF EXISTS test');\n            @$stmt->execute();\n            check_error($offset + 5, $db);\n            check_error($offset + 6, $stmt, '42S02');\n            check_error($offset + 7, $stmt2, '42S02');\n            @$stmt = $db->query('SELECT id, label FROM unknown');\n            check_error($offset + 8, $db, '42S02');\n            MySQLPDOTest::createTestTable($db);\n            $stmt = $db->query('SELECT id, label FROM test');\n            check_error($offset + 9, $db);\n            check_error($offset + 10, $stmt);\n            $db2 = &$db;\n            $db->exec('DROP TABLE IF EXISTS unknown');\n            @$db->query('SELECT id, label FROM unknown');\n            check_error($offset + 11, $db, '42S02');\n            check_error($offset + 12, $db2, '42S02');\n            check_error($offset + 13, $stmt);\n            check_error($offset + 14, $stmt2);\n            // lets hope this is an invalid attribute code\n            $invalid_attr = -1 * PHP_INT_MAX + 3;\n            $tmp = @$db->getAttribute($invalid_attr);\n            check_error($offset + 15, $db, 'IM001');\n            check_error($offset + 16, $db2, 'IM001');\n            check_error($offset + 17, $stmt);\n            check_error($offset + 18, $stmt2);\n        } catch (PDOException $e) {\n            printf(\"[%03d] %s [%s] %s\\n\",\n                $offset + 19, $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n        }\n    }\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n    printf(\"Emulated Prepared Statements...\\n\");\n    pdo_mysql_errorinfo($db, 0);\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n    printf(\"Native Prepared Statements...\\n\");\n    pdo_mysql_errorinfo($db, 20);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
