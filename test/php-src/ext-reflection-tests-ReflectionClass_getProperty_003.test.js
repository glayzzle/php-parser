// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionClass_getProperty_003.phpt
  it("ReflectionClass::getProperty()", function () {
    expect(parser.parseCode("<?php\nclass A {\n    static public $pubC = \"pubC in A\";\n    static protected $protC = \"protC in A\";\n    static private $privC = \"privC in A\";\n    static public $pubA = \"pubA in A\";\n    static protected $protA = \"protA in A\";\n    static private $privA = \"privA in A\";\n}\nclass B extends A {\n    static public $pubC = \"pubC in B\";\n    static protected $protC = \"protC in B\";\n    static private $privC = \"privC in B\";\n    static public $pubB = \"pubB in B\";\n    static protected $protB = \"protB in B\";\n    static private $privB = \"privB in B\";\n}\nclass C extends B {\n    static public $pubC = \"pubC in C\";\n    static protected $protC = \"protC in C\";\n    static private $privC = \"privC in C\";\n}\nclass X {\n    static public $pubC = \"pubC in X\";\n    static protected $protC = \"protC in X\";\n    static private $privC = \"privC in X\";\n}\n$myC = new C;\n$rc = new ReflectionClass(\"C\");\nfunction showInfo($name) {\n    global $rc, $myC;\n    echo \"--- (Reflecting on $name) ---\\n\";\n    try {\n        $rp = $rc->getProperty($name);\n    } catch (Exception $e) {\n        echo $e->getMessage() . \"\\n\";\n        return;\n    }\n    var_dump($rp);\n    var_dump($rp->getValue($myC));\n}\nshowInfo(\"pubA\");\nshowInfo(\"protA\");\nshowInfo(\"privA\");\nshowInfo(\"pubB\");\nshowInfo(\"protB\");\nshowInfo(\"privB\");\nshowInfo(\"pubC\");\nshowInfo(\"protC\");\nshowInfo(\"privC\");\nshowInfo(\"doesNotExist\");\nshowInfo(\"A::pubC\");\nshowInfo(\"A::protC\");\nshowInfo(\"A::privC\");\nshowInfo(\"B::pubC\");\nshowInfo(\"B::protC\");\nshowInfo(\"B::privC\");\nshowInfo(\"c::pubC\");\nshowInfo(\"c::PUBC\");\nshowInfo(\"C::pubC\");\nshowInfo(\"C::protC\");\nshowInfo(\"C::privC\");\nshowInfo(\"X::pubC\");\nshowInfo(\"X::protC\");\nshowInfo(\"X::privC\");\nshowInfo(\"X::doesNotExist\");\nshowInfo(\"doesNotexist::doesNotExist\");\n?>")).toMatchSnapshot();
  });
});
