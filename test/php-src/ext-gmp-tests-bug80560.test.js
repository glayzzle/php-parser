// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gmp/tests/bug80560.phpt
  it("Bug #80560: Strings containing only a base prefix return 0 object", function () {
    expect(parser.parseCode("<?php\n$functions1 = [\n    'gmp_init',\n    'gmp_export',\n    'gmp_intval',\n    'gmp_strval',\n    'gmp_neg',\n    'gmp_abs',\n    'gmp_fact',\n    'gmp_sqrt',\n    'gmp_sqrtrem',\n    'gmp_perfect_square',\n    'gmp_perfect_power',\n    'gmp_prob_prime',\n    'gmp_sign',\n    'gmp_random_seed',\n    'gmp_popcount',\n    'gmp_com',\n    'gmp_nextprime',\n];\n$functions1_need_int_2 = [\n    'gmp_testbit',\n    'gmp_scan0',\n    'gmp_scan1',\n    'gmp_binomial',\n    'gmp_root',\n    'gmp_rootrem',\n    'gmp_pow',\n];\n$functions2 = [\n    'gmp_add',\n    'gmp_sub',\n    'gmp_mul',\n    'gmp_div',\n    'gmp_div_q',\n    'gmp_div_r',\n    'gmp_div_qr',\n    'gmp_divexact',\n    'gmp_mod',\n    'gmp_gcd',\n    'gmp_gcdext',\n    'gmp_lcm',\n    'gmp_invert',\n    'gmp_jacobi',\n    'gmp_legendre',\n    'gmp_kronecker',\n    'gmp_cmp',\n    'gmp_random_range',\n    'gmp_and',\n    'gmp_or',\n    'gmp_xor',\n    'gmp_hamdist',\n];\n$functions3 = [\n    'gmp_powm',\n];\necho 'Explicit base with gmp_init:', \\PHP_EOL;\necho 'Hexadecimal', \\PHP_EOL;\ntry {\n    var_dump(gmp_init('0X', 16));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    var_dump(gmp_init('0x', 16));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\necho 'Binary', \\PHP_EOL;\ntry {\n    var_dump(gmp_init('0B', 2));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    var_dump(gmp_init('0b', 2));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\necho 'Fuzzing gmp functions:', \\PHP_EOL;\nforeach ($functions1 as $function) {\n    try {\n        $function('0B');\n        echo $function, ' failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0b');\n        echo $function, ' failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0X');\n        echo $function, ' failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0x');\n        echo $function, ' failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n}\nforeach ($functions1_need_int_2 as $function) {\n    try {\n        $function('0B', 1);\n        echo $function, ' failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0b', 1);\n        echo $function, ' failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0X', 1);\n        echo $function, ' failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0x', 1);\n        echo $function, ' failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n}\nforeach ($functions2 as $function) {\n    try {\n        $function('0B', 1);\n        echo $function, ' arg 1 failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0b', 1);\n        echo $function, ' arg 1 failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0X', 1);\n        echo $function, ' arg 1 failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0x', 1);\n        echo $function, ' arg 1 failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0B');\n        echo $function, ' arg 2 failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0b');\n        echo $function, ' arg 2 failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0X');\n        echo $function, ' arg 2 failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0x');\n        echo $function, ' arg 2 failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n}\nforeach ($functions3 as $function) {\n    try {\n        $function('0B', 1, 1);\n        echo $function, ' arg 1 failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0b', 1, 1);\n        echo $function, ' arg 1 failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0X', 1, 1);\n        echo $function, ' arg 1 failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function('0x', 1, 1);\n        echo $function, ' arg 1 failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0B', 1);\n        echo $function, ' arg 2 failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0b', 1);\n        echo $function, ' arg 2 failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0X', 1);\n        echo $function, ' arg 2 failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, '0x', 1);\n        echo $function, ' arg 2 failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, 1, '0B');\n        echo $function, ' arg 3 failed with 0B', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, 1, '0b');\n        echo $function, ' arg 3 failed with 0b', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, 1, '0X');\n        echo $function, ' arg 3 failed with 0X', \\PHP_EOL;\n    } catch (\\ValueError) { }\n    try {\n        $function(1, 1, '0x');\n        echo $function, ' arg 3 failed with 0x', \\PHP_EOL;\n    } catch (\\ValueError) { }\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
