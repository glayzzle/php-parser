// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_phpinfo.phpt
  it("phpinfo() mysqli section", function () {
    expect(parser.parseCode("<?php\n    include(\"connect.inc\");\n    @ob_clean();\n    ob_start();\n    phpinfo();\n    $phpinfo = ob_get_contents();\n    ob_end_clean();\n    /* all versions should at least dump this minimum information */\n    if (!stristr($phpinfo, \"mysqli support\"))\n        printf(\"[001] ext/mysqli should have exposed itself.\\n\");\n    if (!stristr($phpinfo, \"client api library version\"))\n        printf(\"[002] ext/mysqli should have exposed the library version.\\n\");\n    if (!stristr($phpinfo, \"mysqli.default_host\"))\n        printf(\"[003] php.ini setting mysqli.default_host not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.default_port\"))\n        printf(\"[004] php.ini setting mysqli.default_port not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.default_pw\"))\n        printf(\"[005] php.ini setting mysqli.default_pw not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.default_socket\"))\n        printf(\"[006] php.ini setting mysqli.default_socket not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.default_user\"))\n        printf(\"[007] php.ini setting mysqli.default_user not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.max_links\"))\n        printf(\"[008] php.ini setting mysqli.max_links not shown.\\n\");\n    if (!stristr($phpinfo, \"mysqli.reconnect\"))\n        printf(\"[009] php.ini setting mysqli.reconnect not shown.\\n\");\n    if ($IS_MYSQLND) {\n        $expected = array(\n            'size',\n            'mysqli.allow_local_infile', 'mysqli.local_infile_directory',\n            'mysqli.allow_persistent', 'mysqli.max_persistent'\n        );\n        foreach ($expected as $k => $entry)\n            if (!stristr($phpinfo, $entry))\n                printf(\"[010] Could not find entry for '%s'\\n\", $entry);\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
