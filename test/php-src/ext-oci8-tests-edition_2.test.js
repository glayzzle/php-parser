// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/edition_2.phpt
  it("Set and check Oracle 11gR2 \"edition\" attribute", function () {
    expect(parser.parseCode("<?php\nerror_reporting(E_ALL ^ E_DEPRECATED);\n/* In 11.2, there can only be one child edition.  So this test will\n * fail to create the necessary editions if a child edition exists\n * already\n */\n$testuser     = 'testuser_ed_2';  // Used in conn_attr.inc\n$testpassword = 'testuser';\nrequire(__DIR__.\"/conn_attr.inc\");\necho\"**Test 1.1 - Default value for  the attribute **************\\n\";\nget_edit_attr($c);\necho\"\\n\\n**Test 1.2 - Set a value and get the same with different connections *********\\n\";\nset_edit_attr('MYEDITION');\n// With oci_connect, oci_pconnect, oci_new_connect\n$conn1 = get_conn(1);\nget_edit_attr($conn1);\n//pconnect\n$conn2 = get_conn(2);\nget_edit_attr($conn2);\n//new_connect\n$conn3 = get_conn(3);\nget_edit_attr($conn3);\noci_close($conn1);\n// With a oci_pconnect with a different charset.\n$pc1 = oci_pconnect($testuser,$testpassword,$dbase,\"utf8\");\nget_edit_attr($pc1);\noci_close($pc1);\necho\"\\n\\n**Test 1.3 change the value and verify with existing connections.*********\\n\";\nset_edit_attr('MYEDITION1');\nget_edit_attr($conn2);\nget_edit_attr($conn3); // Old value\noci_close($conn2);\noci_close($conn3);\n//open a new connection and get the edition value . This will have the updated value.\n$c3 = get_conn(3); //oci_new_connect()\nget_edit_attr($c3);\n$c4 = get_conn(2); //oci_pconnect()\nget_edit_attr($c4);\n$c5 = get_conn(1); //oci_connect()\nget_edit_attr($c5);\noci_close($c3);\noci_close($c4);\noci_close($c5);\necho \"\\n\\n**Test 1.4 - with different type of values *********\\n\";\n$values_array = array(123,NULL,'NO EDITION','edition name which has more than thirty chars!!!edition name which has more than thirty chars!!!');\nforeach ($values_array as $val ) {\n    set_edit_attr($val);\n    $c1 = get_conn(1); //oci_connect()\n    if ($c1) {\n        get_edit_attr($c1);\n        oci_close($c1);\n    }\n}\necho \"\\n\\n**Test 1.5 - Negative case with an invalid string value. *********\\n\";\n$c1 = get_conn(3);\n$r = set_edit_attr($c1);\necho\"\\n\\n**Test 1.6 - Set Multiple times.*****\\n\";\nset_edit_attr('MYEDITION');\nset_edit_attr('MYEDITION1');\n$c1 = get_conn(1);\nget_edit_attr($c1);\noci_close($c1);\necho \"\\n\\n**Test 1.7 - Test with ALTER SESSION statement to change the edition *******\\n\";\n// Set the edition value to MYEDITION. open a conn .get the value.\n// execute the alter system set edition ='MYEDITION' .get the value .\n// set it back to MYEDITION using oci_set_edition. and get the value.\nset_edit_attr('MYEDITION');\n$c1 = get_conn(3);\necho \"get the value set to MYEDITION with oci_set_edition\\n\";\nget_edit_attr($c1);\n$alter_stmt = \"alter session set edition = MYEDITION1\";\n$s = oci_parse($c1,$alter_stmt);\noci_execute($s);\noci_commit($c1);\necho \"Get the value set to MYEDITION1 with alter session\\n\";\nget_edit_attr($c1);\necho \" Get the value with a new connection\\n\";\n$c2 = get_conn(1);\nget_edit_attr($c2);\necho \" Set the value back using oci-set_edition\\n\";\nset_edit_attr('MYEDITION');\nget_edit_attr($c2);\necho \" Get the value with a new connection\\n\";\n$c3 = get_conn(1);\nget_edit_attr($c3);\noci_close($c1);\noci_close($c2);\noci_close($c3);\necho \"\\n\\n**Test 1.8 - Test setting the attribute with scope ends*******\\n\";\nset_scope();\nget_scope();\nclean_up($c);\necho \"Done\\n\";\nfunction set_scope() {\n    $r = set_edit_attr('MYEDITION1');\n}\nfunction get_scope() {\n    $sc1 = oci_connect($GLOBALS['testuser'],$GLOBALS['testpassword'],$GLOBALS['dbase']);\n    if ($sc1 === false) {\n        $m = oci_error();\n        die(\"Error:\" . $m['message']);\n    }\n    get_edit_attr($sc1);\n    oci_close($sc1);\n}\n?>")).toMatchSnapshot();
  });
});
