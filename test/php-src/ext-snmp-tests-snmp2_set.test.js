// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/snmp/tests/snmp2_set.phpt
  it("Function snmp2_set", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__.'/snmp_include.inc');\n//EXPECTF format is quickprint OFF\nsnmp_set_quick_print(false);\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\necho \"Check error handing\\n\";\necho \"No type & no value (timeout & retries instead)\\n\";\ntry {\n    $z = snmp2_set($hostname, $communityWrite, 'SNMPv2-MIB::sysLocation.0', $timeout, $retries);\n    var_dump($z);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\necho \"No value (timeout instead), retries instead of timeout\\n\";\n$z = snmp2_set($hostname, $communityWrite, 'SNMPv2-MIB::sysLocation.0', 'q', $timeout, $retries);\nvar_dump($z);\necho \"Bogus OID\\n\";\n$z = snmp2_set($hostname, $communityWrite, '.1.3.6.777.888.999.444.0', 's', 'bbb', $timeout, $retries);\nvar_dump($z);\necho \"Checking working\\n\";\n$oid1 = 'SNMPv2-MIB::sysContact.0';\n$oldvalue1 = snmpget($hostname, $communityWrite, $oid1, $timeout, $retries);\n$newvalue1 = $oldvalue1 . '0';\n$oid2 = 'SNMPv2-MIB::sysLocation.0';\n$oldvalue2 = snmpget($hostname, $communityWrite, $oid1, $timeout, $retries);\n$newvalue2 = $oldvalue2 . '0';\necho \"Single OID\\n\";\n$z = snmp2_set($hostname, $communityWrite, $oid1, 's', $newvalue1, $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $newvalue1));\n$z = snmp2_set($hostname, $communityWrite, $oid1, 's', $oldvalue1, $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\necho \"Multiple OID\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s','s'), array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $newvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $newvalue2));\n$z = snmp2_set($hostname, $communityWrite, '.1.3.6.777.888.999.444.0', 's', 'bbb', $timeout, $retries);\nvar_dump($z);\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s','s'), array($oldvalue1, $oldvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, single type & value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), 's', $newvalue1, $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $newvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $newvalue1));\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s','s'), array($oldvalue1, $oldvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2 ));\necho \"Multiple OID, single type, multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), 's', array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $newvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $newvalue2));\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s','s'), array($oldvalue1, $oldvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"More error handing\\n\";\necho \"Single OID, single type in array, single value\\n\";\ntry {\n    $z = snmp2_set($hostname, $communityWrite, $oid1, array('s'), $newvalue1, $timeout, $retries);\n    var_dump($z);\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Single OID, single type, single value in array\\n\";\ntry {\n    $z = snmp2_set($hostname, $communityWrite, $oid1, 's', array($newvalue1), $timeout, $retries);\n    var_dump($z);\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, 1st wrong type\\n\";\ntry {\n    $z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('sw','s'), array($newvalue1, $newvalue2), $timeout, $retries);\n    var_dump($z);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, 2nd wrong type\\n\";\ntry {\n    $z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s','sb'), array($newvalue1, $newvalue2), $timeout, $retries);\n    var_dump($z);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, single type in array, multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s'), array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID & type, single value in array\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s', 's'), array($newvalue1), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, 1st bogus, single type, multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1 . '44.55.66.77', $oid2), 's', array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, 2nd bogus, single type, multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2 . '44.55.66.77'), 's', array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, single multiple type (1st bogus), multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('q', 's'), array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\necho \"Multiple OID, single multiple type (2nd bogus), multiple value\\n\";\n$z = snmp2_set($hostname, $communityWrite, array($oid1, $oid2), array('s', 'w'), array($newvalue1, $newvalue2), $timeout, $retries);\nvar_dump($z);\nvar_dump((snmpget($hostname, $communityWrite, $oid1, $timeout, $retries) === $oldvalue1));\nvar_dump((snmpget($hostname, $communityWrite, $oid2, $timeout, $retries) === $oldvalue2));\n?>")).toMatchSnapshot();
  });
});
