// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_poll_kill.phpt
  it("int mysqli_poll() and kill", function () {
    expect(parser.parseCode("<?php\n    require_once('connect.inc');\n    function get_connection() {\n        global $host, $user, $passwd, $db, $port, $socket;\n        if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n            printf(\"[001] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n        return $link;\n    }\n    // Killing connection - 1\n    $link = get_connection();\n    if (true !== ($tmp = mysqli_query($link, \"SELECT 1 AS 'processed before killed'\", MYSQLI_ASYNC |  MYSQLI_USE_RESULT)))\n        printf(\"[002] Expecting boolean/true got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n    // Sleep 0.1s - the asynchronous query should have been processed after the wait period\n    usleep(100000);\n    $thread_id = mysqli_thread_id($link);\n    mysqli_kill(get_connection(), $thread_id);\n    $links = array($link);\n    $errors = array($link);\n    $reject = array($link);\n    // Yes, 1 - the asynchronous query should have been processed\n    if (1 !== ($tmp = (mysqli_poll($links, $errors, $reject, 0, 10000))))\n        printf(\"[003] Expecting int/1 got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n    if (!is_array($links) || empty($links))\n        printf(\"[004] Expecting non-empty array got %s/%s\\n\", gettype($links), var_export($links, true));\n    else\n        foreach ($links as $link) {\n            if (is_object($res = mysqli_reap_async_query($link))) {\n                // Yes, you can fetch a result - the query has been processed\n                var_dump(mysqli_fetch_assoc($res));\n                mysqli_free_result($res);\n            } else if ($link->errno > 0) {\n                printf(\"[005] Error: %d\\n\", $link->errno);\n            }\n        }\n    // No error!\n    if (!is_array($errors) || !empty($errors))\n        printf(\"[006] Expecting non-empty array got %s/%s\\n\", gettype($errors), var_export($errors, true));\n    if (!is_array($reject) || !empty($reject))\n        printf(\"[007] Expecting empty array got %s/%s\\n\", gettype($reject), var_export($reject, true));\n    // Lets pass a dead connection\n    $links = array($link);\n    $errors = array($link);\n    $reject = array($link);\n    if (0 !== ($tmp = mysqli_poll($links, $errors, $reject, 1)))\n        printf(\"[008] There should be no connection ready! Returned %s/%s, expecting int/0.\\n\",\n            gettype($tmp), var_export($tmp, true));\n    if (!empty($errors))\n        printf(\"[009] There should be no errors but one rejected connection\\n\");\n    foreach ($reject as $mysqli)\n        if (mysqli_thread_id($mysqli) != $thread_id) {\n            printf(\"[010] Rejected thread %d should have rejected thread %d\\n\",\n                mysqli_thread_id($mysqli), $thread_id);\n        }\n    // Killing connection - 2\n    $link = get_connection();\n    if (true !== ($tmp = mysqli_query($link, \"SELECT 1\", MYSQLI_ASYNC |  MYSQLI_USE_RESULT)))\n        printf(\"[011] Expecting boolean/true got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n    usleep(100000);\n    $thread_id = mysqli_thread_id($link);\n    mysqli_kill(get_connection(), $thread_id);\n    // Yes, 1 - fetch OK packet of kill!\n    $processed = 0;\n    $begin = microtime(true);\n    do {\n        $links = array($link, $link);\n        $errors = array($link, $link);\n        $reject = array($link, $link);\n        $ready = mysqli_poll($links, $errors, $reject, 1);\n        if (!empty($errors)) {\n            foreach ($errors as $mysqli) {\n                printf(\"[012] Error on thread %d: %s/%s\\n\",\n                    mysqli_thread_id($mysqli),\n                    mysqli_errno($mysqli),\n                    mysqli_error($mysqli));\n            }\n            break;\n        }\n        if (FALSE === $ready) {\n            printf(\"[013] MySQLi indicates some error\\n\");\n            break;\n        }\n        if (!empty($reject)) {\n            foreach ($reject as $mysqli) {\n                printf(\"[014] Rejecting thread %d: %s/%s\\n\",\n                    mysqli_thread_id($mysqli),\n                    mysqli_errno($mysqli),\n                    mysqli_error($mysqli));\n            }\n            $processed += count($reject);\n        }\n        foreach ($links as $mysqli) {\n            if (is_object($res = mysqli_reap_async_query($mysqli))) {\n                printf(\"Fetching from thread %d...\\n\", mysqli_thread_id($mysqli));\n                var_dump(mysqli_fetch_assoc($res));\n            } else if (mysqli_errno($mysqli) > 0) {\n                printf(\"[015] %d/%s\\n\", mysqli_errno($mysqli), mysqli_error($mysqli));\n            }\n            $processed++;\n        }\n        if ((microtime(true) - $begin) > 5) {\n            printf(\"[016] Pulling the emergency break after 5s, something is wrong...\\n\");\n            break;\n        }\n    } while ($processed < 2);\n    // Killing connection - 3\n    $link = get_connection();\n    $thread_id = mysqli_thread_id($link);\n    mysqli_kill(get_connection(), $thread_id);\n    // Sleep 0.1s  to ensure the KILL gets recognized\n    usleep(100000);\n    if (false !== ($tmp = mysqli_query($link, \"SELECT 1 AS 'processed before killed'\", MYSQLI_ASYNC |  MYSQLI_USE_RESULT)))\n        printf(\"[017] Expecting boolean/false got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n    $links = array($link);\n    $errors = array($link);\n    $reject = array($link);\n    if (0 !== ($tmp = (mysqli_poll($links, $errors, $reject, 0, 10000))))\n        printf(\"[018] Expecting int/0 got %s/%s\\n\", gettype($tmp), var_export($tmp, true));\n    if (!is_array($links) || empty($links))\n        printf(\"[019] Expecting non-empty array got %s/%s\\n\", gettype($links), var_export($links, true));\n    else\n        foreach ($links as $link) {\n            if (is_object($res = mysqli_reap_async_query($link))) {\n                // No, you cannot fetch the result\n                var_dump(mysqli_fetch_assoc($res));\n                mysqli_free_result($res);\n            } else if ($link->errno > 0) {\n                // But you are supposed to handle the error the way its shown here!\n                printf(\"[020] Error: %d/%s\\n\", $link->errno, $link->error);\n            }\n        }\n    // None of these will indicate an error, check errno on the list of returned connections!\n    if (!is_array($errors) || !empty($errors))\n        printf(\"[021] Expecting non-empty array got %s/%s\\n\", gettype($errors), var_export($errors, true));\n    if (!is_array($reject) || !empty($reject))\n        printf(\"[021] Expecting empty array got %s/%s\\n\", gettype($reject), var_export($reject, true));\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
