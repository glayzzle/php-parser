// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/fixedarray_003.phpt
  it("SPL: FixedArray: Non integer offset handling", function () {
    expect(parser.parseCode("<?php\n$o = new SplFixedArray(10);\n$r = fopen('php://memory', 'r+');\necho 'Write context', \\PHP_EOL;\n$o[false] = 'a';\n$o[true] = 'b';\n$o[2.5] = 'c';\ntry {\n    $o[[]] = 'd';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $o[new stdClass()] = 'e';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $o[$r] = 'f';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n$o['3'] = 'g';\ntry {\n    $o['3.5'] = 'h';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $o['03'] = 'i';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $o[' 3'] = 'j';\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho 'Read context', \\PHP_EOL;\nvar_dump($o[false]);\nvar_dump($o[true]);\nvar_dump($o[2.5]);\ntry {\n    var_dump($o[[]]);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($o[new stdClass()]);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($o[$r]);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump($o['3']);\ntry {\n    var_dump($o['3.5']);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($o['03']);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($o[' 3']);\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho 'isset()', \\PHP_EOL;\nvar_dump(isset($o[false]));\nvar_dump(isset($o[true]));\nvar_dump(isset($o[2.5]));\ntry {\n    var_dump(isset($o[[]]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(isset($o[new stdClass()]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(isset($o[$r]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump(isset($o['3']));\ntry {\n    var_dump(isset($o['3.5']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(isset($o['03']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(isset($o[' 3']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho 'empty()', \\PHP_EOL;\nvar_dump(empty($o[false]));\nvar_dump(empty($o[true]));\nvar_dump(empty($o[2.5]));\ntry {\n    var_dump(empty($o[[]]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(empty($o[new stdClass()]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(empty($o[$r]));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump(empty($o['3']));\ntry {\n    var_dump(empty($o['3.5']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(empty($o['03']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(empty($o[' 3']));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
