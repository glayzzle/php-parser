// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/strstr.phpt
  it("Test strstr() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing basic functionality of strstr() ***\\n\";\nvar_dump( strstr(\"test string\", \"test\") );\nvar_dump( strstr(\"test string\", \"string\") );\nvar_dump( strstr(\"test string\", \"strin\") );\nvar_dump( strstr(\"test string\", \"t s\") );\nvar_dump( strstr(\"test string\", \"g\") );\nvar_dump( md5(strstr(\"te\".chr(0).\"st\", chr(0))) );\nvar_dump( strstr(\"tEst\", \"test\") );\nvar_dump( strstr(\"teSt\", \"test\") );\nvar_dump( strstr(\"\", \"\") );\nvar_dump( strstr(\"a\", \"\") );\nvar_dump( strstr(\"\", \"a\") );\necho \"\\n*** Testing strstr() with various needles ***\";\n$string =\n\"Hello world,012033 -3.3445     NULL TRUE FALSE\\0 abcd\\xxyz \\x000 octal\\n\nabcd$:Hello world\";\n/* needles in an array to get the string starts with needle, in $string */\n$needles = array(\n  \"Hello world\",\n  \"WORLD\",\n  \"\\0\",\n  \"\\x00\",\n  \"\\x000\",\n  \"abcd\",\n  \"xyz\",\n  \"octal\",\n  \"-3\",\n  -3,\n  \"-3.344\",\n  -3.344,\n  \"NULL\",\n  \"0\",\n  0,\n  TRUE,\n  \"TRUE\",\n  \"1\",\n  1,\n  FALSE,\n  \"FALSE\",\n  \" \",\n  \"     \",\n  'b',\n  '\\n',\n  \"\\n\",\n  \"12\",\n  \"12twelve\",\n  $string\n);\n/* loop through to get the string starts with \"needle\" in $string */\nfor( $i = 0; $i < count($needles); $i++ ) {\n  echo \"\\n-- Iteration $i --\\n\";\n  var_dump( strstr($string, $needles[$i]) );\n}\necho \"\\n*** Testing miscellaneous input data ***\\n\";\necho \"-- Passing objects as string and needle --\\n\";\n/* we get \"Recoverable fatal error: saying Object of class needle could not be\nconverted to string\" by default when an object is passed instead of string:\nThe error can be  avoided by choosing the __toString magix method as follows: */\nclass StringCapable\n{\n  function __toString() {\n    return \"Hello, world\";\n  }\n}\n$obj_string = new StringCapable;\nclass needle\n{\n  function __toString() {\n    return \"world\";\n  }\n}\n$obj_needle = new needle;\nvar_dump(strstr(\"$obj_string\", \"$obj_needle\"));\necho \"\\n-- Posiibilities with null --\\n\";\nvar_dump( strstr(\"\", NULL) );\nvar_dump( strstr(NULL, NULL) );\nvar_dump( strstr(\"a\", NULL) );\nvar_dump( strstr(\"/x0\", \"0\") );  // Hexadecimal NUL\necho \"\\n-- A longer and heredoc string --\\n\";\n$string = <<<EOD\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nEOD;\nvar_dump( strstr($string, \"abcd\") );\nvar_dump( strstr($string, \"1234\") );\necho \"\\n-- A heredoc null string --\\n\";\n$str = <<<EOD\nEOD;\nvar_dump( strstr($str, \"\\0\") );\nvar_dump( strstr($str, \"0\") );\necho \"\\n-- simple and complex syntax strings --\\n\";\n$needle = 'world';\n/* Simple syntax */\nvar_dump( strstr(\"Hello, world\", \"$needle\") );  // works\nvar_dump( strstr(\"Hello, world'S\", \"$needle'S\") );  // works\nvar_dump( strstr(\"Hello, worldS\", \"$needleS\") );  // won't work\n/* String with curly braces, complex syntax */\nvar_dump( strstr(\"Hello, worldS\", \"${needle}S\") );  // works\nvar_dump( strstr(\"Hello, worldS\", \"{$needle}S\") );  // works\necho \"\\n*** Testing error conditions ***\";\nvar_dump( strstr($string, \"\"));\nvar_dump( strstr(\"a\", \"b\", \"c\") );  // args > expected\n?>\nDONE")).toMatchSnapshot();
  });
});
