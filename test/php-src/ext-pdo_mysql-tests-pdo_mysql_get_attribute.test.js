// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_get_attribute.phpt
  it("MySQL PDO->getAttribute()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    function set_and_get($offset, $db, $attribute, $value) {\n        $value_type = gettype($value);\n        try {\n            if (!$db->setAttribute($attribute, $value)) {\n                printf(\"[%03d] Cannot set attribute '%s' to value '%s'\\n\",\n                    $offset, $attribute, var_export($tmp, true));\n                return false;\n            }\n            if (gettype($value) != $value_type) {\n                printf(\"[%03d] Call to PDO::setAttribute(int attribute, mixed value) has changed the type of value from %s to %s, test will not work properly\\n\",\n                    $offset, $value_type, gettype($value));\n                return false;\n            }\n            $tmp = $db->getAttribute($attribute);\n            if ($tmp !== $value) {\n                printf(\"[%03d] Attribute '%s' was set to '%s'/%s but getAttribute() reports '%s'/%s\\n\",\n                    $offset, $attribute, var_export($value, true), gettype($value), var_export($tmp, true), gettype($tmp));\n                return false;\n            }\n        } catch (PDOException $e) {\n            printf(\"[%03d] %s, [%s] %s\\n\",\n                $offset, $e->getMessage(),\n                $db->errorCode(), implode(' ', $db->errorInfo()));\n            return false;\n        }\n        return true;\n    }\n    set_and_get(1, $db, PDO::ATTR_AUTOCOMMIT, 1);\n/*\n    set_and_get(2, $db, PDO::ATTR_AUTOCOMMIT, 0);\n    set_and_get(3, $db, PDO::ATTR_AUTOCOMMIT, -1);\n    $obj = new stdClass();\n    set_and_get(4, $db, PDO::ATTR_AUTOCOMMIT, $obj);\n    set_and_get(5, $db, PDO::MYSQL_ATTR_LOCAL_INFILE, 1);\n    set_and_get(6, $db, PDO::MYSQL_ATTR_LOCAL_INFILE, 0);\n    set_and_get(7, $db, PDO::MYSQL_ATTR_LOCAL_INFILE, -1);\n    $tmp = array();\n    set_and_get(8, $db, PDO::MYSQL_ATTR_LOCAL_INFILE, $tmp);\n    set_and_get(9, $db, PPDO::MYSQL_ATTR_INIT_COMMAND, '');\n    set_and_get(10, $db, PPDO::MYSQL_ATTR_INIT_COMMAND, 'SOME SQL');\n    set_and_get(11, $db, PPDO::MYSQL_ATTR_INIT_COMMAND, -1);\n*/\n/*\nPDO::MYSQL_ATTR_READ_DEFAULT_FILE (integer)\n    Read options from the named option file instead of from my.cnf.\nPDO::MYSQL_ATTR_READ_DEFAULT_GROUP (integer)\n    Read options from the named group from my.cnf or the file specified with MYSQL_READ_DEFAULT_FILE.\nPDO::MYSQL_ATTR_MAX_BUFFER_SIZE (integer)\n    Maximum buffer size. Defaults to 1 MiB.\nPDO::MYSQL_ATTR_DIRECT_QUERY (integer)\n    Perform direct queries, don't use prepared statements.\n*/\n/*\nTODO - read only\nPDO::ATTR_CONNECTION_STATUS\nPDO::ATTR_SERVER_INFO\n*/\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
