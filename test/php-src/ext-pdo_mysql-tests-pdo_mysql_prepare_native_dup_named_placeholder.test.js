// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_prepare_native_dup_named_placeholder.phpt
  it("MySQL PDO->prepare(), native PS, named placeholder II", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n    try {\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec(sprintf('CREATE TABLE test(id INT, label1 CHAR(255), label2 CHAR(255)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn off emulated prepared statements\\n\");\n        printf(\"Native...\\n\");\n        // INSERT a single row\n        $stmt = $db->prepare('INSERT INTO test(id, label1, label2) VALUES (1, :placeholder, :placeholder)');\n        $stmt->execute(array(':placeholder' => 'row1'));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[003] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        // Ok, what has happened: anything inserted into the DB?\n        $stmt = $db->prepare('SELECT id, label1, label2 FROM test WHERE id = 1');\n        $stmt->execute();\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // Now the same with emulated PS.\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 1);\n        if (1 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[004] Unable to turn on emulated prepared statements\\n\");\n        printf(\"Emulated...\\n\");\n        $stmt = $db->prepare('INSERT INTO test(id, label1, label2) VALUES(2, :placeholder, :placeholder)');\n        // No replacement shall be made\n        $stmt->execute(array(':placeholder' => 'row2'));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[005] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        // Now, what do we have in the DB?\n        $stmt = $db->prepare('SELECT id, label1, label2 FROM test WHERE id = 2');\n        $stmt->execute();\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        //\n        // Another variation of the theme\n        //\n        $db->exec('DELETE FROM test');\n        $db->exec(\"INSERT INTO test (id, label1, label2) VALUES (1, 'row1', 'row2')\");\n        $sql = \"SELECT id, label1 FROM test WHERE id = :placeholder AND label1 = (SELECT label1 AS 'SELECT' FROM test WHERE id = :placeholder)\";\n        // emulated...\n        $stmt = $db->prepare($sql);\n        $stmt->execute(array(':placeholder' => 1));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[006] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // native...\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[007] Unable to turn off emulated prepared statements\\n\");\n        printf(\"Native...\\n\");\n        $stmt = $db->prepare($sql);\n        $stmt->execute(array(':placeholder' => 1));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[008] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
