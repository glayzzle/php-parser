// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/curl/tests/curl_setopt_ssl.phpt
  it("CURLOPT_SSL* basic client auth tests", function () {
    expect(parser.parseCode("<?php\nfunction check_error(CurlHandle $ch) {\n    if (curl_errno($ch) !== 0) {\n        echo \"CURL ERROR: \" . curl_errno($ch) . \"\\n\";\n    }\n}\nfunction check_response($response, $clientCertSubject) {\n    if (strpos($response, $clientCertSubject) === false) {\n        echo \"client cert subject not in response\\n\";\n    } else {\n        echo \"client cert subject in response\\n\";\n    }\n}\n$clientCertSubject = \"Subject: C=US, ST=TX, L=Clientlocation, O=Clientcompany, CN=clientname/emailAddress=test@example.com\";\n// load server cert\n$serverCertPath = __DIR__ . DIRECTORY_SEPARATOR . 'curl_setopt_ssl_servercert.pem';\n$serverCert = file_get_contents($serverCertPath);\n// load server key\n$serverKeyPath = __DIR__ . DIRECTORY_SEPARATOR . 'curl_setopt_ssl_serverkey.pem';\n$serverKey = file_get_contents($serverKeyPath);\n// load client cert\n$clientCertPath = __DIR__ . DIRECTORY_SEPARATOR . 'curl_setopt_ssl_clientcert.pem';\n$clientCert = file_get_contents($clientCertPath);\n// load client key\n$clientKeyPath = __DIR__ . DIRECTORY_SEPARATOR . 'curl_setopt_ssl_clientkey.pem';\n$clientKey = file_get_contents($clientKeyPath);\nif ($serverCert === false\n    || $serverKey === false\n    || $clientCert === false\n    || $clientKey === false\n) {\n    die('failed to load test certs and keys for files');\n}\n$port = 14430;\n// set up local server\n$cmd = \"openssl s_server -key $serverKeyPath -cert $serverCertPath -accept $port -www -CAfile $clientCertPath -verify_return_error -Verify 1\";\n$process = proc_open($cmd, [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\nif ($process === false) {\n    die('failed to start server');\n}\ntry {\n    // Give the server time to start\n    sleep(1);\n    echo \"case 1: client cert and key from string\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT_BLOB, $clientCert));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY_BLOB, $clientKey));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 2: empty client cert and key from string\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT_BLOB, ''));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY_BLOB, $clientKey));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 3: client cert and empty key from string\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT_BLOB, $clientCert));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY_BLOB, ''));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 4: client cert and key from file\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT, $clientCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY, $clientKeyPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 5: issuer cert from file\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_CAINFO, $serverCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_ISSUERCERT, $serverCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT, $clientCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY, $clientKeyPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 6: issuer cert from string\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_CAINFO, $serverCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_ISSUERCERT_BLOB, $serverCert));\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT, $clientCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY, $clientKeyPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n    echo \"\\n\";\n    echo \"case 7: empty issuer cert from string\\n\";\n    $ch = curl_init(\"https://127.0.0.1:$port/\");\n    var_dump(curl_setopt($ch, CURLOPT_CAINFO, $serverCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_ISSUERCERT_BLOB, ''));\n    var_dump(curl_setopt($ch, CURLOPT_SSLCERT, $clientCertPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSLKEY, $clientKeyPath));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true));\n    var_dump(curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    $response = curl_exec($ch);\n    check_response($response, $clientCertSubject);\n    check_error($ch);\n    curl_close($ch);\n} finally {\n    // clean up server process\n    proc_terminate($process);\n    proc_close($process);\n}\n?>")).toMatchSnapshot();
  });
});
