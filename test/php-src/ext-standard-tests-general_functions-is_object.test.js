// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_object.phpt
  it("Test is_object() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing is_object() with valid objects ***\\n\";\n// class with no members\nclass foo\n{\n// no members\n}\n// abstract class\nabstract class abstractClass\n{\n  abstract protected function getClassName();\n  public function printClassName () {\n    echo $this->getClassName() . \"\\n\";\n  }\n}\n// implement abstract class\nclass concreteClass extends abstractClass\n{\n  protected function getClassName() {\n    return \"concreteClass\";\n  }\n}\n// interface class\ninterface IValue\n{\n   public function setVal ($name, $val);\n   public function dumpVal ();\n}\n// implement the interface\nclass Value implements IValue\n{\n  private $vars = array ();\n  public function setVal ( $name, $val ) {\n    $this->vars[$name] = $val;\n  }\n  public function dumpVal () {\n    var_dump ( $vars );\n  }\n}\n// a gereral class\nclass myClass\n{\n  var       $foo_object;\n  public    $public_var;\n  public    $public_var1;\n  private   $private_var;\n  protected $protected_var;\n  function __construct ( ) {\n    $this->foo_object = new foo();\n    $this->public_var = 10;\n    $this->public_var1 = new foo();\n    $this->private_var = new foo();\n    $this->proected_var = new foo();\n  }\n}\n// create a object of each class defined above\n$myClass_object = new myClass();\n$foo_object = new foo();\n$Value_object = new Value();\n$concreteClass_object = new concreteClass();\n$valid_objects = array(\n  new stdclass,\n  new foo,\n  new concreteClass,\n  new Value,\n  new myClass,\n  $myClass_object,\n  $myClass_object->foo_object,\n  $myClass_object->public_var1,\n  $foo_object,\n  $Value_object,\n  $concreteClass_object\n);\n/* loop to check that is_object() recognizes different\n   objects, expected output: bool(true) */\n$loop_counter = 1;\nforeach ($valid_objects as $object ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_object($object) );\n}\necho \"\\n*** Testing is_object() on non object types ***\\n\";\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\n$dfp = opendir ( __DIR__ );\n// unset object\n$unset_object = new foo();\nunset ($unset_object);\n// other types in a array\n$not_objects = array (\n  0,\n  -1,\n  0.1,\n  -10.0000000000000000005,\n  10.5e+5,\n  0xFF,\n  0123,\n  $fp,  // resource\n  $dfp,\n  array(),\n  array(\"string\"),\n  \"0\",\n  \"1\",\n  \"\",\n  true,\n  NULL,\n  null,\n  @$unset_object, // unset object\n  @$undefined_var, // undefined variable\n);\n/* loop through the $not_objects to see working of\n   is_object() on non object types, expected output: bool(false) */\n$loop_counter = 1;\nforeach ($not_objects as $type ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_object($type) );\n}\necho \"Done\\n\";\n// close the resources used\nfclose($fp);\nclosedir($dfp);\n?>")).toMatchSnapshot();
  });
});
