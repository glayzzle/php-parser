// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/include_streams.phpt
  it("Stream wrappers in include_path", function () {
    expect(parser.parseCode("<?php\n$data1 = $data2 = $data3 = $data4 = $data5 = $data6 = <<<'EOD'\n<?php echo __FILE__ . \"\\n\";?>\nEOD;\n/*<?*/\nclass mystream\n{\n    public $path;\n    public $mode;\n    public $options;\n    public $position;\n    public $varname;\n    function url_stat($path, $flags) {\n        return array();\n    }\n    function stream_stat() {\n        return array();\n    }\n    function stream_open($path, $mode, $options, &$opened_path)\n    {\n        $this->path = $path;\n        $this->mode = $mode;\n        $this->options = $options;\n        $split = parse_url($path);\n        if ($split[\"host\"] !== \"GLOBALS\" ||\n            empty($split[\"path\"]) ||\n            empty($GLOBALS[substr($split[\"path\"],1)])) {\n            return false;\n        }\n        $this->varname = substr($split[\"path\"],1);\n        if (strchr($mode, 'a'))\n            $this->position = strlen($GLOBALS[$this->varname]);\n        else\n            $this->position = 0;\n        return true;\n    }\n    function stream_read($count)\n    {\n        $ret = substr($GLOBALS[$this->varname], $this->position, $count);\n        $this->position += strlen($ret);\n        return $ret;\n    }\n    function stream_tell()\n    {\n        return $this->position;\n    }\n    function stream_eof()\n    {\n        return $this->position >= strlen($GLOBALS[$this->varname]);\n    }\n    function stream_seek($offset, $whence)\n    {\n        switch($whence) {\n            case SEEK_SET:\n                if ($offset < strlen($GLOBALS[$this->varname]) && $offset >= 0) {\n                    $this->position = $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            case SEEK_CUR:\n                if ($offset >= 0) {\n                    $this->position += $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            case SEEK_END:\n                if (strlen($GLOBALS[$this->varname]) + $offset >= 0) {\n                    $this->position = strlen($GLOBALS[$this->varname]) + $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            default:\n                return false;\n        }\n    }\n    function stream_set_option($option, $arg1, $arg2) {\n        return false;\n    }\n}\nif (!stream_wrapper_register(\"test\", \"mystream\")) {\n    die(\"test wrapper registration failed\");\n}\necho file_get_contents(\"test://GLOBALS/data1\");\ninclude(\"test://GLOBALS/data1\");\ninclude_once(\"test://GLOBALS/data2\");\ninclude_once(\"test://GLOBALS/data2\");\n$include_path = get_include_path();\nset_include_path($include_path . PATH_SEPARATOR . \"test://GLOBALS\");\necho file_get_contents(\"data3\", true);\ninclude(\"data3\");\ninclude_once(\"data4\");\ninclude_once(\"data4\");\nset_include_path(\"test://GLOBALS\"  . PATH_SEPARATOR .  $include_path);\necho file_get_contents(\"data5\", true);\ninclude(\"data5\");\ninclude_once(\"data6\");\ninclude_once(\"data6\");\n?>")).toMatchSnapshot();
  });
});
