// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pgsql/tests/08escape.phpt
  it("PostgreSQL escape functions", function () {
    expect(parser.parseCode("<?php\ninclude 'config.inc';\ndefine('FILE_NAME', __DIR__ . '/php.gif');\n// pg_escape_string() test\n$before = \"ABC\\\\ABC\\'\";\n$expect  = \"ABC\\\\\\\\ABC\\\\'\";\n$expect2  = \"ABC\\\\\\\\ABC\\\\\\\\''\"; //the way escape string differs from PostgreSQL 9.0\n$after = pg_escape_string($before);\nif ($expect === $after || $expect2 === $after) {\n    echo \"pg_escape_string() is Ok\\n\";\n}\nelse {\n    echo \"pg_escape_string() is NOT Ok\\n\";\n    var_dump($before);\n    var_dump($after);\n    var_dump($expect);\n}\n// pg_escape_bytea() test\n$before = \"ABC\\\\ABC\";\n$expect  = \"ABC\\\\\\\\\\\\\\\\ABC\";\n$after  = pg_escape_bytea($before);\nif ($expect === $after) {\n    echo \"pg_escape_bytea() is Ok\\n\";\n}\nelse {\n    echo \"pg_escape_byte() is NOT Ok\\n\";\n    var_dump($before);\n    var_dump($after);\n    var_dump($expect);\n}\n// Test using database\n$data = file_get_contents(FILE_NAME);\n$db   = pg_connect($conn_str);\n// Insert binary to DB\n$escaped_data = pg_escape_bytea($db, $data);\npg_query($db, \"DELETE FROM \".$table_name.\" WHERE num = 10000;\");\n$sql = \"INSERT INTO \".$table_name.\" (num, bin) VALUES (10000, CAST ('\".$escaped_data.\"' AS BYTEA));\";\npg_query($db, $sql);\n// Retrieve binary from DB\nfor ($i = 0; $i < 2; $i++) {\n    $sql = \"SELECT bin::bytea FROM \".$table_name.\" WHERE num = 10000\";\n    $result = pg_query($db, $sql);\n    $row = pg_fetch_array($result, 0, PGSQL_ASSOC);\n    if ($data === pg_unescape_bytea($row['bin'])) {\n        echo \"pg_escape_bytea() actually works with database\\n\";\n        break;\n    }\n    elseif (!$i) {\n        // Force bytea escaping and retry\n        @pg_query($db, \"SET bytea_output = 'escape'\");\n    }\n    else {\n        $result = pg_query($db, $sql);\n        echo \"pg_escape_bytea() is broken\\n\";\n        break;\n    }\n}\n// pg_escape_literal/pg_escape_identifier\n$before = \"ABC\\\\ABC\\'\";\n$expect\t = \" E'ABC\\\\\\\\ABC\\\\\\\\'''\";\n$after = pg_escape_literal($db, $before);\nif ($expect === $after) {\n    echo \"pg_escape_literal() is Ok\\n\";\n}\nelse {\n    echo \"pg_escape_literal() is NOT Ok\\n\";\n    var_dump($before);\n    var_dump($after);\n    var_dump($expect);\n}\n$before = \"ABC\\\\ABC\\'\";\n$expect\t = \"\\\"ABC\\ABC\\'\\\"\";\n$after = pg_escape_identifier($db, $before);\nif ($expect === $after) {\n    echo \"pg_escape_identifier() is Ok\\n\";\n}\nelse {\n    echo \"pg_escape_identifier() is NOT Ok\\n\";\n    var_dump($before);\n    var_dump($after);\n    var_dump($expect);\n}\n?>")).toMatchSnapshot();
  });
});
