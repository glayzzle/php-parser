// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/classes/array_access_011.phpt
  it("ZE2 ArrayAccess and ArrayAccessReferenceProxy with references to main array", function () {
    expect(parser.parseCode("<?php\n// NOTE: This will become part of SPL\nclass ArrayAccessReferenceProxy implements ArrayAccess\n{\n    private $object;\n    private $oarray;\n    private $element;\n    function __construct(ArrayAccess $object, array &$array, $element)\n    {\n        echo __METHOD__ . \"($element)\\n\";\n        $this->object = $object;\n        $this->oarray = &$array;\n        $this->element = $element;\n    }\n    function offsetExists($index): bool {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        return array_key_exists($index, $this->oarray[$this->element]);\n    }\n    function offsetGet($index): mixed {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        return isset($this->oarray[$this->element][$index]) ? $this->oarray[$this->element][$index] : NULL;\n    }\n    function offsetSet($index, $value): void {\n        echo __METHOD__ . \"($this->element, $index, $value)\\n\";\n        $this->oarray[$this->element][$index] = $value;\n    }\n    function offsetUnset($index): void {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        unset($this->oarray[$this->element][$index]);\n    }\n}\nclass Peoples implements ArrayAccess\n{\n    public $person;\n    function __construct()\n    {\n        $this->person = array(array('name'=>'Foo'));\n    }\n    function offsetExists($index): bool\n    {\n        return array_key_exists($index, $this->person);\n    }\n    function offsetGet($index): mixed\n    {\n        if (is_array($this->person[$index]))\n        {\n            return new ArrayAccessReferenceProxy($this, $this->person, $index);\n        }\n        else\n        {\n            return $this->person[$index];\n        }\n    }\n    function offsetSet($index, $value): void\n    {\n        $this->person[$index] = $value;\n    }\n    function offsetUnset($index): void\n    {\n        unset($this->person[$index]);\n    }\n}\n$people = new Peoples;\nvar_dump($people->person[0]['name']);\n$people->person[0]['name'] = $people->person[0]['name'] . 'Bar';\nvar_dump($people->person[0]['name']);\n$people->person[0]['name'] .= 'Baz';\nvar_dump($people->person[0]['name']);\necho \"===ArrayOverloading===\\n\";\n$people = new Peoples;\nvar_dump($people[0]);\nvar_dump($people[0]['name']);\n$people[0]['name'] = 'FooBar';\nvar_dump($people[0]['name']);\n$people[0]['name'] = $people->person[0]['name'] . 'Bar';\nvar_dump($people[0]['name']);\n$people[0]['name'] .= 'Baz';\nvar_dump($people[0]['name']);\nunset($people[0]['name']);\nvar_dump($people[0]);\nvar_dump($people[0]['name']);\n$people[0]['name'] = 'BlaBla';\nvar_dump($people[0]['name']);\n?>")).toMatchSnapshot();
  });
});
