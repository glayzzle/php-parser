// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/odbc/tests/bug60616.phpt
  it("odbc_exec(): Getting accurate unicode data from query", function () {
    expect(parser.parseCode("<?php\n// Test strings\nmb_internal_encoding(\"EUC_JP\");\n$euc_jp_base64 = 'pdal6aWkpcCl676uyqo=';\n$euc_jp = base64_decode($euc_jp_base64);\n$ascii = 'abcdefghijklmnopqrstuvwxyz;]=#0123456789';\ninclude 'config.inc';\nini_set(\"odbc.defaultlrl\", 4); // Set artificially low\n$conn = odbc_connect($dsn, $user, $pass);\nodbc_exec($conn, 'CREATE DATABASE odbcTEST ENCODING=\\'EUC_JP\\'');\nodbc_exec($conn, 'CREATE TABLE FOO (ID INT, CHAR_COL CHAR(200), VARCHAR_COL VARCHAR(200), TEXT_COL TEXT)');\nodbc_exec($conn, \"INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (1, '$euc_jp', '$euc_jp', '$euc_jp')\");\nodbc_exec($conn, \"INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (2, '$ascii', '$ascii', '$ascii')\");\n$res = odbc_exec($conn, 'SELECT * FROM FOO ORDER BY ID ASC');\nwhile(odbc_fetch_row($res)) {\n    $char_col = odbc_result($res, \"CHAR_COL\");\n    $varchar_col = odbc_result($res, \"VARCHAR_COL\");\n    $id = odbc_result($res, \"ID\");\n    $text_col = \"\";\n    while (($chunk=odbc_result($res, \"TEXT_COL\")) !== false) {\n        $text_col .= $chunk;\n    }\n    if ($id == 1) {\n        $euc_jp_check = $euc_jp . str_repeat(\" \", (200 - mb_strlen($euc_jp)));\n        if (strcmp($char_col, $euc_jp_check) == 0 && strcmp($varchar_col, $euc_jp) == 0 &&\n            strcmp($text_col, $euc_jp) == 0) {\n            print \"EUC-JP matched\\n\";\n        } else {\n            print \"EUC-JP mismatched\\n\";\n        }\n    } else {\n        $ascii_check = $ascii . str_repeat(\" \", (200 - strlen($ascii)));\n        if (strcmp($char_col, $ascii_check) == 0 && strcmp($varchar_col, $ascii) == 0 &&\n            strcmp($text_col, $ascii) == 0) {\n            print \"ASCII matched\\n\";\n        } else {\n            print \"ASCII mismatched\\n\";\n        }\n    }\n}\n?>")).toMatchSnapshot();
  });
});
