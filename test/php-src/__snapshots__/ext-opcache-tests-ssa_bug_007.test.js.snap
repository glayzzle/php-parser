// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Incorrect CFG/SSA construction for SWITCH with few identical successors 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "properties",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                Switch {
                  "body": Block {
                    "children": Array [
                      Case {
                        "body": Block {
                          "children": Array [
                            If {
                              "alternate": null,
                              "body": Block {
                                "children": Array [
                                  ExpressionStatement {
                                    "expression": Assign {
                                      "kind": "assign",
                                      "left": PropertyLookup {
                                        "kind": "propertylookup",
                                        "offset": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "key",
                                        },
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "docInfo",
                                        },
                                      },
                                      "operator": "=",
                                      "right": Number {
                                        "kind": "number",
                                        "value": "1",
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "if",
                              "shortForm": false,
                              "test": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "value",
                                },
                                "right": NullKeyword {
                                  "kind": "nullkeyword",
                                  "raw": "null",
                                },
                                "type": "==",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'Trapped'",
                          "unicode": false,
                          "value": "Trapped",
                        },
                      },
                      Case {
                        "body": Block {
                          "children": Array [],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'CreationDate'",
                          "unicode": false,
                          "value": "CreationDate",
                        },
                      },
                      Case {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "key",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "docInfo",
                                  },
                                },
                                "operator": "=",
                                "right": Number {
                                  "kind": "number",
                                  "value": "2",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Break {
                              "kind": "break",
                              "level": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'ModDate'",
                          "unicode": false,
                          "value": "ModDate",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "switch",
                  "shortForm": false,
                  "test": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "key",
                  },
                },
              ],
              "kind": "block",
            },
            "key": Variable {
              "curly": false,
              "kind": "variable",
              "name": "key",
            },
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "properties",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "value",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "render",
      },
      "nullable": false,
      "type": null,
    },
    Inline {
      "kind": "inline",
      "raw": "
OK",
      "value": "OK",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
