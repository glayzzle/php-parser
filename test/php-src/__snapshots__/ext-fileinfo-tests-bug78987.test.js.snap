// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #78987 High memory usage during encoding detection 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "finfo",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "FILEINFO_MIME_TYPE",
              "resolution": "uqn",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "finfo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "minSize",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "128",
          },
          "right": Number {
            "kind": "number",
            "value": "1024",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "maxSize",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "16",
            },
            "right": Number {
              "kind": "number",
              "value": "1024",
            },
            "type": "*",
          },
          "right": Number {
            "kind": "number",
            "value": "1024",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "map",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "131072",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "9113600",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "262144",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "9113600",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "524288",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "10850304",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1048576",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "11210752",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2097152",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "13312000",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "4194304",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "17510400",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "8388608",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "23801856",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "16777216",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "36384768",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "content",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'0'",
                    "unicode": false,
                    "value": "0",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "size",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_repeat",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "content",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "buffer",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "finfo",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "m",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "memory_get_peak_usage",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"%-8d => %s\\\\n\\"",
                  "unicode": false,
                  "value": "%-8d => %s
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "size",
                },
                RetIf {
                  "falseExpr": Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"$m\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "m",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                    ],
                  },
                  "kind": "retif",
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "m",
                    },
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "size",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "map",
                      },
                    },
                    "type": "<=",
                  },
                  "trueExpr": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"ok\\"",
                    "unicode": false,
                    "value": "ok",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "size",
          },
          "operator": "*=",
          "right": Number {
            "kind": "number",
            "value": "2",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "size",
          },
          "operator": "=",
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "minSize",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "size",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "maxSize",
          },
          "type": "<=",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
