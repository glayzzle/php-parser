// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests TLS server rate-limits client-initiated renegotiation 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'stream_server_reneg_limit.pem.tmp'",
            "unicode": false,
            "value": "stream_server_reneg_limit.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $printed = false;
    $serverUri = \\"ssl://127.0.0.1:64321\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
        // TLS 1.3 does not support renegotiation.
        'max_proto_version' => STREAM_CRYPTO_PROTO_TLSv1_2,
        'reneg_limit' => 0,
        'reneg_window' => 30,
        'reneg_limit_callback' => function($stream) use (&$printed) {
            if (!$printed) {
                $printed = true;
                var_dump($stream);
            }
        }
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $clients = [];
    while (1) {
        $r = array_merge([$server], $clients);
        $w = $e = [];
        stream_select($r, $w, $e, $timeout=42);
        foreach ($r as $sock) {
            if ($sock === $server && ($client = stream_socket_accept($server, $timeout = 42))) {
                $clientId = (int) $client;
                $clients[$clientId] = $client;
            } elseif ($sock !== $server) {
                $clientId = (int) $sock;
                $buffer = fread($sock, 1024);
                if (strlen($buffer)) {
                    continue;
                } elseif (!is_resource($sock) || feof($sock)) {
                    unset($clients[$clientId]);
                    break 2;
                }
            }
        }
    }
CODE",
          "value": "    $printed = false;
    $serverUri = \\"ssl://127.0.0.1:64321\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
        // TLS 1.3 does not support renegotiation.
        'max_proto_version' => STREAM_CRYPTO_PROTO_TLSv1_2,
        'reneg_limit' => 0,
        'reneg_window' => 30,
        'reneg_limit_callback' => function($stream) use (&$printed) {
            if (!$printed) {
                $printed = true;
                var_dump($stream);
            }
        }
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $clients = [];
    while (1) {
        $r = array_merge([$server], $clients);
        $w = $e = [];
        stream_select($r, $w, $e, $timeout=42);
        foreach ($r as $sock) {
            if ($sock === $server && ($client = stream_socket_accept($server, $timeout = 42))) {
                $clientId = (int) $client;
                $clients[$clientId] = $client;
            } elseif ($sock !== $server) {
                $clientId = (int) $sock;
                $buffer = fread($sock, 1024);
                if (strlen($buffer)) {
                    continue;
                } elseif (!is_resource($sock) || feof($sock)) {
                    unset($clients[$clientId]);
                    break 2;
                }
            }
        }
    }",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "serverCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "certFile",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    phpt_wait();
    $cmd = 'openssl s_client -connect 127.0.0.1:64321';
    $descriptorSpec = [[\\"pipe\\", \\"r\\"], [\\"pipe\\", \\"w\\"], [\\"pipe\\", \\"w\\"]];
    $process = proc_open($cmd, $descriptorSpec, $pipes);
    list($stdin, $stdout, $stderr) = $pipes;
    // Trigger renegotiation twice
    // Server settings only allow one per second (should result in disconnection)
    fwrite($stdin, \\"R\\\\nR\\\\nR\\\\nR\\\\n\\");
    $lines = [];
    while(!feof($stderr)) {
        fgets($stderr);
    }
    fclose($stdin);
    fclose($stdout);
    fclose($stderr);
    proc_terminate($process);
CODE",
          "value": "    phpt_wait();
    $cmd = 'openssl s_client -connect 127.0.0.1:64321';
    $descriptorSpec = [[\\"pipe\\", \\"r\\"], [\\"pipe\\", \\"w\\"], [\\"pipe\\", \\"w\\"]];
    $process = proc_open($cmd, $descriptorSpec, $pipes);
    list($stdin, $stdout, $stderr) = $pipes;
    // Trigger renegotiation twice
    // Server settings only allow one per second (should result in disconnection)
    fwrite($stdin, \\"R\\\\nR\\\\nR\\\\nR\\\\n\\");
    $lines = [];
    while(!feof($stderr)) {
        fgets($stderr);
    }
    fclose($stdin);
    fclose($stdout);
    fclose($stderr);
    proc_terminate($process);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'CertificateGenerator.inc'",
          "unicode": false,
          "value": "CertificateGenerator.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certificateGenerator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "CertificateGenerator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'stream_security_level'",
            "unicode": false,
            "value": "stream_security_level",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "certFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveNewCertAsFileWithKey",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "serverCode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
