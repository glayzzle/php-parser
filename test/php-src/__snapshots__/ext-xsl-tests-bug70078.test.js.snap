// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #70078 (XSL callbacks with nodes as parameter leak memory) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\DOMDocument",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rootNode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'root'",
                  "unicode": false,
                  "value": "root",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createElement",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "dom",
                },
              },
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "appendChild",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "level1Node",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'level1'",
                        "unicode": false,
                        "value": "level1",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "createElement",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "dom",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "appendChild",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "rootNode",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "level2Node",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'level2'",
                              "unicode": false,
                              "value": "level2",
                            },
                          ],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "createElement",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "dom",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "appendChild",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "level1Node",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                For {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "level3Node",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'level3'",
                                    "unicode": false,
                                    "value": "level3",
                                  },
                                  String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'test'",
                                    "unicode": false,
                                    "value": "test",
                                  },
                                ],
                                "kind": "call",
                                "what": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Identifier {
                                    "kind": "identifier",
                                    "name": "createElement",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "dom",
                                  },
                                },
                              },
                            ],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "appendChild",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "level2Node",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "increment": Array [
                    Post {
                      "kind": "post",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "k",
                      },
                    },
                  ],
                  "init": Array [
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "k",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                  ],
                  "kind": "for",
                  "shortForm": false,
                  "test": Array [
                    Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "k",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "10",
                      },
                      "type": "<=",
                    },
                  ],
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Number {
                  "kind": "number",
                  "value": "100",
                },
                "type": "<=",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "100",
          },
          "type": "<=",
        },
      ],
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "node",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'test2'",
              "unicode": false,
              "value": "test2",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testPhpFunction",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xslStr",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:php=\\"http://php.net/xsl\\">
    <xsl:template match=\\"root\\">
        <output>
            <xsl:for-each select=\\"level1\\">
                <node>
                    <xsl:value-of select=\\"php:function('testPhpFunction', .)\\" />
                </node>
            </xsl:for-each>
        </output>
    </xsl:template>
</xsl:stylesheet>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:php=\\"http://php.net/xsl\\">
    <xsl:template match=\\"root\\">
        <output>
            <xsl:for-each select=\\"level1\\">
                <node>
                    <xsl:value-of select=\\"php:function('testPhpFunction', .)\\" />
                </node>
            </xsl:for-each>
        </output>
    </xsl:template>
</xsl:stylesheet>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<xsl:stylesheet version=\\"1.0\\" xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:php=\\"http://php.net/xsl\\">
    <xsl:template match=\\"root\\">
        <output>
            <xsl:for-each select=\\"level1\\">
                <node>
                    <xsl:value-of select=\\"php:function('testPhpFunction', .)\\" />
                </node>
            </xsl:for-each>
        </output>
    </xsl:template>
</xsl:stylesheet>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xsl",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\DOMDocument",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xslStr",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXML",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "xsl",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xslt",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\XSLTProcessor",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'testPhpFunction'",
            "unicode": false,
            "value": "testPhpFunction",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "registerPHPFunctions",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "xslt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xsl",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "importStyleSheet",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "xslt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "transformToXML",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xslt",
            },
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
