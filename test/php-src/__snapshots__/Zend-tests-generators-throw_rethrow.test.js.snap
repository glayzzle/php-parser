// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Generator::throw() where the generator throws a different exception 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"before yield\\\\n\\"",
                "unicode": false,
                "value": "before yield
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Yield {
                    "key": null,
                    "kind": "yield",
                    "value": null,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'Caught: '",
                          "unicode": false,
                          "value": "Caught: ",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\\\n\\"",
                          "unicode": false,
                          "value": "

",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    Throw {
                      "kind": "throw",
                      "what": New {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'new throw'",
                            "unicode": false,
                            "value": "new throw",
                          },
                        ],
                        "kind": "new",
                        "what": Name {
                          "kind": "name",
                          "name": "LogicException",
                          "resolution": "uqn",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "RuntimeException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "gen",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "gen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'throw'",
                    "unicode": false,
                    "value": "throw",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "RuntimeException",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "throw",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "gen",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
