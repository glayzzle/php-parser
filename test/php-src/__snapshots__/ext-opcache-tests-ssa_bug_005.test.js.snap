// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Assign elision exception safety: UCALL 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dtor",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Class {
                  "attrGroups": Array [],
                  "body": Array [
                    Method {
                      "arguments": Array [],
                      "attrGroups": Array [],
                      "body": Block {
                        "children": Array [
                          Throw {
                            "kind": "throw",
                            "what": New {
                              "arguments": Array [],
                              "kind": "new",
                              "what": Name {
                                "kind": "name",
                                "name": "Exception",
                                "resolution": "uqn",
                              },
                            },
                          },
                        ],
                        "kind": "block",
                      },
                      "byref": false,
                      "isAbstract": false,
                      "isFinal": false,
                      "isStatic": false,
                      "kind": "method",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "__destruct",
                      },
                      "nullable": false,
                      "type": null,
                      "visibility": "",
                    },
                  ],
                  "extends": null,
                  "implements": null,
                  "isAbstract": false,
                  "isAnonymous": true,
                  "isFinal": false,
                  "kind": "class",
                  "name": null,
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "test",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test2",
      },
      "nullable": false,
      "type": null,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test2",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"caught\\\\n\\"",
                    "unicode": false,
                    "value": "caught
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
