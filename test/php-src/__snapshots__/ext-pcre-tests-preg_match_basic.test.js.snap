// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test preg_match() function : basic functionality 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Hello, world. [*], this is \\\\ a string'",
          "unicode": false,
          "value": "Hello, world. [*], this is \\\\ a string",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/^[hH]ello,\\\\s/'",
                "unicode": false,
                "value": "/^[hH]ello,\\\\s/",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "match1",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "match1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/l^o,\\\\s\\\\w{5}/'",
                "unicode": false,
                "value": "/l^o,\\\\s\\\\w{5}/",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "match2",
              },
              Name {
                "kind": "name",
                "name": "PREG_OFFSET_CAPTURE",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "match2",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/\\\\[\\\\*\\\\],\\\\s(.*)/'",
                "unicode": false,
                "value": "/\\\\[\\\\*\\\\],\\\\s(.*)/",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "match3",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "match3",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'@\\\\w{4}\\\\s\\\\w{2}\\\\s\\\\\\\\\\\\(?:\\\\s.*)@'",
                "unicode": false,
                "value": "@\\\\w{4}\\\\s\\\\w{2}\\\\s\\\\\\\\(?:\\\\s.*)@",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "match4",
              },
              Name {
                "kind": "name",
                "name": "PREG_OFFSET_CAPTURE",
                "resolution": "uqn",
              },
              Number {
                "kind": "number",
                "value": "14",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "match4",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/hello world/'",
                "unicode": false,
                "value": "/hello world/",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "match5",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "match5",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
