// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #76705: feof might hang on TLS streams in case of fragmented TLS records 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug77390.pem.tmp'",
            "unicode": false,
            "value": "bug77390.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cacertFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug77390-ca.pem.tmp'",
            "unicode": false,
            "value": "bug77390-ca.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "peerName",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'bug77390'",
          "unicode": false,
          "value": "bug77390",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);
    phpt_wait('server');
    phpt_notify('proxy');
    phpt_wait('proxy');
    $fp = stream_socket_client(\\"ssl://127.0.0.1:10012\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);
    stream_set_blocking($fp, false);
    $read = [$fp];
    $buf = '';
    $emptyChunkPrinted = false;
    $warmedUp = false;
    while (stream_select($read, $write, $except, 1000)) {
        $chunk = stream_get_contents($fp, 4096);
        $buf .= $chunk;
        phpt_notify('proxy');
        if (!$warmedUp) {
            if ($buf !== 'warmup') {
                continue;
            }
            $warmedUp = true;
            $buf = '';
            phpt_notify('server');
            continue;
        }
        if ($chunk !== '' || !$emptyChunkPrinted) {
            $emptyChunkPrinted = true;
            var_dump($chunk);
        }
        if ($buf === 'hello, world') {
            break;
        }
    }
    phpt_notify('server');
    phpt_notify('proxy');
CODE",
          "value": "    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);
    phpt_wait('server');
    phpt_notify('proxy');
    phpt_wait('proxy');
    $fp = stream_socket_client(\\"ssl://127.0.0.1:10012\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);
    stream_set_blocking($fp, false);
    $read = [$fp];
    $buf = '';
    $emptyChunkPrinted = false;
    $warmedUp = false;
    while (stream_select($read, $write, $except, 1000)) {
        $chunk = stream_get_contents($fp, 4096);
        $buf .= $chunk;
        phpt_notify('proxy');
        if (!$warmedUp) {
            if ($buf !== 'warmup') {
                continue;
            }
            $warmedUp = true;
            $buf = '';
            phpt_notify('server');
            continue;
        }
        if ($chunk !== '' || !$emptyChunkPrinted) {
            $emptyChunkPrinted = true;
            var_dump($chunk);
        }
        if ($buf === 'hello, world') {
            break;
        }
    }
    phpt_notify('server');
    phpt_notify('proxy');",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "clientCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "peerName",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $fp = stream_socket_server(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, $flags, $context);
    phpt_notify();
    $conn = stream_socket_accept($fp);
    fwrite($conn, 'warmup');
    phpt_wait();
    fwrite($conn, 'hello, world');
    phpt_wait();
    fclose($conn);
CODE",
          "value": "    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $fp = stream_socket_server(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, $flags, $context);
    phpt_notify();
    $conn = stream_socket_accept($fp);
    fwrite($conn, 'warmup');
    phpt_wait();
    fwrite($conn, 'hello, world');
    phpt_wait();
    fclose($conn);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "serverCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "certFile",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "proxyCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    phpt_wait();
    $upstream = stream_socket_client(\\"tcp://127.0.0.1:10011\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT);
    stream_set_blocking($upstream, false);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $server = stream_socket_server(\\"tcp://127.0.0.1:10012\\", $errornum, $errorstr, $flags);
    phpt_notify();
    $conn = stream_socket_accept($server);
    stream_set_blocking($conn, false);
    $read = [$upstream, $conn];
    while (stream_select($read, $write, $except, 1)) {
        foreach ($read as $fp) {
            $data = stream_get_contents($fp);
            if ($fp === $conn) {
                fwrite($upstream, $data);
            } else {
                if ($data !== '' && $data[0] === chr(23)) {
                    $parts = str_split($data, (int) ceil(strlen($data) / 3));
                    foreach ($parts as $part) {
                        fwrite($conn, $part);
                        phpt_wait(null, 1);
                    }
                } else {
                    fwrite($conn, $data);
                }
            }
        }
        if (feof($upstream)) {
            break;
        }
        $read = [$upstream, $conn];
    }
    phpt_wait();
CODE",
          "value": "    phpt_wait();
    $upstream = stream_socket_client(\\"tcp://127.0.0.1:10011\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT);
    stream_set_blocking($upstream, false);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $server = stream_socket_server(\\"tcp://127.0.0.1:10012\\", $errornum, $errorstr, $flags);
    phpt_notify();
    $conn = stream_socket_accept($server);
    stream_set_blocking($conn, false);
    $read = [$upstream, $conn];
    while (stream_select($read, $write, $except, 1)) {
        foreach ($read as $fp) {
            $data = stream_get_contents($fp);
            if ($fp === $conn) {
                fwrite($upstream, $data);
            } else {
                if ($data !== '' && $data[0] === chr(23)) {
                    $parts = str_split($data, (int) ceil(strlen($data) / 3));
                    foreach ($parts as $part) {
                        fwrite($conn, $part);
                        phpt_wait(null, 1);
                    }
                } else {
                    fwrite($conn, $data);
                }
            }
        }
        if (feof($upstream)) {
            break;
        }
        $read = [$upstream, $conn];
    }
    phpt_wait();",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'CertificateGenerator.inc'",
          "unicode": false,
          "value": "CertificateGenerator.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certificateGenerator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "CertificateGenerator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cacertFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveCaCert",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "peerName",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "certFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveNewCertAsFileWithKey",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'server'",
                  "unicode": false,
                  "value": "server",
                },
                "kind": "entry",
                "unpack": false,
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "serverCode",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'proxy'",
                  "unicode": false,
                  "value": "proxy",
                },
                "kind": "entry",
                "unpack": false,
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "proxyCode",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
