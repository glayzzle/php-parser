// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test of ASCII and KS X 1001-1992 support in ISO-2022-KR encoding 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/data/KSX1001.txt'",
              "unicode": false,
              "value": "/data/KSX1001.txt",
            },
            "type": ".",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ksxChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "unused",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "readConversionTable",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bothWays",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-KR'",
                  "unicode": false,
                  "value": "ISO-2022-KR",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "identifyValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-KR'",
                  "unicode": false,
                  "value": "ISO-2022-KR",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "convertValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "from",
                          },
                          Number {
                            "kind": "number",
                            "value": "1",
                          },
                          Bin {
                            "kind": "bin",
                            "left": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "from",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "strlen",
                                "resolution": "uqn",
                              },
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "1",
                            },
                            "type": "-",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "substr",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "from",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strlen",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "type": ">",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "from",
                        },
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x0F\\"",
                        "unicode": false,
                        "value": "",
                      },
                      "type": "==",
                    },
                    "type": "&&",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      "operator": ".=",
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x0F\\"",
                        "unicode": false,
                        "value": "",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "from",
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B\\\\$C\\"",
                          "unicode": false,
                          "value": "$C",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "strpos",
                        "resolution": "uqn",
                      },
                    },
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                    "type": "!==",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "to",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-16BE'",
                        "unicode": false,
                        "value": "UTF-16BE",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-KR'",
                        "unicode": false,
                        "value": "ISO-2022-KR",
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "convertValidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bothWays",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testValid",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-KR'",
                  "unicode": false,
                  "value": "ISO-2022-KR",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testInvalid",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Empty string OK\\\\n\\"",
          "unicode": false,
          "value": "Empty string OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0xE",
                  },
                  "type": "==",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0xF",
                  },
                  "type": "==",
                },
                "type": "||",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x1B",
                },
                "type": "==",
              },
              "type": "||",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00\\"",
                    "unicode": false,
                    "value": " ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0F\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00\\"",
                    "unicode": false,
                    "value": " ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
          "type": "<",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0F\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ASCII support OK\\\\n\\"",
          "unicode": false,
          "value": "ASCII support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0E\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ksx",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "utf16BE",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B$)C\\\\x0E\\"",
                    "unicode": false,
                    "value": "$)C",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ksx",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "utf16BE",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x1B$)C\\\\x0E\\"",
                      "unicode": false,
                      "value": "$)C",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ksx",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0F\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "utf16BE",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ksx",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ksxChars",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "utf16BE",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ksxChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidKsx",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncatedKsx",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "badChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "invalidKsx",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "badChar",
                    },
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0E\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "type": "==",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "badChar",
                    },
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x0F\\"",
                    "unicode": false,
                    "value": "",
                  },
                  "type": "==",
                },
                "type": "||",
              },
              "right": Bin {
                "kind": "bin",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "badChar",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x1B\\"",
                  "unicode": false,
                  "value": "",
                },
                "type": "==",
              },
              "type": "||",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B$)C\\\\x0E\\"",
                    "unicode": false,
                    "value": "$)C",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "badChar",
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "badChars",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "badChar",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "badChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "truncatedKsx",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B$)C\\\\x0E\\"",
                    "unicode": false,
                    "value": "$)C",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "badChar",
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "badChars",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "badChar",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"KS X 1001 support OK\\\\n\\"",
          "unicode": false,
          "value": "KS X 1001 support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$)Cabc\\"",
            "unicode": false,
            "value": "$)Cabc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00a\\\\x00b\\\\x00c\\"",
            "unicode": false,
            "value": " a b c",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testInvalid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$\\"",
            "unicode": false,
            "value": "$",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testInvalid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$)\\"",
            "unicode": false,
            "value": "$)",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testInvalid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x1B\\"",
                      "unicode": false,
                      "value": "",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00%\\"",
                    "unicode": false,
                    "value": " %",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "testInvalid",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$'",
                "unicode": false,
                "value": "$",
              },
              "type": "!=",
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x1B$\\"",
                      "unicode": false,
                      "value": "$",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00%\\"",
                    "unicode": false,
                    "value": " %",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "testInvalid",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "')'",
                "unicode": false,
                "value": ")",
              },
              "type": "!=",
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x1B$)\\"",
                      "unicode": false,
                      "value": "$)",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00%\\"",
                    "unicode": false,
                    "value": " %",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "testInvalid",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'C'",
                "unicode": false,
                "value": "C",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x0E\\\\x0E\\\\x0F\\\\x0E\\\\x0Fabc\\"",
            "unicode": false,
            "value": "abc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00a\\\\x00b\\\\x00c\\"",
            "unicode": false,
            "value": " a b c",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Escapes behave as expected\\\\n\\"",
          "unicode": false,
          "value": "Escapes behave as expected
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-KR\\"",
            "unicode": false,
            "value": "ISO-2022-KR",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$\\"",
            "unicode": false,
            "value": "$",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-KR\\"",
            "unicode": false,
            "value": "ISO-2022-KR",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$)\\"",
            "unicode": false,
            "value": "$)",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-KR\\"",
            "unicode": false,
            "value": "ISO-2022-KR",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B$)C\\\\x0E\\\\x7C\\\\x84\\"",
            "unicode": false,
            "value": "$)C|",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-KR\\"",
            "unicode": false,
            "value": "ISO-2022-KR",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
