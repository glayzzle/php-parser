// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test typed properties error condition (fetch uninitialized by reference) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "thing",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Class {
            "attrGroups": Array [],
            "body": Array [
              PropertyStatement {
                "isStatic": false,
                "kind": "propertystatement",
                "properties": Array [
                  Property {
                    "attrGroups": Array [],
                    "kind": "property",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "int",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": TypeReference {
                      "kind": "typereference",
                      "name": "int",
                      "raw": "int",
                    },
                    "value": null,
                  },
                ],
                "visibility": "public",
              },
            ],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "int",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "thing",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
