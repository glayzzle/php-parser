// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar: opendir test, subdirectory 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.php'",
            "unicode": false,
            "value": ".phar.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar://'",
            "unicode": false,
            "value": "phar://",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"<?php
Phar::mapPhar('hio');
__HALT_COMPILER(); ?>\\"",
          "unicode": false,
          "value": "<?php
Phar::mapPhar('hio');
__HALT_COMPILER(); ?>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "files",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "files",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'a'",
          "unicode": false,
          "value": "a",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'b/a'",
            "unicode": false,
            "value": "b/a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "files",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'b'",
          "unicode": false,
          "value": "b",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'b/c/d'",
            "unicode": false,
            "value": "b/c/d",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "files",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'c'",
          "unicode": false,
          "value": "c",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bad/c'",
            "unicode": false,
            "value": "bad/c",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "files",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'d'",
          "unicode": false,
          "value": "d",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'files/phar_test.inc'",
          "unicode": false,
          "value": "files/phar_test.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dir",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'phar://hio/b'",
              "unicode": false,
              "value": "phar://hio/b",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "opendir",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Bin {
                            "kind": "bin",
                            "left": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'phar://hio/b/'",
                              "unicode": false,
                              "value": "phar://hio/b/",
                            },
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "a",
                            },
                            "type": ".",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "is_dir",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dir",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "readdir",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "!==",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "dir",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
