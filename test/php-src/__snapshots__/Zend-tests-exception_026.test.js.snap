// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Nested exceptions in destructors 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": true,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "max",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
          ],
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": ExpressionStatement {
                  "expression": Name {
                    "kind": "name",
                    "name": "X",
                    "resolution": "uqn",
                  },
                  "kind": "expressionstatement",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Post {
                    "kind": "post",
                    "type": "-",
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "max",
                      },
                      "what": SelfReference {
                        "kind": "selfreference",
                        "raw": "self",
                      },
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "<",
                },
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "A",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Name {
                  "kind": "name",
                  "name": "Y",
                  "resolution": "uqn",
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__destruct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "A",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
