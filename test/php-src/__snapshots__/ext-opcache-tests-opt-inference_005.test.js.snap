// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Type inference 005: Use MAY_BE_NULL result (insted of empty) for ASSIGN_DIM with invalid arguments 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Assign {
                "kind": "assign",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": false,
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "r",
                  },
                },
                "operator": "=",
                "right": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "r",
                  },
                  "operator": "=",
                  "right": Bin {
                    "kind": "bin",
                    "left": Array {
                      "items": Array [],
                      "kind": "array",
                      "shortForm": true,
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "y",
                    },
                    "type": "&",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Unary {
              "kind": "unary",
              "type": "+",
              "what": Assign {
                "kind": "assign",
                "left": List {
                  "items": Array [
                    Entry {
                      "byRef": true,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "y",
                      },
                    },
                  ],
                  "kind": "list",
                  "shortForm": false,
                },
                "operator": "=",
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    Inline {
      "kind": "inline",
      "raw": "
DONE",
      "value": "DONE",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
