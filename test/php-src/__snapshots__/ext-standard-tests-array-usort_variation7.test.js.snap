// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test usort() function : usage variations - Anonymous comparison function 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing usort() : usage variation ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing usort() : usage variation ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cmp_function",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "value1",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "value2",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": If {
                  "alternate": Block {
                    "children": Array [
                      Return {
                        "expr": Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value1",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value2",
                    },
                    "type": ">",
                  },
                },
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value1",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value2",
                  },
                  "type": "==",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array_arg",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "100",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "3",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2",
              },
              "kind": "entry",
              "unpack": false,
              "value": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "70",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "3",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "24",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "4",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "90",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Anonymous 'cmp_function' with parameters passed by value --\\\\n\\"",
          "unicode": false,
          "value": "
-- Anonymous 'cmp_function' with parameters passed by value --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "array_arg",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "cmp_function",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "usort",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "array_arg",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array_arg",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"b\\"",
                "unicode": false,
                "value": "b",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Banana\\"",
                "unicode": false,
                "value": "Banana",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"m\\"",
                "unicode": false,
                "value": "m",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Mango\\"",
                "unicode": false,
                "value": "Mango",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"a\\"",
                "unicode": false,
                "value": "a",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Apple\\"",
                "unicode": false,
                "value": "Apple",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"p\\"",
                "unicode": false,
                "value": "p",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Pineapple\\"",
                "unicode": false,
                "value": "Pineapple",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cmp_function",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": true,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "value1",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": true,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "value2",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": If {
                  "alternate": Block {
                    "children": Array [
                      Return {
                        "expr": Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value1",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value2",
                    },
                    "type": ">",
                  },
                },
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value1",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value2",
                  },
                  "type": "==",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Anonymous 'cmp_function' with parameters passed by reference --\\\\n\\"",
          "unicode": false,
          "value": "
-- Anonymous 'cmp_function' with parameters passed by reference --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "array_arg",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "cmp_function",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "usort",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "array_arg",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
