// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #51353 ZIP64 problem, archive with 100000 items 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_time_limit",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "base_path",
        },
        "operator": "=",
        "right": Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "zip",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ZipArchive",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Encapsed {
              "kind": "encapsed",
              "raw": "\\"$base_path/51353.zip\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "base_path",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "/51353.zip",
                    "unicode": false,
                    "value": "/51353.zip",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
              ],
            },
            Bin {
              "kind": "bin",
              "left": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "CREATE",
                },
                "what": Name {
                  "kind": "name",
                  "name": "ZIPARCHIVE",
                  "resolution": "uqn",
                },
              },
              "right": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "OVERWRITE",
                },
                "what": Name {
                  "kind": "name",
                  "name": "ZIPARCHIVE",
                  "resolution": "uqn",
                },
              },
              "type": "|",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "open",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "zip",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"failed\\"",
                "unicode": false,
                "value": "failed",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"$i.txt\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ".txt",
                              "unicode": false,
                              "value": ".txt",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'1'",
                        "unicode": false,
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "addFromString",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "zip",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "100000",
                },
                "type": "<",
              },
            ],
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "close",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "zip",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "zip",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ZipArchive",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Encapsed {
              "kind": "encapsed",
              "raw": "\\"$base_path/51353.zip\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "base_path",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "/51353.zip",
                    "unicode": false,
                    "value": "/51353.zip",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
              ],
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "open",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "zip",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"failed\\"",
                "unicode": false,
                "value": "failed",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "raw": "\\"$base_path/51353_unpack\\"",
                  "type": "string",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "base_path",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "/51353_unpack",
                        "unicode": false,
                        "value": "/51353_unpack",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "extractTo",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "zip",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "close",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "zip",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"$base_path/51353_unpack/*.txt\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "base_path",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "/51353_unpack/*.txt",
                          "unicode": false,
                          "value": "/51353_unpack/*.txt",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "glob",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "count",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"OK\\"",
          "unicode": false,
          "value": "OK",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
