// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mysqli_debug() - mysqlnd only control strings 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'connect.inc'",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'table.inc'",
          "unicode": false,
          "value": "table.inc",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "link",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "control_string",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "trace_file",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "offset",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Silent {
              "expr": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unlink",
                  "resolution": "uqn",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] Expecting boolean/true, got %s/%s.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] Expecting boolean/true, got %s/%s.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "gettype",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Silent {
                  "expr": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_debug",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "silent",
                },
              },
              "type": "!==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] [%d] %s.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] [%d] %s.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "2",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "link",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_errno",
                          "resolution": "uqn",
                        },
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "link",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_error",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'SELECT * FROM test'",
                      "unicode": false,
                      "value": "SELECT * FROM test",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
            },
          },
          While {
            "body": null,
            "kind": "while",
            "shortForm": false,
            "test": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mysqli_fetch_assoc",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mysqli_free_result",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "clearstatcache",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] Trace file has not been written.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] Trace file has not been written.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "3",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "gettype",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "file_exists",
                  "resolution": "uqn",
                },
              },
            },
          },
          Return {
            "expr": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "trace_file",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "file_get_contents",
                        "resolution": "uqn",
                      },
                    },
                    Number {
                      "kind": "number",
                      "value": "0",
                    },
                    Number {
                      "kind": "number",
                      "value": "100024",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "substr",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "trim",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "try_control_string",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "memory_funcs",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_ecalloc'",
                "unicode": false,
                "value": "_mysqlnd_ecalloc",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_emalloc'",
                "unicode": false,
                "value": "_mysqlnd_emalloc",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_palloc_free_thd_cache_reference'",
                "unicode": false,
                "value": "_mysqlnd_palloc_free_thd_cache_reference",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_pecalloc'",
                "unicode": false,
                "value": "_mysqlnd_pecalloc",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_pefree'",
                "unicode": false,
                "value": "_mysqlnd_pefree",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_pemalloc'",
                "unicode": false,
                "value": "_mysqlnd_pemalloc",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'_mysqlnd_perealloc'",
                "unicode": false,
                "value": "_mysqlnd_perealloc",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace_file",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'%s%s%s'",
              "unicode": false,
              "value": "%s%s%s",
            },
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sys_get_temp_dir",
                "resolution": "uqn",
              },
            },
            Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'mysqli_debug_phpt.trace'",
              "unicode": false,
              "value": "mysqli_debug_phpt.trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'t:m:O,'",
                "unicode": false,
                "value": "t:m:O,",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "10",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[015] SELECT query cannot be found in trace. Trace contents seems wrong.\\\\n\\"",
              "unicode": false,
              "value": "[015] SELECT query cannot be found in trace. Trace contents seems wrong.
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'SELECT * FROM test'",
                "unicode": false,
                "value": "SELECT * FROM test",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'mysql_real_query'",
                "unicode": false,
                "value": "mysql_real_query",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines_trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions_trace",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "matches",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "functions_trace",
                      },
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>([\\\\w:]+)@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>([\\\\w:]+)@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines_trace",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": If {
        "alternate": null,
        "body": ExpressionStatement {
          "expression": Post {
            "kind": "post",
            "type": "+",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "found",
            },
          },
          "kind": "expressionstatement",
        },
        "kind": "if",
        "shortForm": false,
        "test": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Variable {
                "curly": false,
                "kind": "variable",
                "name": "name",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "functions_trace",
              },
            },
          ],
        },
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "memory_funcs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "name",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[016] Only %d memory functions have been found, expecting at least %d.\\\\n\\"",
                  "unicode": false,
                  "value": "[016] Only %d memory functions have been found, expecting at least %d.
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "found",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "right": Number {
          "kind": "number",
          "value": "1",
        },
        "type": "<",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'t:O,'",
                "unicode": false,
                "value": "t:O,",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "20",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[025] SELECT query cannot be found in trace. Trace contents seems wrong.\\\\n\\"",
              "unicode": false,
              "value": "[025] SELECT query cannot be found in trace. Trace contents seems wrong.
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'SELECT * FROM test'",
                "unicode": false,
                "value": "SELECT * FROM test",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'mysql_real_query'",
                "unicode": false,
                "value": "mysql_real_query",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines_trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions_trace",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "matches",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "functions_trace",
                      },
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>([\\\\w:]+)@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>([\\\\w:]+)@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines_trace",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": If {
        "alternate": null,
        "body": ExpressionStatement {
          "expression": Post {
            "kind": "post",
            "type": "+",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "found",
            },
          },
          "kind": "expressionstatement",
        },
        "kind": "if",
        "shortForm": false,
        "test": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Variable {
                "curly": false,
                "kind": "variable",
                "name": "name",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "functions_trace",
              },
            },
          ],
        },
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "memory_funcs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "name",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[026] More than %d memory functions have been recorded, that's strange.\\\\n\\"",
                  "unicode": false,
                  "value": "[026] More than %d memory functions have been recorded, that's strange.
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "found",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "right": Number {
          "kind": "number",
          "value": "2",
        },
        "type": ">",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mysqli_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unlink",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
