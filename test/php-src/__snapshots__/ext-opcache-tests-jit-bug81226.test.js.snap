// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #81226: Integer overflow behavior is different with JIT enabled 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "hex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'10000000000000041'",
          "unicode": false,
          "value": "10000000000000041",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "characterReferenceCode",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "characterReferenceCode",
                    },
                    "operator": "*=",
                    "right": Number {
                      "kind": "number",
                      "value": "16",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "characterReferenceCode",
                    },
                    "operator": "+=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "hex",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "ord",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0x0030",
                      },
                      "type": "-",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Pre {
                "kind": "pre",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "len",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "hex",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "len",
                },
                "type": "<",
              },
            ],
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "characterReferenceCode",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0x10FFFF",
                  },
                  "type": ">",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "200",
          },
          "type": "<",
        },
      ],
    },
    Inline {
      "kind": "inline",
      "raw": "
OK",
      "value": "OK",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
