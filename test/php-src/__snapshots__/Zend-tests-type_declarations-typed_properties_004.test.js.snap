// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test typed properties error condition (type mismatch) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"PHP 7 is better than you, and it knows it ...\\"",
            "unicode": false,
            "value": "PHP 7 is better than you, and it knows it ...",
          },
        ],
        "kind": "new",
        "what": Class {
          "attrGroups": Array [],
          "body": Array [
            PropertyStatement {
              "isStatic": false,
              "kind": "propertystatement",
              "properties": Array [
                Property {
                  "attrGroups": Array [],
                  "kind": "property",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "int",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": TypeReference {
                    "kind": "typereference",
                    "name": "int",
                    "raw": "int",
                  },
                  "value": null,
                },
              ],
              "visibility": "public",
            },
            Method {
              "arguments": Array [
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "string",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": TypeReference {
                    "kind": "typereference",
                    "name": "string",
                    "raw": "string",
                  },
                  "value": null,
                  "variadic": false,
                },
              ],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "int",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      "operator": "=",
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "string",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": false,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "__construct",
              },
              "nullable": false,
              "type": null,
              "visibility": "public",
            },
          ],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
