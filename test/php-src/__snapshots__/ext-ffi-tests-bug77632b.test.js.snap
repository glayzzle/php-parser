// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #77632 (FFI function pointers with variadics) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'utils.inc'",
          "unicode": false,
          "value": "utils.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "libc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"extern size_t (*zend_printf)(const char *format, ...);\\"",
              "unicode": false,
              "value": "extern size_t (*zend_printf)(const char *format, ...);",
            },
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ffi_get_php_dll_name",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "cdef",
            },
            "what": Name {
              "kind": "name",
              "name": "FFI",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "args",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"test from zend_printf\\\\n\\"",
                "unicode": false,
                "value": "test from zend_printf
",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "args",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "zend_printf",
          },
          "parenthesizedExpression": true,
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "libc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "args2",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Hello, %s from zend_printf\\\\n\\"",
                "unicode": false,
                "value": "Hello, %s from zend_printf
",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"world\\"",
                "unicode": false,
                "value": "world",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          variadic {
            "kind": "variadic",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "args2",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "zend_printf",
          },
          "parenthesizedExpression": true,
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "libc",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
