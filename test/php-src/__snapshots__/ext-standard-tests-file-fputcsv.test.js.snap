// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests various fputcsv() functionality tests 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "list",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,bbb'",
                "unicode": false,
                "value": "aaa,bbb",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,\\"bbb\\"'",
                "unicode": false,
                "value": "aaa,\\"bbb\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"aaa\\",\\"bbb\\"'",
                "unicode": false,
                "value": "\\"aaa\\",\\"bbb\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "3",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,bbb'",
                "unicode": false,
                "value": "aaa,bbb",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "4",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"aaa\\",bbb'",
                "unicode": false,
                "value": "\\"aaa\\",bbb",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "5",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"aaa\\",   \\"bbb\\"'",
                "unicode": false,
                "value": "\\"aaa\\",   \\"bbb\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "6",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "','",
                "unicode": false,
                "value": ",",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "7",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,'",
                "unicode": false,
                "value": "aaa,",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "8",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "',\\"aaa\\"'",
                "unicode": false,
                "value": ",\\"aaa\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "9",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"\\",\\"\\"'",
                "unicode": false,
                "value": "\\"\\",\\"\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "10",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"\\"\\"\\"\\"\\",'",
                "unicode": false,
                "value": "\\"\\"\\"\\"\\"\\",",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "11",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"\\"\\"\\"\\",aaa'",
                "unicode": false,
                "value": "\\"\\"\\"\\"\\",aaa",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "12",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,bbb   '",
                "unicode": false,
                "value": "aaa,bbb   ",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "13",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,\\"bbb   \\"'",
                "unicode": false,
                "value": "aaa,\\"bbb   \\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "14",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa\\"aaa\\",\\"bbb\\"bbb'",
                "unicode": false,
                "value": "aaa\\"aaa\\",\\"bbb\\"bbb",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "15",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa\\"aaa\\"\\"\\",bbb'",
                "unicode": false,
                "value": "aaa\\"aaa\\"\\"\\",bbb",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "16",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa,\\"\\\\\\\\\\"bbb,ccc'",
                "unicode": false,
                "value": "aaa,\\"\\\\\\"bbb,ccc",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "17",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'aaa\\"\\\\\\\\\\"a\\",\\"bbb\\"'",
                "unicode": false,
                "value": "aaa\\"\\\\\\"a\\",\\"bbb\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "18",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"\\\\\\\\\\"\\",\\"aaa\\"'",
                "unicode": false,
                "value": "\\"\\\\\\"\\",\\"aaa\\"",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "19",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"\\\\\\\\\\"\\"\\",aaa'",
                "unicode": false,
                "value": "\\"\\\\\\"\\"\\",aaa",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/fputcsv.csv'",
            "unicode": false,
            "value": "/fputcsv.csv",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unlink",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"w\\"",
              "unicode": false,
              "value": "w",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "','",
                      "unicode": false,
                      "value": ",",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "v",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "explode",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fputcsv",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "list",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "val",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "val",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "substr",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "res",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "val",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'$list = '",
          "unicode": false,
          "value": "$list = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_export",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\";\\\\n\\"",
          "unicode": false,
          "value": ";
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"r\\"",
              "unicode": false,
              "value": "r",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "','",
                    "unicode": false,
                    "value": ",",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "l",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "join",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "l",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgetcsv",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'$list = '",
          "unicode": false,
          "value": "$list = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_export",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\";\\\\n\\"",
          "unicode": false,
          "value": ";
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unlink",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
