// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Closure 008: Use in preg_replace_callback() 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "text",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "lambda",
              },
              "operator": "=",
              "right": Closure {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "matches",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "' '",
                              "unicode": false,
                              "value": " ",
                            },
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'&nbsp;'",
                              "unicode": false,
                              "value": "&nbsp;",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "matches",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "str_replace",
                            "resolution": "uqn",
                          },
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "' '",
                          "unicode": false,
                          "value": " ",
                        },
                        "type": ".",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": null,
                "uses": Array [],
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/( +) /'",
                  "unicode": false,
                  "value": "/( +) /",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lambda",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "text",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_replace_callback",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "replace_spaces",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1 2 3\\\\n\\"",
              "unicode": false,
              "value": "1 2 3
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "replace_spaces",
            "resolution": "uqn",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1  2  3\\\\n\\"",
              "unicode": false,
              "value": "1  2  3
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "replace_spaces",
            "resolution": "uqn",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1   2   3\\\\n\\"",
              "unicode": false,
              "value": "1   2   3
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "replace_spaces",
            "resolution": "uqn",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
