// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #24436 (isset()/empty() produce errors with non-existent variables in classes) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Print {
                        "expression": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"test1\\\\n\\"",
                          "unicode": false,
                          "value": "test1
",
                        },
                        "kind": "print",
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Empty {
                  "expression": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "test",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                    },
                  },
                  "kind": "empty",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Print {
                        "expression": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"test2\\\\n\\"",
                          "unicode": false,
                          "value": "test2
",
                        },
                        "kind": "print",
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Unary {
                  "kind": "unary",
                  "type": "!",
                  "what": Isset {
                    "kind": "isset",
                    "variables": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "test",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                        },
                      },
                    ],
                  },
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Print {
                        "expression": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"test1\\\\n\\"",
                          "unicode": false,
                          "value": "test1
",
                        },
                        "kind": "print",
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Empty {
                  "expression": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "test",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "kind": "empty",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Print {
                        "expression": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"test2\\\\n\\"",
                          "unicode": false,
                          "value": "test2
",
                        },
                        "kind": "print",
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Unary {
                  "kind": "unary",
                  "type": "!",
                  "what": Isset {
                    "kind": "isset",
                    "variables": Array [
                      PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "test",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test1",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "test",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
