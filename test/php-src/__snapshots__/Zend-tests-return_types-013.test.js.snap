// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Closure inside method returned null, expected array 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "test",
                  },
                  "operator": "=",
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"one\\"",
                    "unicode": false,
                    "value": "one",
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Closure {
                  "arguments": Array [],
                  "attrGroups": Array [],
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "byref": false,
                  "isStatic": false,
                  "kind": "closure",
                  "nullable": false,
                  "type": TypeReference {
                    "kind": "typereference",
                    "name": "array",
                    "raw": "array",
                  },
                  "uses": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test",
                    },
                  ],
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "callable",
            "raw": "callable",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "baz",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "func",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "bar",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "baz",
                },
              },
            },
          },
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "func",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
