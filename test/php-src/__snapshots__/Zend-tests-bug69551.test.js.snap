// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #69551 - parse_ini_file() and parse_ini_string() segmentation fault 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ini",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "INI",
          "raw": "<<<INI
[Network.eth0]
SubnetMask = \\"
\\"
INI",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "[Network.eth0]
SubnetMask = \\"
\\"
",
                "unicode": false,
                "value": "[Network.eth0]
SubnetMask = \\"
\\"",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "settings",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "ini",
            },
            Boolean {
              "kind": "boolean",
              "raw": "false",
              "value": false,
            },
            Name {
              "kind": "name",
              "name": "INI_SCANNER_RAW",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "parse_ini_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "settings",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
