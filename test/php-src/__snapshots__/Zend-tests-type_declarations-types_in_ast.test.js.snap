// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests AST pretty-printer 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0",
            },
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "parenthesizedExpression": true,
              "right": Closure {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "a",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": TypeReference {
                      "kind": "typereference",
                      "name": "int",
                      "raw": "int",
                    },
                    "value": null,
                    "variadic": false,
                  },
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "b",
                    },
                    "nullable": true,
                    "readonly": false,
                    "type": TypeReference {
                      "kind": "typereference",
                      "name": "int",
                      "raw": "int",
                    },
                    "value": null,
                    "variadic": false,
                  },
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "c",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": TypeReference {
                      "kind": "typereference",
                      "name": "int",
                      "raw": "int",
                    },
                    "value": NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        "operator": "=",
                        "right": New {
                          "arguments": Array [],
                          "kind": "new",
                          "what": Class {
                            "attrGroups": Array [],
                            "body": Array [
                              PropertyStatement {
                                "isStatic": false,
                                "kind": "propertystatement",
                                "properties": Array [
                                  Property {
                                    "attrGroups": Array [],
                                    "kind": "property",
                                    "name": Identifier {
                                      "kind": "identifier",
                                      "name": "a",
                                    },
                                    "nullable": false,
                                    "readonly": false,
                                    "type": null,
                                    "value": null,
                                  },
                                ],
                                "visibility": "public",
                              },
                              PropertyStatement {
                                "isStatic": false,
                                "kind": "propertystatement",
                                "properties": Array [
                                  Property {
                                    "attrGroups": Array [],
                                    "kind": "property",
                                    "name": Identifier {
                                      "kind": "identifier",
                                      "name": "b",
                                    },
                                    "nullable": false,
                                    "readonly": false,
                                    "type": TypeReference {
                                      "kind": "typereference",
                                      "name": "int",
                                      "raw": "int",
                                    },
                                    "value": null,
                                  },
                                ],
                                "visibility": "public",
                              },
                              PropertyStatement {
                                "isStatic": false,
                                "kind": "propertystatement",
                                "properties": Array [
                                  Property {
                                    "attrGroups": Array [],
                                    "kind": "property",
                                    "name": Identifier {
                                      "kind": "identifier",
                                      "name": "c",
                                    },
                                    "nullable": true,
                                    "readonly": false,
                                    "type": TypeReference {
                                      "kind": "typereference",
                                      "name": "int",
                                      "raw": "int",
                                    },
                                    "value": null,
                                  },
                                ],
                                "visibility": "public",
                              },
                            ],
                            "extends": null,
                            "implements": null,
                            "isAbstract": false,
                            "isAnonymous": true,
                            "isFinal": false,
                            "kind": "class",
                            "name": null,
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": true,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "int",
                  "raw": "int",
                },
                "uses": Array [],
              },
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
