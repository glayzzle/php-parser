// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests XML parser test, function callbacks 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml_parser",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "xml_parser_create",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          Name {
            "kind": "name",
            "name": "XML_OPTION_CASE_FOLDING",
            "resolution": "uqn",
          },
          Number {
            "kind": "number",
            "value": "1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_parser_set_option",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"startElement\\"",
            "unicode": false,
            "value": "startElement",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"endElement\\"",
            "unicode": false,
            "value": "endElement",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_set_element_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"characterData\\"",
            "unicode": false,
            "value": "characterData",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_set_character_data_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"PIHandler\\"",
            "unicode": false,
            "value": "PIHandler",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_set_processing_instruction_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"defaultHandler\\"",
            "unicode": false,
            "value": "defaultHandler",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_set_default_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"externalEntityRefHandler\\"",
            "unicode": false,
            "value": "externalEntityRefHandler",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_set_external_entity_ref_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"could not open XML input\\"",
                "unicode": false,
                "value": "could not open XML input",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Silent {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"xmltest.xml\\"",
                  "unicode": false,
                  "value": "xmltest.xml",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"r\\"",
                  "unicode": false,
                  "value": "r",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fopen",
                "resolution": "uqn",
              },
            },
            "kind": "silent",
          },
        },
      },
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"XML error: %s at line %d\\\\n\\"",
                          "unicode": false,
                          "value": "XML error: %s at line %d
",
                        },
                        Call {
                          "arguments": Array [
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "xml_parser",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "xml_get_error_code",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "xml_error_string",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "xml_parser",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "xml_get_current_line_number",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "exit",
                    "useDie": true,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "xml_parser",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "feof",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "xml_parse",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
            Number {
              "kind": "number",
              "value": "4096",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fread",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"parse complete\\\\n\\"",
          "unicode": false,
          "value": "parse complete
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml_parser",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_parser_free",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "name",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "attribs",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'{'",
                  "unicode": false,
                  "value": "{",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "name",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Foreach {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Print {
                          "expression": Encapsed {
                            "kind": "encapsed",
                            "raw": "\\" $k=\\\\\\"$v\\\\\\"\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": " ",
                                  "unicode": false,
                                  "value": " ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "k",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "=\\\\\\"",
                                  "unicode": false,
                                  "value": "=\\"",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "v",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "\\\\\\"",
                                  "unicode": false,
                                  "value": "\\"",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                          "kind": "print",
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "k",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "attribs",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "v",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "attribs",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sizeof",
                "resolution": "uqn",
              },
            },
          },
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'}'",
                "unicode": false,
                "value": "}",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "startElement",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "name",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'{/'",
                    "unicode": false,
                    "value": "{/",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "name",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'}'",
                  "unicode": false,
                  "value": "}",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "endElement",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "data",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'{CDATA['",
                    "unicode": false,
                    "value": "{CDATA[",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "']}'",
                  "unicode": false,
                  "value": "]}",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "characterData",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "target",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "data",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'{PI['",
                        "unicode": false,
                        "value": "{PI[",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "target",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "','",
                      "unicode": false,
                      "value": ",",
                    },
                    "type": ".",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "']}'",
                  "unicode": false,
                  "value": "]}",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "PIHandler",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "data",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Print {
                    "expression": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'{?['",
                          "unicode": false,
                          "value": "{?[",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "data",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "']}'",
                        "unicode": false,
                        "value": "]}",
                      },
                      "type": ".",
                    },
                    "kind": "print",
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Print {
                    "expression": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'{ENTREF['",
                          "unicode": false,
                          "value": "{ENTREF[",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "data",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "']}'",
                        "unicode": false,
                        "value": "]}",
                      },
                      "type": ".",
                    },
                    "kind": "print",
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                    Number {
                      "kind": "number",
                      "value": "0",
                    },
                    Number {
                      "kind": "number",
                      "value": "1",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "substr",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"&\\"",
                  "unicode": false,
                  "value": "&",
                },
                "type": "==",
              },
              "right": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                    Unary {
                      "kind": "unary",
                      "type": "-",
                      "what": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                    Number {
                      "kind": "number",
                      "value": "1",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "substr",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\";\\"",
                  "unicode": false,
                  "value": ";",
                },
                "type": "==",
              },
              "type": "&&",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "defaultHandler",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "parser",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "openEntityNames",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "base",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "systemId",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "publicId",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'{EXTENTREF['",
                                "unicode": false,
                                "value": "{EXTENTREF[",
                              },
                              "right": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "openEntityNames",
                              },
                              "type": ".",
                            },
                            "right": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "','",
                              "unicode": false,
                              "value": ",",
                            },
                            "type": ".",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "base",
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "','",
                          "unicode": false,
                          "value": ",",
                        },
                        "type": ".",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "systemId",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "','",
                      "unicode": false,
                      "value": ",",
                    },
                    "type": ".",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "publicId",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"]}\\\\n\\"",
                  "unicode": false,
                  "value": "]}
",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "externalEntityRefHandler",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
