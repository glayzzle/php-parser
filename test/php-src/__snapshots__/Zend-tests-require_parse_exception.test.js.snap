// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Parse exceptions when using require 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "code",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Include {
                    "kind": "include",
                    "once": false,
                    "require": true,
                    "target": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'data://text/plain;base64,'",
                        "unicode": false,
                        "value": "data://text/plain;base64,",
                      },
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "code",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "base64_encode",
                          "resolution": "uqn",
                        },
                      },
                      "type": ".",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\" on line \\"",
                          "unicode": false,
                          "value": " on line ",
                        },
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getLine",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "ParseError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_parse_error",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Nowdoc {
            "kind": "nowdoc",
            "label": "EOC",
            "raw": "<<<'EOC'
<?php
{ { { { { }
EOC
",
            "value": "<?php
{ { { { { }",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Nowdoc {
            "kind": "nowdoc",
            "label": "EOC",
            "raw": "<<<'EOC'
<?php
/** doc comment */
function f() {
EOC
",
            "value": "<?php
/** doc comment */
function f() {",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Nowdoc {
            "kind": "nowdoc",
            "label": "EOC",
            "raw": "<<<'EOC'
<?php
empty
EOC
",
            "value": "<?php
empty",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php
var_dump(078);'",
            "unicode": false,
            "value": "<?php
var_dump(078);",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php
var_dump(\\"\\\\u{xyz}\\");'",
            "unicode": false,
            "value": "<?php
var_dump(\\"\\\\u{xyz}\\");",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php
var_dump(\\"\\\\u{ffffff}\\");'",
            "unicode": false,
            "value": "<?php
var_dump(\\"\\\\u{ffffff}\\");",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_parse_error",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
