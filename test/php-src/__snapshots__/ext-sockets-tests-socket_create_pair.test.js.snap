// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test for socket_create_pair() 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sockets",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "domain",
              },
              "operator": "=",
              "right": Name {
                "kind": "name",
                "name": "AF_UNIX",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "domain",
              },
              "operator": "=",
              "right": Name {
                "kind": "name",
                "name": "AF_INET",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "PHP_OS",
                  "resolution": "uqn",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "3",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strtolower",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'win'",
          "unicode": false,
          "value": "win",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "domain",
          },
          Name {
            "kind": "name",
            "name": "SOCK_STREAM",
            "resolution": "uqn",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "sockets",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "socket_create_pair",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "sockets",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
