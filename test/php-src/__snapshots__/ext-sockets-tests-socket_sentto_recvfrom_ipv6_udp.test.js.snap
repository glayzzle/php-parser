// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test if socket_recvfrom() receives data sent by socket_sendto() via IPv6 UDP 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "socket",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "AF_INET6",
              "resolution": "uqn",
            },
            Name {
              "kind": "name",
              "name": "SOCK_DGRAM",
              "resolution": "uqn",
            },
            Name {
              "kind": "name",
              "name": "SOL_UDP",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "socket_create",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Unable to create AF_INET6 socket'",
                "unicode": false,
                "value": "Unable to create AF_INET6 socket",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "socket",
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'An error occurred while binding socket: %s'",
                    "unicode": false,
                    "value": "An error occurred while binding socket: %s",
                  },
                  Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "socket",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "socket_last_error",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "socket_strerror",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "socket",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'::1'",
              "unicode": false,
              "value": "::1",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "socket_bind",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "socket",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "address",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "port",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "socket_getsockname",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "msg",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Ping!\\"",
          "unicode": false,
          "value": "Ping!",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "len",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "msg",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sent",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "socket",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "msg",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "len",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "address",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "port",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "socket_sendto",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Exit {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'%d bytes have been sent instead of the %d bytes expected'",
                      "unicode": false,
                      "value": "%d bytes have been sent instead of the %d bytes expected",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sent",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "len",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
                "kind": "exit",
                "useDie": true,
              },
              "kind": "expressionstatement",
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "sent",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "len",
          },
          "type": "!=",
        },
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'An error occurred while sending to the socket: %s'",
                    "unicode": false,
                    "value": "An error occurred while sending to the socket: %s",
                  },
                  Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "socket",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "socket_last_error",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "socket_strerror",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sent",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "===",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "wants",
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "len",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "recvd",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "buf",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "null",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "socket",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "buffering",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "wants",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "address",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "port",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "socket_recvfrom",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "socket",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "socket_clear_error",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Continue {
                        "kind": "continue",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errno",
                    },
                    "operator": "=",
                    "right": Name {
                      "kind": "name",
                      "name": "SOCKET_EAGAIN",
                      "resolution": "uqn",
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Exit {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'An error occurred while sending to the socket: %s'",
                          "unicode": false,
                          "value": "An error occurred while sending to the socket: %s",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "errno",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "socket_strerror",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "exit",
                    "useDie": true,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bytes",
                },
                "parenthesizedExpression": true,
                "right": Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
                "type": "===",
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "errno",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "socket",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "socket_last_error",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "&&",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "recvd",
              },
              "operator": "+=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "wants",
              },
              "operator": "-=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "buf",
              },
              "operator": ".=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "buffering",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "recvd",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "len",
        },
        "type": "<",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'%d bytes have been received instead of the %d bytes expected'",
                    "unicode": false,
                    "value": "%d bytes have been received instead of the %d bytes expected",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "recvd",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "len",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "recvd",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "len",
        },
        "type": "!=",
      },
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Encapsed {
            "kind": "encapsed",
            "raw": "\\"Received $buf from remote address $address and remote port $port\\" ",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "Received ",
                  "unicode": false,
                  "value": "Received ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "buf",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": " from remote address ",
                  "unicode": false,
                  "value": " from remote address ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "address",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": " and remote port ",
                  "unicode": false,
                  "value": " and remote port ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "port",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
            ],
          },
          "right": Name {
            "kind": "name",
            "name": "PHP_EOL",
            "resolution": "uqn",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
