// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of ISO-2022-JP-MS text encoding 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "444",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "srand",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bytes",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "first",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bytes",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "8",
                  },
                  "type": ">>",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFF",
                },
                "type": "&",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "second",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bytes",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFF",
                },
                "type": "&",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "hi_bits",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "first",
                },
                "right": RetIf {
                  "falseExpr": Number {
                    "kind": "number",
                    "value": "0x81",
                  },
                  "kind": "retif",
                  "parenthesizedExpression": true,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "first",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "0x9F",
                    },
                    "type": ">",
                  },
                  "trueExpr": Bin {
                    "kind": "bin",
                    "left": Number {
                      "kind": "number",
                      "value": "0xE0",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "31",
                    },
                    "type": "-",
                  },
                },
                "type": "-",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": If {
              "alternate": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "kuten",
                      },
                      "operator": "=",
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "hi_bits",
                              },
                              "parenthesizedExpression": true,
                              "right": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "type": "<<",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "0x21",
                            },
                            "type": "+",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "8",
                          },
                          "type": "<<",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "second",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0x40",
                            },
                            "type": "-",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x21",
                          },
                          "type": "+",
                        },
                        "type": "+",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "kuten",
                      },
                      "operator": "=",
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "hi_bits",
                              },
                              "parenthesizedExpression": true,
                              "right": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "type": "<<",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "0x21",
                            },
                            "type": "+",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "8",
                          },
                          "type": "<<",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "second",
                              },
                              "right": Number {
                                "kind": "number",
                                "value": "0x80",
                              },
                              "type": "-",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "63",
                            },
                            "type": "+",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x21",
                          },
                          "type": "+",
                        },
                        "type": "+",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "second",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7F",
                },
                "type": ">",
              },
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "kuten",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "hi_bits",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "1",
                            },
                            "type": "<<",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x22",
                          },
                          "type": "+",
                        },
                        "parenthesizedExpression": true,
                        "right": Number {
                          "kind": "number",
                          "value": "8",
                        },
                        "type": "<<",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "second",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0x9F",
                          },
                          "type": "-",
                        },
                        "parenthesizedExpression": true,
                        "right": Number {
                          "kind": "number",
                          "value": "0x21",
                        },
                        "type": "+",
                      },
                      "type": "+",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "second",
              },
              "right": Number {
                "kind": "number",
                "value": "0x9E",
              },
              "type": ">",
            },
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "kuten",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "shiftJISDecode",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cp932Chars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Magic {
                    "kind": "magic",
                    "raw": "__DIR__",
                    "value": "__DIR__",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'/data/CP932.txt'",
                    "unicode": false,
                    "value": "/data/CP932.txt",
                  },
                  "type": ".",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "realpath",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r+'",
              "unicode": false,
              "value": "r+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'#'",
                "unicode": false,
                "value": "#",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Continue {
                    "kind": "continue",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bytes",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "256",
                    },
                    "type": "<",
                  },
                },
                If {
                  "alternate": null,
                  "body": Continue {
                    "kind": "continue",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bytes",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0xFA00",
                    },
                    "type": ">=",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'n'",
                            "unicode": false,
                            "value": "n",
                          },
                          Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "bytes",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "shiftJISDecode",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "pack",
                          "resolution": "uqn",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "cp932Chars",
                      },
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'N'",
                          "unicode": false,
                          "value": "N",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codepoint",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "pack",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"0x%x\\\\t0x%x\\"",
                    "unicode": false,
                    "value": "0x%x	0x%x",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bytes",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sscanf",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "line",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
            Number {
              "kind": "number",
              "value": "256",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgets",
            "resolution": "uqn",
          },
        },
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'n'",
                    "unicode": false,
                    "value": "n",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "shiftJISDecode",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pack",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bytes",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "nonInvertible",
                },
              },
              "operator": "=",
              "right": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bytes",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "cp932Chars",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8790",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8791",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8792",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8795",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8796",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x8797",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x879A",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x879B",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0x879C",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Number {
              "kind": "number",
              "value": "0xEEF9",
            },
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "i",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "udcChars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "cp",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xE000",
                },
                "type": "-",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Cast {
                      "expr": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "parenthesizedExpression": true,
                        "right": Number {
                          "kind": "number",
                          "value": "94",
                        },
                        "type": "/",
                      },
                      "kind": "cast",
                      "raw": "(int)",
                      "type": "int",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "0x21",
                    },
                    "type": "+",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "8",
                  },
                  "type": "<<",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "94",
                    },
                    "type": "%",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "0x21",
                  },
                  "type": "+",
                },
                "type": "+",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n'",
                      "unicode": false,
                      "value": "n",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bytes",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "pack",
                    "resolution": "uqn",
                  },
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "udcChars",
                },
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'N'",
                    "unicode": false,
                    "value": "N",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "cp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pack",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "cp",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "cp",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xE000",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "cp",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0xE000",
            },
            "parenthesizedExpression": true,
            "right": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "20",
              },
              "parenthesizedExpression": true,
              "right": Number {
                "kind": "number",
                "value": "94",
              },
              "type": "*",
            },
            "type": "+",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "jisx0201Chars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Magic {
                    "kind": "magic",
                    "raw": "__DIR__",
                    "value": "__DIR__",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'/data/JISX0201.txt'",
                    "unicode": false,
                    "value": "/data/JISX0201.txt",
                  },
                  "type": ".",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "realpath",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r+'",
              "unicode": false,
              "value": "r+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'#'",
                "unicode": false,
                "value": "#",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "jisx0201Chars",
                  },
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'N'",
                      "unicode": false,
                      "value": "N",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "codepoint",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "pack",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"0x%x\\\\t0x%x\\"",
                    "unicode": false,
                    "value": "0x%x	0x%x",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sscanf",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "line",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
            Number {
              "kind": "number",
              "value": "256",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgets",
            "resolution": "uqn",
          },
        },
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "encoding",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bothWays",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "encoding",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "identifyValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "encoding",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-32BE'",
                  "unicode": false,
                  "value": "UTF-32BE",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "convertValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "from",
                          },
                          Number {
                            "kind": "number",
                            "value": "3",
                          },
                          Bin {
                            "kind": "bin",
                            "left": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "from",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "strlen",
                                "resolution": "uqn",
                              },
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "3",
                            },
                            "type": "-",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "substr",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "from",
                        },
                        Number {
                          "kind": "number",
                          "value": "0",
                        },
                        Number {
                          "kind": "number",
                          "value": "3",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "substr",
                        "resolution": "uqn",
                      },
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x1B(B\\"",
                      "unicode": false,
                      "value": "(B",
                    },
                    "type": "==",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      "operator": ".=",
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x1B(B\\"",
                        "unicode": false,
                        "value": "(B",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "from",
                                  },
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"\\\\x1B\\\\$B\\"",
                                    "unicode": false,
                                    "value": "$B",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "strpos",
                                  "resolution": "uqn",
                                },
                              },
                              "right": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "type": "!==",
                            },
                            "right": Bin {
                              "kind": "bin",
                              "left": Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "from",
                                  },
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"\\\\x1B(I\\"",
                                    "unicode": false,
                                    "value": "(I",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "strpos",
                                  "resolution": "uqn",
                                },
                              },
                              "right": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "type": "!==",
                            },
                            "type": "||",
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "from",
                                },
                                String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"\\\\x1B\\\\$@\\"",
                                  "unicode": false,
                                  "value": "$@",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "strpos",
                                "resolution": "uqn",
                              },
                            },
                            "right": Boolean {
                              "kind": "boolean",
                              "raw": "false",
                              "value": false,
                            },
                            "type": "!==",
                          },
                          "type": "||",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "from",
                              },
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"\\\\x1B\\\\$(B\\"",
                                "unicode": false,
                                "value": "$(B",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strpos",
                              "resolution": "uqn",
                            },
                          },
                          "right": Boolean {
                            "kind": "boolean",
                            "raw": "false",
                            "value": false,
                          },
                          "type": "!==",
                        },
                        "type": "||",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "from",
                            },
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"\\\\x1B\\\\$(@\\"",
                              "unicode": false,
                              "value": "$(@",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strpos",
                            "resolution": "uqn",
                          },
                        },
                        "right": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "type": "!==",
                      },
                      "type": "||",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "from",
                          },
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\x1B\\\\$(?\\"",
                            "unicode": false,
                            "value": "$(?",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strpos",
                          "resolution": "uqn",
                        },
                      },
                      "right": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "type": "!==",
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "to",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "from",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-32BE'",
                        "unicode": false,
                        "value": "UTF-32BE",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "encoding",
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "convertValidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bothWays",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testValid",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "encoding",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "encoding",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-32BE'",
                  "unicode": false,
                  "value": "UTF-32BE",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testInvalid",
      },
      "nullable": false,
      "type": null,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x1B",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00\\\\x00\\\\x00\\"",
                    "unicode": false,
                    "value": "   ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(B\\"",
                    "unicode": false,
                    "value": "(B",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00\\\\x00\\\\x00\\"",
                    "unicode": false,
                    "value": "   ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(J\\"",
                    "unicode": false,
                    "value": "(J",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x00\\\\x00\\\\x00\\"",
                    "unicode": false,
                    "value": "   ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
          "type": "<",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
                "type": ">=",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xDF",
                },
                "type": "<=",
              },
              "type": "&&",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                  "unicode": false,
                  "value": "   %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(B\\"",
                    "unicode": false,
                    "value": "(B",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                  "unicode": false,
                  "value": "   %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(J\\"",
                    "unicode": false,
                    "value": "(J",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                  "unicode": false,
                  "value": "   %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ASCII support OK\\\\n\\"",
          "unicode": false,
          "value": "ASCII support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "kana",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "jisx0201",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "ord",
                              "resolution": "uqn",
                            },
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "128",
                          },
                          "type": "-",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B(I\\"",
                          "unicode": false,
                          "value": "(I",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "kana",
                        },
                        "type": ".",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "utf32BE",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testValid",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "jisx0201",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "utf32BE",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testValid",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "jisx0201",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "ord",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "128",
              },
              "type": ">=",
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "jisx0201",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "jisx0201Chars",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "utf32BE",
      },
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
                "type": ">=",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xDF",
                },
                "type": "<=",
              },
              "type": "&&",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(I\\"",
                    "unicode": false,
                    "value": "(I",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                  "unicode": false,
                  "value": "   %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\x1B(J\\"",
                    "unicode": false,
                    "value": "(J",
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                  "unicode": false,
                  "value": "   %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ISO-2022-JP-MS'",
                  "unicode": false,
                  "value": "ISO-2022-JP-MS",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"JIS X 0201 support OK\\\\n\\"",
          "unicode": false,
          "value": "JIS X 0201 support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "validChars",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "prefix",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bothWays",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "good",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "validChars",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "array_keys",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "good",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "shuffle",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "length",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            Number {
                              "kind": "number",
                              "value": "5",
                            },
                            Number {
                              "kind": "number",
                              "value": "10",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "rand",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "good",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "count",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "min",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "from",
                    },
                    "operator": "=",
                    "right": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "to",
                      },
                      "operator": "=",
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "''",
                        "unicode": false,
                        "value": "",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                While {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "goodChar",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "good",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "array_pop",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "from",
                          },
                          "operator": ".=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "goodChar",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "to",
                          },
                          "operator": ".=",
                          "right": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "goodChar",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "validChars",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Post {
                    "kind": "post",
                    "type": "-",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "length",
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "prefix",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "from",
                        },
                        "type": ".",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "to",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "bothWays",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testValid",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Empty {
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "good",
                },
                "kind": "empty",
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testAllValidCharsWithPrefix",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "validChars",
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cp932Chars",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "validChars",
            },
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7F",
          },
          "type": "<=",
        },
      ],
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "validChars",
            },
          },
          "operator": "=",
          "right": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "jisx0201Chars",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xA1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xDF",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lenTable",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0xE0",
                  },
                  Number {
                    "kind": "number",
                    "value": "0xFC",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0x81",
                  },
                  Number {
                    "kind": "number",
                    "value": "0x9F",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncatedChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "lenTable",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Unset {
        "kind": "unset",
        "variables": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bytes",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "cp932Chars",
            },
          },
        ],
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "bytes",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "nonInvertible",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "char",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cp932Chars",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B\\"",
            "unicode": false,
            "value": "$B",
          },
          Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidCharsWithPrefix",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "nonInvertible",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B\\"",
            "unicode": false,
            "value": "$B",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidCharsWithPrefix",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "firstByte",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "invalid",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "ord",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B\\\\$B\\"",
                          "unicode": false,
                          "value": "$B",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "invalid",
                        },
                        "type": ".",
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                        "unicode": false,
                        "value": "   %",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-32BE'",
                        "unicode": false,
                        "value": "UTF-32BE",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testInvalidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B\\\\$B\\"",
                          "unicode": false,
                          "value": "$B",
                        },
                        "right": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "invalid",
                          },
                        },
                        "type": ".",
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                        "unicode": false,
                        "value": "   %",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-32BE'",
                        "unicode": false,
                        "value": "UTF-32BE",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testInvalidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "firstByte",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0x80",
                  },
                  "type": ">",
                },
                "parenthesizedExpression": true,
                "right": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "firstByte",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0xA0",
                  },
                  "type": "<",
                },
                "type": "&&",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "firstByte",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xE0",
                },
                "type": ">=",
              },
              "type": "||",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "array_keys",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "invalid",
      },
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x1B\\\\$B\\"",
                "unicode": false,
                "value": "$B",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "truncated",
              },
              "type": ".",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
              "unicode": false,
              "value": "   %",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'ISO-2022-JP-MS'",
              "unicode": false,
              "value": "ISO-2022-JP-MS",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "testInvalidString",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncatedChars",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "array_keys",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "truncated",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"JIS X 0208 (with MS extensions) support OK\\\\n\\"",
          "unicode": false,
          "value": "JIS X 0208 (with MS extensions) support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "validChars",
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "udcChars",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "validChars",
            },
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7F",
          },
          "type": "<=",
        },
      ],
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "validChars",
            },
          },
          "operator": "=",
          "right": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "jisx0201Chars",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xA1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xDF",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncatedChars",
          },
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0x21",
                  },
                  Number {
                    "kind": "number",
                    "value": "0x7F",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "udcChars",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$(?\\"",
            "unicode": false,
            "value": "$(?",
          },
          Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidCharsWithPrefix",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "firstByte",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "invalid",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "substr",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "ord",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B\\\\$(?\\"",
                          "unicode": false,
                          "value": "$(?",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "invalid",
                        },
                        "type": ".",
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                        "unicode": false,
                        "value": "   %",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-32BE'",
                        "unicode": false,
                        "value": "UTF-32BE",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testInvalidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\x1B\\\\$(?\\"",
                          "unicode": false,
                          "value": "$(?",
                        },
                        "right": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "invalid",
                          },
                        },
                        "type": ".",
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
                        "unicode": false,
                        "value": "   %",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'ISO-2022-JP-MS'",
                        "unicode": false,
                        "value": "ISO-2022-JP-MS",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTF-32BE'",
                        "unicode": false,
                        "value": "UTF-32BE",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "testInvalidString",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "firstByte",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0x80",
                  },
                  "type": ">",
                },
                "parenthesizedExpression": true,
                "right": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "firstByte",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0xA0",
                  },
                  "type": "<",
                },
                "type": "&&",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "firstByte",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xE0",
                },
                "type": ">=",
              },
              "type": "||",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "array_keys",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "invalid",
      },
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x1B\\\\$(?\\"",
                "unicode": false,
                "value": "$(?",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "truncated",
              },
              "type": ".",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
              "unicode": false,
              "value": "   %",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'ISO-2022-JP-MS'",
              "unicode": false,
              "value": "ISO-2022-JP-MS",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "testInvalidString",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncatedChars",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "array_keys",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "truncated",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UDC support OK\\\\n\\"",
          "unicode": false,
          "value": "UDC support OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA5\\"",
            "unicode": false,
            "value": " ¥",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B!o\\\\x1B(B\\"",
            "unicode": false,
            "value": "$B!o(B",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x20\\\\x3E\\"",
            "unicode": false,
            "value": " >",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B!1\\\\x1B(B\\"",
            "unicode": false,
            "value": "$B!1(B",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFF\\\\x5E\\"",
            "unicode": false,
            "value": "ÿ^",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B!A\\\\x1B(B\\"",
            "unicode": false,
            "value": "$B!A(B",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Other mappings from Unicode -> ISO-2022-JP-MS OK\\\\n\\"",
          "unicode": false,
          "value": "Other mappings from Unicode -> ISO-2022-JP-MS OK
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$(B\\\\x21\\\\x21\\"",
            "unicode": false,
            "value": "$(B!!",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x30\\\\x00\\"",
            "unicode": false,
            "value": "0 ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$(@\\\\x21\\\\x21\\"",
            "unicode": false,
            "value": "$(@!!",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x30\\\\x00\\"",
            "unicode": false,
            "value": "0 ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00a\\\\x00b\\\\x00c\\\\xFF\\\\x61\\\\x00a\\\\x00b\\\\x00c\\"",
            "unicode": false,
            "value": " a b cÿa a b c",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc\\\\x1B(I\\\\x21\\\\x1B(Babc\\"",
            "unicode": false,
            "value": "abc(I!(Babc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xE0\\"",
            "unicode": false,
            "value": "à",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B.\\"",
            "unicode": false,
            "value": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$\\"",
            "unicode": false,
            "value": "$",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$.\\"",
            "unicode": false,
            "value": "$.",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B(\\"",
            "unicode": false,
            "value": "(",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B(.\\"",
            "unicode": false,
            "value": "(.",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$(\\"",
            "unicode": false,
            "value": "$(",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$(X\\"",
            "unicode": false,
            "value": "$(X",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x1B\\\\$B\\\\x9F\\"",
            "unicode": false,
            "value": "$B",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO-2022-JP-MS\\"",
            "unicode": false,
            "value": "ISO-2022-JP-MS",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
