// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests XMLReader: Bug #70309 XmlReader read generates extra output 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doc",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\XMLReader",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<chapter xmlns=\\"http://docbook.org/ns/docbook\\" version=\\"5.0\\">
<title>Test Chapter</title>
<para>
This is a paragraph in the test chapter. It is unremarkable in
every regard. This is a paragraph in the test chapter. It is
unremarkable in every regard. This is a paragraph in the test
chapter. It is unremarkable in every regard.
</para>
<paar>
<emphasis role=\\"bold\\">This</emphasis> paragraph contains
<emphasis>some <emphasis>emphasized</emphasis> text</emphasis>
1and a <superscript>super</superscript>script
and a <subscript>sub</subscript>script.
</para>
<para>
This is a paragraph in the test chapter. It is unremarkable in
every regard. This is a paragraph in the test chapter. It is
unremarkable in every regard. This is a paragraph in the test
chapter. It is unremarkable in every regard.
</para>
</chapter>'",
            "unicode": false,
            "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<chapter xmlns=\\"http://docbook.org/ns/docbook\\" version=\\"5.0\\">
<title>Test Chapter</title>
<para>
This is a paragraph in the test chapter. It is unremarkable in
every regard. This is a paragraph in the test chapter. It is
unremarkable in every regard. This is a paragraph in the test
chapter. It is unremarkable in every regard.
</para>
<paar>
<emphasis role=\\"bold\\">This</emphasis> paragraph contains
<emphasis>some <emphasis>emphasized</emphasis> text</emphasis>
1and a <superscript>super</superscript>script
and a <subscript>sub</subscript>script.
</para>
<para>
This is a paragraph in the test chapter. It is unremarkable in
every regard. This is a paragraph in the test chapter. It is
unremarkable in every regard. This is a paragraph in the test
chapter. It is unremarkable in every regard.
</para>
</chapter>",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "xml",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "doc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'http://docs.oasis-open.org/docbook/rng/5.0/docbook.rng'",
            "unicode": false,
            "value": "http://docs.oasis-open.org/docbook/rng/5.0/docbook.rng",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setRelaxNGSchema",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "doc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": null,
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Silent {
          "expr": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "read",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "doc",
              },
            },
          },
          "kind": "silent",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "!==",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
