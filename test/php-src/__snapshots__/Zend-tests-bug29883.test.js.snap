// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #29883 (isset gives invalid values on strings) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"bug\\"",
          "unicode": false,
          "value": "bug",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Isset {
            "kind": "isset",
            "variables": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Number {
                    "kind": "number",
                    "value": "10",
                  },
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Isset {
            "kind": "isset",
            "variables": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Isset {
            "kind": "isset",
            "variables": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"1\\"",
                  "unicode": false,
                  "value": "1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "10",
                },
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "type": ".",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "1",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "type": ".",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"1\\"",
                "unicode": false,
                "value": "1",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "type": ".",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
