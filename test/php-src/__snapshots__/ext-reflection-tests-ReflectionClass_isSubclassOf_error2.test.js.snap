// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests ReflectionClass::isSubclassOf() - fixed crash for unbound anonymous class 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Class {
                    "attrGroups": Array [],
                    "body": Array [],
                    "extends": Name {
                      "kind": "name",
                      "name": "Base",
                      "resolution": "uqn",
                    },
                    "implements": null,
                    "isAbstract": false,
                    "isAnonymous": true,
                    "isFinal": false,
                    "kind": "class",
                    "name": null,
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "main",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "X",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Base",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "check",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "base",
                  },
                  "operator": "=",
                  "right": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "class",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "Base",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Foreach {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          Continue {
                            "kind": "continue",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "class",
                            },
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'@anonymous'",
                              "unicode": false,
                              "value": "@anonymous",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strpos",
                            "resolution": "uqn",
                          },
                        },
                        "right": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "type": "===",
                      },
                    },
                    Echo {
                      "expressions": Array [
                        Encapsed {
                          "kind": "encapsed",
                          "raw": "\\"Checking for $class\\\\n\\"",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "Checking for ",
                                "unicode": false,
                                "value": "Checking for ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "class",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "\\\\n",
                                "unicode": false,
                                "value": "",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "flush",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "rc",
                        },
                        "operator": "=",
                        "right": New {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "class",
                            },
                          ],
                          "kind": "new",
                          "what": Name {
                            "kind": "name",
                            "name": "ReflectionClass",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "base",
                              },
                            ],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "isSubclassOf",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "rc",
                              },
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Echo {
                      "expressions": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "key": null,
                "kind": "foreach",
                "shortForm": false,
                "source": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "get_declared_classes",
                    "resolution": "uqn",
                  },
                },
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "class",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "check",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"After first check\\\\n\\"",
          "unicode": false,
          "value": "After first check
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "main",
          },
          "what": Name {
            "kind": "name",
            "name": "X",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "check",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
