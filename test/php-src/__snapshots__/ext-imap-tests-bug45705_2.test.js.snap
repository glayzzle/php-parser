// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #45705 test #2 (imap rfc822_parse_adrlist() modifies passed address parameter) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "envelope",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'return_path'",
                "unicode": false,
                "value": "return_path",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'from'",
                "unicode": false,
                "value": "from",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'reply_to'",
                "unicode": false,
                "value": "reply_to",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'to'",
                "unicode": false,
                "value": "to",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'cc'",
                "unicode": false,
                "value": "cc",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'bcc'",
                "unicode": false,
                "value": "bcc",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'John Doe <john@example.com>'",
                "unicode": false,
                "value": "John Doe <john@example.com>",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "envelope",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "envelope",
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": Number {
                  "kind": "number",
                  "value": "1",
                },
                "kind": "entry",
                "unpack": false,
                "value": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'cc'",
                        "unicode": false,
                        "value": "cc",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'Steve Doe <steve@example.com>'",
                        "unicode": false,
                        "value": "Steve Doe <steve@example.com>",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "imap_mail_compose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "envelope",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
