// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test of the *intersect* bunch of functions (both assoc and non-assoc) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "E_ALL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "error_reporting",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "priv_member",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "public_member",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "val",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "priv_member",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "val",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "public_member",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "val",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "a",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "b",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": Return {
                  "expr": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "kind": "return",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "priv_member",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "priv_member",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "b",
                    },
                  },
                  "type": "===",
                },
              },
              Return {
                "expr": RetIf {
                  "falseExpr": Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  "kind": "retif",
                  "test": Bin {
                    "kind": "bin",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "priv_member",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                    },
                    "parenthesizedExpression": true,
                    "right": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "priv_member",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "b",
                      },
                    },
                    "type": ">",
                  },
                  "trueExpr": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "comp_func_cr",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "cr",
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Return {
              "expr": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "return",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
              "type": "===",
            },
          },
          Return {
            "expr": RetIf {
              "falseExpr": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              "kind": "retif",
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "parenthesizedExpression": true,
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                "type": ">",
              },
              "trueExpr": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "comp_func",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Return {
              "expr": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "return",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "public_member",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
              "right": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "public_member",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
              },
              "type": "===",
            },
          },
          Return {
            "expr": RetIf {
              "falseExpr": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              "kind": "retif",
              "test": Bin {
                "kind": "bin",
                "left": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "public_member",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
                "parenthesizedExpression": true,
                "right": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "public_member",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                },
                "type": ">",
              },
              "trueExpr": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "comp_func_cr",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"0.1\\"",
                "unicode": false,
                "value": "0.1",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "9",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"0.5\\"",
                "unicode": false,
                "value": "0.5",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "12",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "23",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "4",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "15",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"0.2\\"",
                "unicode": false,
                "value": "0.2",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "9",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"0.5\\"",
                "unicode": false,
                "value": "0.5",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "22",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "3",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "4",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "15",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "cr",
                  "resolution": "uqn",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"begin ------------ array_uintersect() ---------------------------\\\\n\\"",
          "unicode": false,
          "value": "begin ------------ array_uintersect() ---------------------------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$a='",
              "unicode": false,
              "value": "$a=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$b='",
              "unicode": false,
              "value": "$b=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'var_dump(array_uintersect($a, $b, \\"comp_func_cr\\"));'",
            "unicode": false,
            "value": "var_dump(array_uintersect($a, $b, \\"comp_func_cr\\"));",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"comp_func_cr\\"",
                "unicode": false,
                "value": "comp_func_cr",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_uintersect",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"end   ------------ array_uintersect() ---------------------------\\\\n\\"",
          "unicode": false,
          "value": "end   ------------ array_uintersect() ---------------------------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"begin ------------ array_uintersect_assoc() ---------------------\\\\n\\"",
          "unicode": false,
          "value": "begin ------------ array_uintersect_assoc() ---------------------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$a='",
              "unicode": false,
              "value": "$a=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$b='",
              "unicode": false,
              "value": "$b=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'var_dump(array_uintersect_assoc($a, $b, \\"comp_func_cr\\"));'",
            "unicode": false,
            "value": "var_dump(array_uintersect_assoc($a, $b, \\"comp_func_cr\\"));",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"comp_func_cr\\"",
                "unicode": false,
                "value": "comp_func_cr",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_uintersect_assoc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"end   ------------ array_uintersect_assoc() ---------------------\\\\n\\"",
          "unicode": false,
          "value": "end   ------------ array_uintersect_assoc() ---------------------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"begin ------------ array_uintersect_uassoc() with ordinary func -\\\\n\\"",
          "unicode": false,
          "value": "begin ------------ array_uintersect_uassoc() with ordinary func -
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$a='",
              "unicode": false,
              "value": "$a=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$b='",
              "unicode": false,
              "value": "$b=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'var_dump(array_uintersect_uassoc($a, $b, \\"comp_func_cr\\", \\"comp_func\\"));'",
            "unicode": false,
            "value": "var_dump(array_uintersect_uassoc($a, $b, \\"comp_func_cr\\", \\"comp_func\\"));",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"comp_func_cr\\"",
                "unicode": false,
                "value": "comp_func_cr",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"comp_func\\"",
                "unicode": false,
                "value": "comp_func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_uintersect_uassoc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"end   ------------ array_uintersect_uassoc() with ordinary func -\\\\n\\"",
          "unicode": false,
          "value": "end   ------------ array_uintersect_uassoc() with ordinary func -
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"begin ------------ array_uintersect_uassoc() with method --------\\\\n\\"",
          "unicode": false,
          "value": "begin ------------ array_uintersect_uassoc() with method --------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$a='",
              "unicode": false,
              "value": "$a=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'$b='",
              "unicode": false,
              "value": "$b=",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_export",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\";\\\\n\\"",
            "unicode": false,
            "value": ";
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'var_dump(array_uintersect_uassoc($a, $b, array(\\"cr\\", \\"comp_func_cr\\"), \\"comp_func\\"));'",
            "unicode": false,
            "value": "var_dump(array_uintersect_uassoc($a, $b, array(\\"cr\\", \\"comp_func_cr\\"), \\"comp_func\\"));",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"cr\\"",
                      "unicode": false,
                      "value": "cr",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"comp_func_cr\\"",
                      "unicode": false,
                      "value": "comp_func_cr",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"comp_func\\"",
                "unicode": false,
                "value": "comp_func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_uintersect_uassoc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"end   ------------ array_uintersect_uassoc() with method --------\\\\n\\"",
          "unicode": false,
          "value": "end   ------------ array_uintersect_uassoc() with method --------
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
