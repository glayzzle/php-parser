// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests 060: multiple namespaces per file 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        UseGroup {
          "items": Array [
            UseItem {
              "alias": Identifier {
                "kind": "identifier",
                "name": "B",
              },
              "kind": "useitem",
              "name": "Bar\\\\A",
              "type": null,
            },
          ],
          "kind": "usegroup",
          "name": null,
          "type": null,
        },
        Class {
          "attrGroups": Array [],
          "body": Array [],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": false,
          "isFinal": false,
          "kind": "class",
          "name": Identifier {
            "kind": "identifier",
            "name": "A",
          },
        },
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "operator": "=",
            "right": New {
              "arguments": Array [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "B",
                "resolution": "uqn",
              },
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
            "operator": "=",
            "right": New {
              "arguments": Array [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "A",
                "resolution": "uqn",
              },
            },
          },
          "kind": "expressionstatement",
        },
        Echo {
          "expressions": Array [
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_class",
                  "resolution": "uqn",
                },
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
              "type": ".",
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_class",
                  "resolution": "uqn",
                },
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
              "type": ".",
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Namespace {
          "children": Array [
            UseGroup {
              "items": Array [
                UseItem {
                  "alias": Identifier {
                    "kind": "identifier",
                    "name": "B",
                  },
                  "kind": "useitem",
                  "name": "Foo\\\\A",
                  "type": null,
                },
              ],
              "kind": "usegroup",
              "name": null,
              "type": null,
            },
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "operator": "=",
                "right": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "B",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                "operator": "=",
                "right": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "A",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            Echo {
              "expressions": Array [
                Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "get_class",
                      "resolution": "uqn",
                    },
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            Echo {
              "expressions": Array [
                Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "b",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "get_class",
                      "resolution": "uqn",
                    },
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            Class {
              "attrGroups": Array [],
              "body": Array [],
              "extends": null,
              "implements": null,
              "isAbstract": false,
              "isAnonymous": false,
              "isFinal": false,
              "kind": "class",
              "name": Identifier {
                "kind": "identifier",
                "name": "A",
              },
            },
          ],
          "kind": "namespace",
          "name": "Bar",
          "withBrackets": false,
        },
      ],
      "kind": "namespace",
      "name": "Foo",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
