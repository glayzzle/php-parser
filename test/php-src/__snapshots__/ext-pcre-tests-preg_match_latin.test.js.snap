// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests preg_match() single line match with latin input 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/^[\\\\w\\\\p{Cyrillic}\\\\s\\\\-\\\\']+$/u'",
            "unicode": false,
            "value": "/^[\\\\w\\\\p{Cyrillic}\\\\s\\\\-']+$/u",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'latin'",
            "unicode": false,
            "value": "latin",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "test1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/^[\\\\w\\\\p{Cyrillic}\\\\s\\\\-\\\\']+$/u'",
            "unicode": false,
            "value": "/^[\\\\w\\\\p{Cyrillic}\\\\s\\\\-']+$/u",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'кириллица'",
            "unicode": false,
            "value": "кириллица",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "test2",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/^[\\\\w\\\\s\\\\-\\\\']+$/u'",
            "unicode": false,
            "value": "/^[\\\\w\\\\s\\\\-']+$/u",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'latin'",
            "unicode": false,
            "value": "latin",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "test3",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "test1",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "test2",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "test3",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
===Done===",
      "value": "===Done===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
