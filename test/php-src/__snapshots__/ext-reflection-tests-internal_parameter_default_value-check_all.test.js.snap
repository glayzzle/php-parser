// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Check that all internal parameter defaults evaluate without error 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "rf",
          },
          "nullable": false,
          "readonly": false,
          "type": Name {
            "kind": "name",
            "name": "ReflectionFunctionAbstract",
            "resolution": "uqn",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Try {
                        "always": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [],
                                "kind": "call",
                                "what": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Identifier {
                                    "kind": "identifier",
                                    "name": "getDefaultValue",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "param",
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "catches": Array [
                          Catch {
                            "body": Block {
                              "children": Array [
                                Echo {
                                  "expressions": Array [
                                    Encapsed {
                                      "kind": "encapsed",
                                      "raw": "\\"{$rf->getName()}: {$e->getMessage()}\\\\n\\"",
                                      "type": "string",
                                      "value": Array [
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Call {
                                            "arguments": Array [],
                                            "kind": "call",
                                            "what": PropertyLookup {
                                              "kind": "propertylookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "getName",
                                              },
                                              "what": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "rf",
                                              },
                                            },
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "complex",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": ": ",
                                            "unicode": false,
                                            "value": ": ",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Call {
                                            "arguments": Array [],
                                            "kind": "call",
                                            "what": PropertyLookup {
                                              "kind": "propertylookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "getMessage",
                                              },
                                              "what": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "e",
                                              },
                                            },
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "complex",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "\\\\n",
                                            "unicode": false,
                                            "value": "",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                      ],
                                    },
                                  ],
                                  "kind": "echo",
                                  "shortForm": false,
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "catch",
                            "variable": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                            "what": Array [
                              Name {
                                "kind": "name",
                                "name": "Error",
                                "resolution": "uqn",
                              },
                            ],
                          },
                        ],
                        "kind": "try",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "isDefaultValueAvailable",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "param",
                      },
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getParameters",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "rf",
                },
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "param",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "checkDefaults",
      },
      "nullable": false,
      "type": null,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rf",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionFunction",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "rf",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "checkDefaults",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": OffsetLookup {
        "kind": "offsetlookup",
        "offset": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"internal\\"",
          "unicode": false,
          "value": "internal",
        },
        "what": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_defined_functions",
            "resolution": "uqn",
          },
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "func",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rc",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "class",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "method",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "checkDefaults",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getMethods",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "rc",
                },
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "method",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "get_declared_classes",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "class",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
