// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests IntlCodepointBreakIterator::getLastCodePoint(): basic test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"intl.error_level\\"",
            "unicode": false,
            "value": "intl.error_level",
          },
          Name {
            "kind": "name",
            "name": "E_WARNING",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"intl.default_locale\\"",
            "unicode": false,
            "value": "intl.default_locale",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"pt_PT\\"",
            "unicode": false,
            "value": "pt_PT",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "text",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ตัวอย่างข้อความ'",
          "unicode": false,
          "value": "ตัวอย่างข้อความ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "codepoint_it",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createCodePointInstance",
            },
            "what": Name {
              "kind": "name",
              "name": "IntlBreakIterator",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "text",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setText",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "codepoint_it",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getLastCodePoint",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "codepoint_it",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "first",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "codepoint_it",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "c",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getLastCodePoint",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint_it",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'U+%04X'",
                        "unicode": false,
                        "value": "U+%04X",
                      },
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "getLastCodePoint",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint_it",
                          },
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "sprintf",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "c",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": ">",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "p",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "next",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint_it",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "DONE",
          },
          "what": Name {
            "kind": "name",
            "name": "IntlBreakIterator",
            "resolution": "uqn",
          },
        },
        "type": "!=",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Now backwards\\\\n\\"",
          "unicode": false,
          "value": "Now backwards
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "last",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "codepoint_it",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "c",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getLastCodePoint",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint_it",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'U+%04X'",
                        "unicode": false,
                        "value": "U+%04X",
                      },
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "getLastCodePoint",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint_it",
                          },
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "sprintf",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "c",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": ">",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "p",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "previous",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint_it",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "right": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "DONE",
          },
          "what": Name {
            "kind": "name",
            "name": "IntlBreakIterator",
            "resolution": "uqn",
          },
        },
        "type": "!=",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
