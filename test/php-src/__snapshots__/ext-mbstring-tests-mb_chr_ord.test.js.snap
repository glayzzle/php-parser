// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mb_chr() and mb_ord() 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'internal_encoding'",
            "unicode": false,
            "value": "internal_encoding",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'utf-8'",
            "unicode": false,
            "value": "utf-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ch",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mb_chr",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"ERROR($ch)\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "ERROR(",
                            "unicode": false,
                            "value": "ERROR(",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ch",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ")\\\\n",
                            "unicode": false,
                            "value": ")",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Continue {
                  "kind": "continue",
                  "level": null,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              "type": "===",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"REAL ERROR($ch)\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "REAL ERROR(",
                            "unicode": false,
                            "value": "REAL ERROR(",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ch",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ")\\\\n",
                            "unicode": false,
                            "value": ")",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ch",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "str",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mb_ord",
                  "resolution": "uqn",
                },
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ch",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ch",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ch",
          },
          "right": Number {
            "kind": "number",
            "value": "80000",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'OK'",
          "unicode": false,
          "value": "OK",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
