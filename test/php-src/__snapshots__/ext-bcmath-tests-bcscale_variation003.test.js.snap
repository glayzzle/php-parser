// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests bcscale() return value 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Cast {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'bcmath.scale'",
                  "unicode": false,
                  "value": "bcmath.scale",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "kind": "cast",
            "raw": "(int)",
            "type": "int",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "1",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "bcscale",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Cast {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'bcmath.scale'",
                  "unicode": false,
                  "value": "bcmath.scale",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "kind": "cast",
            "raw": "(int)",
            "type": "int",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "4",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "bcscale",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Cast {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'bcmath.scale'",
                  "unicode": false,
                  "value": "bcmath.scale",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "kind": "cast",
            "raw": "(int)",
            "type": "int",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "bcscale",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Cast {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'bcmath.scale'",
                  "unicode": false,
                  "value": "bcmath.scale",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "kind": "cast",
            "raw": "(int)",
            "type": "int",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "bcscale",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
