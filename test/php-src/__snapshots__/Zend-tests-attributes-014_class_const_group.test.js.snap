// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Attributes can be applied to groups of class constants 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        ClassConstant {
          "attrGroups": Array [
            AttrGroup {
              "attrs": Array [
                Attribute {
                  "args": Array [
                    Number {
                      "kind": "number",
                      "value": "1",
                    },
                    Name {
                      "kind": "name",
                      "name": "X",
                      "resolution": "uqn",
                    },
                  ],
                  "kind": "attribute",
                  "name": "A",
                },
              ],
              "kind": "attrgroup",
            },
          ],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "A",
              },
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "B",
              },
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "C",
      },
    },
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "name": Identifier {
            "kind": "identifier",
            "name": "X",
          },
          "value": Number {
            "kind": "number",
            "value": "2",
          },
        },
      ],
      "kind": "constantstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rp1",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'C'",
              "unicode": false,
              "value": "C",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'A'",
              "unicode": false,
              "value": "A",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ReflectionClassConstant",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ra1",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getAttributes",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rp1",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getName",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ra1",
              },
            },
          },
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getArguments",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ra1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rp2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'C'",
              "unicode": false,
              "value": "C",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'B'",
              "unicode": false,
              "value": "B",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ReflectionClassConstant",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ra2",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getAttributes",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rp2",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getName",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ra2",
              },
            },
          },
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getArguments",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ra2",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
