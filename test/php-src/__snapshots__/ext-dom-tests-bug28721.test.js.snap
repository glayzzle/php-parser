// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #28721 (appendChild() and insertBefore() unset DOMText) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "node",
          },
          "nullable": false,
          "readonly": false,
          "type": Name {
            "kind": "name",
            "name": "DomNode",
            "resolution": "uqn",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"name (value): \\"",
                        "unicode": false,
                        "value": "name (value): ",
                      },
                      "right": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "nodeName",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "node",
                        },
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\" (\\"",
                      "unicode": false,
                      "value": " (",
                    },
                    "type": ".",
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "nodeValue",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\")\\\\n\\"",
                  "unicode": false,
                  "value": ")
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "print_node",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "node",
          },
          "nullable": false,
          "readonly": false,
          "type": Name {
            "kind": "name",
            "name": "DomNode",
            "resolution": "uqn",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Static {
            "kind": "static",
            "variables": Array [
              StaticVariable {
                "defaultValue": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\"",
                  "unicode": false,
                  "value": "",
                },
                "kind": "staticvariable",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "indent",
                },
              },
            ],
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "indent",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "print_node",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "indent",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"parent: \\"",
                  "unicode": false,
                  "value": "parent: ",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"NULL\\\\n\\"",
                  "unicode": false,
                  "value": "NULL
",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "parentNode",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "print_node",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "parentNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            },
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "indent",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"previousSibling: \\"",
                  "unicode": false,
                  "value": "previousSibling: ",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"NULL\\\\n\\"",
                  "unicode": false,
                  "value": "NULL
",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "previousSibling",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "print_node",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "previousSibling",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            },
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "indent",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"nextSibling: \\"",
                  "unicode": false,
                  "value": "nextSibling: ",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"NULL\\\\n\\"",
                  "unicode": false,
                  "value": "NULL
",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "nextSibling",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "print_node",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "nextSibling",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            },
          },
          If {
            "alternate": null,
            "body": Return {
              "expr": null,
              "kind": "return",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "hasChildNodes",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
            },
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "old_indent",
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "indent",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "indent",
                    },
                    "operator": ".=",
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"  \\"",
                      "unicode": false,
                      "value": "  ",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "child",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "print_node_r",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "indent",
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "old_indent",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "childNodes",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "child",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "print_node_r",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errno",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errstr",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errfile",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errline",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Error ($errno) on line $errline: $errstr\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Error (",
                      "unicode": false,
                      "value": "Error (",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errno",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ") on line ",
                      "unicode": false,
                      "value": ") on line ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errline",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ": ",
                      "unicode": false,
                      "value": ": ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errstr",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "err_handler",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"err_handler\\"",
            "unicode": false,
            "value": "err_handler",
          },
          Name {
            "kind": "name",
            "name": "E_WARNING",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_error_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DomDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"p\\"",
              "unicode": false,
              "value": "p",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createElement",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t1",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" t1 \\"",
                  "unicode": false,
                  "value": " t1 ",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createTextNode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createElement",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"X\\"",
                "unicode": false,
                "value": "X",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createTextNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" t2 \\"",
                  "unicode": false,
                  "value": " t2 ",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createTextNode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" xxx \\"",
                "unicode": false,
                "value": " xxx ",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createTextNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nAppend t1 to p:\\\\n\\"",
          "unicode": false,
          "value": "
Append t1 to p:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "t1",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "appendChild",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "p",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"t1 == ret: \\"",
          "unicode": false,
          "value": "t1 == ret: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t1",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ret",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "d",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"div\\"",
              "unicode": false,
              "value": "div",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createElement",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t3",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" t3 \\"",
                  "unicode": false,
                  "value": " t3 ",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createTextNode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createElement",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"X\\"",
                "unicode": false,
                "value": "X",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createElement",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t4",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" t4 \\"",
                  "unicode": false,
                  "value": " t4 ",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createTextNode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" xxx \\"",
                "unicode": false,
                "value": " xxx ",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createTextNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\ndiv:\\\\n\\"",
          "unicode": false,
          "value": "
div:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nInsert t4 before t3:\\\\n\\"",
          "unicode": false,
          "value": "
Insert t4 before t3:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "t4",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "t3",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "insertBefore",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "d",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "frag",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createDocumentFragment",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "t5",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" t5 \\"",
                  "unicode": false,
                  "value": " t5 ",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createTextNode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "appendChild",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "frag",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "i",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"i\\"",
                  "unicode": false,
                  "value": "i",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "createElement",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" frob \\"",
                "unicode": false,
                "value": " frob ",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createTextNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" t6 \\"",
                "unicode": false,
                "value": " t6 ",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "createTextNOde",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "xml",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\np:\\\\n\\"",
          "unicode": false,
          "value": "
p:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nFragment:\\\\n\\"",
          "unicode": false,
          "value": "
Fragment:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nAppending fragment to p:\\\\n\\"",
          "unicode": false,
          "value": "
Appending fragment to p:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nFragment:\\\\n\\"",
          "unicode": false,
          "value": "
Fragment:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\ndiv:\\\\n\\"",
          "unicode": false,
          "value": "
div:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nInserting fragment before t4\\\\n\\"",
          "unicode": false,
          "value": "
Inserting fragment before t4
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "frag",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "t4",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "insertBefore",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\np:\\\\n\\"",
          "unicode": false,
          "value": "
p:
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_node_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
