// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test strict declaration being first operation only 004 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "name": "strict_types",
          },
          "kind": "declaredirective",
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "mode": "none",
    },
    Namespace {
      "children": Array [
        _Function {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "arg",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "int",
                "raw": "int",
              },
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "arg",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "type": "+",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "add1",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
        },
      ],
      "kind": "namespace",
      "name": "Foo",
      "withBrackets": true,
    },
    Namespace {
      "children": Array [
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "123",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "Foo\\\\add1",
                  "resolution": "qn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "kind": "namespace",
      "name": Array [
        "",
      ],
      "withBrackets": true,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
