// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of verification and conversion of CP950 text 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1000",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "srand",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/data/CP950.txt'",
              "unicode": false,
              "value": "/data/CP950.txt",
            },
            "type": ".",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "readConversionTable",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x50\\"",
            "unicode": false,
            "value": "%P",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA4\\"",
          "unicode": false,
          "value": "¢¤",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x5E\\"",
            "unicode": false,
            "value": "%^",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA5\\"",
          "unicode": false,
          "value": "¢¥",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x61\\"",
            "unicode": false,
            "value": "%a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA7\\"",
          "unicode": false,
          "value": "¢§",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x6A\\"",
            "unicode": false,
            "value": "%j",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA6\\"",
          "unicode": false,
          "value": "¢¦",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x6D\\"",
            "unicode": false,
            "value": "%m",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\x7E\\"",
          "unicode": false,
          "value": "¢~",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x6E\\"",
            "unicode": false,
            "value": "%n",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA1\\"",
          "unicode": false,
          "value": "¢¡",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x6F\\"",
            "unicode": false,
            "value": "%o",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA3\\"",
          "unicode": false,
          "value": "¢£",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x25\\\\x70\\"",
            "unicode": false,
            "value": "%p",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xA2\\"",
          "unicode": false,
          "value": "¢¢",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "hi",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "lo",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "unicode",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "fromUnicode",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "toUnicode",
              },
            ],
            "kind": "global",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "cp950",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'n'",
                    "unicode": false,
                    "value": "n",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "hi",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "8",
                      },
                      "type": "<<",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "lo",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pack",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "unicode",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'n'",
                    "unicode": false,
                    "value": "n",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "unicode",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pack",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "unicode",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fromUnicode",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "cp950",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "cp950",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "toUnicode",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "unicode",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "addPUAMapping",
      },
      "nullable": false,
      "type": null,
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xEEB8",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x81",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x40",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0x40",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7E",
                },
                "type": "<=",
              },
            ],
          },
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xEEB8",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x81",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x62",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFE",
                },
                "type": "<=",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x81",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "right": Number {
            "kind": "number",
            "value": "0x8D",
          },
          "type": "<=",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xE311",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x8E",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x40",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0x40",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7E",
                },
                "type": "<=",
              },
            ],
          },
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xE311",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0x8E",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x62",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFE",
                },
                "type": "<=",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x8E",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "right": Number {
            "kind": "number",
            "value": "0xA0",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "hi",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0xC6",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "hi",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "lo",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "0xF672",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "157",
                  },
                  "parenthesizedExpression": true,
                  "right": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "hi",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "0xC6",
                    },
                    "type": "-",
                  },
                  "type": "*",
                },
                "type": "+",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "parenthesizedExpression": true,
                "right": Number {
                  "kind": "number",
                  "value": "0x62",
                },
                "type": "-",
              },
              "type": "+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "addPUAMapping",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "lo",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "lo",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xA1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "lo",
          },
          "right": Number {
            "kind": "number",
            "value": "0xFE",
          },
          "type": "<=",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xF672",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0xC6",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x40",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0x40",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7E",
                },
                "type": "<=",
              },
            ],
          },
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xF672",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0xC6",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x62",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFE",
                },
                "type": "<=",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xC7",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "right": Number {
            "kind": "number",
            "value": "0xC8",
          },
          "type": "<=",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xE000",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0xFA",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x40",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0x40",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7E",
                },
                "type": "<=",
              },
            ],
          },
          For {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "hi",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lo",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "0xE000",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "157",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hi",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "0xFA",
                          },
                          "type": "-",
                        },
                        "type": "*",
                      },
                      "type": "+",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lo",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "0x62",
                      },
                      "type": "-",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "addPUAMapping",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0xA1",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lo",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0xFE",
                },
                "type": "<=",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xFA",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "hi",
          },
          "right": Number {
            "kind": "number",
            "value": "0xFE",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP950'",
            "unicode": false,
            "value": "CP950",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP950'",
            "unicode": false,
            "value": "CP950",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP950'",
            "unicode": false,
            "value": "CP950",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testTruncatedChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested CP950 -> UTF-16BE\\\\n\\"",
          "unicode": false,
          "value": "Tested CP950 -> UTF-16BE
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP950'",
            "unicode": false,
            "value": "CP950",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "unused",
          },
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Number {
                    "kind": "number",
                    "value": "0xFF",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP950'",
            "unicode": false,
            "value": "CP950",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'%'",
            "unicode": false,
            "value": "%",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested UTF-16BE -> CP950\\\\n\\"",
          "unicode": false,
          "value": "Tested UTF-16BE -> CP950
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x80\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"CP950\\"",
            "unicode": false,
            "value": "CP950",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x26\\\\x09\\"",
            "unicode": false,
            "value": "&	",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"U+2609\\"",
            "unicode": false,
            "value": "U+2609",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-16BE\\"",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"CP950\\"",
            "unicode": false,
            "value": "CP950",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
