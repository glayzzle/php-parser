// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: RegexIterator::getFlags() and setFlags() basic tests 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'foo'",
                "unicode": false,
                "value": "foo",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'bar'",
                "unicode": false,
                "value": "bar",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'baz'",
                "unicode": false,
                "value": "baz",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "iterator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "array",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regexIterator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "iterator",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/f/\\"",
              "unicode": false,
              "value": "/f/",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "RegexIterator",
                "resolution": "uqn",
              },
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "USE_KEY",
              },
              "what": Name {
                "kind": "name",
                "name": "RegexIterator",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "RegexIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getFlags",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "regexIterator",
                },
              },
            },
            "right": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "USE_KEY",
              },
              "what": Name {
                "kind": "name",
                "name": "RegexIterator",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setFlags",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "regexIterator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getFlags",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "regexIterator",
                },
              },
            },
            "right": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "USE_KEY",
              },
              "what": Name {
                "kind": "name",
                "name": "RegexIterator",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "USE_KEY",
            },
            "what": Name {
              "kind": "name",
              "name": "RegexIterator",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setFlags",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "regexIterator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getFlags",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "regexIterator",
                },
              },
            },
            "right": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "USE_KEY",
              },
              "what": Name {
                "kind": "name",
                "name": "RegexIterator",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
