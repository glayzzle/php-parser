// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests sapi_windows_set_ctrl_handler()  1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "is_child",
        },
        "operator": "=",
        "right": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "1",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "argv",
              },
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "cmd",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Name {
                      "kind": "name",
                      "name": "PHP_BINARY",
                      "resolution": "uqn",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\" -n \\"",
                      "unicode": false,
                      "value": " -n ",
                    },
                    "type": ".",
                  },
                  "right": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "argv",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" 1\\"",
                  "unicode": false,
                  "value": " 1",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "spec",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"pipe\\"",
                            "unicode": false,
                            "value": "pipe",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"r\\"",
                            "unicode": false,
                            "value": "r",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"pipe\\"",
                            "unicode": false,
                            "value": "pipe",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"w\\"",
                            "unicode": false,
                            "value": "w",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "proc",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "cmd",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "spec",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "pipes",
                  },
                  NullKeyword {
                    "kind": "nullkeyword",
                    "raw": "NULL",
                  },
                  NullKeyword {
                    "kind": "nullkeyword",
                    "raw": "NULL",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"bypass_shell\\"",
                          "unicode": false,
                          "value": "bypass_shell",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"create_process_group\\"",
                          "unicode": false,
                          "value": "create_process_group",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "proc_open",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Failed to start child. \\"",
                      "unicode": false,
                      "value": "Failed to start child. ",
                    },
                    "kind": "exit",
                    "useDie": true,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "proc",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "is_resource",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "child_pid",
              },
              "operator": "=",
              "right": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"pid\\"",
                  "unicode": false,
                  "value": "pid",
                },
                "what": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "proc",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "proc_get_status",
                    "resolution": "uqn",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Started child $child_pid\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Started child ",
                      "unicode": false,
                      "value": "Started child ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "child_pid",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "300",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "usleep",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "cmd",
              },
              "operator": "=",
              "right": Encapsed {
                "kind": "encapsed",
                "raw": "\\"tasklist /FI \\\\\\"PID eq $child_pid\\\\\\" /NH\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "tasklist /FI \\\\\\"PID eq ",
                      "unicode": false,
                      "value": "tasklist /FI \\"PID eq ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "child_pid",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\\\" /NH",
                      "unicode": false,
                      "value": "\\" /NH",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Running \`$cmd\` to check the process indeed exists:\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Running \`",
                      "unicode": false,
                      "value": "Running \`",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cmd",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\` to check the process indeed exists:\\\\n",
                      "unicode": false,
                      "value": "\` to check the process indeed exists:",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "cmd",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "shell_exec",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "trim",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "evt",
              },
              "operator": "=",
              "right": Name {
                "kind": "name",
                "name": "PHP_WINDOWS_EVENT_CTRL_C",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Sending \\"",
                "unicode": false,
                "value": "Sending ",
              },
              Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "evt",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_evt_name",
                  "resolution": "uqn",
                },
              },
              Encapsed {
                "kind": "encapsed",
                "raw": "\\" to child $child_pid\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " to child ",
                      "unicode": false,
                      "value": " to child ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "child_pid",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ret",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "evt",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "child_pid",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sapi_windows_generate_ctrl_event",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              RetIf {
                "falseExpr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Unsuccessfuly\\"",
                  "unicode": false,
                  "value": "Unsuccessfuly",
                },
                "kind": "retif",
                "parenthesizedExpression": true,
                "test": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ret",
                },
                "trueExpr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Successfully\\"",
                  "unicode": false,
                  "value": "Successfully",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" sent \\"",
                "unicode": false,
                "value": " sent ",
              },
              Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "evt",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_evt_name",
                  "resolution": "uqn",
                },
              },
              Encapsed {
                "kind": "encapsed",
                "raw": "\\" to child $child_pid\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " to child ",
                      "unicode": false,
                      "value": " to child ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "child_pid",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "max",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "5000",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "total",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "step",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "100",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "step",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "usleep",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "total",
                    },
                    "operator": "+=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "step",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"running\\"",
                  "unicode": false,
                  "value": "running",
                },
                "what": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "proc",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "proc_get_status",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "max",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "total",
                },
                "type": ">",
              },
              "type": "&&",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "status",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "proc",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "proc_get_status",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"Child $child_pid exit with status \\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "Child ",
                            "unicode": false,
                            "value": "Child ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "child_pid",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": " exit with status ",
                            "unicode": false,
                            "value": " exit with status ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"exitcode\\"",
                        "unicode": false,
                        "value": "exitcode",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "status",
                      },
                    },
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\" after \${total}us\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": " after ",
                            "unicode": false,
                            "value": " after ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": true,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "total",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "us\\\\n",
                            "unicode": false,
                            "value": "us",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"Child $child_pid didn't exit after \${max}us\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "Child ",
                            "unicode": false,
                            "value": "Child ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "child_pid",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": " didn't exit after ",
                            "unicode": false,
                            "value": " didn't exit after ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": true,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "max",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "us\\\\n",
                            "unicode": false,
                            "value": "us",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Foreach {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pipe",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "fclose",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "key": null,
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "pipes",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "pipe",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "proc",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "proc_terminate",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"running\\"",
                "unicode": false,
                "value": "running",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "status",
              },
            },
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          _Function {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "evt",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": Number {
                      "kind": "number",
                      "value": "3",
                    },
                    "kind": "exit",
                    "useDie": false,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "kind": "function",
            "name": Identifier {
              "kind": "identifier",
              "name": "handler",
            },
            "nullable": false,
            "type": null,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'handler'",
                  "unicode": false,
                  "value": "handler",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sapi_windows_set_ctrl_handler",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "100",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "usleep",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "while",
            "shortForm": false,
            "test": Number {
              "kind": "number",
              "value": "1",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "is_child",
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "evt",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Return {
                  "expr": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"CTRL+C\\"",
                    "unicode": false,
                    "value": "CTRL+C",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Name {
                "kind": "name",
                "name": "PHP_WINDOWS_EVENT_CTRL_C",
                "resolution": "uqn",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "evt",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Return {
                  "expr": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"CTRL+BREAK\\"",
                    "unicode": false,
                    "value": "CTRL+BREAK",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Name {
                "kind": "name",
                "name": "PHP_WINDOWS_EVENT_CTRL_BREAK",
                "resolution": "uqn",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "evt",
              },
              "type": "==",
            },
          },
          Return {
            "expr": NullKeyword {
              "kind": "nullkeyword",
              "raw": "NULL",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "get_evt_name",
      },
      "nullable": true,
      "type": TypeReference {
        "kind": "typereference",
        "name": "string",
        "raw": "string",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
