// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Success cases for static variance 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test1",
          },
          "nullable": false,
          "type": SelfReference {
            "kind": "selfreference",
            "raw": "self",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test2",
          },
          "nullable": false,
          "type": Name {
            "kind": "name",
            "name": "B",
            "resolution": "uqn",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test3",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "object",
            "raw": "object",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test4",
          },
          "nullable": false,
          "type": UnionType {
            "kind": "uniontype",
            "name": null,
            "types": Array [
              Name {
                "kind": "name",
                "name": "X",
                "resolution": "uqn",
              },
              Name {
                "kind": "name",
                "name": "Y",
                "resolution": "uqn",
              },
              SelfReference {
                "kind": "selfreference",
                "raw": "self",
              },
            ],
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test5",
          },
          "nullable": true,
          "type": TypeReference {
            "kind": "typereference",
            "name": "static",
            "raw": "static",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test1",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "static",
            "raw": "static",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test2",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "static",
            "raw": "static",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test3",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "static",
            "raw": "static",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test4",
          },
          "nullable": false,
          "type": UnionType {
            "kind": "uniontype",
            "name": null,
            "types": Array [
              Name {
                "kind": "name",
                "name": "X",
                "resolution": "uqn",
              },
              Name {
                "kind": "name",
                "name": "Y",
                "resolution": "uqn",
              },
              TypeReference {
                "kind": "typereference",
                "name": "static",
                "raw": "static",
              },
            ],
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test5",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "static",
            "raw": "static",
          },
          "visibility": "public",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "A",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "B",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
