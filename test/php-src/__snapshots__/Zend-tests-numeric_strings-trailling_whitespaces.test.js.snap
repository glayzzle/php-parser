// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Acceptance of whitespace in numeric strings 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "strings",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123\\"",
                "unicode": false,
                "value": "123",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123   \\"",
                "unicode": false,
                "value": "123   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": "123 	

",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123\\"",
                "unicode": false,
                "value": "   123",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123\\"",
                "unicode": false,
                "value": " 	

123",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123   \\"",
                "unicode": false,
                "value": "   123   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": " 	

123 	

",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123.0\\"",
                "unicode": false,
                "value": "123.0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123.0   \\"",
                "unicode": false,
                "value": "123.0   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123.0 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": "123.0 	

",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123.0\\"",
                "unicode": false,
                "value": "   123.0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123.0\\"",
                "unicode": false,
                "value": " 	

123.0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123.0   \\"",
                "unicode": false,
                "value": "   123.0   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": " 	

123 	

",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123e0\\"",
                "unicode": false,
                "value": "123e0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123e0   \\"",
                "unicode": false,
                "value": "123e0   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"123e0 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": "123e0 	

",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123e0\\"",
                "unicode": false,
                "value": "   123e0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123e0\\"",
                "unicode": false,
                "value": " 	

123e0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"   123e0   \\"",
                "unicode": false,
                "value": "   123e0   ",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\\\t\\\\n\\\\r\\\\v\\\\f123e0 \\\\t\\\\n\\\\r\\\\v\\\\f\\"",
                "unicode": false,
                "value": " 	

123e0 	

",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "i",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "123",
                  },
                  "type": "===",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "takes_integer",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "f",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "float",
            "raw": "float",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "f",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "123.0",
                  },
                  "type": "===",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "takes_float",
      },
      "nullable": false,
      "type": null,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "string",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "123",
                  },
                  "type": "==",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "num",
              },
              "operator": "=",
              "right": Unary {
                "kind": "unary",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "string",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "num",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "123",
                  },
                  "type": "==",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "string",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "takes_integer",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "string",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "takes_float",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "string",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\intdiv",
                      "resolution": "fqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "123",
                  },
                  "type": "===",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "string",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "\\\\is_numeric",
                    "resolution": "fqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "incremented",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Pre {
              "kind": "pre",
              "type": "+",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "incremented",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "incremented",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\is_int",
                      "resolution": "fqn",
                    },
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "incremented",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\is_float",
                      "resolution": "fqn",
                    },
                  },
                  "type": "||",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "incremented",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "124",
                  },
                  "type": "==",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "decremented",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Pre {
              "kind": "pre",
              "type": "-",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "decremented",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "decremented",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\is_int",
                      "resolution": "fqn",
                    },
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "decremented",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\is_float",
                      "resolution": "fqn",
                    },
                  },
                  "type": "||",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "decremented",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "122",
                  },
                  "type": "==",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "\\\\assert",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "strings",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "string",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"OK!\\"",
          "unicode": false,
          "value": "OK!",
        },
        Name {
          "kind": "name",
          "name": "PHP_EOL",
          "resolution": "uqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
