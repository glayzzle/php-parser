// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests ldap_parse_result() - Basic ldap_parse_result test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"connect.inc\\"",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "link",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "host",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "port",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "passwd",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "protocol_version",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ldap_connect_and_bind",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "base",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_dummy_data",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"cn=userref,$base\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "cn=userref,",
                  "unicode": false,
                  "value": "cn=userref,",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "base",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
            ],
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"objectClass\\"",
                  "unicode": false,
                  "value": "objectClass",
                },
                "kind": "entry",
                "unpack": false,
                "value": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"extensibleObject\\"",
                        "unicode": false,
                        "value": "extensibleObject",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"referral\\"",
                        "unicode": false,
                        "value": "referral",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"cn\\"",
                  "unicode": false,
                  "value": "cn",
                },
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"userref\\"",
                  "unicode": false,
                  "value": "userref",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"ref\\"",
                  "unicode": false,
                  "value": "ref",
                },
                "kind": "entry",
                "unpack": false,
                "value": Encapsed {
                  "kind": "encapsed",
                  "raw": "\\"cn=userA,$base\\"",
                  "type": "string",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "cn=userA,",
                        "unicode": false,
                        "value": "cn=userA,",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "base",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                  ],
                },
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ldap_add",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Encapsed {
              "kind": "encapsed",
              "raw": "\\"cn=userref,$base\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "cn=userref,",
                    "unicode": false,
                    "value": "cn=userref,",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "base",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
              ],
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"(cn=user*)\\"",
              "unicode": false,
              "value": "(cn=user*)",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ldap_search",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "errcode",
        },
        "operator": "=",
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dn",
          },
          "operator": "=",
          "right": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "errmsg",
            },
            "operator": "=",
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "refs",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "result",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "errcode",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "dn",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "errmsg",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "refs",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "ldap_parse_result",
              "resolution": "uqn",
            },
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "errcode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "dn",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "errmsg",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "refs",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
