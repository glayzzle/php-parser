// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Allowed nested ternary cases 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Number {
          "kind": "number",
          "value": "5",
        },
        "kind": "retif",
        "test": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "3",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "1",
          },
          "trueExpr": Number {
            "kind": "number",
            "value": "2",
          },
        },
        "trueExpr": Number {
          "kind": "number",
          "value": "4",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "5",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "3",
          },
          "trueExpr": Number {
            "kind": "number",
            "value": "4",
          },
        },
        "kind": "retif",
        "test": Number {
          "kind": "number",
          "value": "1",
        },
        "trueExpr": Number {
          "kind": "number",
          "value": "2",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Number {
          "kind": "number",
          "value": "3",
        },
        "kind": "retif",
        "test": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "2",
          },
          "kind": "retif",
          "test": Number {
            "kind": "number",
            "value": "1",
          },
          "trueExpr": null,
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Number {
          "kind": "number",
          "value": "3",
        },
        "kind": "retif",
        "test": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "2",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "1",
          },
          "trueExpr": null,
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "3",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "2",
          },
          "trueExpr": null,
        },
        "kind": "retif",
        "test": Number {
          "kind": "number",
          "value": "1",
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Number {
          "kind": "number",
          "value": "4",
        },
        "kind": "retif",
        "test": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "2",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "1",
          },
          "trueExpr": null,
        },
        "trueExpr": Number {
          "kind": "number",
          "value": "3",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "4",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "2",
          },
          "trueExpr": Number {
            "kind": "number",
            "value": "3",
          },
        },
        "kind": "retif",
        "test": Number {
          "kind": "number",
          "value": "1",
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": Number {
          "kind": "number",
          "value": "4",
        },
        "kind": "retif",
        "test": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "3",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "1",
          },
          "trueExpr": Number {
            "kind": "number",
            "value": "2",
          },
        },
        "trueExpr": null,
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": RetIf {
        "falseExpr": RetIf {
          "falseExpr": Number {
            "kind": "number",
            "value": "4",
          },
          "kind": "retif",
          "parenthesizedExpression": true,
          "test": Number {
            "kind": "number",
            "value": "3",
          },
          "trueExpr": null,
        },
        "kind": "retif",
        "test": Number {
          "kind": "number",
          "value": "1",
        },
        "trueExpr": Number {
          "kind": "number",
          "value": "2",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
