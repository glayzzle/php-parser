// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #65538: SSL context "cafile" supports phar wrapper 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug65538_003.pem.tmp'",
            "unicode": false,
            "value": "bug65538_003.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cacertFile",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'bug65538_003-ca.pem'",
          "unicode": false,
          "value": "bug65538_003-ca.pem",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cacertPhar",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug65538_003-ca.phar.tmp'",
            "unicode": false,
            "value": "bug65538_003-ca.phar.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $serverUri = \\"ssl://127.0.0.1:64321\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $client = @stream_socket_accept($server);
    if ($client) {
        $in = '';
        while (!preg_match('/\\\\r?\\\\n\\\\r?\\\\n/', $in)) {
            $in .= fread($client, 2048);
        }
        $response = \\"HTTP/1.0 200 OK\\\\r\\\\n\\"
                  . \\"Content-Type: text/plain\\\\r\\\\n\\"
                  . \\"Content-Length: 12\\\\r\\\\n\\"
                  . \\"Connection: close\\\\r\\\\n\\"
                  . \\"\\\\r\\\\n\\"
                  . \\"Hello World!\\";
        fwrite($client, $response);
        fclose($client);
    }
CODE",
          "value": "    $serverUri = \\"ssl://127.0.0.1:64321\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $client = @stream_socket_accept($server);
    if ($client) {
        $in = '';
        while (!preg_match('/\\\\r?\\\\n\\\\r?\\\\n/', $in)) {
            $in .= fread($client, 2048);
        }
        $response = \\"HTTP/1.0 200 OK\\\\r\\\\n\\"
                  . \\"Content-Type: text/plain\\\\r\\\\n\\"
                  . \\"Content-Length: 12\\\\r\\\\n\\"
                  . \\"Connection: close\\\\r\\\\n\\"
                  . \\"\\\\r\\\\n\\"
                  . \\"Hello World!\\";
        fwrite($client, $response);
        fclose($client);
    }",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "serverCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "certFile",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "peerName",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'bug65538_003'",
          "unicode": false,
          "value": "bug65538_003",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $serverUri = \\"https://127.0.0.1:64321/\\";
    $clientCtx = stream_context_create(['ssl' => [
        'cafile' => 'phar://%s/%s',
        'peer_name' => '%s',
    ]]);
    phpt_wait();
    $html = file_get_contents($serverUri, false, $clientCtx);
    var_dump($html);
CODE",
          "value": "    $serverUri = \\"https://127.0.0.1:64321/\\";
    $clientCtx = stream_context_create(['ssl' => [
        'cafile' => 'phar://%s/%s',
        'peer_name' => '%s',
    ]]);
    phpt_wait();
    $html = file_get_contents($serverUri, false, $clientCtx);
    var_dump($html);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "clientCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cacertPhar",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cacertFile",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "peerName",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'CertificateGenerator.inc'",
          "unicode": false,
          "value": "CertificateGenerator.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certificateGenerator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "CertificateGenerator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "peerName",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "certFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveNewCertAsFileWithKey",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cacertPhar",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cacertFile",
          },
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getCaCert",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "certificateGenerator",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addFromString",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "phar",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "serverCode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
