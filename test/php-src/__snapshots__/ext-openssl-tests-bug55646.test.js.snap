// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #55646: textual input in openssl_csr_new() is not expected in UTF-8 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "string",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "unpacked",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"H*\\"",
                    "unicode": false,
                    "value": "H*",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "string",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unpack",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" \\"",
                  "unicode": false,
                  "value": " ",
                },
                Call {
                  "arguments": Array [
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "unpacked",
                      },
                    },
                    Number {
                      "kind": "number",
                      "value": "2",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_split",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "implode",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "stringAsHex",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "config",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"digest_alg\\"",
                "unicode": false,
                "value": "digest_alg",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"sha1\\"",
                "unicode": false,
                "value": "sha1",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"x509_extensions\\"",
                "unicode": false,
                "value": "x509_extensions",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"v3_ca\\"",
                "unicode": false,
                "value": "v3_ca",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"req_extensions\\"",
                "unicode": false,
                "value": "req_extensions",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"v3_req\\"",
                "unicode": false,
                "value": "v3_req",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"private_key_bits\\"",
                "unicode": false,
                "value": "private_key_bits",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "2048",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"private_key_type\\"",
                "unicode": false,
                "value": "private_key_type",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "OPENSSL_KEYTYPE_RSA",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"encrypt_key\\"",
                "unicode": false,
                "value": "encrypt_key",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "csr_info",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"countryName\\"",
                "unicode": false,
                "value": "countryName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"US\\"",
                "unicode": false,
                "value": "US",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"stateOrProvinceName\\"",
                "unicode": false,
                "value": "stateOrProvinceName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Utah\\"",
                "unicode": false,
                "value": "Utah",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"localityName\\"",
                "unicode": false,
                "value": "localityName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Lindon\\"",
                "unicode": false,
                "value": "Lindon",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"organizationName\\"",
                "unicode": false,
                "value": "organizationName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Chinese\\"",
                "unicode": false,
                "value": "Chinese",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"organizationalUnitName\\"",
                "unicode": false,
                "value": "organizationalUnitName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"IT \\\\xe4\\\\xba\\\\x92\\"",
                "unicode": false,
                "value": "IT äº",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"commonName\\"",
                "unicode": false,
                "value": "commonName",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"www.example.com\\"",
                "unicode": false,
                "value": "www.example.com",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "private",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "config",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_pkey_new",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "openssl_error_string",
          "resolution": "uqn",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "csr_res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "csr_info",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "private",
            },
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'config'",
                    "unicode": false,
                    "value": "config",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Magic {
                        "kind": "magic",
                        "raw": "__DIR__",
                        "value": "__DIR__",
                      },
                      "right": Name {
                        "kind": "name",
                        "name": "DIRECTORY_SEPARATOR",
                        "resolution": "uqn",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"openssl.cnf\\"",
                      "unicode": false,
                      "value": "openssl.cnf",
                    },
                    "type": ".",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_csr_new",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "err",
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "e",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "openssl_error_string",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": Encapsed {
                "kind": "encapsed",
                "raw": "\\"Failed; last error: $err\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Failed; last error: ",
                      "unicode": false,
                      "value": "Failed; last error: ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "err",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                ],
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "csr_res",
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "csr_res",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "csr",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "openssl_csr_export",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "output",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "csr",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_csr_get_subject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"A: \\"",
              "unicode": false,
              "value": "A: ",
            },
            "right": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"organizationalUnitName\\"",
                "unicode": false,
                "value": "organizationalUnitName",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "csr_info",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"B: \\"",
              "unicode": false,
              "value": "B: ",
            },
            "right": Call {
              "arguments": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"organizationalUnitName\\"",
                    "unicode": false,
                    "value": "organizationalUnitName",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "csr_info",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "stringAsHex",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"C: \\"",
              "unicode": false,
              "value": "C: ",
            },
            "right": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'OU'",
                "unicode": false,
                "value": "OU",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "output",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"D: \\"",
              "unicode": false,
              "value": "D: ",
            },
            "right": Call {
              "arguments": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'OU'",
                    "unicode": false,
                    "value": "OU",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "output",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "stringAsHex",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
