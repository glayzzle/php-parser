// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test token_get_all() function : usage variations - heredoc string for 'source' 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing token_get_all() : with heredoc source string ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing token_get_all() : with heredoc source string ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "source",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
<?=
  \\\\$a = 2;
  \\\\$b = 1;
  \\\\$c = <<<EOS
  This is to test
  heredoc string
EOS;
  echo \\\\$a + \\\\$b;
  function myFunction(\\\\$a)
  {
    var_dump(\\\\$a);
  }
  if(\\\\$b < 10) {
    \\\\$b++;
  }
  else
    \\\\$b--;
  while(\\\\$a > 0) {
    echo \\"*\\";
    \\\\$a--;
  }
  myFunction(10);
?>
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?=
  \\\\$a = 2;
  \\\\$b = 1;
  \\\\$c = <<<EOS
  This is to test
  heredoc string
EOS;
  echo \\\\$a + \\\\$b;
  function myFunction(\\\\$a)
  {
    var_dump(\\\\$a);
  }
  if(\\\\$b < 10) {
    \\\\$b++;
  }
  else
    \\\\$b--;
  while(\\\\$a > 0) {
    echo \\"*\\";
    \\\\$a--;
  }
  myFunction(10);
?>
",
                "unicode": false,
                "value": "<?=
  $a = 2;
  $b = 1;
  $c = <<<EOS
  This is to test
  heredoc string
EOS;
  echo $a + $b;
  function myFunction($a)
  {
    var_dump($a);
  }
  if($b < 10) {
    $b++;
  }
  else
    $b--;
  while($a > 0) {
    echo \\"*\\";
    $a--;
  }
  myFunction(10);
?>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "source",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "token_get_all",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\"",
          "unicode": false,
          "value": "Done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
