// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests No additional parenthesis are required around yield if they are already present 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": If {
              "alternate": null,
              "body": null,
              "kind": "if",
              "shortForm": false,
              "test": Yield {
                "key": null,
                "kind": "yield",
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "foo",
                },
              },
            },
            "body": null,
            "kind": "if",
            "shortForm": false,
            "test": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
          },
          If {
            "alternate": If {
              "alternate": null,
              "body": Block {
                "children": Array [],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": true,
              "test": Yield {
                "key": null,
                "kind": "yield",
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "foo",
                },
              },
            },
            "body": Block {
              "children": Array [],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": true,
            "test": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
          },
          While {
            "body": null,
            "kind": "while",
            "shortForm": false,
            "test": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
          },
          Do {
            "body": Block {
              "children": Array [],
              "kind": "block",
            },
            "kind": "do",
            "test": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
          },
          Switch {
            "body": Block {
              "children": Array [],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Yield {
              "key": null,
              "kind": "yield",
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
          },
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "parenthesizedExpression": true,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": Yield {
                "key": null,
                "kind": "yield",
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "foo",
                },
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Yield {
                  "key": null,
                  "kind": "yield",
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "func",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Yield {
                  "key": null,
                  "kind": "yield",
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "func",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "foo",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": New {
              "arguments": Array [
                Yield {
                  "key": null,
                  "kind": "yield",
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "Foo",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\"",
          "unicode": false,
          "value": "Done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
