// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar: zip-based phar, require_hash=1, no signature 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar.require_hash'",
            "unicode": false,
            "value": "phar.require_hash",
          },
          Number {
            "kind": "number",
            "value": "1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/files/zipmaker.php.inc'",
            "unicode": false,
            "value": "/files/zipmaker.php.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/require_hash.phar.zip'",
            "unicode": false,
            "value": "/require_hash.phar.zip",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "alias",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar://'",
            "unicode": false,
            "value": "phar://",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname2",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/require_hash.zip'",
            "unicode": false,
            "value": "/require_hash.zip",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "zip",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "zipmaker",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "init",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "zip",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'zip_001.php'",
            "unicode": false,
            "value": "zip_001.php",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php var_dump(__FILE__);'",
            "unicode": false,
            "value": "<?php var_dump(__FILE__);",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addFile",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "zip",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'internal/file/here'",
            "unicode": false,
            "value": "internal/file/here",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"hi there!\\\\n\\"",
            "unicode": false,
            "value": "hi there!
",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addFile",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "zip",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar/stub.php'",
            "unicode": false,
            "value": ".phar/stub.php",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"__HALT_COMPILER();\\"",
            "unicode": false,
            "value": "__HALT_COMPILER();",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addFile",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "zip",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "close",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "zip",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "fname",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Phar",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getStub",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "phar",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar.require_hash'",
            "unicode": false,
            "value": "phar.require_hash",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "fname2",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "PharData",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'file'",
                  "unicode": false,
                  "value": "file",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "phar",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'hi'",
                "unicode": false,
                "value": "hi",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getSignature",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "phar",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "MD5",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "Phar",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "setSignatureAlgorithm",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "phar",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getSignature",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "phar",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
