// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #60570 (Stream context leaks when http request fails) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'server.inc'",
          "unicode": false,
          "value": "server.inc",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "responses",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"data://text/plain,HTTP/1.0 404 Not Found\\\\r\\\\n\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "data://text/plain,HTTP/1.0 404 Not Found

",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"data://text/plain,HTTP/1.0 404 Not Found\\\\r\\\\n\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "data://text/plain,HTTP/1.0 404 Not Found

",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"data://text/plain,HTTP/1.0 404 Not Found\\\\r\\\\n\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "data://text/plain,HTTP/1.0 404 Not Found

",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": List {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'pid'",
                      "unicode": false,
                      "value": "pid",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "pid",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'uri'",
                      "unicode": false,
                      "value": "uri",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "uri",
                    },
                  },
                ],
                "kind": "list",
                "shortForm": true,
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "responses",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "output",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "http_server",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "get_resources",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "count",
                    "resolution": "uqn",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "3",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "context",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'http'",
                                "unicode": false,
                                "value": "http",
                              },
                              "kind": "entry",
                              "unpack": false,
                              "value": Array {
                                "items": Array [
                                  Entry {
                                    "byRef": false,
                                    "key": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'timeout'",
                                      "unicode": false,
                                      "value": "timeout",
                                    },
                                    "kind": "entry",
                                    "unpack": false,
                                    "value": Number {
                                      "kind": "number",
                                      "value": "1",
                                    },
                                  },
                                ],
                                "kind": "array",
                                "shortForm": false,
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": false,
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "stream_context_create",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "uri",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "context",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "file_get_contents",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Unset {
                  "kind": "unset",
                  "variables": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "context",
                    },
                  ],
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "b",
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "get_resources",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "count",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Post {
              "kind": "post",
              "type": "-",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "http_server_kill",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"leak? penultimate iteration: $b, last one: $a\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "leak? penultimate iteration: ",
                      "unicode": false,
                      "value": "leak? penultimate iteration: ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "b",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ", last one: ",
                      "unicode": false,
                      "value": ", last one: ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                  "type": "==",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "do_test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "do_test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
