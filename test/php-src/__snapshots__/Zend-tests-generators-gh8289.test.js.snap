// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GH-8289 (Exceptions thrown within a yielded from iterator are not rethrown into the generator) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": YieldFrom {
                    "kind": "yieldfrom",
                    "value": New {
                      "arguments": Array [
                        New {
                          "arguments": Array [
                            Array {
                              "items": Array [
                                Entry {
                                  "byRef": false,
                                  "key": null,
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": Number {
                                    "kind": "number",
                                    "value": "1",
                                  },
                                },
                                Entry {
                                  "byRef": false,
                                  "key": null,
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": Unary {
                                    "kind": "unary",
                                    "type": "-",
                                    "what": Number {
                                      "kind": "number",
                                      "value": "2",
                                    },
                                  },
                                },
                              ],
                              "kind": "array",
                              "shortForm": true,
                            },
                          ],
                          "kind": "new",
                          "what": Name {
                            "kind": "name",
                            "name": "ArrayIterator",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "new",
                      "what": Class {
                        "attrGroups": Array [],
                        "body": Array [
                          Method {
                            "arguments": Array [],
                            "attrGroups": Array [],
                            "body": Block {
                              "children": Array [
                                If {
                                  "alternate": null,
                                  "body": Block {
                                    "children": Array [
                                      Throw {
                                        "kind": "throw",
                                        "what": New {
                                          "arguments": Array [],
                                          "kind": "new",
                                          "what": Name {
                                            "kind": "name",
                                            "name": "Exception",
                                            "resolution": "uqn",
                                          },
                                        },
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "kind": "if",
                                  "shortForm": false,
                                  "test": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "k",
                                    },
                                    "operator": "=",
                                    "right": Call {
                                      "arguments": Array [],
                                      "kind": "call",
                                      "what": StaticLookup {
                                        "kind": "staticlookup",
                                        "offset": Identifier {
                                          "kind": "identifier",
                                          "name": "key",
                                        },
                                        "what": ParentReference {
                                          "kind": "parentreference",
                                          "raw": "parent",
                                        },
                                      },
                                    },
                                  },
                                },
                                Return {
                                  "expr": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "k",
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "byref": false,
                            "isAbstract": false,
                            "isFinal": false,
                            "isStatic": false,
                            "kind": "method",
                            "name": Identifier {
                              "kind": "identifier",
                              "name": "key",
                            },
                            "nullable": false,
                            "type": Name {
                              "kind": "name",
                              "name": "mixed",
                              "resolution": "uqn",
                            },
                            "visibility": "public",
                          },
                        ],
                        "extends": Name {
                          "kind": "name",
                          "name": "IteratorIterator",
                          "resolution": "uqn",
                        },
                        "implements": null,
                        "isAbstract": false,
                        "isAnonymous": true,
                        "isFinal": false,
                        "kind": "class",
                        "name": null,
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Encapsed {
                          "kind": "encapsed",
                          "raw": "\\"$e\\\\n\\"",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "\\\\n",
                                "unicode": false,
                                "value": "",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    ExpressionStatement {
                      "expression": Yield {
                        "key": null,
                        "kind": "yield",
                        "value": Number {
                          "kind": "number",
                          "value": "2",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "yieldFromIteratorGeneratorThrows",
      },
      "nullable": false,
      "type": null,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "yieldFromIteratorGeneratorThrows",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
