// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Looped regression test (may take a while) 1`] = `
Program {
  "children": Array [
    For {
      "body": Block {
        "children": Array [
          Inline {
            "kind": "inline",
            "raw": "<html>
<head>
",
            "value": "<html>
<head>
",
          },
          Inline {
            "kind": "inline",
            "raw": "
*** Testing assignments and variable aliasing: ***
",
            "value": "*** Testing assignments and variable aliasing: ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"b\\"",
                "unicode": false,
                "value": "b",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"test\\"",
                "unicode": false,
                "value": "test",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"blah\\"",
                "unicode": false,
                "value": "blah",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"associative arrays work too\\"",
                  "unicode": false,
                  "value": "associative arrays work too",
                },
                "what": Variable {
                  "curly": true,
                  "kind": "variable",
                  "name": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                    },
                  },
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"this is nifty\\"",
                "unicode": false,
                "value": "this is nifty",
              },
            },
            "kind": "expressionstatement",
          },
          Inline {
            "kind": "inline",
            "raw": "
This should read \\"blah\\": ",
            "value": "This should read \\"blah\\": ",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$test\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
This should read \\"this is nifty\\": ",
            "value": "This should read \\"this is nifty\\": ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test",
                    },
                    "operator": "=",
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"associative arrays work too\\"",
                      "unicode": false,
                      "value": "associative arrays work too",
                    },
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "blah",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
*************************************************
*** Testing integer operators ***
",
            "value": "*************************************************
*** Testing integer operators ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "5",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "3",
              },
            },
            "kind": "expressionstatement",
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 8:  ",
            "value": "Correct result - 8:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "+",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 8:  ",
            "value": "Correct result - 8:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "+",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 2:  ",
            "value": "Correct result - 2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "-",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - -2:  ",
            "value": "Correct result - -2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "-",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 15:  ",
            "value": "Correct result - 15:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "*",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 15:  ",
            "value": "Correct result - 15:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "*",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 2:  ",
            "value": "Correct result - 2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "%",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 3:  ",
            "value": "Correct result - 3:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "%",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
*********************************
*** Testing real operators ***
",
            "value": "*********************************
*** Testing real operators ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "5.0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "3.0",
              },
            },
            "kind": "expressionstatement",
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 8:  ",
            "value": "Correct result - 8:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "+",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 8:  ",
            "value": "Correct result - 8:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "+",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 2:  ",
            "value": "Correct result - 2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "-",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - -2:  ",
            "value": "Correct result - -2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "-",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 15:  ",
            "value": "Correct result - 15:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "*",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 15:  ",
            "value": "Correct result - 15:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "*",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 2:  ",
            "value": "Correct result - 2:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "%",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
Correct result - 3:  ",
            "value": "Correct result - 3:  ",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": "%",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
*********************************
*** Testing if/elseif/else control ***
",
            "value": "*********************************
*** Testing if/elseif/else control ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "5",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": If {
              "alternate": If {
                "alternate": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"This \\"",
                                "unicode": false,
                                "value": "This ",
                              },
                              "right": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"does \\"",
                                "unicode": false,
                                "value": "does ",
                              },
                              "type": ".",
                            },
                            "right": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\" not\\"",
                              "unicode": false,
                              "value": " not",
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\" work\\\\n\\"",
                            "unicode": false,
                            "value": " work
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"this \\"",
                            "unicode": false,
                            "value": "this ",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"broken\\\\n\\"",
                            "unicode": false,
                            "value": "broken
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    If {
                      "alternate": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"TestingDanglingElse_This_Should_not_print\\\\n\\"",
                                "unicode": false,
                                "value": "TestingDanglingElse_This_Should_not_print
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"this_should_not_print\\\\n\\"",
                                "unicode": false,
                                "value": "this_should_not_print
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "6",
                  },
                  "type": "==",
                },
              },
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"This \\"",
                          "unicode": false,
                          "value": "This ",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\" works\\\\n\\"",
                          "unicode": false,
                          "value": " works
",
                        },
                        "type": ".",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "6",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  If {
                    "alternate": If {
                      "alternate": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"should_not_print\\\\n\\"",
                                "unicode": false,
                                "value": "should_not_print
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"should_not_print\\\\n\\"",
                                "unicode": false,
                                "value": "should_not_print
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                    "body": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"this_still_works\\\\n\\"",
                              "unicode": false,
                              "value": "this_still_works
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"andi\\"",
                        "unicode": false,
                        "value": "andi",
                      },
                      "right": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "test",
                        },
                        "operator": "=",
                        "parenthesizedExpression": true,
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"andi\\"",
                          "unicode": false,
                          "value": "andi",
                        },
                      },
                      "type": "==",
                    },
                  },
                  If {
                    "alternate": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"should_print\\\\n\\"",
                              "unicode": false,
                              "value": "should_print
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "body": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"should_not_print\\\\n\\"",
                              "unicode": false,
                              "value": "should_not_print
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "44",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "43",
                      },
                      "type": "==",
                    },
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"5\\"",
                  "unicode": false,
                  "value": "5",
                },
                "type": "==",
              },
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"This \\"",
                            "unicode": false,
                            "value": "This ",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\" does \\"",
                            "unicode": false,
                            "value": " does ",
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"  not \\"",
                          "unicode": false,
                          "value": "  not ",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\" work\\\\n\\"",
                        "unicode": false,
                        "value": " work
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"4\\"",
                "unicode": false,
                "value": "4",
              },
              "type": "==",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
*** Seriously nested if's test ***
** spelling correction by kluzz **
",
            "value": "*** Seriously nested if's test ***
** spelling correction by kluzz **
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Only two lines of text should follow:\\\\n\\"",
                "unicode": false,
                "value": "Only two lines of text should follow:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": If {
              "alternate": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "j",
                      },
                      "operator": "=",
                      "right": Post {
                        "kind": "post",
                        "type": "+",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  Echo {
                    "expressions": Array [
                      Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"this should be displayed. should be:  \\\\$i=1, \\\\$j=0.  is:  \\\\$i=$i, \\\\$j=$j\\\\n\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "this should be displayed. should be:  \\\\$i=1, \\\\$j=0.  is:  \\\\$i=",
                              "unicode": false,
                              "value": "this should be displayed. should be:  $i=1, $j=0.  is:  $i=",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ", \\\\$j=",
                              "unicode": false,
                              "value": ", $j=",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "\\\\n",
                              "unicode": false,
                              "value": "",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                  If {
                    "alternate": If {
                      "alternate": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"and this too shouldn't be displayed\\\\n\\"",
                                "unicode": false,
                                "value": "and this too shouldn't be displayed
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"this definitely shouldn't be displayed\\\\n\\"",
                                "unicode": false,
                                "value": "this definitely shouldn't be displayed
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                            "operator": "+=",
                            "right": Pre {
                              "kind": "pre",
                              "type": "+",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        If {
                          "alternate": If {
                            "alternate": null,
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "j",
                                    },
                                    "operator": "*=",
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                Echo {
                                  "expressions": Array [
                                    Encapsed {
                                      "kind": "encapsed",
                                      "raw": "\\"this is supposed to be displayed. should be:  \\\\$i=2, \\\\$j=4.  is:  \\\\$i=$i, \\\\$j=$j\\\\n\\"",
                                      "type": "string",
                                      "value": Array [
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "this is supposed to be displayed. should be:  \\\\$i=2, \\\\$j=4.  is:  \\\\$i=",
                                            "unicode": false,
                                            "value": "this is supposed to be displayed. should be:  $i=2, $j=4.  is:  $i=",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "i",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": ", \\\\$j=",
                                            "unicode": false,
                                            "value": ", $j=",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "j",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "\\\\n",
                                            "unicode": false,
                                            "value": "",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                      ],
                                    },
                                  ],
                                  "kind": "echo",
                                  "shortForm": false,
                                },
                                Echo {
                                  "expressions": Array [
                                    String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"3 loop iterations should follow:\\\\n\\"",
                                      "unicode": false,
                                      "value": "3 loop iterations should follow:
",
                                    },
                                  ],
                                  "kind": "echo",
                                  "shortForm": false,
                                },
                                While {
                                  "body": Block {
                                    "children": Array [
                                      Echo {
                                        "expressions": Array [
                                          Bin {
                                            "kind": "bin",
                                            "left": Post {
                                              "kind": "post",
                                              "type": "+",
                                              "what": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "i",
                                              },
                                            },
                                            "right": Encapsed {
                                              "kind": "encapsed",
                                              "raw": "\\" $j\\\\n\\"",
                                              "type": "string",
                                              "value": Array [
                                                EncapsedPart {
                                                  "curly": false,
                                                  "expression": String {
                                                    "isDoubleQuote": false,
                                                    "kind": "string",
                                                    "raw": " ",
                                                    "unicode": false,
                                                    "value": " ",
                                                  },
                                                  "kind": "encapsedpart",
                                                  "syntax": null,
                                                },
                                                EncapsedPart {
                                                  "curly": false,
                                                  "expression": Variable {
                                                    "curly": false,
                                                    "kind": "variable",
                                                    "name": "j",
                                                  },
                                                  "kind": "encapsedpart",
                                                  "syntax": "simple",
                                                },
                                                EncapsedPart {
                                                  "curly": false,
                                                  "expression": String {
                                                    "isDoubleQuote": false,
                                                    "kind": "string",
                                                    "raw": "\\\\n",
                                                    "unicode": false,
                                                    "value": "",
                                                  },
                                                  "kind": "encapsedpart",
                                                  "syntax": null,
                                                },
                                              ],
                                            },
                                            "type": ".",
                                          },
                                        ],
                                        "kind": "echo",
                                        "shortForm": false,
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "kind": "while",
                                  "shortForm": false,
                                  "test": Bin {
                                    "kind": "bin",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "j",
                                    },
                                    "type": "<=",
                                  },
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Number {
                              "kind": "number",
                              "value": "1",
                            },
                          },
                          "body": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                  "operator": "+=",
                                  "right": Number {
                                    "kind": "number",
                                    "value": "40",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              If {
                                "alternate": Block {
                                  "children": Array [
                                    ExpressionStatement {
                                      "expression": Assign {
                                        "kind": "assign",
                                        "left": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "j",
                                        },
                                        "operator": "+=",
                                        "right": Number {
                                          "kind": "number",
                                          "value": "20",
                                        },
                                      },
                                      "kind": "expressionstatement",
                                    },
                                    Echo {
                                      "expressions": Array [
                                        String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\"this shouldn't be displayed either\\\\n\\"",
                                          "unicode": false,
                                          "value": "this shouldn't be displayed either
",
                                        },
                                      ],
                                      "kind": "echo",
                                      "shortForm": false,
                                    },
                                  ],
                                  "kind": "block",
                                },
                                "body": Block {
                                  "children": Array [
                                    ExpressionStatement {
                                      "expression": Assign {
                                        "kind": "assign",
                                        "left": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "i",
                                        },
                                        "operator": "+=",
                                        "right": Number {
                                          "kind": "number",
                                          "value": "50",
                                        },
                                      },
                                      "kind": "expressionstatement",
                                    },
                                    Echo {
                                      "expressions": Array [
                                        String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\"damn, this shouldn't be displayed\\\\n\\"",
                                          "unicode": false,
                                          "value": "damn, this shouldn't be displayed
",
                                        },
                                      ],
                                      "kind": "echo",
                                      "shortForm": false,
                                    },
                                  ],
                                  "kind": "block",
                                },
                                "kind": "if",
                                "shortForm": false,
                                "test": Number {
                                  "kind": "number",
                                  "value": "1",
                                },
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "if",
                          "shortForm": false,
                          "test": Number {
                            "kind": "number",
                            "value": "0",
                          },
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  Echo {
                    "expressions": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"**********************************\\\\n\\"",
                        "unicode": false,
                        "value": "**********************************
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "operator": "=",
                      "right": Pre {
                        "kind": "pre",
                        "type": "+",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "j",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  Echo {
                    "expressions": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"hmm, this shouldn't be displayed #2\\\\n\\"",
                        "unicode": false,
                        "value": "hmm, this shouldn't be displayed #2
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                  If {
                    "alternate": If {
                      "alternate": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Post {
                              "kind": "post",
                              "type": "+",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"and this too shouldn't be displayed\\\\n\\"",
                                "unicode": false,
                                "value": "and this too shouldn't be displayed
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Post {
                              "kind": "post",
                              "type": "+",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "j",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"this definitely shouldn't be displayed\\\\n\\"",
                                "unicode": false,
                                "value": "this definitely shouldn't be displayed
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                            "operator": "=",
                            "right": Pre {
                              "kind": "pre",
                              "type": "+",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        If {
                          "alternate": If {
                            "alternate": null,
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Pre {
                                    "kind": "pre",
                                    "type": "+",
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "j",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                Echo {
                                  "expressions": Array [
                                    String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"this isn't supposed to be displayed\\\\n\\"",
                                      "unicode": false,
                                      "value": "this isn't supposed to be displayed
",
                                    },
                                  ],
                                  "kind": "echo",
                                  "shortForm": false,
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Number {
                              "kind": "number",
                              "value": "1",
                            },
                          },
                          "body": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                  "operator": "=",
                                  "right": Bin {
                                    "kind": "bin",
                                    "left": Bin {
                                      "kind": "bin",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "i",
                                      },
                                      "right": Number {
                                        "kind": "number",
                                        "value": "2",
                                      },
                                      "type": "*",
                                    },
                                    "right": Bin {
                                      "kind": "bin",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "j",
                                      },
                                      "right": Post {
                                        "kind": "post",
                                        "parenthesizedExpression": true,
                                        "type": "+",
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "i",
                                        },
                                      },
                                      "type": "*",
                                    },
                                    "type": "+",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              If {
                                "alternate": Block {
                                  "children": Array [
                                    ExpressionStatement {
                                      "expression": Post {
                                        "kind": "post",
                                        "type": "+",
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "j",
                                        },
                                      },
                                      "kind": "expressionstatement",
                                    },
                                    Echo {
                                      "expressions": Array [
                                        String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\"this shouldn't be displayed either\\\\n\\"",
                                          "unicode": false,
                                          "value": "this shouldn't be displayed either
",
                                        },
                                      ],
                                      "kind": "echo",
                                      "shortForm": false,
                                    },
                                  ],
                                  "kind": "block",
                                },
                                "body": Block {
                                  "children": Array [
                                    ExpressionStatement {
                                      "expression": Post {
                                        "kind": "post",
                                        "type": "+",
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "i",
                                        },
                                      },
                                      "kind": "expressionstatement",
                                    },
                                    Echo {
                                      "expressions": Array [
                                        String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\"damn, this shouldn't be displayed\\\\n\\"",
                                          "unicode": false,
                                          "value": "damn, this shouldn't be displayed
",
                                        },
                                      ],
                                      "kind": "echo",
                                      "shortForm": false,
                                    },
                                  ],
                                  "kind": "block",
                                },
                                "kind": "if",
                                "shortForm": false,
                                "test": Number {
                                  "kind": "number",
                                  "value": "1",
                                },
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "if",
                          "shortForm": false,
                          "test": Number {
                            "kind": "number",
                            "value": "0",
                          },
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "2",
                },
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
                "type": "-",
              },
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"hmm, this shouldn't be displayed #1\\\\n\\"",
                      "unicode": false,
                      "value": "hmm, this shouldn't be displayed #1
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": If {
                    "alternate": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Pre {
                            "kind": "pre",
                            "type": "-",
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"and this too shouldn't be displayed\\\\n\\"",
                              "unicode": false,
                              "value": "and this too shouldn't be displayed
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                        While {
                          "body": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Post {
                                  "kind": "post",
                                  "type": "-",
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "while",
                          "shortForm": false,
                          "test": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "j",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0",
                            },
                            "type": ">",
                          },
                        },
                      ],
                      "kind": "block",
                    },
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Post {
                            "kind": "post",
                            "type": "+",
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"this definitely shouldn't be displayed\\\\n\\"",
                              "unicode": false,
                              "value": "this definitely shouldn't be displayed
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "operator": "+=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": If {
                          "alternate": null,
                          "body": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Post {
                                  "kind": "post",
                                  "type": "+",
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              ExpressionStatement {
                                "expression": Post {
                                  "kind": "post",
                                  "type": "+",
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              Echo {
                                "expressions": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"this isn't supposed to be displayed\\\\n\\"",
                                    "unicode": false,
                                    "value": "this isn't supposed to be displayed
",
                                  },
                                ],
                                "kind": "echo",
                                "shortForm": false,
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "if",
                          "shortForm": false,
                          "test": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "j",
                                },
                                "operator": "=",
                                "right": Pre {
                                  "kind": "pre",
                                  "type": "+",
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            If {
                              "alternate": Block {
                                "children": Array [
                                  ExpressionStatement {
                                    "expression": Assign {
                                      "kind": "assign",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "j",
                                      },
                                      "operator": "/=",
                                      "right": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "i",
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                  ExpressionStatement {
                                    "expression": Pre {
                                      "kind": "pre",
                                      "type": "+",
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "j",
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                  Echo {
                                    "expressions": Array [
                                      String {
                                        "isDoubleQuote": true,
                                        "kind": "string",
                                        "raw": "\\"this shouldn't be displayed either\\\\n\\"",
                                        "unicode": false,
                                        "value": "this shouldn't be displayed either
",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                ],
                                "kind": "block",
                              },
                              "body": Block {
                                "children": Array [
                                  ExpressionStatement {
                                    "expression": Assign {
                                      "kind": "assign",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "j",
                                      },
                                      "operator": "*=",
                                      "right": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "i",
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                  Echo {
                                    "expressions": Array [
                                      String {
                                        "isDoubleQuote": true,
                                        "kind": "string",
                                        "raw": "\\"damn, this shouldn't be displayed\\\\n\\"",
                                        "unicode": false,
                                        "value": "damn, this shouldn't be displayed
",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "if",
                              "shortForm": false,
                              "test": Number {
                                "kind": "number",
                                "value": "1",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Number {
                          "kind": "number",
                          "value": "0",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Number {
              "kind": "number",
              "value": "0",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
*** C-style else-if's ***
",
            "value": "*** C-style else-if's ***
",
          },
          If {
            "alternate": If {
              "alternate": If {
                "alternate": If {
                  "alternate": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"This shouldn't be displayed at all\\\\n\\"",
                            "unicode": false,
                            "value": "This shouldn't be displayed at all
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"This should be displayed\\\\n\\"",
                            "unicode": false,
                            "value": "This should be displayed
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Pre {
                    "kind": "pre",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                  },
                },
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"No, this neither\\\\n\\"",
                          "unicode": false,
                          "value": "No, this neither
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Pre {
                  "kind": "pre",
                  "type": "-",
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
              },
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"This shouldn't be displayed either\\\\n\\"",
                        "unicode": false,
                        "value": "This shouldn't be displayed either
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"This shouldn't be displayed\\\\n\\"",
                      "unicode": false,
                      "value": "This shouldn't be displayed
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
*************************
*** WHILE tests ***
",
            "value": "*************************
*** WHILE tests ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "20",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                If {
                  "alternate": If {
                    "alternate": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            Encapsed {
                              "kind": "encapsed",
                              "raw": "\\"$i is smaller than $j\\\\n\\"",
                              "type": "string",
                              "value": Array [
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": " is smaller than ",
                                    "unicode": false,
                                    "value": " is smaller than ",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "\\\\n",
                                    "unicode": false,
                                    "value": "",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                              ],
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "body": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            Encapsed {
                              "kind": "encapsed",
                              "raw": "\\"$i equals $j\\\\n\\"",
                              "type": "string",
                              "value": Array [
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": " equals ",
                                    "unicode": false,
                                    "value": " equals ",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "j",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "\\\\n",
                                    "unicode": false,
                                    "value": "",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                              ],
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "j",
                      },
                      "type": "==",
                    },
                  },
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"$i is greater than $j\\\\n\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "i",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": " is greater than ",
                                  "unicode": false,
                                  "value": " is greater than ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "j",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "\\\\n",
                                  "unicode": false,
                                  "value": "",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "type": ">",
                  },
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "2",
                },
                "parenthesizedExpression": true,
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "j",
                },
                "type": "*",
              },
              "type": "<",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
*******************
*** Nested WHILEs ***
",
            "value": "*******************
*** Nested WHILEs ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr_len",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "3",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "kind": "expressionstatement",
                },
                While {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "k",
                          },
                          "operator": "=",
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      While {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "k",
                                  },
                                  "what": Variable {
                                    "curly": true,
                                    "kind": "variable",
                                    "name": Encapsed {
                                      "kind": "encapsed",
                                      "raw": "\\"test$i$j\\"",
                                      "type": "string",
                                      "value": Array [
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "test",
                                            "unicode": false,
                                            "value": "test",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "i",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "j",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                      ],
                                    },
                                  },
                                },
                                "operator": "=",
                                "right": Bin {
                                  "kind": "bin",
                                  "left": Bin {
                                    "kind": "bin",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "j",
                                    },
                                    "type": "+",
                                  },
                                  "right": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "k",
                                  },
                                  "type": "+",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            ExpressionStatement {
                              "expression": Post {
                                "kind": "post",
                                "type": "+",
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "k",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "while",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "k",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "arr_len",
                          },
                          "type": "<",
                        },
                      },
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "arr_len",
                    },
                    "type": "<",
                  },
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr_len",
              },
              "type": "<",
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Each array variable should be equal to the sum of its indices:\\\\n\\"",
                "unicode": false,
                "value": "Each array variable should be equal to the sum of its indices:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "kind": "expressionstatement",
                },
                While {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "k",
                          },
                          "operator": "=",
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      While {
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Bin {
                                  "kind": "bin",
                                  "left": Bin {
                                    "kind": "bin",
                                    "left": Encapsed {
                                      "kind": "encapsed",
                                      "raw": "\\"\\\\\${test$i$j}[$k] = \\"",
                                      "type": "string",
                                      "value": Array [
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "\\\\\${test",
                                            "unicode": false,
                                            "value": "\${test",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "i",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "j",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "}[",
                                            "unicode": false,
                                            "value": "}[",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "k",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": "simple",
                                        },
                                        EncapsedPart {
                                          "curly": false,
                                          "expression": String {
                                            "isDoubleQuote": false,
                                            "kind": "string",
                                            "raw": "] = ",
                                            "unicode": false,
                                            "value": "] = ",
                                          },
                                          "kind": "encapsedpart",
                                          "syntax": null,
                                        },
                                      ],
                                    },
                                    "right": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "k",
                                      },
                                      "what": Variable {
                                        "curly": true,
                                        "kind": "variable",
                                        "name": Encapsed {
                                          "kind": "encapsed",
                                          "raw": "\\"test$i$j\\"",
                                          "type": "string",
                                          "value": Array [
                                            EncapsedPart {
                                              "curly": false,
                                              "expression": String {
                                                "isDoubleQuote": false,
                                                "kind": "string",
                                                "raw": "test",
                                                "unicode": false,
                                                "value": "test",
                                              },
                                              "kind": "encapsedpart",
                                              "syntax": null,
                                            },
                                            EncapsedPart {
                                              "curly": false,
                                              "expression": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "i",
                                              },
                                              "kind": "encapsedpart",
                                              "syntax": "simple",
                                            },
                                            EncapsedPart {
                                              "curly": false,
                                              "expression": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "j",
                                              },
                                              "kind": "encapsedpart",
                                              "syntax": "simple",
                                            },
                                          ],
                                        },
                                      },
                                    },
                                    "type": ".",
                                  },
                                  "right": String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"\\\\n\\"",
                                    "unicode": false,
                                    "value": "
",
                                  },
                                  "type": ".",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            ExpressionStatement {
                              "expression": Post {
                                "kind": "post",
                                "type": "+",
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "k",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "while",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "k",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "arr_len",
                          },
                          "type": "<",
                        },
                      },
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "arr_len",
                    },
                    "type": "<",
                  },
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "arr_len",
              },
              "type": "<",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
*********************
*** hash test... ***
",
            "value": "*********************
*** hash test... ***
",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"commented out...\\"",
                "unicode": false,
                "value": "commented out...",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Inline {
            "kind": "inline",
            "raw": "
**************************
*** Hash resizing test ***
",
            "value": "**************************
*** Hash resizing test ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "10",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"b\\"",
                "unicode": false,
                "value": "b",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"a\\"",
                        "unicode": false,
                        "value": "a",
                      },
                      "type": ".",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"$a\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "a",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "resize",
                      },
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "-",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": ">",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "10",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"b\\"",
                "unicode": false,
                "value": "b",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"a\\"",
                        "unicode": false,
                        "value": "a",
                      },
                      "type": ".",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"$a\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "a",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "a",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "resize",
                        },
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "-",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": ">",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
**************************
*** break/continue test ***
",
            "value": "**************************
*** break/continue test ***
",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\$i should go from 0 to 2\\\\n\\"",
                "unicode": false,
                "value": "$i should go from 0 to 2
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          While {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "2",
                    },
                    "type": ">",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\$j should go from 3 to 4, and \\\\$q should go from 3 to 4\\\\n\\"",
                      "unicode": false,
                      "value": "$j should go from 3 to 4, and $q should go from 3 to 4
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                While {
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Post {
                                "kind": "post",
                                "type": "+",
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "j",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Continue {
                              "kind": "continue",
                              "level": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "2",
                          },
                          "type": "<=",
                        },
                      },
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"  \\\\$j=$j\\\\n\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "  \\\\$j=",
                                  "unicode": false,
                                  "value": "  $j=",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "j",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "\\\\n",
                                  "unicode": false,
                                  "value": "",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      For {
                        "body": Block {
                          "children": Array [
                            If {
                              "alternate": null,
                              "body": Block {
                                "children": Array [
                                  Continue {
                                    "kind": "continue",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "if",
                              "shortForm": false,
                              "test": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "q",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "3",
                                },
                                "type": "<",
                              },
                            },
                            If {
                              "alternate": null,
                              "body": Block {
                                "children": Array [
                                  Break {
                                    "kind": "break",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "if",
                              "shortForm": false,
                              "test": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "q",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "4",
                                },
                                "type": ">",
                              },
                            },
                            Echo {
                              "expressions": Array [
                                Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"    \\\\$q=$q\\\\n\\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "    \\\\$q=",
                                        "unicode": false,
                                        "value": "    $q=",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "q",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "\\\\n",
                                        "unicode": false,
                                        "value": "",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                          ],
                          "kind": "block",
                        },
                        "increment": Array [
                          Post {
                            "kind": "post",
                            "type": "+",
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "q",
                            },
                          },
                        ],
                        "init": Array [
                          Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "q",
                            },
                            "operator": "=",
                            "right": Number {
                              "kind": "number",
                              "value": "0",
                            },
                          },
                        ],
                        "kind": "for",
                        "shortForm": false,
                        "test": Array [
                          Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "q",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "10",
                            },
                            "type": "<=",
                          },
                        ],
                      },
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                    "type": "<",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\$j should go from 0 to 2\\\\n\\"",
                      "unicode": false,
                      "value": "$j should go from 0 to 2
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                While {
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "k",
                                },
                                "operator": "=",
                                "right": Number {
                                  "kind": "number",
                                  "value": "0",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Echo {
                              "expressions": Array [
                                String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"\\\\$k should go from 0 to 2\\\\n\\"",
                                  "unicode": false,
                                  "value": "$k should go from 0 to 2
",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            While {
                              "body": Block {
                                "children": Array [
                                  If {
                                    "alternate": null,
                                    "body": Block {
                                      "children": Array [
                                        Break {
                                          "kind": "break",
                                          "level": Number {
                                            "kind": "number",
                                            "value": "2",
                                          },
                                        },
                                      ],
                                      "kind": "block",
                                    },
                                    "kind": "if",
                                    "shortForm": false,
                                    "test": Bin {
                                      "kind": "bin",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "k",
                                      },
                                      "right": Number {
                                        "kind": "number",
                                        "value": "2",
                                      },
                                      "type": ">",
                                    },
                                  },
                                  Echo {
                                    "expressions": Array [
                                      Encapsed {
                                        "kind": "encapsed",
                                        "raw": "\\"    \\\\$k=$k\\\\n\\"",
                                        "type": "string",
                                        "value": Array [
                                          EncapsedPart {
                                            "curly": false,
                                            "expression": String {
                                              "isDoubleQuote": false,
                                              "kind": "string",
                                              "raw": "    \\\\$k=",
                                              "unicode": false,
                                              "value": "    $k=",
                                            },
                                            "kind": "encapsedpart",
                                            "syntax": null,
                                          },
                                          EncapsedPart {
                                            "curly": false,
                                            "expression": Variable {
                                              "curly": false,
                                              "kind": "variable",
                                              "name": "k",
                                            },
                                            "kind": "encapsedpart",
                                            "syntax": "simple",
                                          },
                                          EncapsedPart {
                                            "curly": false,
                                            "expression": String {
                                              "isDoubleQuote": false,
                                              "kind": "string",
                                              "raw": "\\\\n",
                                              "unicode": false,
                                              "value": "",
                                            },
                                            "kind": "encapsedpart",
                                            "syntax": null,
                                          },
                                        ],
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                  ExpressionStatement {
                                    "expression": Post {
                                      "kind": "post",
                                      "type": "+",
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "k",
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "while",
                              "shortForm": false,
                              "test": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "k",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "5",
                                },
                                "type": "<",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "2",
                          },
                          "type": ">",
                        },
                      },
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"  \\\\$j=$j\\\\n\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "  \\\\$j=",
                                  "unicode": false,
                                  "value": "  $j=",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "j",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "\\\\n",
                                  "unicode": false,
                                  "value": "",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "j",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                    "type": "<",
                  },
                },
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"\\\\$i=$i\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\$i=",
                            "unicode": false,
                            "value": "$i=",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "5",
              },
              "type": "<",
            },
          },
          Inline {
            "kind": "inline",
            "raw": "
***********************
*** Nested file include test ***
",
            "value": "***********************
*** Nested file include test ***
",
          },
          ExpressionStatement {
            "expression": Include {
              "kind": "include",
              "once": false,
              "require": false,
              "target": String {
                "isDoubleQuote": true,
                "kind": "string",
                "parenthesizedExpression": true,
                "raw": "\\"023-2.inc\\"",
                "unicode": false,
                "value": "023-2.inc",
              },
            },
            "kind": "expressionstatement",
          },
          Inline {
            "kind": "inline",
            "raw": "
********************************
",
            "value": "********************************
",
          },
          Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"Tests completed.\\\\n\\"",
                    "unicode": false,
                    "value": "Tests completed.
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "jdk",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "jdk",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "jdk",
          },
          "right": Number {
            "kind": "number",
            "value": "50",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
