// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test preg_replace() function : basic 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'123456789 - Hello, world -           This is a string.'",
          "unicode": false,
          "value": "123456789 - Hello, world -           This is a string.",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "string",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<- This is a string$>'",
                "unicode": false,
                "value": "<- This is a string$>",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'This shouldn\\\\'t work'",
                "unicode": false,
                "value": "This shouldn't work",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<[0-35-9]>'",
                "unicode": false,
                "value": "<[0-35-9]>",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'4'",
                "unicode": false,
                "value": "4",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'5'",
                "unicode": false,
                "value": "5",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "count",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<\\\\b[hH]\\\\w{2,4}>'",
                "unicode": false,
                "value": "<\\\\b[hH]\\\\w{2,4}>",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Bonjour'",
                "unicode": false,
                "value": "Bonjour",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<(\\\\w)\\\\s*-\\\\s*(\\\\w)>'",
                "unicode": false,
                "value": "<(\\\\w)\\\\s*-\\\\s*(\\\\w)>",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\\\\\\\1. \\\\\\\\2'",
                "unicode": false,
                "value": "\\\\1. \\\\2",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<(^[a-z]\\\\w+)@(\\\\w+)\\\\.(\\\\w+)\\\\.([a-z]{2,}$)>'",
                "unicode": false,
                "value": "<(^[a-z]\\\\w+)@(\\\\w+)\\\\.(\\\\w+)\\\\.([a-z]{2,}$)>",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\\\\\\\1 at \\\\\\\\2 dot \\\\\\\\3 dot \\\\\\\\4'",
                "unicode": false,
                "value": "\\\\1 at \\\\2 dot \\\\3 dot \\\\4",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'josmessa@uk.ibm.com'",
                "unicode": false,
                "value": "josmessa@uk.ibm.com",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
