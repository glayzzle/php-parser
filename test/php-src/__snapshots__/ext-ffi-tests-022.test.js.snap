// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests FFI 022: structure/union alignment 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "size",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "type",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"FAIL: sizeof($type) != $size\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "FAIL: sizeof(",
                            "unicode": false,
                            "value": "FAIL: sizeof(",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "type",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ") != ",
                            "unicode": false,
                            "value": ") != ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "size",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "type",
                      },
                    ],
                    "kind": "call",
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "new",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "FFI",
                        "resolution": "uqn",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "sizeof",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "FFI",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "size",
              },
              "type": "!==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_size",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "align",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "type",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"FAIL: alignof($type) != $align\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "FAIL: alignof(",
                            "unicode": false,
                            "value": "FAIL: alignof(",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "type",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ") != ",
                            "unicode": false,
                            "value": ") != ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "align",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "type",
                      },
                    ],
                    "kind": "call",
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "new",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "FFI",
                        "resolution": "uqn",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "alignof",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "FFI",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "align",
              },
              "type": "!==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_align",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct {uint32_t a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint8_t b; uint8_t c;}\\"",
            "unicode": false,
            "value": "struct {char a; uint8_t b; uint8_t c;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; char b;}\\"",
            "unicode": false,
            "value": "struct {uint32_t a; char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "5",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "5",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {uint32_t a; char b;}\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {uint32_t a; char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; uint32_t b;}[2]\\"",
            "unicode": false,
            "value": "struct {uint32_t a; uint32_t b;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "6",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint8_t b; uint8_t c;}[2]\\"",
            "unicode": false,
            "value": "struct {char a; uint8_t b; uint8_t c;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b;}[2]\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; char b;}[2]\\"",
            "unicode": false,
            "value": "struct {uint32_t a; char b;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "10",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {char a; uint32_t b;}[2]\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {char a; uint32_t b;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "10",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {uint32_t a; char b;}[2]\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {uint32_t a; char b;}[2]",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union {uint32_t a; uint32_t b;}\\"",
            "unicode": false,
            "value": "union {uint32_t a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union {char a; uint8_t b; uint8_t c;}\\"",
            "unicode": false,
            "value": "union {char a; uint8_t b; uint8_t c;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "union {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union {uint32_t a; char b;}\\"",
            "unicode": false,
            "value": "union {uint32_t a; char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union __attribute__((packed)) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "union __attribute__((packed)) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union __attribute__((packed)) {uint32_t a; char b;}\\"",
            "unicode": false,
            "value": "union __attribute__((packed)) {uint32_t a; char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a __attribute__((packed)); uint32_t b;}\\"",
            "unicode": false,
            "value": "struct {char a __attribute__((packed)); uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "5",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b  __attribute__((packed));}\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b  __attribute__((packed));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "5",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a __attribute__((packed)); char b;}\\"",
            "unicode": false,
            "value": "struct {uint32_t a __attribute__((packed)); char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; char b __attribute__((packed));}\\"",
            "unicode": false,
            "value": "struct {uint32_t a; char b __attribute__((packed));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a __attribute__((packed)); uint32_t b;}\\"",
            "unicode": false,
            "value": "struct {char a __attribute__((packed)); uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b  __attribute__((packed));}\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b  __attribute__((packed));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a __attribute__((packed)); char b;}\\"",
            "unicode": false,
            "value": "struct {uint32_t a __attribute__((packed)); char b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {uint32_t a; char b __attribute__((packed));}\\"",
            "unicode": false,
            "value": "struct {uint32_t a; char b __attribute__((packed));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  __attribute__((aligned(16))) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct  __attribute__((aligned(16))) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  __attribute__((aligned(16))) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct  __attribute__((aligned(16))) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b;} __attribute__((aligned(16)))\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b;} __attribute__((aligned(16)))",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b;} __attribute__((aligned(16)))\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b;} __attribute__((aligned(16)))",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  {char a; uint32_t b __attribute__((aligned(1)));}\\"",
            "unicode": false,
            "value": "struct  {char a; uint32_t b __attribute__((aligned(1)));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  {char a; uint32_t b __attribute__((aligned(1)));}\\"",
            "unicode": false,
            "value": "struct  {char a; uint32_t b __attribute__((aligned(1)));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "32",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b __attribute__((aligned(16)));}\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b __attribute__((aligned(16)));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {char a; uint32_t b __attribute__((aligned(16)));}\\"",
            "unicode": false,
            "value": "struct {char a; uint32_t b __attribute__((aligned(16)));}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "__BIGGEST_ALIGNMENT__",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "FFI",
                      "resolution": "uqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "type": "*",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"struct  {char a; uint32_t b __attribute__((aligned));}\\"",
                  "unicode": false,
                  "value": "struct  {char a; uint32_t b __attribute__((aligned));}",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_size",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "__BIGGEST_ALIGNMENT__",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "FFI",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"struct  {char a; uint32_t b __attribute__((aligned));}\\"",
                  "unicode": false,
                  "value": "struct  {char a; uint32_t b __attribute__((aligned));}",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_align",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "PHP_OS",
              "resolution": "uqn",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "substr",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'WIN'",
          "unicode": false,
          "value": "WIN",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  __declspec(align(16)) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct  __declspec(align(16)) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "16",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct  __declspec(align(16)) {char a; uint32_t b;}\\"",
            "unicode": false,
            "value": "struct  __declspec(align(16)) {char a; uint32_t b;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_align",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
ok",
      "value": "ok",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
