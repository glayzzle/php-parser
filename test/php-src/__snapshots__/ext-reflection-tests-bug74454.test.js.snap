// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #74454 (Wrong exception being thrown when using ReflectionMethod) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'load_file'",
            "unicode": false,
            "value": "load_file",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "spl_autoload_register",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'A'",
                    "unicode": false,
                    "value": "A",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'b'",
                    "unicode": false,
                    "value": "b",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionMethod",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "get_class",
                      "resolution": "uqn",
                    },
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "': '",
                    "unicode": false,
                    "value": ": ",
                  },
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  Name {
                    "kind": "name",
                    "name": "PHP_EOL",
                    "resolution": "uqn",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\Throwable",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Include {
              "kind": "include",
              "once": false,
              "require": true,
              "target": Bin {
                "kind": "bin",
                "left": Magic {
                  "kind": "magic",
                  "raw": "__DIR__",
                  "value": "__DIR__",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/bug74454.inc'",
                  "unicode": false,
                  "value": "/bug74454.inc",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "load_file",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
