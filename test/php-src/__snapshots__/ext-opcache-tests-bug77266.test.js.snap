// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #77266 (Assertion failed in dce_live_ranges) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "lockList",
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [],
                    "kind": "array",
                    "shortForm": true,
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "serverMonitors",
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "listCount",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lockList",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "count",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "v",
                        },
                        "operator": "=",
                        "right": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "':'",
                              "unicode": false,
                              "value": ":",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "explode",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'m'",
                                  "unicode": false,
                                  "value": "m",
                                },
                                "what": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "v",
                                    },
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "serverMonitors",
                                  },
                                },
                              },
                              "operator": "=",
                              "right": New {
                                "arguments": Array [
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "v",
                                    },
                                  },
                                ],
                                "kind": "new",
                                "what": Name {
                                  "kind": "name",
                                  "name": "ServerMonitor",
                                  "resolution": "uqn",
                                },
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'m'",
                            "unicode": false,
                            "value": "m",
                          },
                          "what": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "v",
                              },
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "serverMonitors",
                            },
                          },
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lockList",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "is_array",
                      "resolution": "uqn",
                    },
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "listCount",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "type": ">",
                  },
                  "type": "&&",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "clearOrphanedLocks",
          },
          "nullable": false,
          "type": null,
          "visibility": "private",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": true,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Lock",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
okey",
      "value": "okey",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
