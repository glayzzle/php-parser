// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Try finally (exception in "return" statement) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "x",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "y",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Throw {
                "kind": "throw",
                "what": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__destruct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
          Foreach {
            "body": Block {
              "children": Array [
                Foreach {
                  "body": Block {
                    "children": Array [
                      Foreach {
                        "body": Block {
                          "children": Array [
                            Try {
                              "always": null,
                              "body": Block {
                                "children": Array [
                                  If {
                                    "alternate": null,
                                    "body": Block {
                                      "children": Array [
                                        Echo {
                                          "expressions": Array [
                                            Bin {
                                              "kind": "bin",
                                              "left": String {
                                                "isDoubleQuote": true,
                                                "kind": "string",
                                                "raw": "\\"0\\"",
                                                "unicode": false,
                                                "value": "0",
                                              },
                                              "right": Cast {
                                                "expr": Number {
                                                  "kind": "number",
                                                  "value": "5",
                                                },
                                                "kind": "cast",
                                                "raw": "(int)",
                                                "type": "int",
                                              },
                                              "type": ".",
                                            },
                                          ],
                                          "kind": "echo",
                                          "shortForm": false,
                                        },
                                      ],
                                      "kind": "block",
                                    },
                                    "kind": "if",
                                    "shortForm": false,
                                    "test": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                  },
                                  Return {
                                    "expr": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "a",
                                    },
                                    "kind": "return",
                                  },
                                ],
                                "kind": "block",
                              },
                              "catches": Array [
                                Catch {
                                  "body": Block {
                                    "children": Array [
                                      Echo {
                                        "expressions": Array [
                                          String {
                                            "isDoubleQuote": true,
                                            "kind": "string",
                                            "raw": "\\"exception1\\\\n\\"",
                                            "unicode": false,
                                            "value": "exception1
",
                                          },
                                        ],
                                        "kind": "echo",
                                        "shortForm": false,
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "kind": "catch",
                                  "variable": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "e",
                                  },
                                  "what": Array [
                                    Name {
                                      "kind": "name",
                                      "name": "Exception",
                                      "resolution": "uqn",
                                    },
                                  ],
                                },
                              ],
                              "kind": "try",
                            },
                          ],
                          "kind": "block",
                        },
                        "key": null,
                        "kind": "foreach",
                        "shortForm": false,
                        "source": Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": New {
                                "arguments": Array [],
                                "kind": "new",
                                "what": Name {
                                  "kind": "name",
                                  "name": "stdClass",
                                  "resolution": "uqn",
                                },
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": true,
                        },
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "y",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "key": null,
                  "kind": "foreach",
                  "shortForm": false,
                  "source": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "A",
                      "resolution": "uqn",
                    },
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "stdClass",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"exception2\\\\n\\"",
                    "unicode": false,
                    "value": "exception2
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
