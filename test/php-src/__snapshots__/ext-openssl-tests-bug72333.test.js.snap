// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #72333: fwrite() on non-blocking SSL sockets doesn't work 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug72333.pem.tmp'",
            "unicode": false,
            "value": "bug72333.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $fp = stream_socket_server(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, $flags, $context);
    phpt_notify();
    $conn = stream_socket_accept($fp);
    $total = 100000;
    $result = fread($conn, $total);
    stream_set_blocking($conn, false);
    usleep(50000);
    $read = [$conn];
    while (stream_select($read, $write, $except, 1)) {
        $result = fread($conn, 100000);
        if (!$result) {
            break;
        }
        $total += strlen($result);
        if ($total >= 4000000) {
            break;
        }
    }
    phpt_wait();
CODE",
          "value": "    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $fp = stream_socket_server(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, $flags, $context);
    phpt_notify();
    $conn = stream_socket_accept($fp);
    $total = 100000;
    $result = fread($conn, $total);
    stream_set_blocking($conn, false);
    usleep(50000);
    $read = [$conn];
    while (stream_select($read, $write, $except, 1)) {
        $result = fread($conn, 100000);
        if (!$result) {
            break;
        }
        $total += strlen($result);
        if ($total >= 4000000) {
            break;
        }
    }
    phpt_wait();",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "serverCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "certFile",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "peerName",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'bug72333'",
          "unicode": false,
          "value": "bug72333",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);
    phpt_wait();
    $fp = stream_socket_client(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);
    stream_set_blocking($fp, false);
    function blocking_fwrite($fp, $buf) {
        $write = [$fp];
        $total = 0;
        while (stream_select($read, $write, $except, 1)) {
            $result = fwrite($fp, $buf);
            if (!$result) {
                break;
            }
            $total += $result;
            if ($total >= strlen($buf)) {
                return $total;
            }
            $buf = substr($buf, $total);
        }
    }
    $str1 = str_repeat(\\"a\\", 4000000);
    blocking_fwrite($fp, $str1);
    phpt_notify();
    echo \\"done\\";
CODE",
          "value": "    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);
    phpt_wait();
    $fp = stream_socket_client(\\"ssl://127.0.0.1:10011\\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);
    stream_set_blocking($fp, false);
    function blocking_fwrite($fp, $buf) {
        $write = [$fp];
        $total = 0;
        while (stream_select($read, $write, $except, 1)) {
            $result = fwrite($fp, $buf);
            if (!$result) {
                break;
            }
            $total += $result;
            if ($total >= strlen($buf)) {
                return $total;
            }
            $buf = substr($buf, $total);
        }
    }
    $str1 = str_repeat(\\"a\\", 4000000);
    blocking_fwrite($fp, $str1);
    phpt_notify();
    echo \\"done\\";",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "clientCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "peerName",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'CertificateGenerator.inc'",
          "unicode": false,
          "value": "CertificateGenerator.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certificateGenerator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "CertificateGenerator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "peerName",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "certFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveNewCertAsFileWithKey",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "serverCode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
