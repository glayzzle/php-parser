// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of EUC-JP-2004 encoding verification and conversion 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "200",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "srand",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "validChars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fromUnicode",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/data/EUC-JP-2004.txt'",
                "unicode": false,
                "value": "/data/EUC-JP-2004.txt",
              },
              "type": ".",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r+'",
              "unicode": false,
              "value": "r+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'#'",
                "unicode": false,
                "value": "#",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "codepoint2",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": If {
                    "alternate": ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "eucjp",
                        },
                        "operator": "=",
                        "right": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "bytes",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "16",
                                },
                                "type": ">>",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "chr",
                              "resolution": "uqn",
                            },
                          },
                          "right": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'n'",
                                "unicode": false,
                                "value": "n",
                              },
                              Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "bytes",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "0xFFFF",
                                },
                                "type": "&",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "pack",
                              "resolution": "uqn",
                            },
                          },
                          "type": ".",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    "body": ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "eucjp",
                        },
                        "operator": "=",
                        "right": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'n'",
                              "unicode": false,
                              "value": "n",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bytes",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "pack",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "bytes",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xFFFF",
                      },
                      "type": "<=",
                    },
                  },
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "eucjp",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bytes",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "chr",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bytes",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "256",
                    },
                    "type": "<",
                  },
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "eucjp",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "validChars",
                            },
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'N'",
                                "unicode": false,
                                "value": "N",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "codepoint1",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "pack",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'n'",
                                    "unicode": false,
                                    "value": "n",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "codepoint1",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "pack",
                                  "resolution": "uqn",
                                },
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fromUnicode",
                              },
                            },
                            "operator": "=",
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "eucjp",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint1",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xFFFF",
                          },
                          "type": "<=",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "eucjp",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "validChars",
                            },
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'NN'",
                                "unicode": false,
                                "value": "NN",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "codepoint1",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "codepoint2",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "pack",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint2",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"0x%x\\\\tU+%x+%x\\"",
                    "unicode": false,
                    "value": "0x%x	U+%x+%x",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bytes",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint1",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint2",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sscanf",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": ">=",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "line",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
            Number {
              "kind": "number",
              "value": "256",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgets",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xA1\\\\xB1\\"",
            "unicode": false,
            "value": "¡±",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\x00\\\\x00\\\\xFF\\\\xE3\\"",
          "unicode": false,
          "value": "  ÿã",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFF\\\\xE3\\"",
            "unicode": false,
            "value": "ÿã",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xB1\\"",
          "unicode": false,
          "value": "¡±",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xA1\\\\xEF\\"",
            "unicode": false,
            "value": "¡ï",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\x00\\\\x00\\\\xFF\\\\xE5\\"",
          "unicode": false,
          "value": "  ÿå",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFF\\\\xE5\\"",
            "unicode": false,
            "value": "ÿå",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xEF\\"",
          "unicode": false,
          "value": "¡ï",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA5\\"",
            "unicode": false,
            "value": " ¥",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\x5C\\"",
          "unicode": false,
          "value": "\\\\",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x20\\\\x3E\\"",
            "unicode": false,
            "value": " >",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\x7E\\"",
          "unicode": false,
          "value": "~",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'EUC-JP-2004'",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-32BE'",
            "unicode": false,
            "value": "UTF-32BE",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"EUC-JP-2004 verification and conversion works for all valid characters\\\\n\\"",
          "unicode": false,
          "value": "EUC-JP-2004 verification and conversion works for all valid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'EUC-JP-2004'",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-32BE'",
            "unicode": false,
            "value": "UTF-32BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
            "unicode": false,
            "value": "   %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'EUC-JP-2004'",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-32BE'",
            "unicode": false,
            "value": "UTF-32BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\x00\\\\x00%\\"",
            "unicode": false,
            "value": "   %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testTruncatedChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"EUC-JP-2004 verification and conversion rejects all invalid characters\\\\n\\"",
          "unicode": false,
          "value": "EUC-JP-2004 verification and conversion rejects all invalid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'EUC-JP-2004'",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Unicode -> EUC-JP-2004 conversion works on all valid characters\\\\n\\"",
          "unicode": false,
          "value": "Unicode -> EUC-JP-2004 conversion works on all valid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "unused",
          },
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Number {
                    "kind": "number",
                    "value": "0xFF",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'EUC-JP-2004'",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'%'",
            "unicode": false,
            "value": "%",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Unicode -> EUC-JP-2004 conversion works on all invalid characters\\\\n\\"",
          "unicode": false,
          "value": "Unicode -> EUC-JP-2004 conversion works on all invalid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x80\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"EUC-JP-2004\\"",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFE\\\\xFF\\"",
            "unicode": false,
            "value": "þÿ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"EUC-JP-2004\\"",
            "unicode": false,
            "value": "EUC-JP-2004",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
