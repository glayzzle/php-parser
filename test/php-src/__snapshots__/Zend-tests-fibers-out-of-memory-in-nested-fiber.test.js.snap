// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Out of Memory in a nested fiber 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fiber",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Closure {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fiber",
                      },
                      "operator": "=",
                      "right": New {
                        "arguments": Array [
                          Closure {
                            "arguments": Array [],
                            "attrGroups": Array [],
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "buffer",
                                    },
                                    "operator": "=",
                                    "right": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "''",
                                      "unicode": false,
                                      "value": "",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                While {
                                  "body": Block {
                                    "children": Array [
                                      ExpressionStatement {
                                        "expression": Assign {
                                          "kind": "assign",
                                          "left": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "buffer",
                                          },
                                          "operator": ".=",
                                          "right": Call {
                                            "arguments": Array [
                                              String {
                                                "isDoubleQuote": false,
                                                "kind": "string",
                                                "raw": "'.'",
                                                "unicode": false,
                                                "value": ".",
                                              },
                                              Bin {
                                                "kind": "bin",
                                                "left": Number {
                                                  "kind": "number",
                                                  "value": "1",
                                                },
                                                "right": Number {
                                                  "kind": "number",
                                                  "value": "10",
                                                },
                                                "type": "<<",
                                              },
                                            ],
                                            "kind": "call",
                                            "what": Name {
                                              "kind": "name",
                                              "name": "str_repeat",
                                              "resolution": "uqn",
                                            },
                                          },
                                        },
                                        "kind": "expressionstatement",
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "kind": "while",
                                  "shortForm": false,
                                  "test": Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                },
                              ],
                              "kind": "block",
                            },
                            "byref": false,
                            "isStatic": false,
                            "kind": "closure",
                            "nullable": false,
                            "type": TypeReference {
                              "kind": "typereference",
                              "name": "void",
                              "raw": "void",
                            },
                            "uses": Array [],
                          },
                        ],
                        "kind": "new",
                        "what": Name {
                          "kind": "name",
                          "name": "Fiber",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "start",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fiber",
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isStatic": false,
              "kind": "closure",
              "nullable": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "void",
                "raw": "void",
              },
              "uses": Array [],
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Fiber",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "start",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fiber",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
