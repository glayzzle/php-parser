// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar: include/fopen magic zip-based 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.zip.php'",
            "unicode": false,
            "value": ".phar.zip.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.zip.php'",
            "unicode": false,
            "value": ".phar.zip.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "ZIP",
                },
                "what": Name {
                  "kind": "name",
                  "name": "Phar",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "isFileFormat",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "p",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php include \\"b/c.php\\";'",
            "unicode": false,
            "value": "<?php include \\"b/c.php\\";",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'b/c.php'",
            "unicode": false,
            "value": "b/c.php",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<?php echo \\"in b\\\\n\\";$a = fopen(\\"a\\", \\"r\\", true);echo stream_get_contents($a);fclose($a);include __DIR__ . \\"/../d\\";'",
          "unicode": false,
          "value": "<?php echo \\"in b\\\\n\\";$a = fopen(\\"a\\", \\"r\\", true);echo stream_get_contents($a);fclose($a);include __DIR__ . \\"/../d\\";",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'d'",
            "unicode": false,
            "value": "d",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"in d\\\\n\\"",
          "unicode": false,
          "value": "in d
",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php
var_dump(__FILE__);
var_dump(substr(__FILE__, 0, 4) != \\"phar\\");
set_include_path(\\"phar://\\" . __FILE__);
include \\"phar://\\" . __FILE__ . \\"/a\\";
__HALT_COMPILER();'",
            "unicode": false,
            "value": "<?php
var_dump(__FILE__);
var_dump(substr(__FILE__, 0, 4) != \\"phar\\");
set_include_path(\\"phar://\\" . __FILE__);
include \\"phar://\\" . __FILE__ . \\"/a\\";
__HALT_COMPILER();",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setStub",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "p",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pname",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
