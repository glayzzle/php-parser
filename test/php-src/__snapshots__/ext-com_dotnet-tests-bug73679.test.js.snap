// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #73679 DOTNET read access violation using invalid codepage 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stack",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"mscorlib\\"",
              "unicode": false,
              "value": "mscorlib",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"System.Collections.Stack\\"",
              "unicode": false,
              "value": "System.Collections.Stack",
            },
            Unary {
              "kind": "unary",
              "type": "-",
              "what": Number {
                "kind": "number",
                "value": "2200000000",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOTNET",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\".Net\\"",
            "unicode": false,
            "value": ".Net",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "Push",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stack",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Hello \\"",
            "unicode": false,
            "value": "Hello ",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "Push",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stack",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Pop",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stack",
              },
            },
          },
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Pop",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stack",
              },
            },
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
