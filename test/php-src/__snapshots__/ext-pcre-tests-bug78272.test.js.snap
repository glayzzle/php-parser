// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #78272: calling preg_match() before pcntl_fork() will freeze child process 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/abc/'",
            "unicode": false,
            "value": "/abc/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'abcde'",
            "unicode": false,
            "value": "abcde",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "r",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pcntl_fork",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "status",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "pcntl_waitpid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"End Main\\\\n\\"",
                "unicode": false,
                "value": "End Main
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Child start\\\\n\\"",
                "unicode": false,
                "value": "Child start
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/abc/'",
                  "unicode": false,
                  "value": "/abc/",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'abcde'",
                  "unicode": false,
                  "value": "abcde",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "r",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "r",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "print_r",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"End child\\\\n\\"",
                "unicode": false,
                "value": "End child
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "===",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
