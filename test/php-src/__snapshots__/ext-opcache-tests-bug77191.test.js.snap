// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #77191: Assertion failure in dce_live_ranges() when silencing is used 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "x",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'b'",
                          "unicode": false,
                          "value": "b",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'c'",
                          "unicode": false,
                          "value": "c",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "3",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'d'",
                          "unicode": false,
                          "value": "d",
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "4",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Silent {
              "expr": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'y'",
                  "unicode": false,
                  "value": "y",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "kind": "silent",
            },
          },
          Return {
            "expr": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'e'",
              "unicode": false,
              "value": "e",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "test",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
