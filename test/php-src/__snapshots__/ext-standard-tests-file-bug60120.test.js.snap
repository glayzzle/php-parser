// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #60120 (proc_open hangs when data in stdin/out/err is getting larger or equal to 2048) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "E_ALL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "error_reporting",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "php",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'TEST_PHP_EXECUTABLE'",
              "unicode": false,
              "value": "TEST_PHP_EXECUTABLE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "getenv",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"No php executable defined\\\\n\\"",
                "unicode": false,
                "value": "No php executable defined
",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "php",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cmd",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'php -r \\"fwrite(STDOUT, $in = file_get_contents(\\\\'php://stdin\\\\')); fwrite(STDERR, $in);\\"'",
          "unicode": false,
          "value": "php -r \\"fwrite(STDOUT, $in = file_get_contents('php://stdin')); fwrite(STDERR, $in);\\"",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "descriptors",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'pipe'",
                      "unicode": false,
                      "value": "pipe",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'r'",
                      "unicode": false,
                      "value": "r",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'pipe'",
                      "unicode": false,
                      "value": "pipe",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'w'",
                      "unicode": false,
                      "value": "w",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'pipe'",
                      "unicode": false,
                      "value": "pipe",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'w'",
                      "unicode": false,
                      "value": "w",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stdin",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'*'",
              "unicode": false,
              "value": "*",
            },
            Number {
              "kind": "number",
              "value": "2049",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_repeat",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "options",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'suppress_errors'",
                    "unicode": false,
                    "value": "suppress_errors",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                },
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'bypass_shell'",
                    "unicode": false,
                    "value": "bypass_shell",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_merge",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "process",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cmd",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "descriptors",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "pipes",
            },
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "getcwd",
                "resolution": "uqn",
              },
            },
            Array {
              "items": Array [],
              "kind": "array",
              "shortForm": false,
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "options",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "proc_open",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pipe",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "stream_set_blocking",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "pipes",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "pipe",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "writePipes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pipes",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stdinLen",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "stdin",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stdinOffset",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pipes",
          },
        },
      ],
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "r",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "pipes",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "w",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "writePipes",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "r",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "w",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "e",
                  },
                  Number {
                    "kind": "number",
                    "value": "60",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "stream_select",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": If {
              "alternate": null,
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "process",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "proc_terminate",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "n",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
                "type": "===",
              },
            },
            "body": Block {
              "children": Array [
                Break {
                  "kind": "break",
                  "level": null,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "type": "===",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "written",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "writePipes",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stdin",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stdinOffset",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "substr",
                            "resolution": "uqn",
                          },
                        },
                        Number {
                          "kind": "number",
                          "value": "8192",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fwrite",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stdinOffset",
                          },
                          "operator": "+=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "written",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "written",
                    },
                    "type": "!==",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "writePipes",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "fclose",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "writePipes",
                          },
                          "operator": "=",
                          "right": NullKeyword {
                            "kind": "nullkeyword",
                            "raw": "null",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stdinOffset",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stdinLen",
                    },
                    "type": ">=",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "w",
            },
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "type",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pipe",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pipes",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "array_search",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pipe",
                        },
                        Number {
                          "kind": "number",
                          "value": "8192",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fread",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pipe",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "fclose",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Unset {
                        "kind": "unset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "type",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pipes",
                            },
                          },
                        ],
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "data",
                      },
                      "type": "===",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pipe",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "feof",
                        "resolution": "uqn",
                      },
                    },
                    "type": "||",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "pipe",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pipes",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "writePipes",
        },
        "type": "||",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"OK.\\"",
          "unicode": false,
          "value": "OK.",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
