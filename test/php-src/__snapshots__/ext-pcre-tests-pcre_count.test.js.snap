// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests preg_replace() fifth parameter - count 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'/(([0-9a-z]+)-([0-9]+))-(([0-9]+)-([0-9]+))/'",
          "unicode": false,
          "value": "/(([0-9a-z]+)-([0-9]+))-(([0-9]+)-([0-9]+))/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'1-2-3-4 a-2-3-4 1-a-3-4 1-2-a-4 1-2-3-a a-a-a-a 4-3-2-1 100-200-300-400-500-600-700-800'",
          "unicode": false,
          "value": "1-2-3-4 a-2-3-4 1-a-3-4 1-2-a-4 1-2-3-a a-a-a-a 4-3-2-1 100-200-300-400-500-600-700-800",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'xxxx'",
                "unicode": false,
                "value": "xxxx",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "count",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'/([a-z]+)/'",
          "unicode": false,
          "value": "/([a-z]+)/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Here must only number like 42 and 13 appear'",
          "unicode": false,
          "value": "Here must only number like 42 and 13 appear",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'xxxx'",
                "unicode": false,
                "value": "xxxx",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "count",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'~((V(I|1)(4|A)GR(4|A))|(V(I|1)C(0|O)D(I|1)(N|\\\\/\\\\\\\\\\\\/)))~i'",
          "unicode": false,
          "value": "~((V(I|1)(4|A)GR(4|A))|(V(I|1)C(0|O)D(I|1)(N|\\\\/\\\\\\\\/)))~i",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Viagra V14GR4 Vicodin V1C0D1/\\\\/ v1c0d1/|/'",
          "unicode": false,
          "value": "Viagra V14GR4 Vicodin V1C0D1/\\\\/ v1c0d1/|/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'...'",
                "unicode": false,
                "value": "...",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "count",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'~((V(I|1)(4|A)GR(4|A))|(V(I|1)C(0|O)D(I|1)(N|\\\\/\\\\\\\\\\\\/)))~i'",
          "unicode": false,
          "value": "~((V(I|1)(4|A)GR(4|A))|(V(I|1)C(0|O)D(I|1)(N|\\\\/\\\\\\\\/)))~i",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "NULL",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Viagra V14GR4 Vicodin V1C0D1/\\\\/ v1c0d1/|/'",
          "unicode": false,
          "value": "Viagra V14GR4 Vicodin V1C0D1/\\\\/ v1c0d1/|/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'...'",
                "unicode": false,
                "value": "...",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "count",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
