// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Uninitialized result of PRE_INC/PRE_DEC in case of exception 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "name": "strict_types",
          },
          "kind": "declaredirective",
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "mode": "none",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "o",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Class {
            "attrGroups": Array [],
            "body": Array [
              PropertyStatement {
                "isStatic": false,
                "kind": "propertystatement",
                "properties": Array [
                  Property {
                    "attrGroups": Array [],
                    "kind": "property",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "a",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": TypeReference {
                      "kind": "typereference",
                      "name": "string",
                      "raw": "string",
                    },
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"123\\"",
                      "unicode": false,
                      "value": "123",
                    },
                  },
                ],
                "visibility": "public",
              },
            ],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "o",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ret",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Pre {
                  "kind": "pre",
                  "type": "+",
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "x",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "5",
                },
                "type": "+",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "TypeError",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Inline {
      "kind": "inline",
      "raw": "
OK",
      "value": "OK",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
