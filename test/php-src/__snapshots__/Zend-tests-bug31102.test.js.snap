// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #31102 (Exception not handled when thrown inside autoloader) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Closure {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "class",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                Global {
                  "items": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test",
                    },
                  ],
                  "kind": "global",
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Magic {
                        "kind": "magic",
                        "raw": "__METHOD__",
                        "value": "__METHOD__",
                      },
                      "right": Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"($class,$test)\\\\n\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "(",
                              "unicode": false,
                              "value": "(",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "class",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ",",
                              "unicode": false,
                              "value": ",",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "test",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ")\\\\n",
                              "unicode": false,
                              "value": ")",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Switch {
                  "body": Block {
                    "children": Array [
                      Case {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Eval {
                                "kind": "eval",
                                "source": Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"class $class { function __construct(){throw new Exception('$class::__construct');}}\\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "class ",
                                        "unicode": false,
                                        "value": "class ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "class",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": " { function __construct(){throw new Exception('",
                                        "unicode": false,
                                        "value": " { function __construct(){throw new Exception('",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "class",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "::__construct');}}",
                                        "unicode": false,
                                        "value": "::__construct');}}",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": null,
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                      Case {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Eval {
                                "kind": "eval",
                                "source": Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"class $class { function __construct(){throw new Exception('$class::__construct');}}\\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "class ",
                                        "unicode": false,
                                        "value": "class ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "class",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": " { function __construct(){throw new Exception('",
                                        "unicode": false,
                                        "value": " { function __construct(){throw new Exception('",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "class",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "::__construct');}}",
                                        "unicode": false,
                                        "value": "::__construct');}}",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Throw {
                              "kind": "throw",
                              "what": New {
                                "arguments": Array [
                                  Magic {
                                    "kind": "magic",
                                    "raw": "__METHOD__",
                                    "value": "__METHOD__",
                                  },
                                ],
                                "kind": "new",
                                "what": Name {
                                  "kind": "name",
                                  "name": "Exception",
                                  "resolution": "uqn",
                                },
                              },
                            },
                            Return {
                              "expr": null,
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": Number {
                          "kind": "number",
                          "value": "2",
                        },
                      },
                      Case {
                        "body": Block {
                          "children": Array [
                            Return {
                              "expr": null,
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "case",
                        "test": Number {
                          "kind": "number",
                          "value": "3",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "switch",
                  "shortForm": false,
                  "test": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "test",
                  },
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "type": null,
            "uses": Array [],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "spl_autoload_register",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"\\\\$bug = new Test$test();\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\$bug = new Test",
                            "unicode": false,
                            "value": "$bug = new Test",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "test",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "();",
                            "unicode": false,
                            "value": "();",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"Caught: \\"",
                              "unicode": false,
                              "value": "Caught: ",
                            },
                            "right": Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "getMessage",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "e",
                                },
                              },
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\n\\"",
                            "unicode": false,
                            "value": "
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "test",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "5",
        },
        "type": "<",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
