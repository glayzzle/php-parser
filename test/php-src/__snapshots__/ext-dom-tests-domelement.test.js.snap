// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Elements: DOMElement functionality 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"dom_test.inc\\"",
          "unicode": false,
          "value": "dom_test.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOMDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xmlstr",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXML",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Error while parsing the document\\\\n\\"",
                "unicode": false,
                "value": "Error while parsing the document
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "node",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "documentElement",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Tag Name: \\"",
              "unicode": false,
              "value": "Tag Name: ",
            },
            "right": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "tagName",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'num'",
            "unicode": false,
            "value": "num",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'1'",
            "unicode": false,
            "value": "1",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Chapter: \\"",
              "unicode": false,
              "value": "Chapter: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'num'",
                  "unicode": false,
                  "value": "num",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Attribute num exists?: '",
              "unicode": false,
              "value": "Attribute num exists?: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'No'",
                "unicode": false,
                "value": "No",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'num'",
                    "unicode": false,
                    "value": "num",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "hasAttribute",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
              "trueExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Yes'",
                "unicode": false,
                "value": "Yes",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'num'",
            "unicode": false,
            "value": "num",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "removeAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Chapter: \\"",
              "unicode": false,
              "value": "Chapter: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'num'",
                  "unicode": false,
                  "value": "num",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Attribute num exists?: '",
              "unicode": false,
              "value": "Attribute num exists?: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'No'",
                "unicode": false,
                "value": "No",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'num'",
                    "unicode": false,
                    "value": "num",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "hasAttribute",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
              "trueExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Yes'",
                "unicode": false,
                "value": "Yes",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'language'",
                  "unicode": false,
                  "value": "language",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lang",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'language'",
              "unicode": false,
              "value": "language",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getAttributeNode",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "nodeValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "lang",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'en-US'",
          "unicode": false,
          "value": "en-US",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "lang",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttributeNode",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'language'",
                  "unicode": false,
                  "value": "language",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "lang",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "removeAttributeNode",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'language'",
                  "unicode": false,
                  "value": "language",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- xml:lang --\\\\n\\"",
          "unicode": false,
          "value": "
-- xml:lang --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'http://www.w3.org/XML/1998/namespace'",
            "unicode": false,
            "value": "http://www.w3.org/XML/1998/namespace",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'xml:lang'",
            "unicode": false,
            "value": "xml:lang",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'en'",
            "unicode": false,
            "value": "en",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttributeNS",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'http://www.w3.org/XML/1998/namespace'",
                  "unicode": false,
                  "value": "http://www.w3.org/XML/1998/namespace",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'lang'",
                  "unicode": false,
                  "value": "lang",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttributeNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Attribute xml:lang exists?: '",
              "unicode": false,
              "value": "Attribute xml:lang exists?: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'No'",
                "unicode": false,
                "value": "No",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'http://www.w3.org/XML/1998/namespace'",
                    "unicode": false,
                    "value": "http://www.w3.org/XML/1998/namespace",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'lang'",
                    "unicode": false,
                    "value": "lang",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "hasAttributeNS",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
              "trueExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Yes'",
                "unicode": false,
                "value": "Yes",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'http://www.w3.org/XML/1998/namespace'",
            "unicode": false,
            "value": "http://www.w3.org/XML/1998/namespace",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'lang'",
            "unicode": false,
            "value": "lang",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "removeAttributeNS",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'http://www.w3.org/XML/1998/namespace'",
                  "unicode": false,
                  "value": "http://www.w3.org/XML/1998/namespace",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'lang'",
                  "unicode": false,
                  "value": "lang",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttributeNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Attribute xml:lang exists?: '",
              "unicode": false,
              "value": "Attribute xml:lang exists?: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'No'",
                "unicode": false,
                "value": "No",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'http://www.w3.org/XML/1998/namespace'",
                    "unicode": false,
                    "value": "http://www.w3.org/XML/1998/namespace",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'lang'",
                    "unicode": false,
                    "value": "lang",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "hasAttributeNS",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
              "trueExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Yes'",
                "unicode": false,
                "value": "Yes",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lang",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'http://www.w3.org/XML/1998/namespace'",
              "unicode": false,
              "value": "http://www.w3.org/XML/1998/namespace",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'xml:lang'",
              "unicode": false,
              "value": "xml:lang",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createAttributeNS",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "nodeValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "lang",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'en-GB'",
          "unicode": false,
          "value": "en-GB",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "lang",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttributeNodeNS",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "lang",
        },
      ],
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'http://www.w3.org/XML/1998/namespace'",
                  "unicode": false,
                  "value": "http://www.w3.org/XML/1998/namespace",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'lang'",
                  "unicode": false,
                  "value": "lang",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getAttributeNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lang",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'http://www.w3.org/XML/1998/namespace'",
              "unicode": false,
              "value": "http://www.w3.org/XML/1998/namespace",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'lang'",
              "unicode": false,
              "value": "lang",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getAttributeNodeNS",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Language: \\"",
              "unicode": false,
              "value": "Language: ",
            },
            "right": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "value",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "lang",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Elements --\\\\n\\"",
          "unicode": false,
          "value": "
-- Elements --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rows",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'row'",
              "unicode": false,
              "value": "row",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getElementsByTagName",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Row Count: \\"",
              "unicode": false,
              "value": "Row Count: ",
            },
            "right": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "length",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rows",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "element_ns",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'newns:myelement'",
              "unicode": false,
              "value": "newns:myelement",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'default content'",
              "unicode": false,
              "value": "default content",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'urn::dummyns'",
              "unicode": false,
              "value": "urn::dummyns",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOMElement",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "element_ns",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "element_ns",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'newns2:myelement'",
              "unicode": false,
              "value": "newns2:myelement",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'second default content'",
              "unicode": false,
              "value": "second default content",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'urn::dummyns'",
              "unicode": false,
              "value": "urn::dummyns",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOMElement",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "element_ns",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "myelements",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'urn::dummyns'",
              "unicode": false,
              "value": "urn::dummyns",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'myelement'",
              "unicode": false,
              "value": "myelement",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getElementsByTagNameNS",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mylen",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "length",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "myelements",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"myelements Count: \\"",
              "unicode": false,
              "value": "myelements Count: ",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "mylen",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- IDs --\\\\n\\"",
          "unicode": false,
          "value": "
-- IDs --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'idatt'",
            "unicode": false,
            "value": "idatt",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'n1'",
            "unicode": false,
            "value": "n1",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'idatt'",
            "unicode": false,
            "value": "idatt",
          },
          Boolean {
            "kind": "boolean",
            "raw": "TRUE",
            "value": true,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setIdAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "current",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "x",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "item",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "myelements",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'urn::dummyns'",
                    "unicode": false,
                    "value": "urn::dummyns",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'newns:idatt'",
                    "unicode": false,
                    "value": "newns:idatt",
                  },
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n'",
                      "unicode": false,
                      "value": "n",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "x",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "2",
                      },
                      "type": "+",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "setAttributeNS",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "current",
                  },
                },
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
              "type": ".",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'urn::dummyns'",
                  "unicode": false,
                  "value": "urn::dummyns",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'idatt'",
                  "unicode": false,
                  "value": "idatt",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "TRUE",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "setIdAttributeNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "current",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "mylen",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Element Name: '",
              "unicode": false,
              "value": "Element Name: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Not Found'",
                "unicode": false,
                "value": "Not Found",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n1'",
                      "unicode": false,
                      "value": "n1",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getElementByID",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dom",
                    },
                  },
                },
              },
              "trueExpr": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "localName",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "idatt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'idatt'",
              "unicode": false,
              "value": "idatt",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getAttributeNode",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "idatt",
          },
          Boolean {
            "kind": "boolean",
            "raw": "FALSE",
            "value": false,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setIdAttributeNode",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Element Name: '",
              "unicode": false,
              "value": "Element Name: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Not Found'",
                "unicode": false,
                "value": "Not Found",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n1'",
                      "unicode": false,
                      "value": "n1",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getElementByID",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dom",
                    },
                  },
                },
              },
              "trueExpr": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "localName",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Element Name: '",
              "unicode": false,
              "value": "Element Name: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Not Found'",
                "unicode": false,
                "value": "Not Found",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n3'",
                      "unicode": false,
                      "value": "n3",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getElementByID",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dom",
                    },
                  },
                },
              },
              "trueExpr": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "nodeName",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "x",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "item",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "myelements",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'urn::dummyns'",
                  "unicode": false,
                  "value": "urn::dummyns",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'idatt'",
                  "unicode": false,
                  "value": "idatt",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "FALSE",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "setIdAttributeNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "node",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "mylen",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Element Name: '",
              "unicode": false,
              "value": "Element Name: ",
            },
            "right": RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Not Found'",
                "unicode": false,
                "value": "Not Found",
              },
              "kind": "retif",
              "parenthesizedExpression": true,
              "test": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'n3'",
                      "unicode": false,
                      "value": "n3",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getElementByID",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dom",
                    },
                  },
                },
              },
              "trueExpr": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "nodeName",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elem",
                },
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
