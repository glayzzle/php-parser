// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Oracle Database 12c Implicit Result Sets: bigger data size 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/connect.inc'",
            "unicode": false,
            "value": "/connect.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmtarray",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table imp_res_3_tab_1\\"",
                "unicode": false,
                "value": "drop table imp_res_3_tab_1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"create table imp_res_3_tab_1 (c1 number, c2 varchar2(10))\\"",
                "unicode": false,
                "value": "create table imp_res_3_tab_1 (c1 number, c2 varchar2(10))",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_1 values (1, 'a')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_1 values (1, 'a')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_1 values (2, 'f')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_1 values (2, 'f')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table imp_res_3_tab_2\\"",
                "unicode": false,
                "value": "drop table imp_res_3_tab_2",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"create table imp_res_3_tab_2 (c3 varchar2(1))\\"",
                "unicode": false,
                "value": "create table imp_res_3_tab_2 (c3 varchar2(1))",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_2 values ('t')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_2 values ('t')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_2 values ('u')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_2 values ('u')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_2 values ('v')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_2 values ('v')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into imp_res_3_tab_2 values ('w')\\"",
                "unicode": false,
                "value": "insert into imp_res_3_tab_2 values ('w')",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"create or replace procedure imp_res_3_proc as
      c1 sys_refcursor;
      i pls_integer;
    begin
      for i in 1..30 loop  -- if this value is too big for Oracle's open_cursors, calling imp_res_3_proc() can fail with ORA-1000
        open c1 for select t1.*, t2.*, t3.*, t4.*, t5.*
            from imp_res_3_tab_1 t1, imp_res_3_tab_1 t2, imp_res_3_tab_1 t3,
                 imp_res_3_tab_1 t4, imp_res_3_tab_1 t5 order by 1,3,5,7,9,2,4,6,8,10;
        dbms_sql.return_result(c1);
        open c1 for select c2 from imp_res_3_tab_1 order by 1;
        dbms_sql.return_result(c1);
        open c1 for select * from imp_res_3_tab_2 order by 1;
        dbms_sql.return_result(c1);
        open c1 for select * from dual;
        dbms_sql.return_result (c1);
      end loop;
    end;\\"",
                "unicode": false,
                "value": "create or replace procedure imp_res_3_proc as
      c1 sys_refcursor;
      i pls_integer;
    begin
      for i in 1..30 loop  -- if this value is too big for Oracle's open_cursors, calling imp_res_3_proc() can fail with ORA-1000
        open c1 for select t1.*, t2.*, t3.*, t4.*, t5.*
            from imp_res_3_tab_1 t1, imp_res_3_tab_1 t2, imp_res_3_tab_1 t3,
                 imp_res_3_tab_1 t4, imp_res_3_tab_1 t5 order by 1,3,5,7,9,2,4,6,8,10;
        dbms_sql.return_result(c1);
        open c1 for select c2 from imp_res_3_tab_1 order by 1;
        dbms_sql.return_result(c1);
        open c1 for select * from imp_res_3_tab_2 order by 1;
        dbms_sql.return_result(c1);
        open c1 for select * from dual;
        dbms_sql.return_result (c1);
      end loop;
    end;",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmtarray",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci8_test_sql_execute",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1\\\\n\\"",
          "unicode": false,
          "value": "Test 1
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "s",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "c",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"begin imp_res_3_proc(); end;\\"",
              "unicode": false,
              "value": "begin imp_res_3_proc(); end;",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_parse",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "s",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci_execute",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"  \\"",
                        "unicode": false,
                        "value": "  ",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "item",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "row",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "item",
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "row",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "OCI_NUM",
                  "resolution": "uqn",
                },
                "right": Name {
                  "kind": "name",
                  "name": "OCI_RETURN_NULLS",
                  "resolution": "uqn",
                },
                "type": "+",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "oci_fetch_array",
              "resolution": "uqn",
            },
          },
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmtarray",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop procedure imp_res_3_proc\\"",
                "unicode": false,
                "value": "drop procedure imp_res_3_proc",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table imp_res_3_tab_1\\"",
                "unicode": false,
                "value": "drop table imp_res_3_tab_1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table imp_res_3_tab_2\\"",
                "unicode": false,
                "value": "drop table imp_res_3_tab_2",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmtarray",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci8_test_sql_execute",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
