// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests FFI 031: bit-fields packing 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "expected_size",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "type",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "size",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "type",
                            },
                          ],
                          "kind": "call",
                          "what": StaticLookup {
                            "kind": "staticlookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "new",
                            },
                            "what": Name {
                              "kind": "name",
                              "name": "FFI",
                              "resolution": "uqn",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "sizeof",
                        },
                        "what": Name {
                          "kind": "name",
                          "name": "FFI",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"FAIL: sizeof($type) != $expected_size ($size)\\\\n\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "FAIL: sizeof(",
                                  "unicode": false,
                                  "value": "FAIL: sizeof(",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "type",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": ") != ",
                                  "unicode": false,
                                  "value": ") != ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "expected_size",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": " (",
                                  "unicode": false,
                                  "value": " (",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "size",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": ")\\\\n",
                                  "unicode": false,
                                  "value": ")",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "size",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "expected_size",
                    },
                    "type": "!==",
                  },
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Bin {
                                "kind": "bin",
                                "left": Bin {
                                  "kind": "bin",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "type",
                                  },
                                  "right": String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"=>\\"",
                                    "unicode": false,
                                    "value": "=>",
                                  },
                                  "type": ".",
                                },
                                "right": Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "e",
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "get_class",
                                    "resolution": "uqn",
                                  },
                                },
                                "type": ".",
                              },
                              "right": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\": \\"",
                                "unicode": false,
                                "value": ": ",
                              },
                              "type": ".",
                            },
                            "right": Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "getMessage",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "e",
                                },
                              },
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\n\\"",
                            "unicode": false,
                            "value": "
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Throwable",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_size",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {int a:2; int b:2;}\\"",
            "unicode": false,
            "value": "struct {int a:2; int b:2;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {int a:2; int b:2;}\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {int a:2; int b:2;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct {int a:2; unsigned long long :60; int b:2;}\\"",
            "unicode": false,
            "value": "struct {int a:2; unsigned long long :60; int b:2;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "9",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"struct __attribute__((packed)) {int a:2; unsigned long long :64; int b:2;}\\"",
            "unicode": false,
            "value": "struct __attribute__((packed)) {int a:2; unsigned long long :64; int b:2;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union {int a:2; int b:8;}\\"",
            "unicode": false,
            "value": "union {int a:2; int b:8;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"union __attribute__((packed)) {int a:2; int b:8;}\\"",
            "unicode": false,
            "value": "union __attribute__((packed)) {int a:2; int b:8;}",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_size",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
ok",
      "value": "ok",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
