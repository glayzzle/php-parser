// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #80447 (Strange out of memory error when running with JIT) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "depth",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Return {
                  "expr": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": true,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "depth",
              },
            },
          },
          ExpressionStatement {
            "expression": Post {
              "kind": "post",
              "type": "-",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "depth",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "depth",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "createTree",
                      "resolution": "uqn",
                    },
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "depth",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "createTree",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "createTree",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "treeNode",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1",
                },
                "right": RetIf {
                  "falseExpr": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "treeNode",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "checkTree",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "retif",
                  "parenthesizedExpression": true,
                  "test": Bin {
                    "kind": "bin",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "what": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "treeNode",
                        },
                      },
                    },
                    "right": NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    "type": "===",
                  },
                  "trueExpr": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                "type": "+",
              },
              "right": RetIf {
                "falseExpr": Call {
                  "arguments": Array [
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "treeNode",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "checkTree",
                    "resolution": "uqn",
                  },
                },
                "kind": "retif",
                "parenthesizedExpression": true,
                "test": Bin {
                  "kind": "bin",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "treeNode",
                      },
                    },
                  },
                  "right": NullKeyword {
                    "kind": "nullkeyword",
                    "raw": "null",
                  },
                  "type": "===",
                },
                "trueExpr": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              "type": "+",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "checkTree",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tree",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "12",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "createTree",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "tree",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "checkTree",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
