// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests sni_server with separate pk and cert 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $ctx = stream_context_create(['ssl' => [
        'local_cert' => __DIR__ . '/domain1.pem',
        'SNI_server_certs' => [
            \\"cs.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_cs_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_cs_key.pem\\"
            ],
            \\"uk.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_uk_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_uk_key.pem\\"
            ],
            \\"us.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_us_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_us_key.pem\\"
            ],
        ]
    ]]);
    $server = stream_socket_server('tls://127.0.0.1:64321', $errno, $errstr, $flags, $ctx);
    phpt_notify();
    for ($i=0; $i < 3; $i++) {
        @stream_socket_accept($server, 3);
    }
CODE",
          "value": "    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;
    $ctx = stream_context_create(['ssl' => [
        'local_cert' => __DIR__ . '/domain1.pem',
        'SNI_server_certs' => [
            \\"cs.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_cs_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_cs_key.pem\\"
            ],
            \\"uk.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_uk_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_uk_key.pem\\"
            ],
            \\"us.php.net\\" => [
                'local_cert' => __DIR__ . \\"/sni_server_us_cert.pem\\",
                'local_pk' => __DIR__ . \\"/sni_server_us_key.pem\\"
            ],
        ]
    ]]);
    $server = stream_socket_server('tls://127.0.0.1:64321', $errno, $errstr, $flags, $ctx);
    phpt_notify();
    for ($i=0; $i < 3; $i++) {
        @stream_socket_accept($server, 3);
    }",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $flags = STREAM_CLIENT_CONNECT;
    $ctxArr = [
        'cafile' => __DIR__ . '/sni_server_ca.pem',
        'capture_peer_cert' => true
    ];
    phpt_wait();
    $ctxArr['peer_name'] = 'cs.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);
    $ctxArr['peer_name'] = 'uk.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = @stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);
    $ctxArr['peer_name'] = 'us.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = @stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);
CODE",
          "value": "    $flags = STREAM_CLIENT_CONNECT;
    $ctxArr = [
        'cafile' => __DIR__ . '/sni_server_ca.pem',
        'capture_peer_cert' => true
    ];
    phpt_wait();
    $ctxArr['peer_name'] = 'cs.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);
    $ctxArr['peer_name'] = 'uk.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = @stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);
    $ctxArr['peer_name'] = 'us.php.net';
    $ctx = stream_context_create(['ssl' => $ctxArr]);
    $client = @stream_socket_client(\\"tls://127.0.0.1:64321\\", $errno, $errstr, 1, $flags, $ctx);
    $cert = stream_context_get_options($ctx)['ssl']['peer_certificate'];
    var_dump(openssl_x509_parse($cert)['subject']['CN']);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "serverCode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
