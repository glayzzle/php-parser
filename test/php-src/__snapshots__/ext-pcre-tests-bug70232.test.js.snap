// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #70232 (Incorrect bump-along behavior with \\K and empty string match) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pattern",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'~(?: |\\\\G)\\\\d\\\\B\\\\K~'",
          "unicode": false,
          "value": "~(?: |\\\\G)\\\\d\\\\B\\\\K~",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"123 a123 1234567 b123 123\\"",
          "unicode": false,
          "value": "123 a123 1234567 b123 123",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "pattern",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "subject",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match_all",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "pattern",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"*\\"",
                "unicode": false,
                "value": "*",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "subject",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_replace",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "pattern",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "subject",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_split",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
