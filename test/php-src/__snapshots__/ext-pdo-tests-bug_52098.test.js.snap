// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests PDO Common: Bug #52098 Own PDOStatement implementation ignore __call() 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'REDIR_TEST_DIR='",
                  "unicode": false,
                  "value": "REDIR_TEST_DIR=",
                },
                "right": Magic {
                  "kind": "magic",
                  "raw": "__DIR__",
                  "value": "__DIR__",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/../../pdo/tests/'",
                "unicode": false,
                "value": "/../../pdo/tests/",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "putenv",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'REDIR_TEST_DIR'",
              "unicode": false,
              "value": "REDIR_TEST_DIR",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "getenv",
            "resolution": "uqn",
          },
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "===",
      },
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'REDIR_TEST_DIR'",
                "unicode": false,
                "value": "REDIR_TEST_DIR",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "getenv",
              "resolution": "uqn",
            },
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pdo_test.inc'",
            "unicode": false,
            "value": "pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "PDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"DROP TABLE test\\"",
              "unicode": false,
              "value": "DROP TABLE test",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "exec",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"CREATE TABLE test (x int)\\"",
            "unicode": false,
            "value": "CREATE TABLE test (x int)",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"INSERT INTO test VALUES (1)\\"",
            "unicode": false,
            "value": "INSERT INTO test VALUES (1)",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "name",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "arguments",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"Calling object method '$name'\\" ",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "Calling object method '",
                              "unicode": false,
                              "value": "Calling object method '",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "name",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'",
                              "unicode": false,
                              "value": "'",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                      "right": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "', '",
                            "unicode": false,
                            "value": ", ",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "arguments",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "implode",
                          "resolution": "uqn",
                        },
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__call",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "PDOStatement",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "MyStatement",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "derived",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'SELECT * FROM test'",
              "unicode": false,
              "value": "SELECT * FROM test",
            },
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "ATTR_STATEMENT_CLASS",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "PDO",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'MyStatement'",
                          "unicode": false,
                          "value": "MyStatement",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "derived",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "derived",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fetchAll",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "derived",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "derived",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "null",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_STATEMENT_CLASS",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'MyStatement'",
                  "unicode": false,
                  "value": "MyStatement",
                },
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'SELECT * FROM test'",
              "unicode": false,
              "value": "SELECT * FROM test",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "bar",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fetchAll",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "r",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "null",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "obj",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "MyStatement",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "lucky",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"DROP TABLE test\\"",
            "unicode": false,
            "value": "DROP TABLE test",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
