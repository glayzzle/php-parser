// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Indirect call with 'Class::method' syntax with class in namespace 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        Class {
          "attrGroups": Array [],
          "body": Array [
            Method {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"Static method called!\\\\n\\"",
                        "unicode": false,
                        "value": "Static method called!
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": true,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "staticMethod",
              },
              "nullable": false,
              "type": null,
              "visibility": "public",
            },
            Method {
              "arguments": Array [
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "arg1",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "arg2",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "arg3",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
              ],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"Static method called with args: %s, %s, %s\\\\n\\"",
                          "unicode": false,
                          "value": "Static method called with args: %s, %s, %s
",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "arg1",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "arg2",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "arg3",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": true,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "staticMethodWithArgs",
              },
              "nullable": false,
              "type": null,
              "visibility": "public",
            },
          ],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": false,
          "isFinal": false,
          "kind": "class",
          "name": Identifier {
            "kind": "identifier",
            "name": "TestClass",
          },
        },
      ],
      "kind": "namespace",
      "name": "TestNamespace",
      "withBrackets": true,
    },
    Namespace {
      "children": Array [
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
            "operator": "=",
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'TestNamespace\\\\TestClass::staticMethod'",
              "unicode": false,
              "value": "TestNamespace\\\\TestClass::staticMethod",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
            "operator": "=",
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'testnamespace\\\\testclass::staticmethod'",
              "unicode": false,
              "value": "testnamespace\\\\testclass::staticmethod",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "args",
            },
            "operator": "=",
            "right": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'arg1'",
                    "unicode": false,
                    "value": "arg1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'arg2'",
                    "unicode": false,
                    "value": "arg2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'arg3'",
                    "unicode": false,
                    "value": "arg3",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
            "operator": "=",
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'TestNamespace\\\\TestClass::staticMethodWithArgs'",
              "unicode": false,
              "value": "TestNamespace\\\\TestClass::staticMethodWithArgs",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "args",
                },
              },
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "args",
                },
              },
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "2",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "args",
                },
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              variadic {
                "kind": "variadic",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "args",
                },
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "kind": "namespace",
      "name": "CallNamespace",
      "withBrackets": true,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
