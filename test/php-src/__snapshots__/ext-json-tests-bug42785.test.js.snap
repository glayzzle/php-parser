// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #42785 (Incorrect formatting of double values with non-english locales) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "LC_ALL",
            "resolution": "uqn",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"de_DE\\"",
            "unicode": false,
            "value": "de_DE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"de\\"",
            "unicode": false,
            "value": "de",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"german\\"",
            "unicode": false,
            "value": "german",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ge\\"",
            "unicode": false,
            "value": "ge",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"de_DE.ISO8859-1\\"",
            "unicode": false,
            "value": "de_DE.ISO8859-1",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ISO8859-1\\"",
            "unicode": false,
            "value": "ISO8859-1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "setlocale",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "100.10",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"bar\\"",
                "unicode": false,
                "value": "bar",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "json_encode",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "bar",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar1",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "bar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar1",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "100.10",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "b",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bar1",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"foo\\"",
          "unicode": false,
          "value": "foo",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "bar1",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "json_encode",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
