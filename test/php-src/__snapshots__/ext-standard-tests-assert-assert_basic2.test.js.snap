// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests assert() - basic - correct call back values before and after assert. 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"f2 called\\\\n\\"",
                "unicode": false,
                "value": "f2 called
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f2",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"f1 called\\\\n\\"",
                "unicode": false,
                "value": "f1 called
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f1",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "o",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "o",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"f2\\"",
                  "unicode": false,
                  "value": "f2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "n",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
