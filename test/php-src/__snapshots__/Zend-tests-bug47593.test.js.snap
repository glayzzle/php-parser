// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #47593 (interface_exists() returns false when using absolute namespace path) 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        ConstantStatement {
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "TEST",
              },
              "value": Number {
                "kind": "number",
                "value": "11",
              },
            },
          ],
          "kind": "constantstatement",
        },
        Class {
          "attrGroups": Array [],
          "body": Array [
            Method {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": false,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "xyz",
              },
              "nullable": false,
              "type": null,
              "visibility": "public",
            },
          ],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": false,
          "isFinal": false,
          "kind": "class",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
        },
        Interface {
          "attrGroups": Array [],
          "body": Array [],
          "extends": null,
          "kind": "interface",
          "name": Identifier {
            "kind": "identifier",
            "name": "baz",
          },
        },
        _Function {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "nullable": false,
          "type": null,
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'\\\\test\\\\baz'",
                    "unicode": false,
                    "value": "\\\\test\\\\baz",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "interface_exists",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'\\\\test\\\\bar'",
                    "unicode": false,
                    "value": "\\\\test\\\\bar",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "function_exists",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'\\\\test\\\\TEST'",
                    "unicode": false,
                    "value": "\\\\test\\\\TEST",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "constant",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'\\\\test\\\\TEST'",
                    "unicode": false,
                    "value": "\\\\test\\\\TEST",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "defined",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'TEST'",
                    "unicode": false,
                    "value": "TEST",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "defined",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "kind": "namespace",
      "name": "test",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
