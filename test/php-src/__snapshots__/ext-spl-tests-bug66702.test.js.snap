// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #66702 (RegexIterator inverted result works as expected) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"foo\\"",
                    "unicode": false,
                    "value": "foo",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"bar\\"",
                    "unicode": false,
                    "value": "bar",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"baz\\"",
                    "unicode": false,
                    "value": "baz",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\ArrayIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "it",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/^ba/\\"",
              "unicode": false,
              "value": "/^ba/",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\RegexIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "it2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "iterator_to_array",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "it",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/^ba/\\"",
              "unicode": false,
              "value": "/^ba/",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "INVERT_MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\RegexIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "it2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "iterator_to_array",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"foo\\"",
                    "unicode": false,
                    "value": "foo",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"bar\\"",
                    "unicode": false,
                    "value": "bar",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"baz\\"",
                    "unicode": false,
                    "value": "baz",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "3",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\ArrayIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "it",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/^ba/\\"",
              "unicode": false,
              "value": "/^ba/",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "USE_KEY",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\RegexIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "it2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "iterator_to_array",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "it",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/^ba/\\"",
              "unicode": false,
              "value": "/^ba/",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "MATCH",
              },
              "what": Name {
                "kind": "name",
                "name": "\\\\RegexIterator",
                "resolution": "fqn",
              },
            },
            Bin {
              "kind": "bin",
              "left": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "USE_KEY",
                },
                "what": Name {
                  "kind": "name",
                  "name": "\\\\RegexIterator",
                  "resolution": "fqn",
                },
              },
              "right": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "INVERT_MATCH",
                },
                "what": Name {
                  "kind": "name",
                  "name": "\\\\RegexIterator",
                  "resolution": "fqn",
                },
              },
              "type": "|",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "\\\\RegexIterator",
            "resolution": "fqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "it2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "iterator_to_array",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
