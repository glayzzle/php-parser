// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #78154: SEND_VAR_NO_REF does not always send reference 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        Try {
          "always": null,
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                        Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "c",
                          },
                          "operator": "=",
                          "right": Number {
                            "kind": "number",
                            "value": "0x44444444",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "similar_text",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_dump",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "c",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_dump",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "catches": Array [
            Catch {
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"Exception: \\"",
                            "unicode": false,
                            "value": "Exception: ",
                          },
                          "right": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                        "type": ".",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "kind": "catch",
              "variable": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "what": Array [
                Name {
                  "kind": "name",
                  "name": "Throwable",
                  "resolution": "uqn",
                },
              ],
            },
          ],
          "kind": "try",
        },
      ],
      "kind": "namespace",
      "name": Array [
        "",
      ],
      "withBrackets": true,
    },
    Namespace {
      "children": Array [
        Try {
          "always": null,
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'a'",
                          "unicode": false,
                          "value": "a",
                        },
                        Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "d",
                          },
                          "operator": "=",
                          "right": Number {
                            "kind": "number",
                            "value": "0x44444444",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "similar_text",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_dump",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "d",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_dump",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "catches": Array [
            Catch {
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"Exception: \\"",
                            "unicode": false,
                            "value": "Exception: ",
                          },
                          "right": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                        "type": ".",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "kind": "catch",
              "variable": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "what": Array [
                Name {
                  "kind": "name",
                  "name": "\\\\Throwable",
                  "resolution": "fqn",
                },
              ],
            },
          ],
          "kind": "try",
        },
      ],
      "kind": "namespace",
      "name": "Foo",
      "withBrackets": true,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
