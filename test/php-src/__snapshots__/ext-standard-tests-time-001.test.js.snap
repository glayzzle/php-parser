// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests microtime() function 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "passed",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "failed",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "last_m",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "last_t",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_time_limit",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": List {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "micro",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "time",
                    },
                  },
                ],
                "kind": "list",
                "shortForm": false,
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\" \\"",
                    "unicode": false,
                    "value": " ",
                  },
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "microtime",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "explode",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": If {
              "alternate": null,
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "result",
                      },
                      "operator": ".=",
                      "right": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'%06d'",
                              "unicode": false,
                              "value": "%06d",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "sprintf",
                            "resolution": "uqn",
                          },
                        },
                        "right": Encapsed {
                          "kind": "encapsed",
                          "raw": "\\": $time $micro < $last_t $last_m\\\\n\\"",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": ": ",
                                "unicode": false,
                                "value": ": ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "time",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": " ",
                                "unicode": false,
                                "value": " ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "micro",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": " < ",
                                "unicode": false,
                                "value": " < ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "last_t",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": " ",
                                "unicode": false,
                                "value": " ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "last_m",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "\\\\n",
                                "unicode": false,
                                "value": "",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                        "type": ".",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Post {
                  "kind": "post",
                  "type": "+",
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "failed",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "10",
                },
                "type": "<=",
              },
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "passed",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "time",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "last_t",
                },
                "type": ">",
              },
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "time",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "last_t",
                  },
                  "type": "==",
                },
                "parenthesizedExpression": true,
                "right": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "micro",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "last_m",
                  },
                  "type": ">=",
                },
                "type": "&&",
              },
              "type": "||",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "last_m",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "micro",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "last_t",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "time",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "100000",
          },
          "type": "<=",
        },
      ],
    },
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Passed: $passed\\\\n\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "Passed: ",
                "unicode": false,
                "value": "Passed: ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "passed",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\\\n",
                "unicode": false,
                "value": "",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Failed: $failed\\\\n\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "Failed: ",
                "unicode": false,
                "value": "Failed: ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "failed",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\\\n",
                "unicode": false,
                "value": "",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
