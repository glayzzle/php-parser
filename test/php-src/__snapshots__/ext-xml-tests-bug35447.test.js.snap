// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #35447 (xml_parse_into_struct() chokes on the UTF-8 BOM) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "END_OF_XML",
          "raw": "<<<END_OF_XML
\\\\xEF\\\\xBB\\\\xBF<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?\\\\x3e
<!DOCTYPE bundle [
    <!ELEMENT bundle (resource)+>
    <!ELEMENT resource (#PCDATA)>
    <!ATTLIST resource
              key CDATA #REQUIRED
              type (literal|pattern|sub) \\"literal\\"
              >
]>
<resource key=\\"rSeeYou\\">A bient&amp;244;t</resource>
END_OF_XML",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\\\xEF\\\\xBB\\\\xBF<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?\\\\x3e
<!DOCTYPE bundle [
    <!ELEMENT bundle (resource)+>
    <!ELEMENT resource (#PCDATA)>
    <!ATTLIST resource
              key CDATA #REQUIRED
              type (literal|pattern|sub) \\"literal\\"
              >
]>
<resource key=\\"rSeeYou\\">A bient&amp;244;t</resource>
",
                "unicode": false,
                "value": "ï»¿<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<!DOCTYPE bundle [
    <!ELEMENT bundle (resource)+>
    <!ELEMENT resource (#PCDATA)>
    <!ATTLIST resource
              key CDATA #REQUIRED
              type (literal|pattern|sub) \\"literal\\"
              >
]>
<resource key=\\"rSeeYou\\">A bient&amp;244;t</resource>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "parser",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-8'",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "xml_parser_create_ns",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "parser",
          },
          Name {
            "kind": "name",
            "name": "XML_OPTION_CASE_FOLDING",
            "resolution": "uqn",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_parser_set_option",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "parser",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "data",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "vals",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "index",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "xml_parse_into_struct",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "parser",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "xml_parser_free",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "vals",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
