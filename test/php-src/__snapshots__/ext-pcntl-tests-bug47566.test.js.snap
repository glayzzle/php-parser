// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #47566 (return value of pcntl_wexitstatus()) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pcntl_fork",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": If {
        "alternate": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Exit {
                "expression": Number {
                  "kind": "number",
                  "value": "128",
                },
                "kind": "exit",
                "useDie": false,
              },
              "kind": "expressionstatement",
            },
          ],
          "kind": "block",
        },
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "epid",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Unary {
                      "kind": "unary",
                      "type": "-",
                      "what": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "status",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "pcntl_waitpid",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "status",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pcntl_wexitstatus",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Unable to fork\\"",
                "unicode": false,
                "value": "Unable to fork",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "right": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1",
          },
        },
        "type": "==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
