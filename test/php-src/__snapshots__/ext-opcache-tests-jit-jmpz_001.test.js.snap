// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests JIT JMPZ: JMPZ may require code for "smart branch" and at the same time be a target of another JMP. 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        _Function {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "modelData",
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ret",
                  },
                  "operator": "=",
                  "right": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "modelData",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "is_array",
                              "resolution": "uqn",
                            },
                          },
                          "parenthesizedExpression": true,
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "modelData",
                            },
                            "right": Name {
                              "kind": "name",
                              "name": "\\\\Countable",
                              "resolution": "fqn",
                            },
                            "type": "instanceof",
                          },
                          "type": "||",
                        },
                        "parenthesizedExpression": true,
                        "right": Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                        "type": "&&",
                      },
                      "type": "||",
                    },
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                    "type": "||",
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ret",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "nullable": false,
          "type": null,
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "test",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "var_dump",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "kind": "namespace",
      "name": "A",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
