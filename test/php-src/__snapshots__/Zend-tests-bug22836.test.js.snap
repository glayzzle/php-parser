// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #22836 (returning references to NULL) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"foo\\"",
                "unicode": false,
                "value": "foo",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Print {
              "expression": Encapsed {
                "kind": "encapsed",
                "raw": "\\"'$x'\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'",
                      "unicode": false,
                      "value": "'",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'\\\\n",
                      "unicode": false,
                      "value": "'",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
              "parenthesizedExpression": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": true,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f",
      },
      "nullable": false,
      "type": null,
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": AssignRef {
              "kind": "assignref",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "f",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "8",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
