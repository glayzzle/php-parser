// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Adding a class method object return type 1`] = `
Program {
  "children": Array [
    Interface {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": null,
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "object",
            "raw": "object",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "kind": "interface",
      "name": Identifier {
        "kind": "identifier",
        "name": "One",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "object",
            "raw": "object",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": Array [
        Name {
          "kind": "name",
          "name": "One",
          "resolution": "uqn",
        },
      ],
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Two",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "three",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Class {
            "attrGroups": Array [],
            "body": Array [
              Method {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Number {
                        "kind": "number",
                        "value": "12345",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isAbstract": false,
                "isFinal": false,
                "isStatic": false,
                "kind": "method",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "a",
                },
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "object",
                  "raw": "object",
                },
                "visibility": "public",
              },
            ],
            "extends": Name {
              "kind": "name",
              "name": "Two",
              "resolution": "uqn",
            },
            "implements": null,
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "three",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
