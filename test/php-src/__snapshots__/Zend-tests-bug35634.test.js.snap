// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #35634 (Erroneous "Class declarations may not be nested" error raised) 1`] = `
Program {
  "children": Array [
    If {
      "alternate": If {
        "alternate": Block {
          "children": Array [
            _Function {
              "arguments": Array [
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "errorNumber",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "errorMessage",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "fileName",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "lineNumber",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": null,
                  "variadic": false,
                },
              ],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"pass3\\"",
                          "unicode": false,
                          "value": "pass3",
                        },
                        Number {
                          "kind": "number",
                          "value": "1",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "define",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  ExpressionStatement {
                    "expression": Include {
                      "kind": "include",
                      "once": false,
                      "require": false,
                      "target": Magic {
                        "kind": "magic",
                        "parenthesizedExpression": true,
                        "raw": "__FILE__",
                        "value": "__FILE__",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  ExpressionStatement {
                    "expression": Exit {
                      "expression": Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"Error: $errorMessage ($fileName:$lineNumber)\\\\n\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "Error: ",
                              "unicode": false,
                              "value": "Error: ",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "errorMessage",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": " (",
                              "unicode": false,
                              "value": " (",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "fileName",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ":",
                              "unicode": false,
                              "value": ":",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "lineNumber",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": ")\\\\n",
                              "unicode": false,
                              "value": ")",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                      "kind": "exit",
                      "useDie": true,
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "kind": "function",
              "name": Identifier {
                "kind": "identifier",
                "name": "errorHandler",
              },
              "nullable": false,
              "type": null,
            },
            ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'errorHandler'",
                    "unicode": false,
                    "value": "errorHandler",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "set_error_handler",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"pass2\\"",
                    "unicode": false,
                    "value": "pass2",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "define",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Include {
                "kind": "include",
                "once": false,
                "require": false,
                "target": Magic {
                  "kind": "magic",
                  "parenthesizedExpression": true,
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Print {
                "expression": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"ok\\\\n\\"",
                  "unicode": false,
                  "value": "ok
",
                },
                "kind": "print",
              },
              "kind": "expressionstatement",
            },
          ],
          "kind": "block",
        },
        "body": Block {
          "children": Array [
            Class {
              "attrGroups": Array [],
              "body": Array [
                Method {
                  "arguments": Array [],
                  "attrGroups": Array [],
                  "body": Block {
                    "children": Array [],
                    "kind": "block",
                  },
                  "byref": false,
                  "isAbstract": false,
                  "isFinal": false,
                  "isStatic": false,
                  "kind": "method",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "__construct",
                  },
                  "nullable": false,
                  "type": null,
                  "visibility": "",
                },
                Method {
                  "arguments": Array [],
                  "attrGroups": Array [],
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "__construct",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "byref": false,
                  "isAbstract": false,
                  "isFinal": false,
                  "isStatic": false,
                  "kind": "method",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "TestClass",
                  },
                  "nullable": false,
                  "type": null,
                  "visibility": "",
                },
              ],
              "extends": null,
              "implements": null,
              "isAbstract": false,
              "isAnonymous": false,
              "isFinal": false,
              "kind": "class",
              "name": Identifier {
                "kind": "identifier",
                "name": "TestClass",
              },
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"pass2\\"",
              "unicode": false,
              "value": "pass2",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "defined",
            "resolution": "uqn",
          },
        },
      },
      "body": Block {
        "children": Array [
          Class {
            "attrGroups": Array [],
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "name": Identifier {
              "kind": "identifier",
              "name": "ErrorClass",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"pass3\\"",
            "unicode": false,
            "value": "pass3",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "defined",
          "resolution": "uqn",
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
