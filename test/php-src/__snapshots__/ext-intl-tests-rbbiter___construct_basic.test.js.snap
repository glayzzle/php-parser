// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests IntlRuleBasedBreakIterator::__construct: basic test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"intl.default_locale\\"",
            "unicode": false,
            "value": "intl.default_locale",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"pt_PT\\"",
            "unicode": false,
            "value": "pt_PT",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rules",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "RULES",
          "raw": "<<<RULES
\\\\$LN = [[:letter:] [:number:]];
\\\\$S = [.;,:];
!!forward;
\\\\$LN+ {1};
\\\\$S+ {42};
!!reverse;
\\\\$LN+ {1};
\\\\$S+ {42};
!!safe_forward;
!!safe_reverse;
RULES",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\\\$LN = [[:letter:] [:number:]];
\\\\$S = [.;,:];
!!forward;
\\\\$LN+ {1};
\\\\$S+ {42};
!!reverse;
\\\\$LN+ {1};
\\\\$S+ {42};
!!safe_forward;
!!safe_reverse;
",
                "unicode": false,
                "value": "$LN = [[:letter:] [:number:]];
$S = [.;,:];
!!forward;
$LN+ {1};
$S+ {42};
!!reverse;
$LN+ {1};
$S+ {42};
!!safe_forward;
!!safe_reverse;",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rbbi",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "rules",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "IntlRuleBasedBreakIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "rbbi",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "get_class",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'[\\\\p{Letter}\\\\uFFFD]+;[:number:]+'",
                    "unicode": false,
                    "value": "[\\\\p{Letter}\\\\uFFFD]+;[:number:]+",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'aoeu'",
                    "unicode": false,
                    "value": "aoeu",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "IntlRuleBasedBreakIterator",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "IntlException",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
