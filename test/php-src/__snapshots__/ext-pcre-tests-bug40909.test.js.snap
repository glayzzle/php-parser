// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #40909 (pcre 7.0 regression) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pattern",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"/\\\\s([\\\\w_\\\\.\\\\/]+)(?:=([\\\\'\\\\\\"]?(?:[\\\\w\\\\d\\\\s\\\\?=\\\\(\\\\)\\\\.,'_#\\\\/\\\\\\\\:;&-]|(?:\\\\\\\\\\\\\\\\\\\\\\"|\\\\\\\\\\\\')?)+[\\\\'\\\\\\"]?))?/\\"",
          "unicode": false,
          "value": "/\\\\s([\\\\w_\\\\.\\\\/]+)(?:=([\\\\'\\"]?(?:[\\\\w\\\\d\\\\s\\\\?=\\\\(\\\\)\\\\.,'_#\\\\/\\\\:;&-]|(?:\\\\\\\\\\\\\\"|\\\\\\\\')?)+[\\\\'\\\\\\"]?))?/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "context",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"<simpletag an_attribute=\\\\\\"simpleValueInside\\\\\\">\\"",
          "unicode": false,
          "value": "<simpletag an_attribute=\\"simpleValueInside\\\\\\">",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "match",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "result",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "match",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "pattern",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "context",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "match",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match_all",
            "resolution": "uqn",
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
