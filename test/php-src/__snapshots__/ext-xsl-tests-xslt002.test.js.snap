// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test 2: Transform To HTML String 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 2: Transform To HTML String\\"",
          "unicode": false,
          "value": "Test 2: Transform To HTML String",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"prepare.inc\\"",
          "unicode": false,
          "value": "prepare.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xp",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "xsl",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "domxpath",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/xsl:stylesheet/xsl:output/@method\\"",
              "unicode": false,
              "value": "/xsl:stylesheet/xsl:output/@method",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xp",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"No or more than one xsl:output/@method found\\"",
                "unicode": false,
                "value": "No or more than one xsl:output/@method found",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "length",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "1",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "value",
          },
          "what": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "item",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "res",
              },
            },
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"html\\"",
          "unicode": false,
          "value": "html",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xsl",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "importStylesheet",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "proc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "transformToXml",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "proc",
            },
          },
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
