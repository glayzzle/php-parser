// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Fix for #77627 method_exists on Closure::__invoke without object returns false 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "class",
                },
                "what": Name {
                  "kind": "name",
                  "name": "Closure",
                  "resolution": "uqn",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"__invoke\\"",
                "unicode": false,
                "value": "__invoke",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "method_exists",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "class",
                },
                "what": Name {
                  "kind": "name",
                  "name": "Closure",
                  "resolution": "uqn",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"__INVOKE\\"",
                "unicode": false,
                "value": "__INVOKE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "method_exists",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "closure",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "closure",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"__INVOKE\\"",
                "unicode": false,
                "value": "__INVOKE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "method_exists",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
