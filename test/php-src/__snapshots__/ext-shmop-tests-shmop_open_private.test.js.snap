// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests shmop_open with IPC_PRIVATE creates private SHM 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "write",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'test'",
          "unicode": false,
          "value": "test",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "shm1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "0",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'c'",
              "unicode": false,
              "value": "c",
            },
            Number {
              "kind": "number",
              "value": "0777",
            },
            Number {
              "kind": "number",
              "value": "1024",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "shmop_open",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "shm1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "write",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "shmop_write",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "shm2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "0",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'c'",
              "unicode": false,
              "value": "c",
            },
            Number {
              "kind": "number",
              "value": "0777",
            },
            Number {
              "kind": "number",
              "value": "1024",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "shmop_open",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "read",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "shm2",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Number {
              "kind": "number",
              "value": "4",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "shmop_read",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "read",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "is_string",
                "resolution": "uqn",
              },
            },
            "right": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "read",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "write",
              },
              "type": "!==",
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
