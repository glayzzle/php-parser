// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #47174 (base64_decode() interprets pad char in mid string as terminator) 1`] = `
Program {
  "children": Array [
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Invalid Signature\\\\n\\"",
                "unicode": false,
                "value": "Invalid Signature
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Same octet data - Signature Valid\\\\n\\"",
                "unicode": false,
                "value": "Same octet data - Signature Valid
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"dGVzdA==\\"",
              "unicode": false,
              "value": "dGVzdA==",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"dGVzdA==CRAP\\"",
              "unicode": false,
              "value": "dGVzdA==CRAP",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "in",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"foo\\"",
                  "unicode": false,
                  "value": "foo",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "base64_encode",
                "resolution": "uqn",
              },
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'=='",
              "unicode": false,
              "value": "==",
            },
            "type": ".",
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"bar\\"",
                "unicode": false,
                "value": "bar",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "base64_encode",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "in",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "in",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "base64_decode",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
