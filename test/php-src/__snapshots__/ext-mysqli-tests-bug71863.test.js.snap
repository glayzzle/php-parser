// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #71863 Segfault when EXPLAIN with "Unknown Column" Error 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"connect.inc\\"",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "req",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "host",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "passwd",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "port",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "socket",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "my_mysqli_connect",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "req",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"DROP TABLE IF EXISTS test_bug_71863\\"",
              "unicode": false,
              "value": "DROP TABLE IF EXISTS test_bug_71863",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mysqli_query",
            "resolution": "uqn",
          },
        },
        "right": Exit {
          "expression": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "req",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_error",
              "resolution": "uqn",
            },
          },
          "kind": "exit",
          "useDie": true,
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "req",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"CREATE TABLE test_bug_71863 (id INT UNSIGNED NOT NULL DEFAULT 0)\\"",
              "unicode": false,
              "value": "CREATE TABLE test_bug_71863 (id INT UNSIGNED NOT NULL DEFAULT 0)",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mysqli_query",
            "resolution": "uqn",
          },
        },
        "right": Exit {
          "expression": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "req",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_error",
              "resolution": "uqn",
            },
          },
          "kind": "exit",
          "useDie": true,
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "req",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"EXPLAIN SELECT \`id\` FROM \`test_bug_71863\` WHERE \`owner_id\` = '2' AND \`object_id\` = '1' AND type = '0'\\"",
              "unicode": false,
              "value": "EXPLAIN SELECT \`id\` FROM \`test_bug_71863\` WHERE \`owner_id\` = '2' AND \`object_id\` = '1' AND type = '0'",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mysqli_query",
            "resolution": "uqn",
          },
        },
        "right": Exit {
          "expression": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "req",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mysqli_error",
                "resolution": "uqn",
              },
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            "type": ".",
          },
          "kind": "exit",
          "useDie": true,
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
