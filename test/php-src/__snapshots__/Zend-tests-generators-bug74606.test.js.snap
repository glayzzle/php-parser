// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #74606 (Segfault within try/catch/finally nesting in Generators) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "array",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"foo\\"",
                      "unicode": false,
                      "value": "foo",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "array",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"bar\\"",
                "unicode": false,
                "value": "bar",
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                Try {
                  "always": null,
                  "body": Block {
                    "children": Array [
                      Try {
                        "always": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"fin $item\\\\n\\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "fin ",
                                        "unicode": false,
                                        "value": "fin ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "item",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "simple",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "\\\\n",
                                        "unicode": false,
                                        "value": "",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                          ],
                          "kind": "block",
                        },
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Yield {
                                "key": null,
                                "kind": "yield",
                                "value": null,
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "catches": Array [],
                        "kind": "try",
                      },
                    ],
                    "kind": "block",
                  },
                  "catches": Array [
                    Catch {
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"catch\\\\n\\"",
                                "unicode": false,
                                "value": "catch
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                          Continue {
                            "kind": "continue",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "catch",
                      "variable": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                      "what": Array [
                        Name {
                          "kind": "name",
                          "name": "\\\\Exception",
                          "resolution": "fqn",
                        },
                      ],
                    },
                  ],
                  "kind": "try",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "array",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "item",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          New {
            "arguments": Array [],
            "kind": "new",
            "what": Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "throw",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "gen",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
