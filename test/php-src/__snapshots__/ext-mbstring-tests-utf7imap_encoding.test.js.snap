// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of mUTF-7 (IMAP) encoding verification and conversion 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "utf8",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "utf8",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-8'",
                  "unicode": false,
                  "value": "UTF-8",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mb_convert_encoding",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "utf16BE",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "str",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'='",
                  "unicode": false,
                  "value": "=",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "''",
                  "unicode": false,
                  "value": "",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'/'",
                      "unicode": false,
                      "value": "/",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "','",
                      "unicode": false,
                      "value": ",",
                    },
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "str",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "base64_encode",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_replace",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "str_replace",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "mBase64",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bothWays",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF7-IMAP'",
                  "unicode": false,
                  "value": "UTF7-IMAP",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-8'",
                  "unicode": false,
                  "value": "UTF-8",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bothWays",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testValid",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "to",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF7-IMAP'",
                  "unicode": false,
                  "value": "UTF7-IMAP",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-8'",
                  "unicode": false,
                  "value": "UTF-8",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "testInvalid",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Identification passes on empty string... good start!\\\\n\\"",
          "unicode": false,
          "value": "Identification passes on empty string... good start!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x26",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x20",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7E",
          },
          "type": "<=",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing all valid single-character ASCII strings... check!\\\\n\\"",
          "unicode": false,
          "value": "Testing all valid single-character ASCII strings... check!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"%\\"",
              "unicode": false,
              "value": "%",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "testInvalid",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x20",
          },
          "type": "<",
        },
      ],
    },
    For {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"%\\"",
              "unicode": false,
              "value": "%",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "testInvalid",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x7F",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Non-ASCII characters convert to illegal char marker... yes!\\\\n\\"",
          "unicode": false,
          "value": "Non-ASCII characters convert to illegal char marker... yes!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"&\\"",
                        "unicode": false,
                        "value": "&",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&\\"",
            "unicode": false,
            "value": "&",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"& can be Base64-encoded... yes!\\\\n\\"",
          "unicode": false,
          "value": "& can be Base64-encoded... yes!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&\\"",
            "unicode": false,
            "value": "&",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc&\\"",
            "unicode": false,
            "value": "abc&",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"&\\"",
              "unicode": false,
              "value": "&",
            },
            "right": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"ハムサンドイッチ\\"",
                      "unicode": false,
                      "value": "ハムサンドイッチ",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "utf16BE",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mBase64",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing unterminated & sections... yep!\\\\n\\"",
          "unicode": false,
          "value": "Testing unterminated & sections... yep!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x26",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"&\\"",
                      "unicode": false,
                      "value": "&",
                    },
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "i",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "chr",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "utf16BE",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "mBase64",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"-\\"",
                    "unicode": false,
                    "value": "-",
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"%\\"",
                  "unicode": false,
                  "value": "%",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x20",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7E",
          },
          "type": "<=",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing ASCII characters which are Base64-encoded... great!\\\\n\\"",
          "unicode": false,
          "value": "Testing ASCII characters which are Base64-encoded... great!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&-\\"",
            "unicode": false,
            "value": "&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&\\"",
            "unicode": false,
            "value": "&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc&-\\"",
            "unicode": false,
            "value": "abc&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc&\\"",
            "unicode": false,
            "value": "abc&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&-.&-\\"",
            "unicode": false,
            "value": "&-.&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&.&\\"",
            "unicode": false,
            "value": "&.&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing valid strings which use '&-' for '&'... good!\\\\n\\"",
          "unicode": false,
          "value": "Testing valid strings which use '&-' for '&'... good!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"我是打酱油的\\"",
                  "unicode": false,
                  "value": "我是打酱油的",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "utf16BE",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mBase64",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Erk!!\\"",
            "unicode": false,
            "value": "Erk!!",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "16",
        },
        "type": "!=",
      },
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x30",
                },
                "type": ">=",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x39",
                },
                "type": "<=",
              },
              "type": "&&",
            },
          },
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x41",
                },
                "type": ">=",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x5A",
                },
                "type": "<=",
              },
              "type": "&&",
            },
          },
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x61",
                },
                "type": ">=",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x7A",
                },
                "type": "<=",
              },
              "type": "&&",
            },
          },
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x2B",
                },
                "type": "==",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x2C",
                },
                "type": "==",
              },
              "type": "||",
            },
          },
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x2D",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"&\\"",
                        "unicode": false,
                        "value": "&",
                      },
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "testString",
                          },
                          Number {
                            "kind": "number",
                            "value": "0",
                          },
                          Number {
                            "kind": "number",
                            "value": "11",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "substr",
                          "resolution": "uqn",
                        },
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"-\\"",
                    "unicode": false,
                    "value": "-",
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF7-IMAP'",
                  "unicode": false,
                  "value": "UTF7-IMAP",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "identifyInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Identification fails when Base64 sections contain non-Base64 bytes... right!\\\\n\\"",
          "unicode": false,
          "value": "Identification fails when Base64 sections contain non-Base64 bytes... right!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x00\\"",
              "unicode": false,
              "value": "  ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Ouch!\\"",
            "unicode": false,
            "value": "Ouch!",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "4",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "testString",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "testString",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "testString",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "substr",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "testString",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "singleChar",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"１\\"",
              "unicode": false,
              "value": "１",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'ASCII'",
              "unicode": false,
              "value": "ASCII",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doubleChar",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x01\\"",
              "unicode": false,
              "value": " ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"That was supposed to be a surrogate pair\\"",
            "unicode": false,
            "value": "That was supposed to be a surrogate pair",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "doubleChar",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "4",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "singleChar",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "singleChar",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "singleChar",
                        },
                        "type": ".",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doubleChar",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "doubleChar",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "singleChar",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "singleChar",
                        },
                        "type": ".",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "doubleChar",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x00\\"",
              "unicode": false,
              "value": "  ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "testString",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"a\\"",
                "unicode": false,
                "value": "a",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UTF-16BE'",
                "unicode": false,
                "value": "UTF-16BE",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ASCII'",
                "unicode": false,
                "value": "ASCII",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mb_convert_encoding",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "testString",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "singleChar",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doubleChar",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "testString",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x00\\"",
              "unicode": false,
              "value": "  ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "testString",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                      Number {
                        "kind": "number",
                        "value": "2",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "substr",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "singleChar",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "testString",
                        },
                        Number {
                          "kind": "number",
                          "value": "0",
                        },
                        Number {
                          "kind": "number",
                          "value": "2",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "substr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "singleChar",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "testString",
                        },
                        Number {
                          "kind": "number",
                          "value": "0",
                        },
                        Number {
                          "kind": "number",
                          "value": "2",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "substr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ドーナツ\\"",
              "unicode": false,
              "value": "ドーナツ",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "utf16BE",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "testString",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strlen",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "-",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "substr",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "testString",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "testString",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"☺⛑\\"",
              "unicode": false,
              "value": "☺⛑",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "utf16BE",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"No good\\"",
            "unicode": false,
            "value": "No good",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "4",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "encoded",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "testString",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mBase64",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Don't like that\\"",
            "unicode": false,
            "value": "Don't like that",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "encoded",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "6",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "encoded",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "encoded",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "strlen",
                        "resolution": "uqn",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "type": "-",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "substr",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\",-\\"",
              "unicode": false,
              "value": ",-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF7-IMAP'",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "identifyInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Identification fails when UTF-16 text is invalid... no sweat!\\\\n\\"",
          "unicode": false,
          "value": "Identification fails when UTF-16 text is invalid... no sweat!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"☺\\"",
                        "unicode": false,
                        "value": "☺",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"☺\\"",
            "unicode": false,
            "value": "☺",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"饺子\\"",
                        "unicode": false,
                        "value": "饺子",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"饺子\\"",
            "unicode": false,
            "value": "饺子",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"１２３\\"",
                        "unicode": false,
                        "value": "１２３",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"１２３\\"",
            "unicode": false,
            "value": "１２３",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"ﾰﾱﾲﾳ\\"",
                        "unicode": false,
                        "value": "ﾰﾱﾲﾳ",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ﾰﾱﾲﾳ\\"",
            "unicode": false,
            "value": "ﾰﾱﾲﾳ",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "longChar1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x01\\"",
              "unicode": false,
              "value": " ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-16BE'",
              "unicode": false,
              "value": "UTF-16BE",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "longChar2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\\\x01\\\\x04\\\\x01\\"",
              "unicode": false,
              "value": " ",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-8'",
              "unicode": false,
              "value": "UTF-8",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-32BE'",
              "unicode": false,
              "value": "UTF-32BE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "longChar1",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "longChar2",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"饼\\"",
                          "unicode": false,
                          "value": "饼",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "longChar1",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"饼\\"",
              "unicode": false,
              "value": "饼",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "longChar2",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "longChar1",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"饼\\"",
                          "unicode": false,
                          "value": "饼",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "longChar2",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"饼\\"",
              "unicode": false,
              "value": "饼",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"☺\\"",
                            "unicode": false,
                            "value": "☺",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "utf16BE",
                          "resolution": "uqn",
                        },
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "longChar1",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"饼\\"",
                          "unicode": false,
                          "value": "饼",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"☺\\"",
                "unicode": false,
                "value": "☺",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "longChar2",
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"饼\\"",
              "unicode": false,
              "value": "饼",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"西瓜\\"",
                          "unicode": false,
                          "value": "西瓜",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "longChar1",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"西瓜\\"",
              "unicode": false,
              "value": "西瓜",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "longChar2",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"西瓜\\"",
                            "unicode": false,
                            "value": "西瓜",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "utf16BE",
                          "resolution": "uqn",
                        },
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "longChar1",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"☺\\"",
                          "unicode": false,
                          "value": "☺",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"西瓜\\"",
                "unicode": false,
                "value": "西瓜",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "longChar2",
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"☺\\"",
              "unicode": false,
              "value": "☺",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"西瓜\\"",
                            "unicode": false,
                            "value": "西瓜",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "utf16BE",
                          "resolution": "uqn",
                        },
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "longChar1",
                      },
                      "type": ".",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "longChar1",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"西瓜\\"",
                "unicode": false,
                "value": "西瓜",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "longChar2",
              },
              "type": ".",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "longChar2",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"&\\"",
                "unicode": false,
                "value": "&",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"西红柿\\"",
                          "unicode": false,
                          "value": "西红柿",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "utf16BE",
                        "resolution": "uqn",
                      },
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "longChar1",
                    },
                    "type": ".",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-\\"",
              "unicode": false,
              "value": "-",
            },
            "type": ".",
          },
          Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"西红柿\\"",
              "unicode": false,
              "value": "西红柿",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "longChar2",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"123&\\"",
                    "unicode": false,
                    "value": "123&",
                  },
                  "right": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"１２３\\"",
                            "unicode": false,
                            "value": "１２３",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "utf16BE",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mBase64",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"-abc&\\"",
                  "unicode": false,
                  "value": "-abc&",
                },
                "type": ".",
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"☺\\"",
                        "unicode": false,
                        "value": "☺",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "utf16BE",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mBase64",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"-.\\"",
              "unicode": false,
              "value": "-.",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"123１２３abc☺.\\"",
            "unicode": false,
            "value": "123１２３abc☺.",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValid",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"☺&\\"",
            "unicode": false,
            "value": "☺&",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&Jjo-&-\\"",
            "unicode": false,
            "value": "&Jjo-&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"西瓜&\\"",
            "unicode": false,
            "value": "西瓜&",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&iX903A-&-\\"",
            "unicode": false,
            "value": "&iX903A-&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"西红柿&\\"",
            "unicode": false,
            "value": "西红柿&",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&iX9+omf,-&-\\"",
            "unicode": false,
            "value": "&iX9+omf,-&-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Identification and conversion of valid text is working... perfect!\\\\n\\"",
          "unicode": false,
          "value": "Identification and conversion of valid text is working... perfect!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\x20\\\\x00\\\\x00\\"",
            "unicode": false,
            "value": "    ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UCS-4BE\\"",
            "unicode": false,
            "value": "UCS-4BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x10\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x80\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc&\\"",
            "unicode": false,
            "value": "abc&",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc%\\"",
            "unicode": false,
            "value": "abc%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"&**-\\"",
            "unicode": false,
            "value": "&**-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%*-\\"",
            "unicode": false,
            "value": "%*-",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF7-IMAP\\"",
            "unicode": false,
            "value": "UTF7-IMAP",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
