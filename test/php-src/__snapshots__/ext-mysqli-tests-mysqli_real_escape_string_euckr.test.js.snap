// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mysqli_real_escape_string() - euckr 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"connect.inc\\"",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[001] Cannot connect to the server using host=%s, user=%s,
passwd=***, dbname=%s, port=%s, socket=%s - [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[001] Cannot connect to the server using host=%s, user=%s,
passwd=***, dbname=%s, port=%s, socket=%s - [%d] %s
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "host",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "user",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "port",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "socket",
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_connect_errno",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_connect_error",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "host",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "user",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "passwd",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "port",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "socket",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "my_mysqli_connect",
              "resolution": "uqn",
            },
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Failed to drop old test table: [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "Failed to drop old test table: [%d] %s
",
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_errno",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_error",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'DROP TABLE IF EXISTS test'",
              "unicode": false,
              "value": "DROP TABLE IF EXISTS test",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mysqli_query",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Failed to create test table: [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "Failed to create test table: [%d] %s
",
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_errno",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_error",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CREATE TABLE test(id INT, label CHAR(1), PRIMARY
KEY(id)) ENGINE='",
                  "unicode": false,
                  "value": "CREATE TABLE test(id INT, label CHAR(1), PRIMARY
KEY(id)) ENGINE=",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "engine",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" DEFAULT CHARSET=euckr\\"",
                "unicode": false,
                "value": " DEFAULT CHARSET=euckr",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mysqli_query",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"euckr\\"",
                "unicode": false,
                "value": "euckr",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_set_charset",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[004] Expecting \\\\\\\\\\\\\\\\, got %s\\\\n\\"",
              "unicode": false,
              "value": "[004] Expecting \\\\\\\\, got %s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'�Ǵ뼺\\\\\\\\\\\\\\\\�Ǵ뼺'",
          "unicode": false,
          "value": "�Ǵ뼺\\\\\\\\�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'�Ǵ뼺\\\\\\\\�Ǵ뼺'",
                "unicode": false,
                "value": "�Ǵ뼺\\\\�Ǵ뼺",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[005] Expecting \\\\\\", got %s\\\\n\\"",
              "unicode": false,
              "value": "[005] Expecting \\", got %s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'�Ǵ뼺\\\\\\"�Ǵ뼺'",
          "unicode": false,
          "value": "�Ǵ뼺\\\\\\"�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'�Ǵ뼺\\"�Ǵ뼺'",
                "unicode": false,
                "value": "�Ǵ뼺\\"�Ǵ뼺",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[006] Expecting ', got %s\\\\n\\"",
              "unicode": false,
              "value": "[006] Expecting ', got %s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"�Ǵ뼺\\\\'�Ǵ뼺\\"",
          "unicode": false,
          "value": "�Ǵ뼺\\\\'�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"�Ǵ뼺'�Ǵ뼺\\"",
                "unicode": false,
                "value": "�Ǵ뼺'�Ǵ뼺",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[007] Expecting \\\\\\\\n, got %s\\\\n\\"",
              "unicode": false,
              "value": "[007] Expecting \\\\n, got %s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"�Ǵ뼺\\\\\\\\n�Ǵ뼺\\"",
          "unicode": false,
          "value": "�Ǵ뼺\\\\n�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"�Ǵ뼺\\\\n�Ǵ뼺\\"",
                "unicode": false,
                "value": "�Ǵ뼺
�Ǵ뼺",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[008] Expecting \\\\\\\\r, got %s\\\\n\\"",
              "unicode": false,
              "value": "[008] Expecting \\\\r, got %s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"�Ǵ뼺\\\\\\\\r�Ǵ뼺\\"",
          "unicode": false,
          "value": "�Ǵ뼺\\\\r�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"�Ǵ뼺\\\\r�Ǵ뼺\\"",
                "unicode": false,
                "value": "�Ǵ뼺
�Ǵ뼺",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[009] Expecting %s, got %s\\\\n\\"",
              "unicode": false,
              "value": "[009] Expecting %s, got %s
",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"�Ǵ뼺\\\\\\\\0�Ǵ뼺\\"",
              "unicode": false,
              "value": "�Ǵ뼺\\\\0�Ǵ뼺",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"�Ǵ뼺\\\\\\\\0�Ǵ뼺\\"",
          "unicode": false,
          "value": "�Ǵ뼺\\\\0�Ǵ뼺",
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"�Ǵ뼺\\"",
                    "unicode": false,
                    "value": "�Ǵ뼺",
                  },
                  "right": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"�Ǵ뼺\\"",
                  "unicode": false,
                  "value": "�Ǵ뼺",
                },
                "type": ".",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_real_escape_string",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"INSERT INTO test(id, label) VALUES (100, '��')\\"",
                "unicode": false,
                "value": "INSERT INTO test(id, label) VALUES (100, '��')",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_query",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mysqli_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
