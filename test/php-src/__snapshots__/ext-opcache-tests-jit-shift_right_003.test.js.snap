// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests JIT Shift Right: 003 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "int",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "out",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Number {
                            "kind": "number",
                            "value": "0x80",
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "int",
                              },
                              "parenthesizedExpression": true,
                              "right": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                              "type": ">>",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "0x7f",
                            },
                            "type": "&",
                          },
                          "type": "|",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "\\\\chr",
                        "resolution": "fqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "+=",
                "right": Number {
                  "kind": "number",
                  "value": "7",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "int",
                  },
                  "parenthesizedExpression": true,
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "type": ">>",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0x80",
                },
                "type": ">",
              },
            ],
          },
          Return {
            "expr": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "out",
              },
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "int",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "type": ">>",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "\\\\chr",
                  "resolution": "fqn",
                },
              },
              "type": ".",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "encodeDynamicInteger",
      },
      "nullable": false,
      "type": TypeReference {
        "kind": "typereference",
        "name": "string",
        "raw": "string",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "s",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "235",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "encodeDynamicInteger",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strlen",
              "resolution": "uqn",
            },
          },
          Call {
            "arguments": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "ord",
              "resolution": "uqn",
            },
          },
          Call {
            "arguments": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "ord",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
