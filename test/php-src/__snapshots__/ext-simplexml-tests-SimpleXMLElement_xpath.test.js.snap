// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Testing xpath() with invalid XML 1`] = `
Program {
  "children": Array [
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "name": Identifier {
            "kind": "identifier",
            "name": "XML_PARSE_RECOVER",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "constantstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": Silent {
          "expr": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"XXXXXXX^\\"",
                "unicode": false,
                "value": "XXXXXXX^",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'SimpleXMLElement'",
                "unicode": false,
                "value": "SimpleXMLElement",
              },
              Name {
                "kind": "name",
                "name": "XML_PARSE_RECOVER",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "simplexml_load_string",
              "resolution": "uqn",
            },
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"BBBB\\"",
                      "unicode": false,
                      "value": "BBBB",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "xpath",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "xml",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
