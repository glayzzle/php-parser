// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test result of match cannot be modified by reference 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Class {
            "attrGroups": Array [],
            "body": Array [
              Method {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": true,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "x",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        "operator": "=",
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'modified'",
                          "unicode": false,
                          "value": "modified",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isAbstract": false,
                "isFinal": false,
                "isStatic": true,
                "kind": "method",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "usesRef",
                },
                "nullable": false,
                "type": null,
                "visibility": "public",
              },
              Method {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "x",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Encapsed {
                          "kind": "encapsed",
                          "raw": "\\"usesValue $x\\\\n\\"",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "usesValue ",
                                "unicode": false,
                                "value": "usesValue ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "x",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "\\\\n",
                                "unicode": false,
                                "value": "",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isAbstract": false,
                "isFinal": false,
                "isStatic": true,
                "kind": "method",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "usesValue",
                },
                "nullable": false,
                "type": null,
                "visibility": "public",
              },
            ],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "name": Identifier {
              "kind": "identifier",
              "name": "Test",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Test'",
              "unicode": false,
              "value": "Test",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "class_exists",
            "resolution": "uqn",
          },
        },
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Match {
                  "arms": Array [
                    MatchArm {
                      "body": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "conds": Array [
                        Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      ],
                      "kind": "matcharm",
                    },
                  ],
                  "cond": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                  "kind": "match",
                },
              ],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "usesValue",
                },
                "what": Name {
                  "kind": "name",
                  "name": "Test",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"i is $i\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "i is ",
                      "unicode": false,
                      "value": "i is ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Match {
                  "arms": Array [
                    MatchArm {
                      "body": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "j",
                      },
                      "conds": Array [
                        Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      ],
                      "kind": "matcharm",
                    },
                  ],
                  "cond": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                  "kind": "match",
                },
              ],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "usesRef",
                },
                "what": Name {
                  "kind": "name",
                  "name": "Test",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"j is $j\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "j is ",
                      "unicode": false,
                      "value": "j is ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "main",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "main",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
