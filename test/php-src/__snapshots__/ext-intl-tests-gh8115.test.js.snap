// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GH-8115 (Can't catch deprecation in IntlDateFormatter) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "E_ALL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "error_reporting",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Closure {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "errNo",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "errStr",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"Caught ($errNo): $errStr\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "Caught (",
                            "unicode": false,
                            "value": "Caught (",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "errNo",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "): ",
                            "unicode": false,
                            "value": "): ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "errStr",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "type": null,
            "uses": Array [],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_error_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": New {
              "arguments": Array [
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "\\\\IntlDateFormatter",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": null,
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\IntlException",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": New {
              "arguments": Array [
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "\\\\IntlRuleBasedBreakIterator",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": null,
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\IntlException",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
        ],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "\\\\IntlGregorianCalendar",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
        ],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "\\\\Collator",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
        ],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "\\\\IntlDatePatternGenerator",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
        ],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "\\\\NumberFormatter",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": New {
              "arguments": Array [
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "\\\\MessageFormatter",
                "resolution": "fqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": null,
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\IntlException",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
        ],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "\\\\ResourceBundle",
          "resolution": "fqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
