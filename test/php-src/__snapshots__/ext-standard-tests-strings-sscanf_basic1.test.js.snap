// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test sscanf() function : basic functionality - string format 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing sscanf() : basic functionality - using string format ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing sscanf() : basic functionality - using string format ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Part: Widget Serial Number: 1234789 Stock: 25\\"",
          "unicode": false,
          "value": "Part: Widget Serial Number: 1234789 Stock: 25",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "format",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Part: %s Serial Number: %s Stock: %s\\"",
          "unicode": false,
          "value": "Part: %s Serial Number: %s Stock: %s",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Try sccanf() WITHOUT optional args --\\\\n\\"",
          "unicode": false,
          "value": "
-- Try sccanf() WITHOUT optional args --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "part",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "number",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stock",
              },
            },
          ],
          "kind": "list",
          "shortForm": false,
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "format",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sscanf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "part",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "number",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stock",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Try sccanf() WITH optional args --\\\\n\\"",
          "unicode": false,
          "value": "
-- Try sccanf() WITH optional args --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "format",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "part",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "number",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "stock",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sscanf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "part",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "number",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stock",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
