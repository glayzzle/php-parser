// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test: Xinclude and Streams 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "domdocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"/xinclude.xml\\"",
                "unicode": false,
                "value": "/xinclude.xml",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "reldir",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "getcwd",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\".\\"",
              "unicode": false,
              "value": ".",
            },
            Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_replace",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "reldir",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'\\\\\\\\'",
                    "unicode": false,
                    "value": "\\\\",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"/\\"",
                    "unicode": false,
                    "value": "/",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "reldir",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_replace",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Name {
          "kind": "name",
          "name": "DIRECTORY_SEPARATOR",
          "resolution": "uqn",
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'\\\\\\\\'",
          "unicode": false,
          "value": "\\\\",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'compress.zlib://ext/dom/tests/'",
              "unicode": false,
              "value": "compress.zlib://ext/dom/tests/",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'compress.zlib://'",
                  "unicode": false,
                  "value": "compress.zlib://",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "reldir",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"/\\"",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "data",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_replace",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "data",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXML",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "xinclude",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "saveXML",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dom",
              },
            },
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Bin {
                "kind": "bin",
                "left": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "nodeName",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": PropertyLookup {
        "kind": "propertylookup",
        "offset": Identifier {
          "kind": "identifier",
          "name": "childNodes",
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "documentElement",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "node",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
