// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mysqli_debug() - all control string options supported by both mysqlnd and libmysql except oOaA 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'connect.inc'",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'table.inc'",
          "unicode": false,
          "value": "table.inc",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "link",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "control_string",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "trace_file",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "offset",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Silent {
              "expr": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unlink",
                  "resolution": "uqn",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] Expecting boolean/true, got %s/%s.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] Expecting boolean/true, got %s/%s.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "gettype",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Silent {
                  "expr": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_debug",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "silent",
                },
              },
              "type": "!==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] [%d] %s.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] [%d] %s.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "2",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "link",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_errno",
                          "resolution": "uqn",
                        },
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "link",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_error",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'SELECT * FROM test'",
                      "unicode": false,
                      "value": "SELECT * FROM test",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
            },
          },
          While {
            "body": null,
            "kind": "while",
            "shortForm": false,
            "test": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mysqli_fetch_assoc",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mysqli_free_result",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "clearstatcache",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[%03d][control string '%s'] Trace file has not been written.\\\\n\\"",
                        "unicode": false,
                        "value": "[%03d][control string '%s'] Trace file has not been written.
",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "offset",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "3",
                        },
                        "type": "+",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "control_string",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "gettype",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "file_exists",
                  "resolution": "uqn",
                },
              },
            },
          },
          Return {
            "expr": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "trace_file",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "file_get_contents",
                        "resolution": "uqn",
                      },
                    },
                    Number {
                      "kind": "number",
                      "value": "0",
                    },
                    Number {
                      "kind": "number",
                      "value": "100024",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "substr",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "trim",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "try_control_string",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace_file",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'%s%s%s'",
              "unicode": false,
              "value": "%s%s%s",
            },
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sys_get_temp_dir",
                "resolution": "uqn",
              },
            },
            Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'mysqli_debug_phpt.trace'",
              "unicode": false,
              "value": "mysqli_debug_phpt.trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'t:O,'",
                "unicode": false,
                "value": "t:O,",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "10",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[015] SELECT query cannot be found in trace. Trace contents seems wrong.\\\\n\\"",
              "unicode": false,
              "value": "[015] SELECT query cannot be found in trace. Trace contents seems wrong.
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'SELECT * FROM test'",
                "unicode": false,
                "value": "SELECT * FROM test",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'mysql_real_query'",
                "unicode": false,
                "value": "mysql_real_query",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "strstr",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'t:O,'",
                  "unicode": false,
                  "value": "t:O,",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':T'",
                "unicode": false,
                "value": ":T",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "20",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[025] Timestamp not found. One reason could be that the test is borked and does not recognize the format of the gettimeofday() system call. Check manually (and fix the test, if needed :-)). First characters from trace are '%s'\\\\n\\"",
              "unicode": false,
              "value": "[025] Timestamp not found. One reason could be that the test is borked and does not recognize the format of the gettimeofday() system call. Check manually (and fix the test, if needed :-)). First characters from trace are '%s'
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'@^[012]{0,1}[0-9]{1}:[0-5]{0,1}[0-9]{1}:[0-5]{0,1}[0-9]{1}@ismU'",
              "unicode": false,
              "value": "@^[012]{0,1}[0-9]{1}:[0-5]{0,1}[0-9]{1}:[0-5]{0,1}[0-9]{1}@ismU",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pid",
          },
          "operator": "=",
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"[\\\\d]+\\"",
            "unicode": false,
            "value": "[\\\\d]+",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pid",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "getmypid",
              "resolution": "uqn",
            },
          },
        },
        "type": "===",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'t:O,'",
                  "unicode": false,
                  "value": "t:O,",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':i'",
                "unicode": false,
                "value": ":i",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "30",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[035] Process ID has not been found, first characters from trace are '%s'\\\\n\\"",
              "unicode": false,
              "value": "[035] Process ID has not been found, first characters from trace are '%s'
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^\\"",
                  "unicode": false,
                  "value": "@^",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"*@ismU\\"",
                "unicode": false,
                "value": "*@ismU",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'t:O,'",
                  "unicode": false,
                  "value": "t:O,",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':L'",
                "unicode": false,
                "value": ":L",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "40",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[045] Line numbers have not been found, first characters from trace are '%s'\\\\n\\"",
              "unicode": false,
              "value": "[045] Line numbers have not been found, first characters from trace are '%s'
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"@^[\\\\d]+@ismU\\"",
              "unicode": false,
              "value": "@^[\\\\d]+@ismU",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'t:O,'",
                  "unicode": false,
                  "value": "t:O,",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':F'",
                "unicode": false,
                "value": ":F",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "50",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[055] File names seem to be missing, first characters from trace are '%s'\\\\n\\"",
              "unicode": false,
              "value": "[055] File names seem to be missing, first characters from trace are '%s'
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"@^\\\\s*[/\\\\w\\\\\\\\\\\\\\\\d\\\\.:\\\\-]+\\\\.[ch]@ismU\\"",
              "unicode": false,
              "value": "@^\\\\s*[/\\\\w\\\\\\\\d\\\\.:\\\\-]+\\\\.[ch]@ismU",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'t:O,'",
                  "unicode": false,
                  "value": "t:O,",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':n'",
                "unicode": false,
                "value": ":n",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "60",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[065] Nesting level seem to be missing, first characters from trace are '%s'\\\\n\\"",
              "unicode": false,
              "value": "[065] Nesting level seem to be missing, first characters from trace are '%s'
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"@^\\\\d+:@ismU\\"",
              "unicode": false,
              "value": "@^\\\\d+:@ismU",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_match",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'t,1:n:O,'",
                "unicode": false,
                "value": "t,1:n:O,",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "70",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[076] Nesting level seem to be %d, should not be higher than 1, first characters from trace are '%s'\\\\n\\"",
                              "unicode": false,
                              "value": "[076] Nesting level seem to be %d, should not be higher than 1, first characters from trace are '%s'
",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "matches",
                              },
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "line",
                                },
                                Number {
                                  "kind": "number",
                                  "value": "0",
                                },
                                Number {
                                  "kind": "number",
                                  "value": "80",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "substr",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Number {
                              "kind": "number",
                              "value": "1",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "matches",
                            },
                          },
                        ],
                      },
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Cast {
                        "expr": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "matches",
                          },
                        },
                        "kind": "cast",
                        "raw": "(int)",
                        "type": "int",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": ">",
                    },
                    "type": "||",
                  },
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[075] Nesting level seem to be missing, first characters from trace are '%s'\\\\n\\"",
                        "unicode": false,
                        "value": "[075] Nesting level seem to be missing, first characters from trace are '%s'
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "line",
                          },
                          Number {
                            "kind": "number",
                            "value": "0",
                          },
                          Number {
                            "kind": "number",
                            "value": "80",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "substr",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"@^(\\\\d+):+@ismU\\"",
                    "unicode": false,
                    "value": "@^(\\\\d+):+@ismU",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "matches",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "preg_match",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
            Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'n:O,'",
                "unicode": false,
                "value": "n:O,",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              "type": ".",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Number {
              "kind": "number",
              "value": "80",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "try_control_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[085] Looks like a function call, but there should be none in the trace file, first characters from trace are '%s'\\\\n\\"",
                        "unicode": false,
                        "value": "[085] Looks like a function call, but there should be none in the trace file, first characters from trace are '%s'
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "line",
                          },
                          Number {
                            "kind": "number",
                            "value": "0",
                          },
                          Number {
                            "kind": "number",
                            "value": "80",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "substr",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>[\\\\w]+@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>[\\\\w]+@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines_all_funcs",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "link",
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'t:O,'",
                    "unicode": false,
                    "value": "t:O,",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                Number {
                  "kind": "number",
                  "value": "90",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "try_control_string",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions_all_funcs",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "matches",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "functions_all_funcs",
                      },
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>([\\\\w:]+)@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>([\\\\w:]+)@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines_all_funcs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines_trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "link",
                },
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'t:f:O,'",
                    "unicode": false,
                    "value": "t:f:O,",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                Number {
                  "kind": "number",
                  "value": "100",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "try_control_string",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions_trace",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "matches",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "functions_trace",
                      },
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>([\\\\w:]+)@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>([\\\\w:]+)@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines_trace",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tmp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "functions_all_funcs",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "functions_trace",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_diff",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[105] Looks like not all functions are listed in the trace. Check manually, dumping diff.\\"",
                  "unicode": false,
                  "value": "[105] Looks like not all functions are listed in the trace. Check manually, dumping diff.",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "kind": "empty",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test_functions",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'simple'",
                "unicode": false,
                "value": "simple",
              },
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'doubledot'",
                "unicode": false,
                "value": "doubledot",
              },
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [],
                "kind": "array",
                "shortForm": false,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          If {
            "alternate": If {
              "alternate": null,
              "body": ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "func",
                    },
                    "what": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'doubledot'",
                        "unicode": false,
                        "value": "doubledot",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "test_functions",
                      },
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                },
                "kind": "expressionstatement",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'doubledot'",
                          "unicode": false,
                          "value": "doubledot",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "test_functions",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "count",
                      "resolution": "uqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "type": "<",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "func",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'::'",
                      "unicode": false,
                      "value": "::",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strstr",
                    "resolution": "uqn",
                  },
                },
                "type": "&&",
              },
            },
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                  "what": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'simple'",
                      "unicode": false,
                      "value": "simple",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test_functions",
                    },
                  },
                },
                "operator": "=",
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "func",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'simple'",
                        "unicode": false,
                        "value": "simple",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "test_functions",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "count",
                    "resolution": "uqn",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
                "type": "<",
              },
              "right": Unary {
                "kind": "unary",
                "type": "!",
                "what": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "func",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'::'",
                      "unicode": false,
                      "value": "::",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strstr",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "&&",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions_all_funcs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "func",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "control_string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "control_string",
          },
          "operator": ".=",
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'%s,'",
                "unicode": false,
                "value": "%s,",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "sprintf",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'simple'",
                "unicode": false,
                "value": "simple",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "reset",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "control_string",
          },
          "operator": ".=",
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'%s,'",
                "unicode": false,
                "value": "%s,",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "sprintf",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'doubledot'",
                "unicode": false,
                "value": "doubledot",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "reset",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "control_string",
          },
          "operator": ".=",
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'%s,'",
                "unicode": false,
                "value": "%s,",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "sprintf",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'simple'",
                "unicode": false,
                "value": "simple",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "next",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "control_string",
          },
          "operator": ".=",
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'%s,'",
                "unicode": false,
                "value": "%s,",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "sprintf",
              "resolution": "uqn",
            },
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'doubledot'",
                "unicode": false,
                "value": "doubledot",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "next",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "control_string",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'t:f,%s:O,%s'",
              "unicode": false,
              "value": "t:f,%s:O,%s",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "control_string",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lines_trace",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\n\\"",
              "unicode": false,
              "value": "
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "link",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "control_string",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
                Number {
                  "kind": "number",
                  "value": "110",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "try_control_string",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions_trace",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "line",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "trim",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "matches",
                        },
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "functions_trace",
                      },
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"@^[|\\\\s]*>([\\\\w:]+)@ism\\"",
                  "unicode": false,
                  "value": "@^[|\\\\s]*>([\\\\w:]+)@ism",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_match",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "lines_trace",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line",
      },
    },
    Foreach {
      "body": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            Unset {
              "kind": "unset",
              "variables": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "functions_trace",
                  },
                },
              ],
            },
            Unset {
              "kind": "unset",
              "variables": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                  "what": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'simple'",
                      "unicode": false,
                      "value": "simple",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test_functions",
                    },
                  },
                },
              ],
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "functions_trace",
              },
            },
          ],
        },
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": OffsetLookup {
        "kind": "offsetlookup",
        "offset": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'simple'",
          "unicode": false,
          "value": "simple",
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test_functions",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "func",
      },
    },
    Foreach {
      "body": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            Unset {
              "kind": "unset",
              "variables": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "functions_trace",
                  },
                },
              ],
            },
            Unset {
              "kind": "unset",
              "variables": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "func",
                  },
                  "what": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'doubledot'",
                      "unicode": false,
                      "value": "doubledot",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "test_functions",
                    },
                  },
                },
              ],
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "functions_trace",
              },
            },
          ],
        },
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": OffsetLookup {
        "kind": "offsetlookup",
        "offset": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'doubledot'",
          "unicode": false,
          "value": "doubledot",
        },
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test_functions",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "func",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[115] Dumping list of unexpected functions which should have not been shown when using control string '%s'.\\\\n\\"",
                  "unicode": false,
                  "value": "[115] Dumping list of unexpected functions which should have not been shown when using control string '%s'.
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "control_string",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "functions_trace",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "functions_trace",
          },
          "kind": "empty",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tmp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'doubledot'",
                "unicode": false,
                "value": "doubledot",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'simple'",
                "unicode": false,
                "value": "simple",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "test_functions",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_merge",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[116] Dumping list of functions which should have been shown when using control string '%s'.\\\\n\\"",
                  "unicode": false,
                  "value": "[116] Dumping list of functions which should have been shown when using control string '%s'.
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "control_string",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "kind": "empty",
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'t:O,'",
                        "unicode": false,
                        "value": "t:O,",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "trace_file",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "':m'",
                      "unicode": false,
                      "value": ":m",
                    },
                    "type": ".",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                  Number {
                    "kind": "number",
                    "value": "120",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "try_control_string",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[125] Memory dump does neither contain _mysqlnd_pefree nor _mysqlnd_pemalloc calls - check manually.\\\\n\\"",
                        "unicode": false,
                        "value": "[125] Memory dump does neither contain _mysqlnd_pefree nor _mysqlnd_pemalloc calls - check manually.
",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "trace",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Unary {
                "kind": "unary",
                "type": "!",
                "what": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"@^[|\\\\s]*>\\\\_mysqlnd_p?efree@ismU\\"",
                      "unicode": false,
                      "value": "@^[|\\\\s]*>\\\\_mysqlnd_p?efree@ismU",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "trace",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "matches",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "preg_match",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Unary {
                "kind": "unary",
                "type": "!",
                "what": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"@^[|\\\\s]*>\\\\_mysqlnd_p?emalloc@ismU\\"",
                      "unicode": false,
                      "value": "@^[|\\\\s]*>\\\\_mysqlnd_p?emalloc@ismU",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "trace",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "matches",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "preg_match",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "&&",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "IS_MYSQLND",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mysqli_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done\\"",
          "unicode": false,
          "value": "done",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Print {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"libmysql/DBUG package prints some debug info here.\\"",
            "unicode": false,
            "value": "libmysql/DBUG package prints some debug info here.",
          },
          "kind": "print",
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "IS_MYSQLND",
      },
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unlink",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
