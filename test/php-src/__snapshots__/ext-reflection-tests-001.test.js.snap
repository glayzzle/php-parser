// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Reflection inheritance 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "bla",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
              Foreach {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": false,
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "res",
                          },
                        },
                        "operator": "=",
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "class",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "m",
                              },
                            },
                            "right": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'::'",
                              "unicode": false,
                              "value": "::",
                            },
                            "type": ".",
                          },
                          "right": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "name",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "m",
                            },
                          },
                          "type": ".",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "key": null,
                "kind": "foreach",
                "shortForm": false,
                "source": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getMethods",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                },
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "m",
                },
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "getMethodNames",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "ReflectionClass",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "ReflectionClassEx",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'ReflectionClassEx'",
              "unicode": false,
              "value": "ReflectionClassEx",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ReflectionClassEx",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "exp",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::__clone'",
                "unicode": false,
                "value": "UMLClass::__clone",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::__construct'",
                "unicode": false,
                "value": "UMLClass::__construct",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::__toString'",
                "unicode": false,
                "value": "UMLClass::__toString",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getName'",
                "unicode": false,
                "value": "UMLClass::getName",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isInternal'",
                "unicode": false,
                "value": "UMLClass::isInternal",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isUserDefined'",
                "unicode": false,
                "value": "UMLClass::isUserDefined",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isInstantiable'",
                "unicode": false,
                "value": "UMLClass::isInstantiable",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getFileName'",
                "unicode": false,
                "value": "UMLClass::getFileName",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getStartLine'",
                "unicode": false,
                "value": "UMLClass::getStartLine",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getEndLine'",
                "unicode": false,
                "value": "UMLClass::getEndLine",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getDocComment'",
                "unicode": false,
                "value": "UMLClass::getDocComment",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getConstructor'",
                "unicode": false,
                "value": "UMLClass::getConstructor",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getMethod'",
                "unicode": false,
                "value": "UMLClass::getMethod",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getMethods'",
                "unicode": false,
                "value": "UMLClass::getMethods",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getProperty'",
                "unicode": false,
                "value": "UMLClass::getProperty",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getProperties'",
                "unicode": false,
                "value": "UMLClass::getProperties",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getConstants'",
                "unicode": false,
                "value": "UMLClass::getConstants",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getConstant'",
                "unicode": false,
                "value": "UMLClass::getConstant",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getInterfaces'",
                "unicode": false,
                "value": "UMLClass::getInterfaces",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isInterface'",
                "unicode": false,
                "value": "UMLClass::isInterface",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isAbstract'",
                "unicode": false,
                "value": "UMLClass::isAbstract",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isFinal'",
                "unicode": false,
                "value": "UMLClass::isFinal",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getModifiers'",
                "unicode": false,
                "value": "UMLClass::getModifiers",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isInstance'",
                "unicode": false,
                "value": "UMLClass::isInstance",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::newInstance'",
                "unicode": false,
                "value": "UMLClass::newInstance",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getParentClass'",
                "unicode": false,
                "value": "UMLClass::getParentClass",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isSubclassOf'",
                "unicode": false,
                "value": "UMLClass::isSubclassOf",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getStaticProperties'",
                "unicode": false,
                "value": "UMLClass::getStaticProperties",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getDefaultProperties'",
                "unicode": false,
                "value": "UMLClass::getDefaultProperties",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::isIterateable'",
                "unicode": false,
                "value": "UMLClass::isIterateable",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::implementsInterface'",
                "unicode": false,
                "value": "UMLClass::implementsInterface",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getExtension'",
                "unicode": false,
                "value": "UMLClass::getExtension",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'UMLClass::getExtensionName'",
                "unicode": false,
                "value": "UMLClass::getExtensionName",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "miss",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getMethodNames",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": false,
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "miss",
                      },
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "m",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "m",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "exp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "in_array",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "exp",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "m",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "miss",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "props",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ReflectionClassEx'",
                  "unicode": false,
                  "value": "ReflectionClassEx",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "get_class_vars",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "props",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "sort",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "props",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "name",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
