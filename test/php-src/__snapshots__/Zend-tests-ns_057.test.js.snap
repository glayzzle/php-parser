// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests 057: Usage of 'namespace' in compound names (inside namespace) 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        ConstantStatement {
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "C",
              },
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"const ok\\\\n\\"",
                "unicode": false,
                "value": "const ok
",
              },
            },
          ],
          "kind": "constantstatement",
        },
        _Function {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"func ok\\\\n\\"",
                  "unicode": false,
                  "value": "func ok
",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
          "nullable": false,
          "type": null,
        },
        Class {
          "attrGroups": Array [],
          "body": Array [
            ClassConstant {
              "attrGroups": Array [],
              "constants": Array [
                Constant {
                  "kind": "constant",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "C",
                  },
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"const ok\\\\n\\"",
                    "unicode": false,
                    "value": "const ok
",
                  },
                },
              ],
              "kind": "classconstant",
              "visibility": "",
            },
            ClassConstant {
              "attrGroups": Array [],
              "constants": Array [
                Constant {
                  "kind": "constant",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "C2",
                  },
                  "value": Name {
                    "kind": "name",
                    "name": "C",
                    "resolution": "rn",
                  },
                },
              ],
              "kind": "classconstant",
              "visibility": "",
            },
            PropertyStatement {
              "isStatic": true,
              "kind": "propertystatement",
              "properties": Array [
                Property {
                  "attrGroups": Array [],
                  "kind": "property",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "var",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": null,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"var ok\\\\n\\"",
                    "unicode": false,
                    "value": "var ok
",
                  },
                },
              ],
              "visibility": "",
            },
            Method {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"class ok\\\\n\\"",
                        "unicode": false,
                        "value": "class ok
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": false,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "__construct",
              },
              "nullable": false,
              "type": null,
              "visibility": "",
            },
            Method {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  Return {
                    "expr": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"method ok\\\\n\\"",
                      "unicode": false,
                      "value": "method ok
",
                    },
                    "kind": "return",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isAbstract": false,
              "isFinal": false,
              "isStatic": true,
              "kind": "method",
              "name": Identifier {
                "kind": "identifier",
                "name": "bar",
              },
              "nullable": false,
              "type": null,
              "visibility": "",
            },
          ],
          "extends": null,
          "implements": null,
          "isAbstract": false,
          "isAnonymous": false,
          "isFinal": false,
          "kind": "class",
          "name": Identifier {
            "kind": "identifier",
            "name": "foo",
          },
        },
        _Function {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "x",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Name {
                "kind": "name",
                "name": "C",
                "resolution": "rn",
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "f1",
          },
          "nullable": false,
          "type": null,
        },
        _Function {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "x",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "C",
                },
                "what": Name {
                  "kind": "name",
                  "name": "foo",
                  "resolution": "rn",
                },
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "f2",
          },
          "nullable": false,
          "type": null,
        },
        _Function {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "x",
              },
              "nullable": false,
              "readonly": false,
              "type": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "rn",
              },
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"ok\\\\n\\"",
                  "unicode": false,
                  "value": "ok
",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "kind": "function",
          "name": Identifier {
            "kind": "identifier",
            "name": "f3",
          },
          "nullable": false,
          "type": null,
        },
        Echo {
          "expressions": Array [
            Name {
              "kind": "name",
              "name": "C",
              "resolution": "rn",
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "C",
              },
              "what": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "C2",
              },
              "what": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Variable {
                "curly": false,
                "kind": "variable",
                "name": "var",
              },
              "what": Name {
                "kind": "name",
                "name": "foo",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "bar",
                },
                "what": Name {
                  "kind": "name",
                  "name": "foo",
                  "resolution": "rn",
                },
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "f1",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "f2",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Call {
              "arguments": Array [
                New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "foo",
                    "resolution": "rn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "f3",
                "resolution": "rn",
              },
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
        Echo {
          "expressions": Array [
            Name {
              "kind": "name",
              "name": "unknown",
              "resolution": "rn",
            },
          ],
          "kind": "echo",
          "shortForm": false,
        },
      ],
      "kind": "namespace",
      "name": "Test\\\\ns1",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
