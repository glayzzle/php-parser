// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #80560: Strings containing only a base prefix return 0 object 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions1",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_init'",
                "unicode": false,
                "value": "gmp_init",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_export'",
                "unicode": false,
                "value": "gmp_export",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_intval'",
                "unicode": false,
                "value": "gmp_intval",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_strval'",
                "unicode": false,
                "value": "gmp_strval",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_neg'",
                "unicode": false,
                "value": "gmp_neg",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_abs'",
                "unicode": false,
                "value": "gmp_abs",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_fact'",
                "unicode": false,
                "value": "gmp_fact",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_sqrt'",
                "unicode": false,
                "value": "gmp_sqrt",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_sqrtrem'",
                "unicode": false,
                "value": "gmp_sqrtrem",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_perfect_square'",
                "unicode": false,
                "value": "gmp_perfect_square",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_perfect_power'",
                "unicode": false,
                "value": "gmp_perfect_power",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_prob_prime'",
                "unicode": false,
                "value": "gmp_prob_prime",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_sign'",
                "unicode": false,
                "value": "gmp_sign",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_random_seed'",
                "unicode": false,
                "value": "gmp_random_seed",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_popcount'",
                "unicode": false,
                "value": "gmp_popcount",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_com'",
                "unicode": false,
                "value": "gmp_com",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_nextprime'",
                "unicode": false,
                "value": "gmp_nextprime",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions1_need_int_2",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_testbit'",
                "unicode": false,
                "value": "gmp_testbit",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_scan0'",
                "unicode": false,
                "value": "gmp_scan0",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_scan1'",
                "unicode": false,
                "value": "gmp_scan1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_binomial'",
                "unicode": false,
                "value": "gmp_binomial",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_root'",
                "unicode": false,
                "value": "gmp_root",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_rootrem'",
                "unicode": false,
                "value": "gmp_rootrem",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_pow'",
                "unicode": false,
                "value": "gmp_pow",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions2",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_add'",
                "unicode": false,
                "value": "gmp_add",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_sub'",
                "unicode": false,
                "value": "gmp_sub",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_mul'",
                "unicode": false,
                "value": "gmp_mul",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_div'",
                "unicode": false,
                "value": "gmp_div",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_div_q'",
                "unicode": false,
                "value": "gmp_div_q",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_div_r'",
                "unicode": false,
                "value": "gmp_div_r",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_div_qr'",
                "unicode": false,
                "value": "gmp_div_qr",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_divexact'",
                "unicode": false,
                "value": "gmp_divexact",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_mod'",
                "unicode": false,
                "value": "gmp_mod",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_gcd'",
                "unicode": false,
                "value": "gmp_gcd",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_gcdext'",
                "unicode": false,
                "value": "gmp_gcdext",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_lcm'",
                "unicode": false,
                "value": "gmp_lcm",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_invert'",
                "unicode": false,
                "value": "gmp_invert",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_jacobi'",
                "unicode": false,
                "value": "gmp_jacobi",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_legendre'",
                "unicode": false,
                "value": "gmp_legendre",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_kronecker'",
                "unicode": false,
                "value": "gmp_kronecker",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_cmp'",
                "unicode": false,
                "value": "gmp_cmp",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_random_range'",
                "unicode": false,
                "value": "gmp_random_range",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_and'",
                "unicode": false,
                "value": "gmp_and",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_or'",
                "unicode": false,
                "value": "gmp_or",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_xor'",
                "unicode": false,
                "value": "gmp_xor",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_hamdist'",
                "unicode": false,
                "value": "gmp_hamdist",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions3",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'gmp_powm'",
                "unicode": false,
                "value": "gmp_powm",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Explicit base with gmp_init:'",
          "unicode": false,
          "value": "Explicit base with gmp_init:",
        },
        Name {
          "kind": "name",
          "name": "\\\\PHP_EOL",
          "resolution": "fqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Hexadecimal'",
          "unicode": false,
          "value": "Hexadecimal",
        },
        Name {
          "kind": "name",
          "name": "\\\\PHP_EOL",
          "resolution": "fqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'0X'",
                      "unicode": false,
                      "value": "0X",
                    },
                    Number {
                      "kind": "number",
                      "value": "16",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "gmp_init",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  Name {
                    "kind": "name",
                    "name": "\\\\PHP_EOL",
                    "resolution": "fqn",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\ValueError",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'0x'",
                      "unicode": false,
                      "value": "0x",
                    },
                    Number {
                      "kind": "number",
                      "value": "16",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "gmp_init",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  Name {
                    "kind": "name",
                    "name": "\\\\PHP_EOL",
                    "resolution": "fqn",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\ValueError",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Binary'",
          "unicode": false,
          "value": "Binary",
        },
        Name {
          "kind": "name",
          "name": "\\\\PHP_EOL",
          "resolution": "fqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'0B'",
                      "unicode": false,
                      "value": "0B",
                    },
                    Number {
                      "kind": "number",
                      "value": "2",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "gmp_init",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  Name {
                    "kind": "name",
                    "name": "\\\\PHP_EOL",
                    "resolution": "fqn",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\ValueError",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'0b'",
                      "unicode": false,
                      "value": "0b",
                    },
                    Number {
                      "kind": "number",
                      "value": "2",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "gmp_init",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  Name {
                    "kind": "name",
                    "name": "\\\\PHP_EOL",
                    "resolution": "fqn",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\ValueError",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'Fuzzing gmp functions:'",
          "unicode": false,
          "value": "Fuzzing gmp functions:",
        },
        Name {
          "kind": "name",
          "name": "\\\\PHP_EOL",
          "resolution": "fqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0B'",
                      "unicode": false,
                      "value": " failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0b'",
                      "unicode": false,
                      "value": " failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0X'",
                      "unicode": false,
                      "value": " failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0x'",
                      "unicode": false,
                      "value": " failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions1",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "function",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0B'",
                      "unicode": false,
                      "value": " failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0b'",
                      "unicode": false,
                      "value": " failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0X'",
                      "unicode": false,
                      "value": " failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' failed with 0x'",
                      "unicode": false,
                      "value": " failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions1_need_int_2",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "function",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0B'",
                      "unicode": false,
                      "value": " arg 1 failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0b'",
                      "unicode": false,
                      "value": " arg 1 failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0X'",
                      "unicode": false,
                      "value": " arg 1 failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0x'",
                      "unicode": false,
                      "value": " arg 1 failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0B'",
                      "unicode": false,
                      "value": " arg 2 failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0b'",
                      "unicode": false,
                      "value": " arg 2 failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0X'",
                      "unicode": false,
                      "value": " arg 2 failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0x'",
                      "unicode": false,
                      "value": " arg 2 failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions2",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "function",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0B'",
                      "unicode": false,
                      "value": " arg 1 failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0b'",
                      "unicode": false,
                      "value": " arg 1 failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0X'",
                      "unicode": false,
                      "value": " arg 1 failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 1 failed with 0x'",
                      "unicode": false,
                      "value": " arg 1 failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0B'",
                      "unicode": false,
                      "value": " arg 2 failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0b'",
                      "unicode": false,
                      "value": " arg 2 failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0X'",
                      "unicode": false,
                      "value": " arg 2 failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 2 failed with 0x'",
                      "unicode": false,
                      "value": " arg 2 failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0B'",
                        "unicode": false,
                        "value": "0B",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 3 failed with 0B'",
                      "unicode": false,
                      "value": " arg 3 failed with 0B",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0b'",
                        "unicode": false,
                        "value": "0b",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 3 failed with 0b'",
                      "unicode": false,
                      "value": " arg 3 failed with 0b",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0X'",
                        "unicode": false,
                        "value": "0X",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 3 failed with 0X'",
                      "unicode": false,
                      "value": " arg 3 failed with 0X",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'0x'",
                        "unicode": false,
                        "value": "0x",
                      },
                    ],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "function",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' arg 3 failed with 0x'",
                      "unicode": false,
                      "value": " arg 3 failed with 0x",
                    },
                    Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": null,
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions3",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "function",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
