// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Testing declare statement with ticks with callback arguments 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Closure {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "object",
                },
                "nullable": false,
                "readonly": false,
                "type": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "array",
                },
                "nullable": false,
                "readonly": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "array",
                  "raw": "array",
                },
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"tick: \\"",
                      "unicode": false,
                      "value": "tick: ",
                    },
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "object",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "get_class",
                        "resolution": "uqn",
                      },
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\" \\"",
                      "unicode": false,
                      "value": " ",
                    },
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "array",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "count",
                        "resolution": "uqn",
                      },
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "type": null,
            "uses": Array [],
          },
          New {
            "arguments": Array [],
            "kind": "new",
            "what": Name {
              "kind": "name",
              "name": "\\\\stdClass",
              "resolution": "fqn",
            },
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "3",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "register_tick_function",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    Declare {
      "children": Array [
        ExpressionStatement {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "statement",
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "foo",
              "resolution": "uqn",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "name": "ticks",
          },
          "kind": "declaredirective",
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "mode": "block",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
