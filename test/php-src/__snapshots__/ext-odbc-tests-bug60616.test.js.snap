// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests odbc_exec(): Getting accurate unicode data from query 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"EUC_JP\\"",
            "unicode": false,
            "value": "EUC_JP",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_internal_encoding",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "euc_jp_base64",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'pdal6aWkpcCl676uyqo='",
          "unicode": false,
          "value": "pdal6aWkpcCl676uyqo=",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "euc_jp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "euc_jp_base64",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ascii",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'abcdefghijklmnopqrstuvwxyz;]=#0123456789'",
          "unicode": false,
          "value": "abcdefghijklmnopqrstuvwxyz;]=#0123456789",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'config.inc'",
          "unicode": false,
          "value": "config.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"odbc.defaultlrl\\"",
            "unicode": false,
            "value": "odbc.defaultlrl",
          },
          Number {
            "kind": "number",
            "value": "4",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "conn",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dsn",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "pass",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "odbc_connect",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "conn",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CREATE DATABASE odbcTEST ENCODING=\\\\'EUC_JP\\\\''",
            "unicode": false,
            "value": "CREATE DATABASE odbcTEST ENCODING='EUC_JP'",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "odbc_exec",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "conn",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CREATE TABLE FOO (ID INT, CHAR_COL CHAR(200), VARCHAR_COL VARCHAR(200), TEXT_COL TEXT)'",
            "unicode": false,
            "value": "CREATE TABLE FOO (ID INT, CHAR_COL CHAR(200), VARCHAR_COL VARCHAR(200), TEXT_COL TEXT)",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "odbc_exec",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "conn",
          },
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (1, '$euc_jp', '$euc_jp', '$euc_jp')\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (1, '",
                  "unicode": false,
                  "value": "INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (1, '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "euc_jp",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "', '",
                  "unicode": false,
                  "value": "', '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "euc_jp",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "', '",
                  "unicode": false,
                  "value": "', '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "euc_jp",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "')",
                  "unicode": false,
                  "value": "')",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "odbc_exec",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "conn",
          },
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (2, '$ascii', '$ascii', '$ascii')\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (2, '",
                  "unicode": false,
                  "value": "INSERT INTO FOO(ID, CHAR_COL, VARCHAR_COL, TEXT_COL) VALUES (2, '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ascii",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "', '",
                  "unicode": false,
                  "value": "', '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ascii",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "', '",
                  "unicode": false,
                  "value": "', '",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ascii",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "')",
                  "unicode": false,
                  "value": "')",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "odbc_exec",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "conn",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'SELECT * FROM FOO ORDER BY ID ASC'",
              "unicode": false,
              "value": "SELECT * FROM FOO ORDER BY ID ASC",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "odbc_exec",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "char_col",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"CHAR_COL\\"",
                    "unicode": false,
                    "value": "CHAR_COL",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "odbc_result",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "varchar_col",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"VARCHAR_COL\\"",
                    "unicode": false,
                    "value": "VARCHAR_COL",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "odbc_result",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "id",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"ID\\"",
                    "unicode": false,
                    "value": "ID",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "odbc_result",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "text_col",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text_col",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "chunk",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "chunk",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "res",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"TEXT_COL\\"",
                      "unicode": false,
                      "value": "TEXT_COL",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "odbc_result",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "!==",
            },
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ascii_check",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ascii",
                      },
                      "right": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\" \\"",
                            "unicode": false,
                            "value": " ",
                          },
                          Bin {
                            "kind": "bin",
                            "left": Number {
                              "kind": "number",
                              "value": "200",
                            },
                            "parenthesizedExpression": true,
                            "right": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "ascii",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "strlen",
                                "resolution": "uqn",
                              },
                            },
                            "type": "-",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "str_repeat",
                          "resolution": "uqn",
                        },
                      },
                      "type": ".",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Print {
                          "expression": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"ASCII mismatched\\\\n\\"",
                            "unicode": false,
                            "value": "ASCII mismatched
",
                          },
                          "kind": "print",
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Print {
                          "expression": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"ASCII matched\\\\n\\"",
                            "unicode": false,
                            "value": "ASCII matched
",
                          },
                          "kind": "print",
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "char_col",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "ascii_check",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strcmp",
                            "resolution": "uqn",
                          },
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "varchar_col",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "ascii",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strcmp",
                            "resolution": "uqn",
                          },
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "type": "&&",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "text_col",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ascii",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strcmp",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "type": "==",
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "euc_jp_check",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "euc_jp",
                      },
                      "right": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\" \\"",
                            "unicode": false,
                            "value": " ",
                          },
                          Bin {
                            "kind": "bin",
                            "left": Number {
                              "kind": "number",
                              "value": "200",
                            },
                            "parenthesizedExpression": true,
                            "right": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "euc_jp",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "mb_strlen",
                                "resolution": "uqn",
                              },
                            },
                            "type": "-",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "str_repeat",
                          "resolution": "uqn",
                        },
                      },
                      "type": ".",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Print {
                          "expression": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"EUC-JP mismatched\\\\n\\"",
                            "unicode": false,
                            "value": "EUC-JP mismatched
",
                          },
                          "kind": "print",
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Print {
                          "expression": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"EUC-JP matched\\\\n\\"",
                            "unicode": false,
                            "value": "EUC-JP matched
",
                          },
                          "kind": "print",
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "char_col",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "euc_jp_check",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strcmp",
                            "resolution": "uqn",
                          },
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "varchar_col",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "euc_jp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strcmp",
                            "resolution": "uqn",
                          },
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "type": "&&",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "text_col",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "euc_jp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strcmp",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "type": "==",
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "id",
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "odbc_fetch_row",
          "resolution": "uqn",
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
