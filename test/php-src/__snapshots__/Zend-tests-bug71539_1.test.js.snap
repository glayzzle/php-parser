// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #71539.1 (Memory error on $arr[$a] =& $arr[$b] if RHS rehashes) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Cast {
          "expr": Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'b'",
                  "unicode": false,
                  "value": "b",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'c'",
                  "unicode": false,
                  "value": "c",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "3",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'d'",
                  "unicode": false,
                  "value": "d",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "4",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'e'",
                  "unicode": false,
                  "value": "e",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "5",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'f'",
                  "unicode": false,
                  "value": "f",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "6",
                },
              },
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'g'",
                  "unicode": false,
                  "value": "g",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "7",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
          "kind": "cast",
          "raw": "(object)",
          "type": "object",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "h",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "i",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "h",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "42",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
