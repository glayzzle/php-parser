// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests imagetypes 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "flags",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imagetypes",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"gif failed\\\\n\\"",
                "unicode": false,
                "value": "gif failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "flags",
          },
          "right": Number {
            "kind": "number",
            "value": "0x1",
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"imagegif\\"",
                "unicode": false,
                "value": "imagegif",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "function_exists",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"jpeg failed\\\\n\\"",
                "unicode": false,
                "value": "jpeg failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "flags",
          },
          "right": Number {
            "kind": "number",
            "value": "0x2",
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"imagejpeg\\"",
                "unicode": false,
                "value": "imagejpeg",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "function_exists",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"png failed\\\\n\\"",
                "unicode": false,
                "value": "png failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "flags",
          },
          "right": Number {
            "kind": "number",
            "value": "0x4",
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"imagepng\\"",
                "unicode": false,
                "value": "imagepng",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "function_exists",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"wbmp failed\\\\n\\"",
                "unicode": false,
                "value": "wbmp failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "flags",
          },
          "right": Number {
            "kind": "number",
            "value": "0x8",
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"imagewbmp\\"",
                "unicode": false,
                "value": "imagewbmp",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "function_exists",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"xom failed\\\\n\\"",
                "unicode": false,
                "value": "xom failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "flags",
          },
          "right": Number {
            "kind": "number",
            "value": "16",
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"imagecreatefromxpm\\"",
                "unicode": false,
                "value": "imagecreatefromxpm",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "function_exists",
              "resolution": "uqn",
            },
          },
        },
        "type": "&&",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\\\n\\"",
          "unicode": false,
          "value": "ok
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
