// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #77058: Type inference in opcache causes side effects 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "Nr",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "-",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Break {
                    "kind": "break",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Pre {
                      "kind": "pre",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "Nr",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "2",
                    },
                    "type": ">=",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Number {
              "kind": "number",
              "value": "1",
            },
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"'$Nr' is expected to be 2\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'",
                      "unicode": false,
                      "value": "'",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "Nr",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' is expected to be 2",
                      "unicode": false,
                      "value": "' is expected to be 2",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
              Name {
                "kind": "name",
                "name": "PHP_EOL",
                "resolution": "uqn",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "myfunc",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "myfunc",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
