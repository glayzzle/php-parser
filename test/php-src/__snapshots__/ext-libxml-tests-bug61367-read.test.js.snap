// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #61367: open_basedir bypass in libxml RSHUTDOWN: read test 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "doc",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "DOMDocument",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "resolveExternals",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doc",
                    },
                  },
                  "operator": "=",
                  "right": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "substituteEntities",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doc",
                    },
                  },
                  "operator": "=",
                  "right": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "dir",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "getcwd",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "dirname",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "htmlspecialchars",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "dir",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'\\\\\\\\'",
                        "unicode": false,
                        "value": "\\\\",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'/'",
                        "unicode": false,
                        "value": "/",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "dir",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "str_replace",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "label": "XML",
                      "raw": "<<<XML
<!DOCTYPE doc [
    <!ENTITY file SYSTEM \\"file:///$dir/bad\\">
]>
<doc>&file;</doc>
XML
        ",
                      "type": "heredoc",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "<!DOCTYPE doc [
    <!ENTITY file SYSTEM \\"file:///",
                            "unicode": false,
                            "value": "<!DOCTYPE doc [
    <!ENTITY file SYSTEM \\"file:///",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "dir",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "/bad\\">
]>
<doc>&file;</doc>
",
                            "unicode": false,
                            "value": "/bad\\">
]>
<doc>&file;</doc>",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "loadXML",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doc",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Print {
                  "expression": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "nodeValue",
                    },
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "firstChild",
                      },
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "documentElement",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "doc",
                        },
                      },
                    },
                  },
                  "kind": "print",
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_close",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "path",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "mode",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "options",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": true,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "opened_path",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Boolean {
                  "kind": "boolean",
                  "raw": "true",
                  "value": true,
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_open",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "StreamExploiter",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test_bug_61367-read'",
                "unicode": false,
                "value": "test_bug_61367-read",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mkdir",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test_bug_61367-read/base'",
                "unicode": false,
                "value": "test_bug_61367-read/base",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mkdir",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test_bug_61367-read/bad'",
                "unicode": false,
                "value": "test_bug_61367-read/bad",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'blah'",
                "unicode": false,
                "value": "blah",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "file_put_contents",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test_bug_61367-read/base'",
                "unicode": false,
                "value": "test_bug_61367-read/base",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chdir",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'exploit'",
            "unicode": false,
            "value": "exploit",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'StreamExploiter'",
            "unicode": false,
            "value": "StreamExploiter",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "stream_wrapper_register",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "s",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'exploit://'",
              "unicode": false,
              "value": "exploit://",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r'",
              "unicode": false,
              "value": "r",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
