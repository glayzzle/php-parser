// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #37277 (cloning Dom Documents or Nodes does not work) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom1",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'1.0'",
              "unicode": false,
              "value": "1.0",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-8'",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DomDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<foo />'",
          "unicode": false,
          "value": "<foo />",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXml",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom1",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "node",
        },
        "operator": "=",
        "right": Clone {
          "kind": "clone",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "documentElement",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom1",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom2",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'1.0'",
              "unicode": false,
              "value": "1.0",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'UTF-8'",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DomDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "cloneNode",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "node",
                  },
                },
              },
              Boolean {
                "kind": "boolean",
                "raw": "TRUE",
                "value": true,
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "importNode",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dom2",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "appendChild",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom2",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "saveXML",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom2",
            },
          },
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
