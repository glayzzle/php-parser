// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #24054 (Assignment operator *= broken) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'LONG_MAX'",
            "unicode": false,
            "value": "LONG_MAX",
          },
          RetIf {
            "falseExpr": Number {
              "kind": "number",
              "value": "0x7FFFFFFF",
            },
            "kind": "retif",
            "test": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "5000000000",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "is_int",
                "resolution": "uqn",
              },
            },
            "trueExpr": Number {
              "kind": "number",
              "value": "9223372036854775807",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'LONG_MIN'",
            "unicode": false,
            "value": "LONG_MIN",
          },
          Bin {
            "kind": "bin",
            "left": Unary {
              "kind": "unary",
              "type": "-",
              "what": Name {
                "kind": "name",
                "name": "LONG_MAX",
                "resolution": "uqn",
              },
            },
            "right": Number {
              "kind": "number",
              "value": "1",
            },
            "type": "-",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%d,%d,%d,%d\\\\n\\"",
            "unicode": false,
            "value": "%d,%d,%d,%d
",
          },
          Call {
            "arguments": Array [
              Name {
                "kind": "name",
                "name": "LONG_MIN",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_int",
              "resolution": "uqn",
            },
          },
          Call {
            "arguments": Array [
              Name {
                "kind": "name",
                "name": "LONG_MAX",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_int",
              "resolution": "uqn",
            },
          },
          Call {
            "arguments": Array [
              Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "LONG_MIN",
                  "resolution": "uqn",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
                "type": "-",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_int",
              "resolution": "uqn",
            },
          },
          Call {
            "arguments": Array [
              Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "LONG_MAX",
                  "resolution": "uqn",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
                "type": "+",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_int",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "i",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "LONG_MAX",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "j",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "1001",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "i",
        },
        "operator": "*=",
        "right": Number {
          "kind": "number",
          "value": "1001",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "i",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "j",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
