// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #75556 (Invalid opcode 138/1/1) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "format",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "date",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "tz",
          },
          "nullable": true,
          "readonly": false,
          "type": Name {
            "kind": "name",
            "name": "\\\\DateTimeZone",
            "resolution": "fqn",
          },
          "value": NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "msg",
                    },
                    "operator": "=",
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'Date objects must have UTC as their timezone'",
                      "unicode": false,
                      "value": "Date objects must have UTC as their timezone",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Throw {
                  "kind": "throw",
                  "what": New {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "msg",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "\\\\UnexpectedValueException",
                      "resolution": "fqn",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tz",
                },
                "right": NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                "type": "!==",
              },
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tz",
                  },
                  "right": Name {
                    "kind": "name",
                    "name": "\\\\DateTimeZone",
                    "resolution": "fqn",
                  },
                  "type": "instanceof",
                },
                "parenthesizedExpression": true,
                "right": Unary {
                  "kind": "unary",
                  "type": "!",
                  "what": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "getName",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tz",
                          },
                        },
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": null,
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'UTC'",
                              "unicode": false,
                              "value": "UTC",
                            },
                          },
                          Entry {
                            "byRef": false,
                            "key": null,
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'Z'",
                              "unicode": false,
                              "value": "Z",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": true,
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "true",
                        "value": true,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "in_array",
                      "resolution": "uqn",
                    },
                  },
                },
                "type": "&&",
              },
              "type": "||",
            },
          },
          Return {
            "expr": NullKeyword {
              "kind": "nullkeyword",
              "raw": "null",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "createFromFormat",
      },
      "nullable": true,
      "type": Name {
        "kind": "name",
        "name": "\\\\DateTimeInterface",
        "resolution": "fqn",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'m/d/Y'",
                "unicode": false,
                "value": "m/d/Y",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'12/07/2017'",
                "unicode": false,
                "value": "12/07/2017",
              },
              NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "createFromFormat",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
