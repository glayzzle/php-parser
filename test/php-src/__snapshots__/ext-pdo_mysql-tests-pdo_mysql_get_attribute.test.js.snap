// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests MySQL PDO->getAttribute() 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mysql_pdo_test.inc'",
            "unicode": false,
            "value": "mysql_pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
            ],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "detect_transactional_mysql_engine",
              },
              "what": Name {
                "kind": "name",
                "name": "MySQLPDOTest",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "createTestTable",
          },
          "what": Name {
            "kind": "name",
            "name": "MySQLPDOTest",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "offset",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "db",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "attribute",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "value",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "value_type",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gettype",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d] Cannot set attribute '%s' to value '%s'\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d] Cannot set attribute '%s' to value '%s'
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "attribute",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "attribute",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "setAttribute",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d] Call to PDO::setAttribute(int attribute, mixed value) has changed the type of value from %s to %s, test will not work properly\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d] Call to PDO::setAttribute(int attribute, mixed value) has changed the type of value from %s to %s, test will not work properly
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value_type",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "value",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "gettype",
                        "resolution": "uqn",
                      },
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value_type",
                    },
                    "type": "!=",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "attribute",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getAttribute",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d] Attribute '%s' was set to '%s'/%s but getAttribute() reports '%s'/%s\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d] Attribute '%s' was set to '%s'/%s but getAttribute() reports '%s'/%s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "attribute",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "value",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "value",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value",
                    },
                    "type": "!==",
                  },
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"[%03d] %s, [%s] %s\\\\n\\"",
                            "unicode": false,
                            "value": "[%03d] %s, [%s] %s
",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "errorCode",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "db",
                              },
                            },
                          },
                          Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "' '",
                                "unicode": false,
                                "value": " ",
                              },
                              Call {
                                "arguments": Array [],
                                "kind": "call",
                                "what": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Identifier {
                                    "kind": "identifier",
                                    "name": "errorInfo",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "db",
                                  },
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "implode",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "printf",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Return {
            "expr": Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "set_and_get",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_AUTOCOMMIT",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
          Number {
            "kind": "number",
            "value": "1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_and_get",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
