// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #73338: Ensure exceptions in function init opcodes are cleaned properly 1`] = `
Program {
  "children": Array [
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Class {
                    "attrGroups": Array [],
                    "body": Array [
                      Method {
                        "arguments": Array [],
                        "attrGroups": Array [],
                        "body": Block {
                          "children": Array [
                            Throw {
                              "kind": "throw",
                              "what": New {
                                "arguments": Array [],
                                "kind": "new",
                                "what": Name {
                                  "kind": "name",
                                  "name": "Error",
                                  "resolution": "uqn",
                                },
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "byref": false,
                        "isAbstract": false,
                        "isFinal": false,
                        "isStatic": false,
                        "kind": "method",
                        "name": Identifier {
                          "kind": "identifier",
                          "name": "__destruct",
                        },
                        "nullable": false,
                        "type": null,
                        "visibility": "",
                      },
                    ],
                    "extends": null,
                    "implements": null,
                    "isAbstract": false,
                    "isAnonymous": true,
                    "isFinal": false,
                    "kind": "class",
                    "name": null,
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "call_user_func",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Closure {
            "arguments": Array [],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                Throw {
                  "kind": "throw",
                  "what": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Error",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "type": null,
            "uses": Array [],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_error_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "stdClass",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"fail\\"",
                      "unicode": false,
                      "value": "fail",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "call_user_func",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"fail\\"",
                            "unicode": false,
                            "value": "fail",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "call_user_func",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "parenthesizedExpression": true,
                "type": null,
                "uses": Array [],
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": New {
                      "arguments": Array [],
                      "kind": "new",
                      "what": Class {
                        "attrGroups": Array [],
                        "body": Array [
                          Method {
                            "arguments": Array [],
                            "attrGroups": Array [],
                            "body": Block {
                              "children": Array [],
                              "kind": "block",
                            },
                            "byref": false,
                            "isAbstract": false,
                            "isFinal": false,
                            "isStatic": true,
                            "kind": "method",
                            "name": Identifier {
                              "kind": "identifier",
                              "name": "foo",
                            },
                            "nullable": false,
                            "type": null,
                            "visibility": "",
                          },
                          Method {
                            "arguments": Array [],
                            "attrGroups": Array [],
                            "body": Block {
                              "children": Array [
                                Throw {
                                  "kind": "throw",
                                  "what": New {
                                    "arguments": Array [],
                                    "kind": "new",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "Error",
                                      "resolution": "uqn",
                                    },
                                  },
                                },
                              ],
                              "kind": "block",
                            },
                            "byref": false,
                            "isAbstract": false,
                            "isFinal": false,
                            "isStatic": false,
                            "kind": "method",
                            "name": Identifier {
                              "kind": "identifier",
                              "name": "__destruct",
                            },
                            "nullable": false,
                            "type": null,
                            "visibility": "",
                          },
                        ],
                        "extends": null,
                        "implements": null,
                        "isAbstract": false,
                        "isAnonymous": true,
                        "isFinal": false,
                        "kind": "class",
                        "name": null,
                      },
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"foo\\"",
                      "unicode": false,
                      "value": "foo",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
