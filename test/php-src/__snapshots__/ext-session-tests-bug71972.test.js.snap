// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #71972 (Cyclic references causing session_start(): Failed to decode session object) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ob_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "session_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'boogie'",
            "unicode": false,
            "value": "boogie",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "_SESSION",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'obj1'",
            "unicode": false,
            "value": "obj1",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "_SESSION",
          },
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "stdClass",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "cyclic_ref",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "2",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Number {
            "kind": "number",
            "value": "20",
          },
          "type": "<",
        },
      ],
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "num",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'obj'",
                    "unicode": false,
                    "value": "obj",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "num",
                  },
                  "type": ".",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "_SESSION",
                },
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "test",
                },
                "what": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'obj'",
                      "unicode": false,
                      "value": "obj",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "num",
                    },
                    "type": ".",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "_SESSION",
                  },
                },
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "obj1",
                },
                "what": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'obj'",
                      "unicode": false,
                      "value": "obj",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "num",
                    },
                    "type": ".",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "_SESSION",
                  },
                },
              },
              "operator": "=",
              "right": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'obj1'",
                  "unicode": false,
                  "value": "obj1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "_SESSION",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "cyclic_ref",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "session_encode",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "session_decode",
                "resolution": "uqn",
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "_SESSION",
            },
            "type": "==",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
