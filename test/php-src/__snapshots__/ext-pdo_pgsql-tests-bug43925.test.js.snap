// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #43925 (Incorrect argument counter in prepared statements with pgsql) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/../../../ext/pdo/tests/pdo_test.inc'",
            "unicode": false,
            "value": "/../../../ext/pdo/tests/pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dbh",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/common.phpt'",
                "unicode": false,
                "value": "/common.phpt",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "test_factory",
            },
            "what": Name {
              "kind": "name",
              "name": "PDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'DROP TABLE nodes'",
              "unicode": false,
              "value": "DROP TABLE nodes",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dbh",
            },
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'
CREATE TABLE nodes
(
   id   integer NOT NULL PRIMARY KEY
 , root integer NOT NULL
 , lft  integer NOT NULL
 , rgt  integer NOT NULL
);'",
            "unicode": false,
            "value": "
CREATE TABLE nodes
(
   id   integer NOT NULL PRIMARY KEY
 , root integer NOT NULL
 , lft  integer NOT NULL
 , rgt  integer NOT NULL
);",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'INSERT INTO nodes (id, root, lft, rgt) VALUES (1, 1, 1, 6);'",
            "unicode": false,
            "value": "INSERT INTO nodes (id, root, lft, rgt) VALUES (1, 1, 1, 6);",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'INSERT INTO nodes (id, root, lft, rgt) VALUES (2, 1, 2, 3);'",
            "unicode": false,
            "value": "INSERT INTO nodes (id, root, lft, rgt) VALUES (2, 1, 2, 3);",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'INSERT INTO nodes (id, root, lft, rgt) VALUES (3, 1, 4, 5);'",
            "unicode": false,
            "value": "INSERT INTO nodes (id, root, lft, rgt) VALUES (3, 1, 4, 5);",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'
    SELECT *
    FROM nodes
    WHERE (:rootId > 0 OR lft > :left OR rgt > :left)
        AND (root = :rootId OR root  = :left)
        AND (1 > :left OR 1 < :left OR 1 = :left)
        AND (:x > 0 OR :x < 10 OR :x > 100)
        OR :y = 1 OR :left = 1
'",
              "unicode": false,
              "value": "
    SELECT *
    FROM nodes
    WHERE (:rootId > 0 OR lft > :left OR rgt > :left)
        AND (root = :rootId OR root  = :left)
        AND (1 > :left OR 1 < :left OR 1 = :left)
        AND (:x > 0 OR :x < 10 OR :x > 100)
        OR :y = 1 OR :left = 1
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dbh",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'left'",
            "unicode": false,
            "value": "left",
          },
          Number {
            "kind": "number",
            "value": "1",
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "PARAM_INT",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bindValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'rootId'",
            "unicode": false,
            "value": "rootId",
          },
          Number {
            "kind": "number",
            "value": "3",
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "PARAM_INT",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bindValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'x'",
            "unicode": false,
            "value": "x",
          },
          Number {
            "kind": "number",
            "value": "5",
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "PARAM_INT",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bindValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'y'",
            "unicode": false,
            "value": "y",
          },
          Number {
            "kind": "number",
            "value": "50",
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "PARAM_INT",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bindValue",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "' - '",
                    "unicode": false,
                    "value": " - ",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "row",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "implode",
                  "resolution": "uqn",
                },
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fetchAll",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "row",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'DROP TABLE nodes'",
            "unicode": false,
            "value": "DROP TABLE nodes",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
