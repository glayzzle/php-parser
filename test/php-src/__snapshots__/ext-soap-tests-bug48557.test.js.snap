// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #48557 (Numeric string keys in Apache Hashmaps are not cast to integers) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "E_ALL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "error_reporting",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'display_errors'",
            "unicode": false,
            "value": "display_errors",
          },
          Number {
            "kind": "number",
            "value": "1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"soap.wsdl_cache_enabled\\"",
            "unicode": false,
            "value": "soap.wsdl_cache_enabled",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "map",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "map",
                },
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "map",
                  },
                },
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "map",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "y",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/bug48557.wsdl'",
                "unicode": false,
                "value": "/bug48557.wsdl",
              },
              "type": ".",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "SoapServer",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"test\\"",
            "unicode": false,
            "value": "test",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addfunction",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "request",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "XML",
          "raw": "<<<XML
<?xml version=\\"1.0\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://test-uri/\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:ns2=\\"http://xml.apache.org/xml-soap\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <SOAP-ENV:Body>
        <ns1:test>
            <testParam xsi:type=\\"ns2:Map\\">
                <item>
                    <key xsi:type=\\"xsd:int\\">1</key>
                    <value xsi:type=\\"xsd:int\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">-1000</key>
                    <value xsi:type=\\"xsd:string\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">2</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">-2000</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">011</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">012</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
            </testParam>
        </ns1:test>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
XML",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://test-uri/\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:ns2=\\"http://xml.apache.org/xml-soap\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <SOAP-ENV:Body>
        <ns1:test>
            <testParam xsi:type=\\"ns2:Map\\">
                <item>
                    <key xsi:type=\\"xsd:int\\">1</key>
                    <value xsi:type=\\"xsd:int\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">-1000</key>
                    <value xsi:type=\\"xsd:string\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">2</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">-2000</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">011</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">012</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
            </testParam>
        </ns1:test>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://test-uri/\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:ns2=\\"http://xml.apache.org/xml-soap\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <SOAP-ENV:Body>
        <ns1:test>
            <testParam xsi:type=\\"ns2:Map\\">
                <item>
                    <key xsi:type=\\"xsd:int\\">1</key>
                    <value xsi:type=\\"xsd:int\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">-1000</key>
                    <value xsi:type=\\"xsd:string\\">123</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">2</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">-2000</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:string\\">011</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
                <item>
                    <key xsi:type=\\"xsd:int\\">012</key>
                    <value xsi:type=\\"xsd:float\\">123.5</value>
                </item>
            </testParam>
        </ns1:test>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "request",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
