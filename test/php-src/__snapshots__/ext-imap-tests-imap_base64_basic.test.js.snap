// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test imap_base64() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing imap_base64() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing imap_base64() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'This is an example string to be base 64 encoded'",
          "unicode": false,
          "value": "This is an example string to be base 64 encoded",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "base64",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_encode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED\\"",
                "unicode": false,
                "value": "TEST FAILED",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "base64",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imap_base64",
            "resolution": "uqn",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'!£$%^&*()_+-={][];;@~#?/>.<,'",
          "unicode": false,
          "value": "!£$%^&*()_+-={][];;@~#?/>.<,",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "base64",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_encode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED\\"",
                "unicode": false,
                "value": "TEST FAILED",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "base64",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imap_base64",
            "resolution": "uqn",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "hex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\\\\x06\\\\xFA\\\\xFB\\\\xFC\\\\xFD\\\\xFE\\\\xFF'",
          "unicode": false,
          "value": "x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\\\\x06\\\\xFA\\\\xFB\\\\xFC\\\\xFD\\\\xFE\\\\xFF",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "base64",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "hex",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_encode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED\\"",
                "unicode": false,
                "value": "TEST FAILED",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "base64",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imap_base64",
            "resolution": "uqn",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "hex",
        },
        "type": "==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
