// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Constant arrays 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'FOOBAR'",
            "unicode": false,
            "value": "FOOBAR",
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "3",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'foo'",
                        "unicode": false,
                        "value": "foo",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'bar'",
                        "unicode": false,
                        "value": "bar",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "name": Identifier {
            "kind": "identifier",
            "name": "FOO_BAR",
          },
          "value": Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "3",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'foo'",
                        "unicode": false,
                        "value": "foo",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'bar'",
                        "unicode": false,
                        "value": "bar",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        },
      ],
      "kind": "constantstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "FOOBAR",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "7",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          Name {
            "kind": "name",
            "name": "FOOBAR",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "FOO_BAR",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "7",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          Name {
            "kind": "name",
            "name": "FOO_BAR",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "7",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "y",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": true,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'QUX'",
            "unicode": false,
            "value": "QUX",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "3",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
          Name {
            "kind": "name",
            "name": "QUX",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'ELEPHPANT'",
            "unicode": false,
            "value": "ELEPHPANT",
          },
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "StdClass",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "ELEPHPANT",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "recursive",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": AssignRef {
        "kind": "assignref",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "recursive",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "recursive",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'RECURSION'",
                  "unicode": false,
                  "value": "RECURSION",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "recursive",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "define",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "exception",
                        },
                      },
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "exception",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "ValueError",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
