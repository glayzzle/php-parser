// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Ensure "undefined offset" notice formats message correctly when undefined key is negative 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1",
          },
        },
        "what": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1.1",
          },
        },
        "what": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1",
          },
        },
        "what": New {
          "arguments": Array [],
          "kind": "new",
          "parenthesizedExpression": true,
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1.1",
          },
        },
        "what": New {
          "arguments": Array [],
          "kind": "new",
          "parenthesizedExpression": true,
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
