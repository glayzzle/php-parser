// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #48660 (parse_ini_*(): dollar sign as last character of value fails) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ini_location",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/bug48660.tmp'",
            "unicode": false,
            "value": "/bug48660.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ini_data",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'
[cases]
Case.a = avalue
Case.b = \\"$dollar_sign\\"
Case.c = \\"dollar_sign$\\"
Case.d = \\"$dollar_sign$\\"
Case.e = 10
'",
          "unicode": false,
          "value": "
[cases]
Case.a = avalue
Case.b = \\"$dollar_sign\\"
Case.c = \\"dollar_sign$\\"
Case.d = \\"$dollar_sign$\\"
Case.e = 10
",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ini_location",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ini_data",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "ini_location",
              },
              Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              Name {
                "kind": "name",
                "name": "INI_SCANNER_RAW",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "parse_ini_file",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "ini_location",
              },
              Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              Name {
                "kind": "name",
                "name": "INI_SCANNER_NORMAL",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "parse_ini_file",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
