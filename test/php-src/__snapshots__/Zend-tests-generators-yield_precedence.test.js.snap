// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Precedence of yield and arrow operators 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a\\"",
                  "unicode": false,
                  "value": "a",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a\\"",
                  "unicode": false,
                  "value": "a",
                },
                "right": Exit {
                  "expression": null,
                  "kind": "exit",
                  "useDie": true,
                },
                "type": "or",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"k\\"",
                "unicode": false,
                "value": "k",
              },
              "kind": "yield",
              "value": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a\\"",
                  "unicode": false,
                  "value": "a",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"k\\"",
                "unicode": false,
                "value": "k",
              },
              "kind": "yield",
              "value": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a\\"",
                  "unicode": false,
                  "value": "a",
                },
                "right": Exit {
                  "expression": null,
                  "kind": "exit",
                  "useDie": true,
                },
                "type": "or",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": Yield {
                        "key": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"k\\"",
                          "unicode": false,
                          "value": "k",
                        },
                        "kind": "yield",
                        "value": Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"a\\"",
                            "unicode": false,
                            "value": "a",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"b\\"",
                            "unicode": false,
                            "value": "b",
                          },
                          "type": ".",
                        },
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Yield {
                "key": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"k1\\"",
                  "unicode": false,
                  "value": "k1",
                },
                "kind": "yield",
                "value": Yield {
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"k2\\"",
                    "unicode": false,
                    "value": "k2",
                  },
                  "kind": "yield",
                  "value": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"a\\"",
                      "unicode": false,
                      "value": "a",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"b\\"",
                      "unicode": false,
                      "value": "b",
                    },
                    "type": ".",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": Yield {
                "key": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"k1\\"",
                  "unicode": false,
                  "value": "k1",
                },
                "kind": "yield",
                "value": Yield {
                  "key": null,
                  "kind": "yield",
                  "parenthesizedExpression": true,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"k2\\"",
                    "unicode": false,
                    "value": "k2",
                  },
                },
              },
              "kind": "yield",
              "value": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a\\"",
                  "unicode": false,
                  "value": "a",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": Yield {
                        "key": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"k1\\"",
                          "unicode": false,
                          "value": "k1",
                        },
                        "kind": "yield",
                        "value": Yield {
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"k2\\"",
                            "unicode": false,
                            "value": "k2",
                          },
                          "kind": "yield",
                          "value": Bin {
                            "kind": "bin",
                            "left": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"a\\"",
                              "unicode": false,
                              "value": "a",
                            },
                            "right": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"b\\"",
                              "unicode": false,
                              "value": "b",
                            },
                            "type": ".",
                          },
                        },
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": Yield {
                        "key": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"k1\\"",
                          "unicode": false,
                          "value": "k1",
                        },
                        "kind": "yield",
                        "value": Yield {
                          "key": null,
                          "kind": "yield",
                          "parenthesizedExpression": true,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"k2\\"",
                            "unicode": false,
                            "value": "k2",
                          },
                        },
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"a\\"",
                          "unicode": false,
                          "value": "a",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"b\\"",
                          "unicode": false,
                          "value": "b",
                        },
                        "type": ".",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "g",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "gen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"{$g->key()} => {$g->current()}\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "key",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "g",
                        },
                      },
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " => ",
                      "unicode": false,
                      "value": " => ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "current",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "g",
                        },
                      },
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "i",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "send",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "g",
            },
          },
        },
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "rewind",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "g",
            },
          },
        },
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "valid",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "g",
            },
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
