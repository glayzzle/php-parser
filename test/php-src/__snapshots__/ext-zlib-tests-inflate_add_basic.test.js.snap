// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test incremental inflate_add() functionality 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "mode",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "flushSize",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "buffer",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "inflated",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "resource",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "inflate_init",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "dataToInflate",
                    },
                    "operator": "=",
                    "right": Yield {
                      "key": null,
                      "kind": "yield",
                      "value": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "inflated",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "inflated",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "resource",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "buffer",
                              },
                              Name {
                                "kind": "name",
                                "name": "ZLIB_FINISH",
                                "resolution": "uqn",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "inflate_add",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "buffer",
                          },
                          "operator": ".=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "dataToInflate",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "inflated",
                                },
                                "operator": "=",
                                "right": NullKeyword {
                                  "kind": "nullkeyword",
                                  "raw": "null",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "inflated",
                                },
                                "operator": "=",
                                "right": Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "resource",
                                    },
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "buffer",
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "inflate_add",
                                    "resolution": "uqn",
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "buffer",
                                },
                                "operator": "=",
                                "right": String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"\\"",
                                  "unicode": false,
                                  "value": "",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "buffer",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strlen",
                              "resolution": "uqn",
                            },
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "flushSize",
                          },
                          "type": ">=",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Isset {
                    "kind": "isset",
                    "variables": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "dataToInflate",
                      },
                    ],
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "inflateStream",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "modes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_ENCODING_RAW'",
                "unicode": false,
                "value": "ZLIB_ENCODING_RAW",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_ENCODING_RAW",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_ENCODING_GZIP'",
                "unicode": false,
                "value": "ZLIB_ENCODING_GZIP",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_ENCODING_GZIP",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_ENCODING_DEFLATE'",
                "unicode": false,
                "value": "ZLIB_ENCODING_DEFLATE",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_ENCODING_DEFLATE",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "flushSizes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "4",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "32768",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "flushTypes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_SYNC_FLUSH'",
                "unicode": false,
                "value": "ZLIB_SYNC_FLUSH",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_SYNC_FLUSH",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_PARTIAL_FLUSH'",
                "unicode": false,
                "value": "ZLIB_PARTIAL_FLUSH",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_PARTIAL_FLUSH",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_FULL_FLUSH'",
                "unicode": false,
                "value": "ZLIB_FULL_FLUSH",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_FULL_FLUSH",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_NO_FLUSH'",
                "unicode": false,
                "value": "ZLIB_NO_FLUSH",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_NO_FLUSH",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ZLIB_BLOCK'",
                "unicode": false,
                "value": "ZLIB_BLOCK",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "ZLIB_BLOCK",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "uncompressed",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\"",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uncompressed",
              },
              "operator": ".=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "48",
                      },
                      Number {
                        "kind": "number",
                        "value": "125",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "rand",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "32768",
            },
            "parenthesizedExpression": true,
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "*",
          },
          "type": "<",
        },
      ],
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "compressed",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "uncompressed",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "zlib_encode",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "compressedLen",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "compressed",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strlen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                Foreach {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "inflated",
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\"",
                            "unicode": false,
                            "value": "",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stream",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "mode",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "flushSize",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "flushType",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "inflateStream",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      For {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "inflated",
                                },
                                "operator": ".=",
                                "right": Call {
                                  "arguments": Array [
                                    OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "i",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "compressed",
                                      },
                                    },
                                  ],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "send",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "stream",
                                    },
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "increment": Array [
                          Post {
                            "kind": "post",
                            "type": "+",
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                          },
                        ],
                        "init": Array [
                          Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "operator": "=",
                            "right": Number {
                              "kind": "number",
                              "value": "0",
                            },
                          },
                        ],
                        "kind": "for",
                        "shortForm": false,
                        "test": Array [
                          Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "compressedLen",
                            },
                            "type": "<",
                          },
                        ],
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "inflated",
                          },
                          "operator": ".=",
                          "right": Call {
                            "arguments": Array [
                              NullKeyword {
                                "kind": "nullkeyword",
                                "raw": "null",
                              },
                            ],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "send",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "stream",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"Error: {$modeKey} | {$flushSize} | {$flushTypeKey}\\\\n\\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "Error: ",
                                        "unicode": false,
                                        "value": "Error: ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "modeKey",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "complex",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": " | ",
                                        "unicode": false,
                                        "value": " | ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "flushSize",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "complex",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": " | ",
                                        "unicode": false,
                                        "value": " | ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "flushTypeKey",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "complex",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "\\\\n",
                                        "unicode": false,
                                        "value": "",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "inflated",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "uncompressed",
                          },
                          "type": "!==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flushTypeKey",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flushTypes",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flushType",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "flushSizes",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "flushSize",
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "modeKey",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "modes",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "mode",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
