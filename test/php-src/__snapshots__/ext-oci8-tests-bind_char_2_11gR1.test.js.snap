// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SELECT oci_bind_by_name with SQLT_AFC aka CHAR and dates 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/connect.inc'",
            "unicode": false,
            "value": "/connect.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmtarray",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"alter session set nls_date_format='YYYY-MM-DD'\\"",
                "unicode": false,
                "value": "alter session set nls_date_format='YYYY-MM-DD'",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table bind_char_tab\\"",
                "unicode": false,
                "value": "drop table bind_char_tab",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"create table bind_char_tab (id number, c1 date)\\"",
                "unicode": false,
                "value": "create table bind_char_tab (id number, c1 date)",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"insert into bind_char_tab values (1, '2008-04-20')\\"",
                "unicode": false,
                "value": "insert into bind_char_tab values (1, '2008-04-20')",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmtarray",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci8_test_sql_execute",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bv1",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'2008-04-20'",
          "unicode": false,
          "value": "2008-04-20",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.1: Type: default.  Length: default\\\\n\\"",
          "unicode": false,
          "value": "Test 1.1: Type: default.  Length: default
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "s",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "c",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"select * from bind_char_tab where c1 = :bv\\"",
              "unicode": false,
              "value": "select * from bind_char_tab where c1 = :bv",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_parse",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.2: Type: AFC.  Length: default\\\\n\\"",
          "unicode": false,
          "value": "Test 1.2: Type: AFC.  Length: default
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
            Unary {
              "kind": "unary",
              "type": "-",
              "what": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Name {
              "kind": "name",
              "name": "SQLT_AFC",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.3: Type: AFC:  Length: 0\\\\n\\"",
          "unicode": false,
          "value": "Test 1.3: Type: AFC:  Length: 0
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Name {
              "kind": "name",
              "name": "SQLT_AFC",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.4: Type: AFC:  Length: strlen\\\\n\\"",
          "unicode": false,
          "value": "Test 1.4: Type: AFC:  Length: strlen
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bv1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "strlen",
                "resolution": "uqn",
              },
            },
            Name {
              "kind": "name",
              "name": "SQLT_AFC",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.5: Type: AFC.  Length: strlen-1\\\\n\\"",
          "unicode": false,
          "value": "Test 1.5: Type: AFC.  Length: strlen-1
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bv1",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strlen",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "-",
            },
            Name {
              "kind": "name",
              "name": "SQLT_AFC",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1.6: Type: AFC.  Length: strlen+1\\\\n\\"",
          "unicode": false,
          "value": "Test 1.6: Type: AFC.  Length: strlen+1
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\":bv\\"",
              "unicode": false,
              "value": ":bv",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "bv1",
            },
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bv1",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strlen",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "+",
            },
            Name {
              "kind": "name",
              "name": "SQLT_AFC",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_bind_by_name",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "s",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "do_e_q",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "r",
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "s",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"  Querying:\\\\n\\"",
                "unicode": false,
                "value": "  Querying:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "r",
              },
              "operator": "=",
              "right": Silent {
                "expr": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "oci_execute",
                    "resolution": "uqn",
                  },
                },
                "kind": "silent",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "m",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "s",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "oci_error",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"    Oci_execute error ORA-\\"",
                          "unicode": false,
                          "value": "    Oci_execute error ORA-",
                        },
                        "right": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'code'",
                            "unicode": false,
                            "value": "code",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "m",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\" Exiting Query\\\\n\\"",
                        "unicode": false,
                        "value": " Exiting Query
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Return {
                  "expr": null,
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "r",
              },
            },
          },
          While {
            "body": Block {
              "children": Array [
                Foreach {
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"    :\\"",
                                "unicode": false,
                                "value": "    :",
                              },
                              "right": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "item",
                              },
                              "type": ".",
                            },
                            "right": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\":\\\\n\\"",
                              "unicode": false,
                              "value": ":
",
                            },
                            "type": ".",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "key": null,
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "row",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "item",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "s",
                  },
                  Bin {
                    "kind": "bin",
                    "left": Name {
                      "kind": "name",
                      "name": "OCI_ASSOC",
                      "resolution": "uqn",
                    },
                    "right": Name {
                      "kind": "name",
                      "name": "OCI_RETURN_NULLS",
                      "resolution": "uqn",
                    },
                    "type": "+",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_fetch_array",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "do_e_q",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmtarray",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"drop table bind_char_tab\\"",
                "unicode": false,
                "value": "drop table bind_char_tab",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmtarray",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci8_test_sql_execute",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
