// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests A generator iterator wrapper involved in a cycle should not leak 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "gen1",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": Closure {
                      "arguments": Array [],
                      "attrGroups": Array [],
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Yield {
                              "key": null,
                              "kind": "yield",
                              "value": Number {
                                "kind": "number",
                                "value": "1",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          ExpressionStatement {
                            "expression": Yield {
                              "key": null,
                              "kind": "yield",
                              "value": Number {
                                "kind": "number",
                                "value": "2",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          ExpressionStatement {
                            "expression": Yield {
                              "key": null,
                              "kind": "yield",
                              "value": Number {
                                "kind": "number",
                                "value": "3",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "byref": false,
                      "isStatic": false,
                      "kind": "closure",
                      "nullable": false,
                      "parenthesizedExpression": true,
                      "type": null,
                      "uses": Array [],
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "gen2",
                  },
                  "operator": "=",
                  "right": Closure {
                    "arguments": Array [],
                    "attrGroups": Array [],
                    "body": Block {
                      "children": Array [
                        Foreach {
                          "body": Block {
                            "children": Array [
                              Echo {
                                "expressions": Array [
                                  Encapsed {
                                    "kind": "encapsed",
                                    "raw": "\\"$x\\\\n\\"",
                                    "type": "string",
                                    "value": Array [
                                      EncapsedPart {
                                        "curly": false,
                                        "expression": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "x",
                                        },
                                        "kind": "encapsedpart",
                                        "syntax": "simple",
                                      },
                                      EncapsedPart {
                                        "curly": false,
                                        "expression": String {
                                          "isDoubleQuote": false,
                                          "kind": "string",
                                          "raw": "\\\\n",
                                          "unicode": false,
                                          "value": "",
                                        },
                                        "kind": "encapsedpart",
                                        "syntax": null,
                                      },
                                    ],
                                  },
                                ],
                                "kind": "echo",
                                "shortForm": false,
                              },
                              ExpressionStatement {
                                "expression": Yield {
                                  "key": null,
                                  "kind": "yield",
                                  "value": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "x",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                            ],
                            "kind": "block",
                          },
                          "key": null,
                          "kind": "foreach",
                          "shortForm": false,
                          "source": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "gen1",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                          "value": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "x",
                          },
                        },
                      ],
                      "kind": "block",
                    },
                    "byref": false,
                    "isStatic": false,
                    "kind": "closure",
                    "nullable": false,
                    "type": null,
                    "uses": Array [],
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "gen2",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "gen2",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Foreach {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          Break {
                            "kind": "break",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "2",
                        },
                        "type": "==",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "key": null,
                "kind": "foreach",
                "shortForm": false,
                "source": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "gen2",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "this",
                  },
                },
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "method",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Test",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "method",
          },
          "what": New {
            "arguments": Array [],
            "kind": "new",
            "parenthesizedExpression": true,
            "what": Name {
              "kind": "name",
              "name": "Test",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "gc_collect_cycles",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
