// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Temporary leak on exception 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Throw {
            "kind": "throw",
            "what": New {
              "arguments": Array [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "Exception",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "ops",
      },
      "nullable": false,
      "type": null,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "2",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "y",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "r",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": null,
                            "kind": "entry",
                            "unpack": false,
                            "value": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "x",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": true,
                      },
                      "right": RetIf {
                        "falseExpr": Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "ops",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "retif",
                        "parenthesizedExpression": true,
                        "test": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "y",
                        },
                        "trueExpr": Bin {
                          "kind": "bin",
                          "left": Cast {
                            "expr": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "x",
                            },
                            "kind": "cast",
                            "parenthesizedExpression": true,
                            "raw": "(array)",
                            "type": "array",
                          },
                          "right": Array {
                            "items": Array [
                              Entry {
                                "byRef": false,
                                "key": null,
                                "kind": "entry",
                                "unpack": false,
                                "value": Number {
                                  "kind": "number",
                                  "value": "2",
                                },
                              },
                            ],
                            "kind": "array",
                            "shortForm": true,
                          },
                          "type": "+",
                        },
                      },
                      "type": "+",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "y",
                    },
                    "operator": "=",
                    "right": Cast {
                      "expr": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "y",
                      },
                      "kind": "cast",
                      "raw": "(array)",
                      "type": "array",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Post {
                "kind": "post",
                "type": "-",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
              "type": "&&",
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Inline {
      "kind": "inline",
      "raw": "
==DONE==",
      "value": "==DONE==",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
