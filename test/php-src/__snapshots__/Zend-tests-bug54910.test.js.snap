// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #54910 (Crash when calling call_user_func with unknown function name) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "method",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "args",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "get",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "method",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'get'",
                        "unicode": false,
                        "value": "get",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "stripos",
                      "resolution": "uqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "===",
                },
              },
              ExpressionStatement {
                "expression": Exit {
                  "expression": Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"No such method - '$method'\\\\n\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "No such method - '",
                          "unicode": false,
                          "value": "No such method - '",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "method",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'\\\\n",
                          "unicode": false,
                          "value": "'",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                  "kind": "exit",
                  "useDie": true,
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__call",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "class",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "get_class",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "call",
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "class",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'noSuchMethod'",
                          "unicode": false,
                          "value": "noSuchMethod",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "call",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "call_user_func",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "call",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "is_callable",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "get",
          },
          "nullable": false,
          "type": null,
          "visibility": "protected",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": Name {
        "kind": "name",
        "name": "A",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "B",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "input",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "B",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getEmail",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "input",
            },
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
