// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test popen() and pclose function: basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing popen(): reading from the pipe ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing popen(): reading from the pipe ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_path",
        },
        "operator": "=",
        "right": Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Sample String\\"",
          "unicode": false,
          "value": "Sample String",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_handle",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Encapsed {
              "kind": "encapsed",
              "raw": "\\" echo $string\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": " echo ",
                    "unicode": false,
                    "value": " echo ",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "string",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
              ],
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"r\\"",
              "unicode": false,
              "value": "r",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "popen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "file_handle",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fpassthru",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "file_handle",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "pclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing popen(): writing to the pipe ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing popen(): writing to the pipe ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"ggg\\"",
                "unicode": false,
                "value": "ggg",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"ddd\\"",
                "unicode": false,
                "value": "ddd",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"aaa\\"",
                "unicode": false,
                "value": "aaa",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"sss\\"",
                "unicode": false,
                "value": "sss",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sysroot",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'echo %SYSTEMROOT%'",
              "unicode": false,
              "value": "echo %SYSTEMROOT%",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "exec",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_handle",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Encapsed {
              "kind": "encapsed",
              "raw": "\\"$sysroot/system32/sort\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sysroot",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "/system32/sort",
                    "unicode": false,
                    "value": "/system32/sort",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
              ],
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"w\\"",
              "unicode": false,
              "value": "w",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "popen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "newline",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "file_handle",
                },
                Cast {
                  "expr": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "str",
                  },
                  "kind": "cast",
                  "raw": "(binary)",
                  "type": "binary",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "file_handle",
                },
                Cast {
                  "expr": Cast {
                    "expr": Cast {
                      "expr": Cast {
                        "expr": Cast {
                          "expr": Cast {
                            "expr": Cast {
                              "expr": Cast {
                                "expr": Cast {
                                  "expr": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "newline",
                                  },
                                  "kind": "cast",
                                  "raw": "(binary)",
                                  "type": "binary",
                                },
                                "kind": "cast",
                                "raw": "(binary)",
                                "type": "binary",
                              },
                              "kind": "cast",
                              "raw": "(binary)",
                              "type": "binary",
                            },
                            "kind": "cast",
                            "raw": "(binary)",
                            "type": "binary",
                          },
                          "kind": "cast",
                          "raw": "(binary)",
                          "type": "binary",
                        },
                        "kind": "cast",
                        "raw": "(binary)",
                        "type": "binary",
                      },
                      "kind": "cast",
                      "raw": "(binary)",
                      "type": "binary",
                    },
                    "kind": "cast",
                    "raw": "(binary)",
                    "type": "binary",
                  },
                  "kind": "cast",
                  "raw": "(binary)",
                  "type": "binary",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "arr",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "str",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "file_handle",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "pclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing popen() and pclose(): return type ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing popen() and pclose(): return type ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "return_value_popen",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Encapsed {
              "kind": "encapsed",
              "raw": "\\"echo $string\\"",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "echo ",
                    "unicode": false,
                    "value": "echo ",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "string",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
              ],
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"r\\"",
              "unicode": false,
              "value": "r",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "popen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "return_value_popen",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fpassthru",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "return_value_popen",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_resource",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "return_value_pclose",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "return_value_popen",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pclose",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "return_value_pclose",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_int",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n--- Done ---\\"",
          "unicode": false,
          "value": "
--- Done ---",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
