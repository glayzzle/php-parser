// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests PDO_Firebird: bug 73087 segfault binding blob parameter 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'testdb.inc'",
          "unicode": false,
          "value": "testdb.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'recreate table atable (id integer not null, content blob sub_type 1 segment size 80)'",
            "unicode": false,
            "value": "recreate table atable (id integer not null, content blob sub_type 1 segment size 80)",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dbh",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "S",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'insert into atable (id, content) values (:id, :content)'",
              "unicode": false,
              "value": "insert into atable (id, content) values (:id, :content)",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dbh",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "Params",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'id'",
                      "unicode": false,
                      "value": "id",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "I",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'content'",
                      "unicode": false,
                      "value": "content",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            Number {
                              "kind": "number",
                              "value": "10",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "random_bytes",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "base64_encode",
                        "resolution": "uqn",
                      },
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "Param",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "Value",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "bindValue",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "S",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            "key": Variable {
              "curly": false,
              "kind": "variable",
              "name": "Param",
            },
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "Params",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "Value",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "execute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "S",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "I",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "I",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "I",
          },
          "right": Number {
            "kind": "number",
            "value": "10",
          },
          "type": "<",
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "S",
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "dbh",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'OK'",
          "unicode": false,
          "value": "OK",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
