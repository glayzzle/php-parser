// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #41566 (SOAP Server not properly generating href attributes) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUser",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "User",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "sName",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "aUser",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'newUser'",
                "unicode": false,
                "value": "newUser",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUsers",
              },
              "operator": "=",
              "right": Array {
                "items": Array [],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "aUsers",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUser",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "aUsers",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUser",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "aUsers",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUser",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "aUsers",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "aUser",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "aUsers",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "sName",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "User",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "server",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            NullKeyword {
              "kind": "nullkeyword",
              "raw": "null",
            },
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'uri'",
                    "unicode": false,
                    "value": "uri",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"http://testuri.org\\"",
                    "unicode": false,
                    "value": "http://testuri.org",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'soap_version'",
                    "unicode": false,
                    "value": "soap_version",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Name {
                    "kind": "name",
                    "name": "SOAP_1_2",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "soapserver",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"test\\"",
            "unicode": false,
            "value": "test",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addfunction",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "server",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "HTTP_RAW_POST_DATA",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<SOAP-ENV:Envelope
  SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
  xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
  xmlns:si=\\"http://soapinterop.org/xsd\\">
  <SOAP-ENV:Body>
    <ns1:test xmlns:ns1=\\"http://testuri.org\\" />
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<SOAP-ENV:Envelope
  SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
  xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
  xmlns:si=\\"http://soapinterop.org/xsd\\">
  <SOAP-ENV:Body>
    <ns1:test xmlns:ns1=\\"http://testuri.org\\" />
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<SOAP-ENV:Envelope
  SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
  xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
  xmlns:si=\\"http://soapinterop.org/xsd\\">
  <SOAP-ENV:Body>
    <ns1:test xmlns:ns1=\\"http://testuri.org\\" />
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ob_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "HTTP_RAW_POST_DATA",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "server",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\\\n\\"",
          "unicode": false,
          "value": "ok
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "HTTP_RAW_POST_DATA",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<env:Envelope xmlns:env=\\"http://www.w3.org/2003/05/soap-envelope\\"
  xmlns:ns1=\\"http://testuri.org\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:enc=\\"http://www.w3.org/2003/05/soap-encoding\\">
  <env:Body>
    <ns1:test env:encodingStyle=\\"http://www.w3.org/2003/05/soap-encoding\\"/>
  </env:Body>
</env:Envelope>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<env:Envelope xmlns:env=\\"http://www.w3.org/2003/05/soap-envelope\\"
  xmlns:ns1=\\"http://testuri.org\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:enc=\\"http://www.w3.org/2003/05/soap-encoding\\">
  <env:Body>
    <ns1:test env:encodingStyle=\\"http://www.w3.org/2003/05/soap-encoding\\"/>
  </env:Body>
</env:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<env:Envelope xmlns:env=\\"http://www.w3.org/2003/05/soap-envelope\\"
  xmlns:ns1=\\"http://testuri.org\\"
  xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
  xmlns:enc=\\"http://www.w3.org/2003/05/soap-encoding\\">
  <env:Body>
    <ns1:test env:encodingStyle=\\"http://www.w3.org/2003/05/soap-encoding\\"/>
  </env:Body>
</env:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "HTTP_RAW_POST_DATA",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "server",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\\\n\\"",
          "unicode": false,
          "value": "ok
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ob_flush",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
