// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Fetching BIT column values using the PS API 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'connect.inc'",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "dec",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "bits",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "maxval",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "2",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bits",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pow",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bin",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bin",
                          },
                          "operator": ".=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'0'",
                            "unicode": false,
                            "value": "0",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bin",
                          },
                          "operator": ".=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'1'",
                            "unicode": false,
                            "value": "1",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "dec",
                          },
                          "operator": "-=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bitval",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "dec",
                      },
                      "parenthesizedExpression": true,
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "bitval",
                      },
                      "type": "/",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "type": ">=",
                  },
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bitval",
                },
                "operator": "=",
                "right": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bitval",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "type": "/",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bitval",
                },
                "operator": "=",
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "maxval",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bitval",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
                "type": ">=",
              },
            ],
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bin",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "dec32bin",
      },
      "nullable": false,
      "type": null,
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\\\n\\"",
              "unicode": false,
              "value": "[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "host",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "port",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "socket",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "host",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "user",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "passwd",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "port",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "socket",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "my_mysqli_connect",
              "resolution": "uqn",
            },
          },
        },
      },
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "max_value",
                },
                "operator": "=",
                "right": Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "2",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "bits",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pow",
                      "resolution": "uqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "type": "-",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "max_value",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "1",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bits",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[002 - %d] [%d] %s\\\\n\\"",
                    "unicode": false,
                    "value": "[002 - %d] [%d] %s
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bits",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_errno",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Unary {
                "kind": "unary",
                "type": "!",
                "what": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"DROP TABLE IF EXISTS test\\"",
                      "unicode": false,
                      "value": "DROP TABLE IF EXISTS test",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
              "right": Unary {
                "kind": "unary",
                "type": "!",
                "what": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "sql",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'CREATE TABLE test(id BIGINT UNSIGNED, bit_value BIT(%d) NOT NULL, bit_null BIT(%d) DEFAULT NULL) ENGINE=\\"%s\\"'",
                            "unicode": false,
                            "value": "CREATE TABLE test(id BIGINT UNSIGNED, bit_value BIT(%d) NOT NULL, bit_null BIT(%d) DEFAULT NULL) ENGINE=\\"%s\\"",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bits",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bits",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "engine",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "sprintf",
                          "resolution": "uqn",
                        },
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "||",
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[003 - %d] [%d] %s\\\\n\\"",
                    "unicode": false,
                    "value": "[003 - %d] [%d] %s
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bits",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_errno",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "stmt",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_stmt_init",
                    "resolution": "uqn",
                  },
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tests",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rand_max",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mt_getrandmax",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tests",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": If {
                    "alternate": Block {
                      "children": Array [
                        If {
                          "alternate": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "value",
                                  },
                                  "operator": "=",
                                  "right": Call {
                                    "arguments": Array [
                                      Number {
                                        "kind": "number",
                                        "value": "0",
                                      },
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "max_value",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "mt_rand",
                                      "resolution": "uqn",
                                    },
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                            ],
                            "kind": "block",
                          },
                          "body": Block {
                            "children": Array [
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "max_loops",
                                  },
                                  "operator": "=",
                                  "right": Call {
                                    "arguments": Array [
                                      Bin {
                                        "kind": "bin",
                                        "left": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "max_value",
                                        },
                                        "right": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "rand_max",
                                        },
                                        "type": "/",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "floor",
                                      "resolution": "uqn",
                                    },
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "num_loops",
                                  },
                                  "operator": "=",
                                  "right": Call {
                                    "arguments": Array [
                                      Number {
                                        "kind": "number",
                                        "value": "1",
                                      },
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "max_loops",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "mt_rand",
                                      "resolution": "uqn",
                                    },
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              ExpressionStatement {
                                "expression": Assign {
                                  "kind": "assign",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "value",
                                  },
                                  "operator": "=",
                                  "right": Number {
                                    "kind": "number",
                                    "value": "0",
                                  },
                                },
                                "kind": "expressionstatement",
                              },
                              For {
                                "body": ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "value",
                                    },
                                    "operator": "+=",
                                    "right": Call {
                                      "arguments": Array [
                                        Number {
                                          "kind": "number",
                                          "value": "0",
                                        },
                                        Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "rand_max",
                                        },
                                      ],
                                      "kind": "call",
                                      "what": Name {
                                        "kind": "name",
                                        "name": "mt_rand",
                                        "resolution": "uqn",
                                      },
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                "increment": Array [
                                  Post {
                                    "kind": "post",
                                    "type": "+",
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                  },
                                ],
                                "init": Array [
                                  Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                    "operator": "=",
                                    "right": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                  },
                                ],
                                "kind": "for",
                                "shortForm": false,
                                "test": Array [
                                  Bin {
                                    "kind": "bin",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "i",
                                    },
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "num_loops",
                                    },
                                    "type": "<",
                                  },
                                ],
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "if",
                          "shortForm": false,
                          "test": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "max_value",
                            },
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "rand_max",
                            },
                            "type": ">",
                          },
                        },
                      ],
                      "kind": "block",
                    },
                    "body": ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                        "operator": "=",
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "max_value",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "2",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tests",
                      },
                      "type": "==",
                    },
                  },
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "value",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tests",
                    },
                    "type": "==",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bin",
                    },
                    "operator": "=",
                    "right": RetIf {
                      "falseExpr": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "value",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bits",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "dec32bin",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "retif",
                      "test": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bits",
                        },
                        "parenthesizedExpression": true,
                        "right": Number {
                          "kind": "number",
                          "value": "32",
                        },
                        "type": "<",
                      },
                      "trueExpr": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "value",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "decbin",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sql",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"INSERT INTO test(id, bit_value) VALUES (%s, b'%s')\\"",
                          "unicode": false,
                          "value": "INSERT INTO test(id, bit_value) VALUES (%s, b'%s')",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bin",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                For {
                  "body": null,
                  "increment": Array [
                    Post {
                      "kind": "post",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    },
                  ],
                  "init": Array [
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                    },
                  ],
                  "kind": "for",
                  "shortForm": false,
                  "test": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "parenthesizedExpression": true,
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bin",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strlen",
                            "resolution": "uqn",
                          },
                        },
                        "type": "<",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "bin",
                          },
                        },
                        "parenthesizedExpression": true,
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'0'",
                          "unicode": false,
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "type": "&&",
                    },
                  ],
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bin2",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bin",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bin",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strlen",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "substr",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[004 - %d] [%d] %s\\\\n\\"",
                          "unicode": false,
                          "value": "[004 - %d] [%d] %s
",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bits",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_errno",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_error",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "sql",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_stmt_prepare",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_stmt_execute",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sql",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"SELECT bin(bit_value) AS _bin, id, bit_value, bit_null FROM test WHERE id = %s\\"",
                          "unicode": false,
                          "value": "SELECT bin(bit_value) AS _bin, id, bit_value, bit_null FROM test WHERE id = %s",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[005 - %d] [%d] %s\\\\n\\"",
                          "unicode": false,
                          "value": "[005 - %d] [%d] %s
",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bits",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_errno",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_error",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "sql",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_stmt_prepare",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_stmt_execute",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "type": "||",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[006 - %d] [%d] %s\\\\n\\"",
                          "unicode": false,
                          "value": "[006 - %d] [%d] %s
",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bits",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_errno",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_stmt_error",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "res",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_stmt_get_result",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[007 - %d] [%d] %s\\\\n\\"",
                          "unicode": false,
                          "value": "[007 - %d] [%d] %s
",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bits",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "link",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_errno",
                            "resolution": "uqn",
                          },
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "link",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mysqli_error",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "row",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "res",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mysqli_fetch_assoc",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "res",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_free_result",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "row",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "debug_zval_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[008 - %d] Insert of %s in BIT(%d) column might have failed. id = %s, bin = %s (%s/%s)\\\\n\\"",
                              "unicode": false,
                              "value": "[008 - %d] Insert of %s in BIT(%d) column might have failed. id = %s, bin = %s (%s/%s)
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bits",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bits",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'id'",
                                "unicode": false,
                                "value": "id",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "row",
                              },
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'_bin'",
                                "unicode": false,
                                "value": "_bin",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "row",
                              },
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bin",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bin2",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "value",
                      },
                      "parenthesizedExpression": true,
                      "right": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'id'",
                          "unicode": false,
                          "value": "id",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "row",
                        },
                      },
                      "type": "!=",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bin",
                        },
                        "parenthesizedExpression": true,
                        "right": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'_bin'",
                            "unicode": false,
                            "value": "_bin",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "row",
                          },
                        },
                        "type": "!=",
                      },
                      "parenthesizedExpression": true,
                      "right": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bin2",
                        },
                        "parenthesizedExpression": true,
                        "right": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'_bin'",
                            "unicode": false,
                            "value": "_bin",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "row",
                          },
                        },
                        "type": "!=",
                      },
                      "type": "&&",
                    },
                    "type": "||",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "row",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "debug_zval_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"%10s %64s\\\\n%10s %64s\\\\n\\"",
                              "unicode": false,
                              "value": "%10s %64s
%10s %64s
",
                            },
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'_bin'",
                              "unicode": false,
                              "value": "_bin",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'_bin'",
                                "unicode": false,
                                "value": "_bin",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "row",
                              },
                            },
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'insert'",
                              "unicode": false,
                              "value": "insert",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bin",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[009 - %d] Expecting %s got %s\\\\n\\"",
                              "unicode": false,
                              "value": "[009 - %d] Expecting %s got %s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bits",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'bit_value'",
                                "unicode": false,
                                "value": "bit_value",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "row",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "value",
                    },
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'bit_value'",
                        "unicode": false,
                        "value": "bit_value",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "row",
                      },
                    },
                    "type": "!=",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "row",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "debug_zval_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[010 - %d] Expecting null got %s/%s\\\\n\\"",
                              "unicode": false,
                              "value": "[010 - %d] Expecting null got %s/%s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "bits",
                            },
                            Call {
                              "arguments": Array [
                                OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'bit_value'",
                                    "unicode": false,
                                    "value": "bit_value",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "row",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'bit_value'",
                                "unicode": false,
                                "value": "bit_value",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "row",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'bit_null'",
                        "unicode": false,
                        "value": "bit_null",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "row",
                      },
                    },
                    "type": "!==",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tests",
              },
              "right": Number {
                "kind": "number",
                "value": "10",
              },
              "type": "<",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "stmt",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mysqli_stmt_close",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bits",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bits",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "bits",
          },
          "right": Number {
            "kind": "number",
            "value": "46",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mysqli_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
