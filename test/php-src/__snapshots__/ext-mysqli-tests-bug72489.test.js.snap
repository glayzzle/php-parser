// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #72489 (PHP Crashes When Modifying Array Containing MySQLi Result Data) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"connect.inc\\"",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[001] Connect failed, [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[001] Connect failed, [%d] %s
",
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_connect_errno",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_connect_error",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "host",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "user",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "passwd",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "port",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "socket",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "my_mysqli_connect",
              "resolution": "uqn",
            },
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[002] [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[002] [%d] %s
",
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errno",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "error",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"DROP TABLE IF EXISTS bug72489\\"",
              "unicode": false,
              "value": "DROP TABLE IF EXISTS bug72489",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[003] [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[003] [%d] %s
",
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errno",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "error",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"CREATE TABLE bug72489 (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, code VARCHAR(30) NOT NULL)\\"",
              "unicode": false,
              "value": "CREATE TABLE bug72489 (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, code VARCHAR(30) NOT NULL)",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "seedSQL",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"INSERT INTO bug72489 (\`code\`) VALUES ('code1'), ('code2'), ('code3');\\"",
          "unicode": false,
          "value": "INSERT INTO bug72489 (\`code\`) VALUES ('code1'), ('code2'), ('code3');",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[004] [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[004] [%d] %s
",
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errno",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "error",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "seedSQL",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "query",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "link",
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subRow",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[005] [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[005] [%d] %s
",
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errno",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "error",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SELECT id, code FROM bug72489\\"",
                "unicode": false,
                "value": "SELECT id, code FROM bug72489",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "prepare",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "MYSQLI_STMT_ATTR_CURSOR_TYPE",
            "resolution": "uqn",
          },
          Name {
            "kind": "name",
            "name": "MYSQLI_CURSOR_TYPE_READ_ONLY",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "attr_set",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[006] [%d] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[006] [%d] %s
",
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errno",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "error",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "link",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'id'",
                  "unicode": false,
                  "value": "id",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "subRow",
                },
              },
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'code'",
                  "unicode": false,
                  "value": "code",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "subRow",
                },
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "bind_result",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "execute",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        },
        "type": "||",
      },
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "testArray",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'id'",
                      "unicode": false,
                      "value": "id",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'code'",
                  "unicode": false,
                  "value": "code",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "subRow",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "testArray",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fetch",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Finished 1\\\\n\\"",
          "unicode": false,
          "value": "Finished 1
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "newArray",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Finished 2\\\\n\\"",
          "unicode": false,
          "value": "Finished 2
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
