// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #30994 (SOAP server unable to handle request with references) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "HTTP_RAW_POST_DATA",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<soap:Envelope xmlns:soap=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
    xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
    xmlns:tns=\\"http://spock/kunta/kunta\\"
    xmlns:types=\\"http://spock/kunta/kunta/encodedTypes\\"
    xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
    xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\">
<soap:Body
soap:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <q1:bassCall xmlns:q1=\\"http://spock/bass/types/kunta\\">
        <system xsi:type=\\"xsd:string\\">XXX</system>
        <function xsi:type=\\"xsd:string\\">TASKTEST</function>
        <parameter href=\\"#id1\\" />
    </q1:bassCall>
    <soapenc:Array id=\\"id1\\" soapenc:arrayType=\\"tns:Item[1]\\">
        <Item href=\\"#id2\\" />
    </soapenc:Array>
    <tns:Item id=\\"id2\\" xsi:type=\\"tns:Item\\">
        <key xsi:type=\\"xsd:string\\">ABCabc123</key>
        <val xsi:type=\\"xsd:string\\">123456</val>
    </tns:Item>
</soap:Body>
</soap:Envelope>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<soap:Envelope xmlns:soap=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
    xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
    xmlns:tns=\\"http://spock/kunta/kunta\\"
    xmlns:types=\\"http://spock/kunta/kunta/encodedTypes\\"
    xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
    xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\">
<soap:Body
soap:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <q1:bassCall xmlns:q1=\\"http://spock/bass/types/kunta\\">
        <system xsi:type=\\"xsd:string\\">XXX</system>
        <function xsi:type=\\"xsd:string\\">TASKTEST</function>
        <parameter href=\\"#id1\\" />
    </q1:bassCall>
    <soapenc:Array id=\\"id1\\" soapenc:arrayType=\\"tns:Item[1]\\">
        <Item href=\\"#id2\\" />
    </soapenc:Array>
    <tns:Item id=\\"id2\\" xsi:type=\\"tns:Item\\">
        <key xsi:type=\\"xsd:string\\">ABCabc123</key>
        <val xsi:type=\\"xsd:string\\">123456</val>
    </tns:Item>
</soap:Body>
</soap:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<soap:Envelope xmlns:soap=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
    xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
    xmlns:tns=\\"http://spock/kunta/kunta\\"
    xmlns:types=\\"http://spock/kunta/kunta/encodedTypes\\"
    xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"
    xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\">
<soap:Body
soap:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\">
    <q1:bassCall xmlns:q1=\\"http://spock/bass/types/kunta\\">
        <system xsi:type=\\"xsd:string\\">XXX</system>
        <function xsi:type=\\"xsd:string\\">TASKTEST</function>
        <parameter href=\\"#id1\\" />
    </q1:bassCall>
    <soapenc:Array id=\\"id1\\" soapenc:arrayType=\\"tns:Item[1]\\">
        <Item href=\\"#id2\\" />
    </soapenc:Array>
    <tns:Item id=\\"id2\\" xsi:type=\\"tns:Item\\">
        <key xsi:type=\\"xsd:string\\">ABCabc123</key>
        <val xsi:type=\\"xsd:string\\">123456</val>
    </tns:Item>
</soap:Body>
</soap:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ok\\"",
              "unicode": false,
              "value": "ok",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "bassCall",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            NullKeyword {
              "kind": "nullkeyword",
              "raw": "NULL",
            },
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"uri\\"",
                    "unicode": false,
                    "value": "uri",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"http://spock/kunta/kunta\\"",
                    "unicode": false,
                    "value": "http://spock/kunta/kunta",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "SoapServer",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"bassCall\\"",
            "unicode": false,
            "value": "bassCall",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "addFunction",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "HTTP_RAW_POST_DATA",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
