// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #80037: Typed property must not be accessed before initialization when __get() declared 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "a",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "string",
                "raw": "string",
              },
              "value": null,
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "props",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "array",
                "raw": "array",
              },
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "me",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": StaticReference {
                      "kind": "staticreference",
                      "raw": "static",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Foreach {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": AssignRef {
                        "kind": "assignref",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "k",
                            },
                            "kind": "encapsedpart",
                            "syntax": "complex",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "me",
                          },
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "v",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "key": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                "kind": "foreach",
                "shortForm": false,
                "source": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "props",
                },
                "value": Variable {
                  "byref": true,
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "me",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "fromArray",
          },
          "nullable": false,
          "type": SelfReference {
            "kind": "selfreference",
            "raw": "self",
          },
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "name",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Throw {
                "kind": "throw",
                "what": New {
                  "arguments": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"Property '$name' is not defined.\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "Property '",
                            "unicode": false,
                            "value": "Property '",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "name",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "' is not defined.",
                            "unicode": false,
                            "value": "' is not defined.",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "\\\\LogicException",
                    "resolution": "fqn",
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__get",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": true,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'a'",
                      "unicode": false,
                      "value": "a",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'foo'",
                      "unicode": false,
                      "value": "foo",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fromArray",
              },
              "what": Name {
                "kind": "name",
                "name": "A",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
