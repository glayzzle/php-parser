// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GH-7902 (mb_send_mail may delimit headers with LF only) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_internal_encoding",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"uni\\"",
            "unicode": false,
            "value": "uni",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_language",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "to",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"omittedvalidaddress@example.com\\"",
          "unicode": false,
          "value": "omittedvalidaddress@example.com",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"test mail\\"",
          "unicode": false,
          "value": "test mail",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "message",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"body of testing php mail\\"",
          "unicode": false,
          "value": "body of testing php mail",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Mime-Version\\"",
            "unicode": false,
            "value": "Mime-Version",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "header",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"1.0\\"",
          "unicode": false,
          "value": "1.0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"Content-Type\\"",
            "unicode": false,
            "value": "Content-Type",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "header",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"text/html; charset=UTF-8\\"",
          "unicode": false,
          "value": "text/html; charset=UTF-8",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"From\\"",
            "unicode": false,
            "value": "From",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "header",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"omittedvalidaddress2@example.com\\"",
          "unicode": false,
          "value": "omittedvalidaddress2@example.com",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"X-Mailer\\"",
            "unicode": false,
            "value": "X-Mailer",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "header",
          },
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"PHP/\\"",
            "unicode": false,
            "value": "PHP/",
          },
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "phpversion",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "to",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "subject",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "message",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "header",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_send_mail",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stream",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"/gh7902.eml\\"",
                "unicode": false,
                "value": "/gh7902.eml",
              },
              "type": ".",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"rb\\"",
              "unicode": false,
              "value": "rb",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "eml",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "stream",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "stream_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "stream",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/(?<!\\\\r)\\\\n/'",
                "unicode": false,
                "value": "/(?<!\\\\r)\\\\n/",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "eml",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match_all",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
