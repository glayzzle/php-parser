// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Register Alloction 003: Reuse temporary register 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "char_code",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": Block {
              "children": Array [
                Return {
                  "expr": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"wrong\\"",
                    "unicode": false,
                    "value": "wrong",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Return {
                  "expr": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"correct\\"",
                    "unicode": false,
                    "value": "correct",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "char_code",
              },
              "right": Unary {
                "kind": "unary",
                "type": "!",
                "what": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "char_code",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "0xffffff80",
                  },
                  "type": "&",
                },
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "65",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test",
            "resolution": "uqn",
          },
        },
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
