// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Observer: Generator with manual traversal 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Starting generator'",
                  "unicode": false,
                  "value": "Starting generator",
                },
                "right": Name {
                  "kind": "name",
                  "name": "PHP_EOL",
                  "resolution": "uqn",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Break {
                    "kind": "break",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Yield {
                    "key": null,
                    "kind": "yield",
                    "value": Post {
                      "kind": "post",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "fooResults",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "generator",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fooResults",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "current",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "generator",
                          },
                        },
                      },
                      "right": Name {
                        "kind": "name",
                        "name": "PHP_EOL",
                        "resolution": "uqn",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'Boop'",
                              "unicode": false,
                              "value": "Boop",
                            },
                          ],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "send",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "generator",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "current",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "generator",
                        },
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                    "type": "===",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "next",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "generator",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "current",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "generator",
                  },
                },
              },
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "NULL",
              },
              "type": "!==",
            },
          },
          Return {
            "expr": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Done'",
              "unicode": false,
              "value": "Done",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "doSomething",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "doSomething",
              "resolution": "uqn",
            },
          },
          "right": Name {
            "kind": "name",
            "name": "PHP_EOL",
            "resolution": "uqn",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
