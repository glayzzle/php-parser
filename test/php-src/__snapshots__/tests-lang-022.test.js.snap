// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Switch test 3 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "i",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "j",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [
                      Switch {
                        "body": Block {
                          "children": Array [
                            Case {
                              "body": Block {
                                "children": Array [
                                  Echo {
                                    "expressions": Array [
                                      String {
                                        "isDoubleQuote": true,
                                        "kind": "string",
                                        "raw": "\\"zero\\"",
                                        "unicode": false,
                                        "value": "zero",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                  Break {
                                    "kind": "break",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "case",
                              "test": Number {
                                "kind": "number",
                                "value": "0",
                              },
                            },
                            Case {
                              "body": Block {
                                "children": Array [
                                  Echo {
                                    "expressions": Array [
                                      String {
                                        "isDoubleQuote": true,
                                        "kind": "string",
                                        "raw": "\\"one\\"",
                                        "unicode": false,
                                        "value": "one",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                  Break {
                                    "kind": "break",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "case",
                              "test": Number {
                                "kind": "number",
                                "value": "1",
                              },
                            },
                            Case {
                              "body": Block {
                                "children": Array [
                                  Echo {
                                    "expressions": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "j",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                  Break {
                                    "kind": "break",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "case",
                              "test": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "switch",
                        "shortForm": false,
                        "test": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "j",
                        },
                      },
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\n\\"",
                            "unicode": false,
                            "value": "
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"Default taken\\\\n\\"",
                            "unicode": false,
                            "value": "Default taken
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": null,
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "i",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "switchtest",
      },
      "nullable": false,
      "type": null,
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "k",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "switchtest",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                "right": Number {
                  "kind": "number",
                  "value": "10",
                },
                "type": "<",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "3",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
