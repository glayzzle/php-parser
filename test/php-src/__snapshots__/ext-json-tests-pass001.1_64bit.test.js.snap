// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests JSON (http://www.crockford.com/JSON/JSON_checker/test/pass1.json) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"
[
    \\\\\\"JSON Test Pattern pass1\\\\\\",
    {\\\\\\"object with 1 member\\\\\\":[\\\\\\"array with 1 element\\\\\\"]},
    {},
    [],
    -42,
    true,
    false,
    null,
    {
        \\\\\\"integer\\\\\\": 1234567890,
        \\\\\\"real\\\\\\": -9876.543210,
        \\\\\\"e\\\\\\": 0.123456789e-12,
        \\\\\\"E\\\\\\": 1.234567890E+34,
        \\\\\\"\\\\\\":  23456789012E666,
        \\\\\\"E no .\\\\\\":  4E12,
        \\\\\\"zero\\\\\\": 0,
        \\\\\\"one\\\\\\": 1,
        \\\\\\"space\\\\\\": \\\\\\" \\\\\\",
        \\\\\\"quote\\\\\\": \\\\\\"\\\\\\\\\\\\\\"\\\\\\",
        \\\\\\"backslash\\\\\\": \\\\\\"\\\\\\\\\\\\\\\\\\\\\\",
        \\\\\\"controls\\\\\\": \\\\\\"\\\\\\\\b\\\\\\\\f\\\\\\\\n\\\\\\\\r\\\\\\\\t\\\\\\",
        \\\\\\"slash\\\\\\": \\\\\\"/ & \\\\\\\\/\\\\\\",
        \\\\\\"alpha\\\\\\": \\\\\\"abcdefghijklmnopqrstuvwyz\\\\\\",
        \\\\\\"ALPHA\\\\\\": \\\\\\"ABCDEFGHIJKLMNOPQRSTUVWYZ\\\\\\",
        \\\\\\"digit\\\\\\": \\\\\\"0123456789\\\\\\",
        \\\\\\"special\\\\\\": \\\\\\"\`1~!@#$%^&*()_+-={':[,]}|;.</>?\\\\\\",
        \\\\\\"hex\\\\\\": \\\\\\"\\\\\\\\u0123\\\\\\\\u4567\\\\\\\\u89AB\\\\\\\\uCDEF\\\\\\\\uabcd\\\\\\\\uef4A\\\\\\",
        \\\\\\"unicode\\\\\\": \\\\\\"\\\\\\\\u30d7\\\\\\\\u30ec\\\\\\\\u30b9\\\\\\\\u30ad\\\\\\\\u30c3\\\\\\\\u30c8\\\\\\",
        \\\\\\"プレスキット\\\\\\": \\\\\\"プレスキット\\\\\\",
        \\\\\\"empty_string\\\\\\": \\\\\\"\\\\\\",
        \\\\\\"true\\\\\\": true,
        \\\\\\"false\\\\\\": false,
        \\\\\\"null\\\\\\": null,
        \\\\\\"array\\\\\\":[  ],
        \\\\\\"object\\\\\\":{  },
        \\\\\\"123\\\\\\":{\\\\\\"456\\\\\\":{\\\\\\"abc\\\\\\":{\\\\\\"789\\\\\\":\\\\\\"def\\\\\\",\\\\\\"012\\\\\\":[1,2,\\\\\\"5\\\\\\",500],\\\\\\"ghi\\\\\\":[1,2,\\\\\\"five\\\\\\",50,\\\\\\"sixty\\\\\\"]}}},
        \\\\\\"address\\\\\\": \\\\\\"50 St. James Street\\\\\\",
        \\\\\\"url\\\\\\": \\\\\\"http://www.JSON.org/\\\\\\",
        \\\\\\"comment\\\\\\": \\\\\\"// /* <!-- --\\\\\\",
        \\\\\\"# -- --> */\\\\\\": \\\\\\" \\\\\\",
        \\\\\\" s p a c e d \\\\\\" :[1,2 , 3
,
4 , 5        ,          6           ,7        ],
        \\\\\\"compact\\\\\\": [1,2,3,4,5,6,7],
        \\\\\\"jsontext\\\\\\": \\\\\\"{\\\\\\\\\\\\\\"object with 1 member\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\"array with 1 element\\\\\\\\\\\\\\"]}\\\\\\",
        \\\\\\"quotes\\\\\\": \\\\\\"&#34; \\\\\\\\u0022 %22 0x22 034 &#x22;\\\\\\",
        \\\\\\"\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\uCAFE\\\\\\\\uBABE\\\\\\\\uAB98\\\\\\\\uFCDE\\\\\\\\ubcda\\\\\\\\uef4A\\\\\\\\b\\\\\\\\f\\\\\\\\n\\\\\\\\r\\\\\\\\t\`1~!@#$%^&*()_+-=[]{}|;:',./<>?\\\\\\"
: \\\\\\"A key can be any string\\\\\\"
    },
    0.5 ,98.6
,
99.44
,
1066
,\\\\\\"rosebud\\\\\\"]
\\"",
          "unicode": false,
          "value": "
[
    \\"JSON Test Pattern pass1\\\\\\",
    {\\\\\\"object with 1 member\\\\\\":[\\\\\\"array with 1 element\\\\\\"]},
    {},
    [],
    -42,
    true,
    false,
    null,
    {
        \\\\\\"integer\\\\\\": 1234567890,
        \\\\\\"real\\\\\\": -9876.543210,
        \\\\\\"e\\\\\\": 0.123456789e-12,
        \\\\\\"E\\\\\\": 1.234567890E+34,
        \\\\\\"\\\\\\":  23456789012E666,
        \\\\\\"E no .\\\\\\":  4E12,
        \\\\\\"zero\\\\\\": 0,
        \\\\\\"one\\\\\\": 1,
        \\\\\\"space\\\\\\": \\\\\\" \\\\\\",
        \\\\\\"quote\\\\\\": \\\\\\"\\\\\\\\\\"\\\\\\",
        \\\\\\"backslash\\\\\\": \\\\\\"\\\\\\\\\\\\\\",
        \\\\\\"controls\\\\\\": \\\\\\"\\\\b\\\\f\\\\n\\\\r\\\\t\\\\\\",
        \\\\\\"slash\\\\\\": \\\\\\"/ & \\\\/\\\\\\",
        \\\\\\"alpha\\\\\\": \\\\\\"abcdefghijklmnopqrstuvwyz\\\\\\",
        \\\\\\"ALPHA\\\\\\": \\\\\\"ABCDEFGHIJKLMNOPQRSTUVWYZ\\\\\\",
        \\\\\\"digit\\\\\\": \\\\\\"0123456789\\\\\\",
        \\\\\\"special\\\\\\": \\\\\\"\`1~!@#$%^&*()_+-={':[,]}|;.</>?\\\\\\",
        \\\\\\"hex\\\\\\": \\\\\\"\\\\u0123\\\\u4567\\\\u89AB\\\\uCDEF\\\\uabcd\\\\uef4A\\\\\\",
        \\\\\\"unicode\\\\\\": \\\\\\"\\\\u30d7\\\\u30ec\\\\u30b9\\\\u30ad\\\\u30c3\\\\u30c8\\\\\\",
        \\\\\\"プレスキット\\\\\\": \\\\\\"プレスキット\\\\\\",
        \\\\\\"empty_string\\\\\\": \\\\\\"\\\\\\",
        \\\\\\"true\\\\\\": true,
        \\\\\\"false\\\\\\": false,
        \\\\\\"null\\\\\\": null,
        \\\\\\"array\\\\\\":[  ],
        \\\\\\"object\\\\\\":{  },
        \\\\\\"123\\\\\\":{\\\\\\"456\\\\\\":{\\\\\\"abc\\\\\\":{\\\\\\"789\\\\\\":\\\\\\"def\\\\\\",\\\\\\"012\\\\\\":[1,2,\\\\\\"5\\\\\\",500],\\\\\\"ghi\\\\\\":[1,2,\\\\\\"five\\\\\\",50,\\\\\\"sixty\\\\\\"]}}},
        \\\\\\"address\\\\\\": \\\\\\"50 St. James Street\\\\\\",
        \\\\\\"url\\\\\\": \\\\\\"http://www.JSON.org/\\\\\\",
        \\\\\\"comment\\\\\\": \\\\\\"// /* <!-- --\\\\\\",
        \\\\\\"# -- --> */\\\\\\": \\\\\\" \\\\\\",
        \\\\\\" s p a c e d \\\\\\" :[1,2 , 3
,
4 , 5        ,          6           ,7        ],
        \\\\\\"compact\\\\\\": [1,2,3,4,5,6,7],
        \\\\\\"jsontext\\\\\\": \\\\\\"{\\\\\\\\\\"object with 1 member\\\\\\\\\\":[\\\\\\\\\\"array with 1 element\\\\\\\\\\"]}\\\\\\",
        \\\\\\"quotes\\\\\\": \\\\\\"&#34; \\\\u0022 %22 0x22 034 &#x22;\\\\\\",
        \\\\\\"\\\\/\\\\\\\\\\\\\\\\\\"\\\\uCAFE\\\\uBABE\\\\uAB98\\\\uFCDE\\\\ubcda\\\\uef4A\\\\b\\\\f\\\\n\\\\r\\\\t\`1~!@#$%^&*()_+-=[]{}|;:',./<>?\\\\\\"
: \\\\\\"A key can be any string\\\\\\"
    },
    0.5 ,98.6
,
99.44
,
1066
,\\\\\\"rosebud\\\\\\"]
",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Testing:'",
              "unicode": false,
              "value": "Testing:",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"DECODE: AS OBJECT\\\\n\\"",
          "unicode": false,
          "value": "DECODE: AS OBJECT
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "obj",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"DECODE: AS ARRAY\\\\n\\"",
          "unicode": false,
          "value": "DECODE: AS ARRAY
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
            Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "arr",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ENCODE: FROM OBJECT\\\\n\\"",
          "unicode": false,
          "value": "ENCODE: FROM OBJECT
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "obj_enc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
            Name {
              "kind": "name",
              "name": "JSON_PARTIAL_OUTPUT_ON_ERROR",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_encode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj_enc",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ENCODE: FROM ARRAY\\\\n\\"",
          "unicode": false,
          "value": "ENCODE: FROM ARRAY
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr_enc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "arr",
            },
            Name {
              "kind": "name",
              "name": "JSON_PARTIAL_OUTPUT_ON_ERROR",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_encode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "arr_enc",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"DECODE AGAIN: AS OBJECT\\\\n\\"",
          "unicode": false,
          "value": "DECODE AGAIN: AS OBJECT
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "obj",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj_enc",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "obj",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"DECODE AGAIN: AS ARRAY\\\\n\\"",
          "unicode": false,
          "value": "DECODE AGAIN: AS ARRAY
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "arr_enc",
            },
            Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "json_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "arr",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
