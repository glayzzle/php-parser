// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Directly modifying a REFERENCED array when foreach'ing over it while using &$value syntax. 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'MAX_LOOPS'",
            "unicode": false,
            "value": "MAX_LOOPS",
          },
          Number {
            "kind": "number",
            "value": "5",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "elements",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "transform",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"\\\\n---( Array with $elements element(s): )---\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n---( Array with ",
                      "unicode": false,
                      "value": "
---( Array with ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "elements",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " element(s): )---\\\\n",
                      "unicode": false,
                      "value": " element(s): )---",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": false,
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                    },
                    "operator": "=",
                    "right": Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"v.$i\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "v.",
                            "unicode": false,
                            "value": "v.",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                      ],
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "elements",
                },
                "type": "<",
              },
            ],
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "counter",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": AssignRef {
              "kind": "assignref",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ref",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"--> State of referenced array before loop:\\\\n\\"",
                "unicode": false,
                "value": "--> State of referenced array before loop:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"--> Do loop:\\\\n\\"",
                "unicode": false,
                "value": "--> Do loop:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Foreach {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"     iteration $counter:  \\\\$k=$k; \\\\$v=$v\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "     iteration ",
                            "unicode": false,
                            "value": "     iteration ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "counter",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ":  \\\\$k=",
                            "unicode": false,
                            "value": ":  $k=",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "k",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "; \\\\$v=",
                            "unicode": false,
                            "value": "; $v=",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "v",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "transform",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "counter",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"  ** Stuck in a loop! **\\\\n\\"",
                            "unicode": false,
                            "value": "  ** Stuck in a loop! **
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "counter",
                    },
                    "right": Name {
                      "kind": "name",
                      "name": "MAX_LOOPS",
                      "resolution": "uqn",
                    },
                    "type": ">",
                  },
                },
              ],
              "kind": "block",
            },
            "key": Variable {
              "curly": false,
              "kind": "variable",
              "name": "k",
            },
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "value": Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"--> State of array after loop:\\\\n\\"",
                "unicode": false,
                "value": "--> State of array after loop:
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "withRefValue",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nPopping elements off end of a referenced array, using &\\\\$value\\"",
          "unicode": false,
          "value": "
Popping elements off end of a referenced array, using &$value",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "transform",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'array_pop($a);'",
          "unicode": false,
          "value": "array_pop($a);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\\\n\\\\nShift elements off start of a referenced array, using &\\\\$value\\"",
          "unicode": false,
          "value": "


Shift elements off start of a referenced array, using &$value",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "transform",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'array_shift($a);'",
          "unicode": false,
          "value": "array_shift($a);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\\\n\\\\nRemove current element of a referenced array, using &\\\\$value\\"",
          "unicode": false,
          "value": "


Remove current element of a referenced array, using &$value",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "transform",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'unset($a[$k]);'",
          "unicode": false,
          "value": "unset($a[$k]);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\\\n\\\\nAdding elements to the end of a referenced array, using &\\\\$value\\"",
          "unicode": false,
          "value": "


Adding elements to the end of a referenced array, using &$value",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "transform",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'array_push($a, \\"new.$counter\\");'",
          "unicode": false,
          "value": "array_push($a, \\"new.$counter\\");",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\\\n\\\\nAdding elements to the start of a referenced array, using &\\\\$value\\"",
          "unicode": false,
          "value": "


Adding elements to the start of a referenced array, using &$value",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "transform",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'array_unshift($a, \\"new.$counter\\");'",
          "unicode": false,
          "value": "array_unshift($a, \\"new.$counter\\");",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "3",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "transform",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "withRefValue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
