// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test strnatcasecmp() function : basic functionality 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "one",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "two",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "one",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "two",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strnatcasecmp",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "str_dump",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing strnatcasecmp() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing strnatcasecmp() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'A'",
            "unicode": false,
            "value": "A",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a10'",
            "unicode": false,
            "value": "a10",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'A20'",
            "unicode": false,
            "value": "A20",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'A1b'",
            "unicode": false,
            "value": "A1b",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'x2-y7'",
            "unicode": false,
            "value": "x2-y7",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'x8-y8'",
            "unicode": false,
            "value": "x8-y8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'1.010'",
            "unicode": false,
            "value": "1.010",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'1.001'",
            "unicode": false,
            "value": "1.001",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "' ab'",
            "unicode": false,
            "value": " ab",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "' aB'",
            "unicode": false,
            "value": " aB",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'acc '",
            "unicode": false,
            "value": "acc ",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'acc'",
            "unicode": false,
            "value": "acc",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "11.5",
          },
          Number {
            "kind": "number",
            "value": "10.5",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "10.5",
          },
          Number {
            "kind": "number",
            "value": "10.5E1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'Rfc822.txt'",
            "unicode": false,
            "value": "Rfc822.txt",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'rfc2086.txt'",
            "unicode": false,
            "value": "rfc2086.txt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'Rfc822.txt'",
            "unicode": false,
            "value": "Rfc822.txt",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'rfc822.TXT'",
            "unicode": false,
            "value": "rfc822.TXT",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pIc 6'",
            "unicode": false,
            "value": "pIc 6",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pic   7'",
            "unicode": false,
            "value": "pic   7",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0xFFF",
          },
          Number {
            "kind": "number",
            "value": "0Xfff",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "str_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
