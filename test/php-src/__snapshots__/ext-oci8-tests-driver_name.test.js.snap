// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Verify that the Driver Name attribute is set 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"/connect.inc\\"",
            "unicode": false,
            "value": "/connect.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"**Test 1.1 - Default values for the attribute **************\\\\n\\"",
          "unicode": false,
          "value": "**Test 1.1 - Default values for the attribute **************
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "get_attr",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n***Test 1.2 - Get the values from different connections **************\\\\n\\"",
          "unicode": false,
          "value": "
***Test 1.2 - Get the values from different connections **************
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing with oci_pconnect()\\\\n\\"",
          "unicode": false,
          "value": "Testing with oci_pconnect()
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pc1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "password",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dbase",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_pconnect",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "pc1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "get_attr",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "pc1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Testing with oci_new_connect()\\\\n\\"",
          "unicode": false,
          "value": "Testing with oci_new_connect()
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "nc1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "password",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dbase",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "oci_new_connect",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "nc1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "get_attr",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "nc1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "oci_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "conn",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sel_stmt",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"select client_driver
        from v\\\\$session_connect_info sci, v\\\\$session s
        where sci.client_driver is not null
          and sci.sid = s.sid
          and s.audsid = userenv('SESSIONID')\\"",
                "unicode": false,
                "value": "select client_driver
        from v$session_connect_info sci, v$session s
        where sci.client_driver is not null
          and sci.sid = s.sid
          and s.audsid = userenv('SESSIONID')",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s2",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "conn",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sel_stmt",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_parse",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s2",
                },
                Name {
                  "kind": "name",
                  "name": "OCI_DEFAULT",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_execute",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_fetch",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"The value of DRIVER_NAME is \\"",
                    "unicode": false,
                    "value": "The value of DRIVER_NAME is ",
                  },
                  "right": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "s2",
                          },
                          Number {
                            "kind": "number",
                            "value": "1",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "oci_result",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "trim",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "get_attr",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
