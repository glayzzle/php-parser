// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #76502: Chain of mixed exceptions and errors does not serialize properly 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "examples",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Exception(Exception())\\"",
                "unicode": false,
                "value": "Exception(Exception())",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"outer\\"",
                    "unicode": false,
                    "value": "outer",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"inner\\"",
                        "unicode": false,
                        "value": "inner",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Exception",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Exception",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Error(Error())\\"",
                "unicode": false,
                "value": "Error(Error())",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"outer\\"",
                    "unicode": false,
                    "value": "outer",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"inner\\"",
                        "unicode": false,
                        "value": "inner",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Error",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Error(Exception())\\"",
                "unicode": false,
                "value": "Error(Exception())",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"outer\\"",
                    "unicode": false,
                    "value": "outer",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"inner\\"",
                        "unicode": false,
                        "value": "inner",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Exception",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Error",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Exception(Error())\\"",
                "unicode": false,
                "value": "Exception(Error())",
              },
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"outer\\"",
                    "unicode": false,
                    "value": "outer",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"inner\\"",
                        "unicode": false,
                        "value": "inner",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Exception",
                  "resolution": "uqn",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "processed",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "example",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "serialize",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unserialize",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "processedPrev",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getPrevious",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "processed",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"---- $name ----\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "---- ",
                      "unicode": false,
                      "value": "---- ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "name",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " ----\\\\n",
                      "unicode": false,
                      "value": " ----",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"before: \\"",
                "unicode": false,
                "value": "before: ",
              },
              Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "example",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_class",
                  "resolution": "uqn",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\".previous == \\"",
                "unicode": false,
                "value": ".previous == ",
              },
              Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getPrevious",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "example",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_class",
                  "resolution": "uqn",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"after : \\"",
                "unicode": false,
                "value": "after : ",
              },
              Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "processed",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "get_class",
                  "resolution": "uqn",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\".previous == \\"",
                "unicode": false,
                "value": ".previous == ",
              },
              RetIf {
                "falseExpr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"null\\"",
                  "unicode": false,
                  "value": "null",
                },
                "kind": "retif",
                "test": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "processedPrev",
                },
                "trueExpr": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "processedPrev",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "get_class",
                    "resolution": "uqn",
                  },
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "name",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "examples",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "example",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
