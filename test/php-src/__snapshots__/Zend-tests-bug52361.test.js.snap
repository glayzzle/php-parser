// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #52361 (Throwing an exception in a destructor causes invalid catching) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Try {
                "always": null,
                "body": Block {
                  "children": Array [
                    Throw {
                      "kind": "throw",
                      "what": New {
                        "arguments": Array [
                          Magic {
                            "kind": "magic",
                            "raw": "__CLASS__",
                            "value": "__CLASS__",
                          },
                        ],
                        "kind": "new",
                        "what": Name {
                          "kind": "name",
                          "name": "Exception",
                          "resolution": "uqn",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "catches": Array [
                  Catch {
                    "body": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            Encapsed {
                              "kind": "encapsed",
                              "raw": "\\"1. $ex\\\\n\\"",
                              "type": "string",
                              "value": Array [
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "1. ",
                                    "unicode": false,
                                    "value": "1. ",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "ex",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "\\\\n",
                                    "unicode": false,
                                    "value": "",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                              ],
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "catch",
                    "variable": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ex",
                    },
                    "what": Array [
                      Name {
                        "kind": "name",
                        "name": "Exception",
                        "resolution": "uqn",
                      },
                    ],
                  },
                ],
                "kind": "try",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__destruct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "aaa",
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "aaa",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Throw {
            "kind": "throw",
            "what": New {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FUNCTION__",
                  "value": "__FUNCTION__",
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "Exception",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "bbb",
      },
      "nullable": false,
      "type": null,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "bbb",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"must be skipped !!!\\"",
                "unicode": false,
                "value": "must be skipped !!!",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"2. $ex\\\\n\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "2. ",
                          "unicode": false,
                          "value": "2. ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ex",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "\\\\n",
                          "unicode": false,
                          "value": "",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ex",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
