// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: Bug #70169	Use After Free Vulnerability in unserialize() with SplDoublyLinkedList 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "inner",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'i:1;'",
          "unicode": false,
          "value": "i:1;",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "exploit",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a:2:{i:0;C:19:\\"SplDoublyLinkedList\\":'",
                  "unicode": false,
                  "value": "a:2:{i:0;C:19:\\"SplDoublyLinkedList\\":",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "inner",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':{'",
                "unicode": false,
                "value": ":{",
              },
              "type": ".",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "inner",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'}i:1;R:3;}'",
            "unicode": false,
            "value": "}i:1;R:3;}",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "exploit",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unserialize",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'hi'",
                  "unicode": false,
                  "value": "hi",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "5",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "data",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
