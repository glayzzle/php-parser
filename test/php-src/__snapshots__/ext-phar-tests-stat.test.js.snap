// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar: test stat function interceptions 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "umask",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "interceptFileFuncs",
          },
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "stat",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.php'",
            "unicode": false,
            "value": ".phar.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname2",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.tar'",
            "unicode": false,
            "value": ".tar",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname3",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.tar'",
            "unicode": false,
            "value": ".phar.tar",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'my/index.php'",
            "unicode": false,
            "value": "my/index.php",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<?php
echo \\"stat\\\\n\\";
var_dump(stat(\\"dir/file1.txt\\"));
echo \\"lstat\\\\n\\";
var_dump(lstat(\\"dir/file1.txt\\"));
echo \\"fileperms\\\\n\\";
var_dump(fileperms(\\"dir/file1.txt\\"));
echo \\"fileinode\\\\n\\";
var_dump(fileinode(\\"dir/file1.txt\\"));
echo \\"filesize\\\\n\\";
var_dump(filesize(\\"dir/file1.txt\\"));
echo \\"fileowner\\\\n\\";
var_dump(fileowner(\\"dir/file1.txt\\"));
echo \\"filegroup\\\\n\\";
var_dump(filegroup(\\"dir/file1.txt\\"));
echo \\"filemtime\\\\n\\";
var_dump(filemtime(\\"dir/file1.txt\\"));
echo \\"fileatime\\\\n\\";
var_dump(fileatime(\\"dir/file1.txt\\"));
echo \\"filectime\\\\n\\";
var_dump(filectime(\\"dir/file1.txt\\"));
echo \\"filetype\\\\n\\";
var_dump(filetype(\\"dir/file1.txt\\"));
echo \\"is_writable\\\\n\\";
var_dump(is_writable(\\"dir/file1.txt\\"));
echo \\"is_writeable\\\\n\\";
var_dump(is_writeable(\\"dir/file1.txt\\"));
echo \\"is_readable\\\\n\\";
var_dump(is_readable(\\"dir/file1.txt\\"));
echo \\"is_executable\\\\n\\";
var_dump(is_executable(\\"dir/file1.txt\\"));
echo \\"file_exists\\\\n\\";
var_dump(file_exists(\\"dir/file1.txt\\"));
echo \\"is_dir\\\\n\\";
var_dump(is_dir(\\"dir/file1.txt\\"));
echo \\"is_file\\\\n\\";
var_dump(is_file(\\"dir/file1.txt\\"));
echo \\"is_link\\\\n\\";
var_dump(is_link(\\"dir/file1.txt\\"));
echo \\"not found\\\\n\\";
var_dump(file_exists(\\"not/found\\"));
echo \\"not found 2\\\\n\\";
var_dump(fileperms(\\"not/found\\"));
?>'",
          "unicode": false,
          "value": "<?php
echo \\"stat\\\\n\\";
var_dump(stat(\\"dir/file1.txt\\"));
echo \\"lstat\\\\n\\";
var_dump(lstat(\\"dir/file1.txt\\"));
echo \\"fileperms\\\\n\\";
var_dump(fileperms(\\"dir/file1.txt\\"));
echo \\"fileinode\\\\n\\";
var_dump(fileinode(\\"dir/file1.txt\\"));
echo \\"filesize\\\\n\\";
var_dump(filesize(\\"dir/file1.txt\\"));
echo \\"fileowner\\\\n\\";
var_dump(fileowner(\\"dir/file1.txt\\"));
echo \\"filegroup\\\\n\\";
var_dump(filegroup(\\"dir/file1.txt\\"));
echo \\"filemtime\\\\n\\";
var_dump(filemtime(\\"dir/file1.txt\\"));
echo \\"fileatime\\\\n\\";
var_dump(fileatime(\\"dir/file1.txt\\"));
echo \\"filectime\\\\n\\";
var_dump(filectime(\\"dir/file1.txt\\"));
echo \\"filetype\\\\n\\";
var_dump(filetype(\\"dir/file1.txt\\"));
echo \\"is_writable\\\\n\\";
var_dump(is_writable(\\"dir/file1.txt\\"));
echo \\"is_writeable\\\\n\\";
var_dump(is_writeable(\\"dir/file1.txt\\"));
echo \\"is_readable\\\\n\\";
var_dump(is_readable(\\"dir/file1.txt\\"));
echo \\"is_executable\\\\n\\";
var_dump(is_executable(\\"dir/file1.txt\\"));
echo \\"file_exists\\\\n\\";
var_dump(file_exists(\\"dir/file1.txt\\"));
echo \\"is_dir\\\\n\\";
var_dump(is_dir(\\"dir/file1.txt\\"));
echo \\"is_file\\\\n\\";
var_dump(is_file(\\"dir/file1.txt\\"));
echo \\"is_link\\\\n\\";
var_dump(is_link(\\"dir/file1.txt\\"));
echo \\"not found\\\\n\\";
var_dump(file_exists(\\"not/found\\"));
echo \\"not found 2\\\\n\\";
var_dump(fileperms(\\"not/found\\"));
?>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'dir/file1.txt'",
            "unicode": false,
            "value": "dir/file1.txt",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'hi'",
          "unicode": false,
          "value": "hi",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'dir/file2.txt'",
            "unicode": false,
            "value": "dir/file2.txt",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'hi2'",
          "unicode": false,
          "value": "hi2",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'dir/file3.txt'",
            "unicode": false,
            "value": "dir/file3.txt",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'hi3'",
          "unicode": false,
          "value": "hi3",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'<?php
set_include_path(\\"phar://\\" . __FILE__ . \\"/dir\\" . PATH_SEPARATOR . \\"phar://\\" . __FILE__);
include \\"my/index.php\\";
__HALT_COMPILER();'",
            "unicode": false,
            "value": "<?php
set_include_path(\\"phar://\\" . __FILE__ . \\"/dir\\" . PATH_SEPARATOR . \\"phar://\\" . __FILE__);
include \\"my/index.php\\";
__HALT_COMPILER();",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setStub",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
