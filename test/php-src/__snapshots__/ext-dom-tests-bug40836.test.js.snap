// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #40836 (Segfault in insertBefore) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1.0\\"",
              "unicode": false,
              "value": "1.0",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"UTF-8\\"",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOMDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "preserveWhiteSpace",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<feed xmlns=\\"http://www.w3.org/2005/Atom\\">
  <entry xmlns=\\"http://www.w3.org/2005/Atom\\">
    <updated>2007-02-14T00:00:00+01:00</updated>
    <content>
      <div xmlns=\\"http://www.w3.org/1999/xhtml\\">
        <p>paragraph</p>
      </div>
    </content>
  </entry>
</feed>'",
          "unicode": false,
          "value": "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>
<feed xmlns=\\"http://www.w3.org/2005/Atom\\">
  <entry xmlns=\\"http://www.w3.org/2005/Atom\\">
    <updated>2007-02-14T00:00:00+01:00</updated>
    <content>
      <div xmlns=\\"http://www.w3.org/1999/xhtml\\">
        <p>paragraph</p>
      </div>
    </content>
  </entry>
</feed>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXML",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "entry",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "0",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "item",
            },
            "what": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"http://www.w3.org/2005/Atom\\"",
                  "unicode": false,
                  "value": "http://www.w3.org/2005/Atom",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"entry\\"",
                  "unicode": false,
                  "value": "entry",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getElementsByTagNameNS",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "dom",
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "contentNode",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "firstChild",
          },
          "what": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "item",
              },
              "what": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"content\\"",
                    "unicode": false,
                    "value": "content",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getElementsByTagName",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "entry",
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dateNode",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "firstChild",
          },
          "what": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "item",
              },
              "what": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"updated\\"",
                    "unicode": false,
                    "value": "updated",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getElementsByTagName",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "entry",
                  },
                },
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "dateNode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "insertBefore",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "firstChild",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "contentNode",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "saveXML",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "dom",
            },
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
