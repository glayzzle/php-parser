// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Try catch finally (with multi-returns and exception) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "a",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": Block {
              "children": Array [
                Return {
                  "expr": Number {
                    "kind": "number",
                    "value": "3",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Throw {
                  "kind": "throw",
                  "what": New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"ex\\"",
                        "unicode": false,
                        "value": "ex",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Exception",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Exit {
                        "expression": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"error\\"",
                          "unicode": false,
                          "value": "error",
                        },
                        "kind": "exit",
                        "useDie": true,
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PdoException",
                    "resolution": "uqn",
                  },
                ],
              },
              Catch {
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Number {
                        "kind": "number",
                        "value": "2",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Return {
            "expr": Number {
              "kind": "number",
              "value": "1",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"para\\"",
                "unicode": false,
                "value": "para",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
