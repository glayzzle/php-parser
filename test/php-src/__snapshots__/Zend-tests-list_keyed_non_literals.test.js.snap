// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests list() with constant keys 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"one\\"",
                "unicode": false,
                "value": "one",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "2",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"two\\"",
                "unicode": false,
                "value": "two",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "3",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"three\\"",
                "unicode": false,
                "value": "three",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ConstantStatement {
      "constants": Array [
        Constant {
          "kind": "constant",
          "name": Identifier {
            "kind": "identifier",
            "name": "COMPILE_TIME_RESOLVABLE",
          },
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "constantstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'PROBABLY_NOT_COMPILE_TIME_RESOLVABLE'",
            "unicode": false,
            "value": "PROBABLY_NOT_COMPILE_TIME_RESOLVABLE",
          },
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"data:text/plain,2\\"",
                "unicode": false,
                "value": "data:text/plain,2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "file_get_contents",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "probablyNotCompileTimeResolvable3",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "cos",
              "resolution": "uqn",
            },
          },
          "right": Number {
            "kind": "number",
            "value": "3",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Name {
                "kind": "name",
                "name": "COMPILE_TIME_RESOLVABLE",
                "resolution": "uqn",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "one",
              },
            },
            Entry {
              "byRef": false,
              "key": Name {
                "kind": "name",
                "name": "PROBABLY_NOT_COMPILE_TIME_RESOLVABLE",
                "resolution": "uqn",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "two",
              },
            },
            Entry {
              "byRef": false,
              "key": Variable {
                "curly": false,
                "kind": "variable",
                "name": "probablyNotCompileTimeResolvable3",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "three",
              },
            },
          ],
          "kind": "list",
          "shortForm": false,
        },
        "operator": "=",
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "one",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "two",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "three",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
