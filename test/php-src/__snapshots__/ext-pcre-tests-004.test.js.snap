// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests abusing pcre 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/((?:(?:unsigned|struct)\\\\s+)?\\\\w+)(?:\\\\s*(\\\\*+)\\\\s+|\\\\s+(\\\\**))(\\\\w+(?:\\\\[\\\\s*\\\\w*\\\\s*\\\\])?)\\\\s*(?:(=)[^,;]+)?((?:\\\\s*,\\\\s*\\\\**\\\\s*\\\\w+(?:\\\\[\\\\s*\\\\w*\\\\s*\\\\])?\\\\s*(?:=[^,;]+)?)*)\\\\s*;/S'",
                "unicode": false,
                "value": "/((?:(?:unsigned|struct)\\\\s+)?\\\\w+)(?:\\\\s*(\\\\*+)\\\\s+|\\\\s+(\\\\**))(\\\\w+(?:\\\\[\\\\s*\\\\w*\\\\s*\\\\])?)\\\\s*(?:(=)[^,;]+)?((?:\\\\s*,\\\\s*\\\\**\\\\s*\\\\w+(?:\\\\[\\\\s*\\\\w*\\\\s*\\\\])?\\\\s*(?:=[^,;]+)?)*)\\\\s*;/S",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'unsigned int xpto = 124; short a, b;'",
                "unicode": false,
                "value": "unsigned int xpto = 124; short a, b;",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "m",
              },
              Name {
                "kind": "name",
                "name": "PREG_SET_ORDER",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match_all",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "m",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/(?:\\\\([^)]+\\\\))?(&?)([\\\\w>.()-]+(?:\\\\[\\\\w+\\\\])?)\\\\s*,?((?:\\\\)*\\\\s*=)?)/S'",
                "unicode": false,
                "value": "/(?:\\\\([^)]+\\\\))?(&?)([\\\\w>.()-]+(?:\\\\[\\\\w+\\\\])?)\\\\s*,?((?:\\\\)*\\\\s*=)?)/S",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'&a, b, &c'",
                "unicode": false,
                "value": "&a, b, &c",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "m",
              },
              Name {
                "kind": "name",
                "name": "PREG_SET_ORDER",
                "resolution": "uqn",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match_all",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "m",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/zend_parse_parameters(?:_ex\\\\s*\\\\([^,]+,[^,]+|\\\\s*\\\\([^,]+),\\\\s*\\"([^\\"]*)\\"\\\\s*,\\\\s*([^{;]*)/S'",
                "unicode": false,
                "value": "/zend_parse_parameters(?:_ex\\\\s*\\\\([^,]+,[^,]+|\\\\s*\\\\([^,]+),\\\\s*\\"([^\\"]*)\\"\\\\s*,\\\\s*([^{;]*)/S",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'zend_parse_parameters( 0, \\"addd|s/\\", a, b, &c);'",
                "unicode": false,
                "value": "zend_parse_parameters( 0, \\"addd|s/\\", a, b, &c);",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "m",
              },
              Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "PREG_SET_ORDER",
                  "resolution": "uqn",
                },
                "right": Name {
                  "kind": "name",
                  "name": "PREG_OFFSET_CAPTURE",
                  "resolution": "uqn",
                },
                "type": "|",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match_all",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "m",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/PHP_(?:NAMED_)?(?:FUNCTION|METHOD)\\\\s*\\\\((\\\\w+(?:,\\\\s*\\\\w+)?)\\\\)/S'",
                "unicode": false,
                "value": "/PHP_(?:NAMED_)?(?:FUNCTION|METHOD)\\\\s*\\\\((\\\\w+(?:,\\\\s*\\\\w+)?)\\\\)/S",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"PHP_FUNCTION(s, preg_match)\\\\n{\\\\nlalala\\"",
                "unicode": false,
                "value": "PHP_FUNCTION(s, preg_match)
{
lalala",
              },
              Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
              Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "PREG_SPLIT_DELIM_CAPTURE",
                  "resolution": "uqn",
                },
                "right": Name {
                  "kind": "name",
                  "name": "PREG_SPLIT_OFFSET_CAPTURE",
                  "resolution": "uqn",
                },
                "type": "|",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_split",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
