// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test preg_replace_callback() function : basic functionality 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "replacement",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'zero'",
                "unicode": false,
                "value": "zero",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'one'",
                "unicode": false,
                "value": "one",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'two'",
                "unicode": false,
                "value": "two",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'three'",
                "unicode": false,
                "value": "three",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'four'",
                "unicode": false,
                "value": "four",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'five'",
                "unicode": false,
                "value": "five",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'six'",
                "unicode": false,
                "value": "six",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'seven'",
                "unicode": false,
                "value": "seven",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'eight'",
                "unicode": false,
                "value": "eight",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'nine'",
                "unicode": false,
                "value": "nine",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "matches",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "replacement",
              },
            ],
            "kind": "global",
          },
          Return {
            "expr": OffsetLookup {
              "kind": "offsetlookup",
              "offset": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "matches",
                },
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "replacement",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "integer_word",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject1",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'there are 7 words in this sentence.'",
          "unicode": false,
          "value": "there are 7 words in this sentence.",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "new_subject1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/\\\\d/'",
              "unicode": false,
              "value": "/\\\\d/",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"integer_word\\"",
              "unicode": false,
              "value": "integer_word",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "subject1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_replace_callback",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"$new_subject1 \\\\n\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "new_subject1",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " \\\\n",
                "unicode": false,
                "value": " ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject2",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'1 2 3 4 is now written in words'",
          "unicode": false,
          "value": "1 2 3 4 is now written in words",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "new_subject2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/\\\\d/'",
              "unicode": false,
              "value": "/\\\\d/",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"integer_word\\"",
              "unicode": false,
              "value": "integer_word",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "subject2",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_replace_callback",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"$new_subject2 \\\\n\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "new_subject2",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " \\\\n",
                "unicode": false,
                "value": " ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject3",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'there are no numbers in this string'",
          "unicode": false,
          "value": "there are no numbers in this string",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "new_subject3",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/\\\\d/'",
              "unicode": false,
              "value": "/\\\\d/",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"integer_word\\"",
              "unicode": false,
              "value": "integer_word",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "subject3",
            },
            Number {
              "kind": "number",
              "value": "5",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "count",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_replace_callback",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"$new_subject3 \\\\n\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "new_subject3",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " \\\\n",
                "unicode": false,
                "value": " ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
