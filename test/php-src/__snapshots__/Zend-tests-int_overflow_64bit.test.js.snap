// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests testing integer overflow (64bit) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doubles",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "PHP_INT_MAX",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "PHP_INT_MAX",
                  "resolution": "uqn",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
                "type": "+",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "PHP_INT_MAX",
                  "resolution": "uqn",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1000",
                },
                "type": "+",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Name {
                    "kind": "name",
                    "name": "PHP_INT_MAX",
                    "resolution": "uqn",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "type": "*",
                },
                "right": Number {
                  "kind": "number",
                  "value": "4",
                },
                "type": "+",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Name {
                    "kind": "name",
                    "name": "PHP_INT_MAX",
                    "resolution": "uqn",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
                "type": "-",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Name {
                    "kind": "name",
                    "name": "PHP_INT_MAX",
                    "resolution": "uqn",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
                "type": "-",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Name {
                    "kind": "name",
                    "name": "PHP_INT_MAX",
                    "resolution": "uqn",
                  },
                },
                "right": Number {
                  "kind": "number",
                  "value": "1000",
                },
                "type": "-",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "l",
              },
              "operator": "=",
              "right": Cast {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "d",
                },
                "kind": "cast",
                "raw": "(int)",
                "type": "int",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "l",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "doubles",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "d",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
