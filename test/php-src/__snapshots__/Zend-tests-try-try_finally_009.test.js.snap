// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Try finally (with for continue) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          For {
            "body": Block {
              "children": Array [
                Do {
                  "body": Block {
                    "children": Array [
                      Try {
                        "always": Block {
                          "children": Array [
                            Continue {
                              "kind": "continue",
                              "level": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "body": Block {
                          "children": Array [
                            Try {
                              "always": Block {
                                "children": Array [],
                                "kind": "block",
                              },
                              "body": Block {
                                "children": Array [],
                                "kind": "block",
                              },
                              "catches": Array [],
                              "kind": "try",
                            },
                          ],
                          "kind": "block",
                        },
                        "catches": Array [
                          Catch {
                            "body": Block {
                              "children": Array [],
                              "kind": "block",
                            },
                            "kind": "catch",
                            "variable": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                            "what": Array [
                              Name {
                                "kind": "name",
                                "name": "Exception",
                                "resolution": "uqn",
                              },
                            ],
                          },
                        ],
                        "kind": "try",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "do",
                  "test": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "5",
                },
                "type": "<",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
