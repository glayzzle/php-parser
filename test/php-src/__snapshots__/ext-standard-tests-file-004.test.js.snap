// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests file_put_contents() test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Silent {
              "expr": Call {
                "arguments": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"./TEST{$i}\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "./TEST",
                          "unicode": false,
                          "value": "./TEST",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "kind": "encapsedpart",
                        "syntax": "complex",
                      },
                    ],
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unlink",
                  "resolution": "uqn",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "6",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"String Test: \\"",
          "unicode": false,
          "value": "String Test: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        RetIf {
          "falseExpr": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'FAIL'",
            "unicode": false,
            "value": "FAIL",
          },
          "kind": "retif",
          "test": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"TEST1\\"",
                  "unicode": false,
                  "value": "TEST1",
                },
                Call {
                  "arguments": Array [
                    Magic {
                      "kind": "magic",
                      "raw": "__FILE__",
                      "value": "__FILE__",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "file_get_contents",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "file_put_contents",
                "resolution": "uqn",
              },
            },
            "right": Boolean {
              "kind": "boolean",
              "raw": "FALSE",
              "value": false,
            },
            "type": "!==",
          },
          "trueExpr": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'OK'",
            "unicode": false,
            "value": "OK",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "old_int",
        },
        "operator": "=",
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "int",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "rand",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"TEST2\\"",
              "unicode": false,
              "value": "TEST2",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "int",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_put_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Integer Test: \\"",
          "unicode": false,
          "value": "Integer Test: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'FAIL'",
                "unicode": false,
                "value": "FAIL",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'OK'",
                "unicode": false,
                "value": "OK",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "int",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "old_int",
            },
            "type": "===",
          },
          "right": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ret",
            },
            "right": Boolean {
              "kind": "boolean",
              "raw": "FALSE",
              "value": false,
            },
            "type": "!==",
          },
          "type": "&&",
        },
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "int",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST2\\"",
                "unicode": false,
                "value": "TEST2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5_file",
              "resolution": "uqn",
            },
          },
          "type": "==",
        },
        "type": "&&",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "old_int",
        },
        "operator": "=",
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "int",
          },
          "operator": "=",
          "right": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "time",
                "resolution": "uqn",
              },
            },
            "right": Number {
              "kind": "number",
              "value": "1000",
            },
            "type": "/",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"TEST3\\"",
              "unicode": false,
              "value": "TEST3",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "int",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_put_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Float Test: \\"",
          "unicode": false,
          "value": "Float Test: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'FAIL'",
                "unicode": false,
                "value": "FAIL",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'OK'",
                "unicode": false,
                "value": "OK",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "int",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "old_int",
            },
            "type": "===",
          },
          "right": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ret",
            },
            "right": Boolean {
              "kind": "boolean",
              "raw": "FALSE",
              "value": false,
            },
            "type": "!==",
          },
          "type": "&&",
        },
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "int",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST3\\"",
                "unicode": false,
                "value": "TEST3",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5_file",
              "resolution": "uqn",
            },
          },
          "type": "==",
        },
        "type": "&&",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"TEST4\\"",
              "unicode": false,
              "value": "TEST4",
            },
            Magic {
              "kind": "magic",
              "raw": "__FILE__",
              "value": "__FILE__",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_put_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Bool Test: \\"",
          "unicode": false,
          "value": "Bool Test: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'FAIL'",
                "unicode": false,
                "value": "FAIL",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'OK'",
                "unicode": false,
                "value": "OK",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ret",
          },
          "right": Boolean {
            "kind": "boolean",
            "raw": "FALSE",
            "value": false,
          },
          "type": "!==",
        },
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Magic {
                "kind": "magic",
                "raw": "__FILE__",
                "value": "__FILE__",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST4\\"",
                "unicode": false,
                "value": "TEST4",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5_file",
              "resolution": "uqn",
            },
          },
          "type": "==",
        },
        "type": "&&",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Silent {
          "expr": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST5\\"",
                "unicode": false,
                "value": "TEST5",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "_SERVER",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "file_put_contents",
              "resolution": "uqn",
            },
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Array Test: \\"",
          "unicode": false,
          "value": "Array Test: ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'FAIL'",
                "unicode": false,
                "value": "FAIL",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'OK'",
                "unicode": false,
                "value": "OK",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ret",
          },
          "right": Boolean {
            "kind": "boolean",
            "raw": "FALSE",
            "value": false,
          },
          "type": "!==",
        },
        "right": Bin {
          "kind": "bin",
          "left": Silent {
            "expr": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "''",
                      "unicode": false,
                      "value": "",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "_SERVER",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "implode",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "md5",
                "resolution": "uqn",
              },
            },
            "kind": "silent",
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST5\\"",
                "unicode": false,
                "value": "TEST5",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "md5_file",
              "resolution": "uqn",
            },
          },
          "type": "==",
        },
        "type": "&&",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Silent {
              "expr": Call {
                "arguments": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"./TEST{$i}\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "./TEST",
                          "unicode": false,
                          "value": "./TEST",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "kind": "encapsedpart",
                        "syntax": "complex",
                      },
                    ],
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unlink",
                  "resolution": "uqn",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "6",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
