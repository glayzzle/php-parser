// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #79657: "yield from" hangs when invalid value encountered 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Throw {
            "kind": "throw",
            "what": New {
              "arguments": Array [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "Exception",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "throwException",
      },
      "nullable": false,
      "type": TypeReference {
        "kind": "typereference",
        "name": "iterable",
        "raw": "iterable",
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "callbacks",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Closure {
                      "arguments": Array [],
                      "attrGroups": Array [],
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Yield {
                              "key": null,
                              "kind": "yield",
                              "value": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'first'",
                                "unicode": false,
                                "value": "first",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "byref": false,
                      "isStatic": false,
                      "kind": "closure",
                      "nullable": false,
                      "type": null,
                      "uses": Array [],
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Closure {
                      "arguments": Array [],
                      "attrGroups": Array [],
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": YieldFrom {
                              "kind": "yieldfrom",
                              "value": Call {
                                "arguments": Array [],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "throwException",
                                  "resolution": "uqn",
                                },
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "byref": false,
                      "isStatic": false,
                      "kind": "closure",
                      "nullable": false,
                      "type": null,
                      "uses": Array [],
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": YieldFrom {
                    "kind": "yieldfrom",
                    "value": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "callback",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callbacks",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "callback",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "loop",
      },
      "nullable": false,
      "type": TypeReference {
        "kind": "typereference",
        "name": "iterable",
        "raw": "iterable",
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "first",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "string",
            "raw": "string",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "second",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": Array {
              "items": Array [],
              "kind": "array",
              "shortForm": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "get",
      },
      "nullable": false,
      "type": TypeReference {
        "kind": "typereference",
        "name": "array",
        "raw": "array",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          variadic {
            "kind": "variadic",
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "loop",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "get",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
