// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests levenshtein() function test 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "title",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "expect",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "text1",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "text2",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "cost1",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Number {
            "kind": "number",
            "value": "0",
          },
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "cost2",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Number {
            "kind": "number",
            "value": "0",
          },
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "cost3",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Number {
            "kind": "number",
            "value": "0",
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "result",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text1",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text2",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cost1",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cost2",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cost3",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "levenshtein",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "result",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text1",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text2",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "levenshtein",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "cost1",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Return {
              "expr": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "return",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "result",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "expect",
              },
              "type": "==",
            },
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$title: result is $result instead of $expect \\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "title",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ": result is ",
                      "unicode": false,
                      "value": ": result is ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "result",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " instead of ",
                      "unicode": false,
                      "value": " instead of ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "expect",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " ",
                      "unicode": false,
                      "value": " ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"for '$text1'/'$text2' \\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "for '",
                      "unicode": false,
                      "value": "for '",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text1",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'/'",
                      "unicode": false,
                      "value": "'/'",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "text2",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' ",
                      "unicode": false,
                      "value": "' ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": null,
            "body": Echo {
              "expressions": Array [
                Encapsed {
                  "kind": "encapsed",
                  "raw": "\\"($cost1:$cost2:$cost3)\\"",
                  "type": "string",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "(",
                        "unicode": false,
                        "value": "(",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "cost1",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": ":",
                        "unicode": false,
                        "value": ":",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "cost2",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": ":",
                        "unicode": false,
                        "value": ":",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "cost3",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": ")",
                        "unicode": false,
                        "value": ")",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "cost1",
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Return {
            "expr": Number {
              "kind": "number",
              "value": "1",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_me",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"equal\\"",
              "unicode": false,
              "value": "equal",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"12345\\"",
              "unicode": false,
              "value": "12345",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"12345\\"",
              "unicode": false,
              "value": "12345",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1st empty\\"",
              "unicode": false,
              "value": "1st empty",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xzy\\"",
              "unicode": false,
              "value": "xzy",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2nd empty\\"",
              "unicode": false,
              "value": "2nd empty",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xzy\\"",
              "unicode": false,
              "value": "xzy",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"both empty\\"",
              "unicode": false,
              "value": "both empty",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1 char\\"",
              "unicode": false,
              "value": "1 char",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1\\"",
              "unicode": false,
              "value": "1",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2\\"",
              "unicode": false,
              "value": "2",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2 char swap\\"",
              "unicode": false,
              "value": "2 char swap",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"12\\"",
              "unicode": false,
              "value": "12",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"21\\"",
              "unicode": false,
              "value": "21",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"inexpensive delete\\"",
              "unicode": false,
              "value": "inexpensive delete",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2121\\"",
              "unicode": false,
              "value": "2121",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"11\\"",
              "unicode": false,
              "value": "11",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"expensive delete\\"",
              "unicode": false,
              "value": "expensive delete",
            },
            Number {
              "kind": "number",
              "value": "10",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2121\\"",
              "unicode": false,
              "value": "2121",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"11\\"",
              "unicode": false,
              "value": "11",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "5",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"inexpensive insert\\"",
              "unicode": false,
              "value": "inexpensive insert",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"11\\"",
              "unicode": false,
              "value": "11",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2121\\"",
              "unicode": false,
              "value": "2121",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"expensive insert\\"",
              "unicode": false,
              "value": "expensive insert",
            },
            Number {
              "kind": "number",
              "value": "10",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"11\\"",
              "unicode": false,
              "value": "11",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"2121\\"",
              "unicode": false,
              "value": "2121",
            },
            Number {
              "kind": "number",
              "value": "5",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"expensive replace\\"",
              "unicode": false,
              "value": "expensive replace",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"111\\"",
              "unicode": false,
              "value": "111",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"121\\"",
              "unicode": false,
              "value": "121",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"very expensive replace\\"",
              "unicode": false,
              "value": "very expensive replace",
            },
            Number {
              "kind": "number",
              "value": "4",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"111\\"",
              "unicode": false,
              "value": "111",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"121\\"",
              "unicode": false,
              "value": "121",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            Number {
              "kind": "number",
              "value": "9",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #7368\\"",
              "unicode": false,
              "value": "bug #7368",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"13458\\"",
              "unicode": false,
              "value": "13458",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"12345\\"",
              "unicode": false,
              "value": "12345",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #7368\\"",
              "unicode": false,
              "value": "bug #7368",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1345\\"",
              "unicode": false,
              "value": "1345",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"1234\\"",
              "unicode": false,
              "value": "1234",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #6562\\"",
              "unicode": false,
              "value": "bug #6562",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debugg\\"",
              "unicode": false,
              "value": "debugg",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debug\\"",
              "unicode": false,
              "value": "debug",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #6562\\"",
              "unicode": false,
              "value": "bug #6562",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ddebug\\"",
              "unicode": false,
              "value": "ddebug",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debug\\"",
              "unicode": false,
              "value": "debug",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #6562\\"",
              "unicode": false,
              "value": "bug #6562",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debbbug\\"",
              "unicode": false,
              "value": "debbbug",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debug\\"",
              "unicode": false,
              "value": "debug",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #6562\\"",
              "unicode": false,
              "value": "bug #6562",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debugging\\"",
              "unicode": false,
              "value": "debugging",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"debuging\\"",
              "unicode": false,
              "value": "debuging",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #16473\\"",
              "unicode": false,
              "value": "bug #16473",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"a\\"",
              "unicode": false,
              "value": "a",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bc\\"",
              "unicode": false,
              "value": "bc",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #16473\\"",
              "unicode": false,
              "value": "bug #16473",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xa\\"",
              "unicode": false,
              "value": "xa",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xbc\\"",
              "unicode": false,
              "value": "xbc",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #16473\\"",
              "unicode": false,
              "value": "bug #16473",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xax\\"",
              "unicode": false,
              "value": "xax",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"xbcx\\"",
              "unicode": false,
              "value": "xbcx",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "+=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bug #16473\\"",
              "unicode": false,
              "value": "bug #16473",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ax\\"",
              "unicode": false,
              "value": "ax",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bcx\\"",
              "unicode": false,
              "value": "bcx",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "test_me",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        RetIf {
          "falseExpr": Encapsed {
            "kind": "encapsed",
            "raw": "\\"$n failed\\\\n\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "n",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": " failed\\\\n",
                  "unicode": false,
                  "value": " failed",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
          "kind": "retif",
          "test": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "n",
            },
            "parenthesizedExpression": true,
            "right": Number {
              "kind": "number",
              "value": "0",
            },
            "type": "==",
          },
          "trueExpr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"all passed\\\\n\\"",
            "unicode": false,
            "value": "all passed
",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
