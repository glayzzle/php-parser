// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test imap_append() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing imap_append() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing imap_append() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/setup/imap_include.inc'",
            "unicode": false,
            "value": "/setup/imap_include.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Create a new mailbox for test\\\\n\\"",
          "unicode": false,
          "value": "Create a new mailbox for test
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "imap_stream",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"imapappendbaisc\\"",
              "unicode": false,
              "value": "imapappendbaisc",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "setup_test_mailbox",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mb_details",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "imap_stream",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imap_mailboxmsginfo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Add a couple of msgs to the new mailbox\\\\n\\"",
          "unicode": false,
          "value": "Add a couple of msgs to the new mailbox
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "imap_stream",
              },
              PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "Mailbox",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "mb_details",
                },
              },
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"From: webmaster@something.com\\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "From: webmaster@something.com
",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"To: info@something.com\\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "To: info@something.com
",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Subject: Test message\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "Subject: Test message
",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\r\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"this is a test message, please ignore\\\\r\\\\n\\"",
                  "unicode": false,
                  "value": "this is a test message, please ignore
",
                },
                "type": ".",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "imap_append",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "imap_stream",
              },
              PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "Mailbox",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "mb_details",
                },
              },
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"From: webmaster@something.com\\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "From: webmaster@something.com
",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"To: info@something.com\\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "To: info@something.com
",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Subject: Another test\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "Subject: Another test
",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\r\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"this is another test message, please ignore it too!!\\\\r\\\\n\\"",
                  "unicode": false,
                  "value": "this is another test message, please ignore it too!!
",
                },
                "type": ".",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "imap_append",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "check",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "imap_stream",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "imap_check",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Msg Count after append : \\"",
              "unicode": false,
              "value": "Msg Count after append : ",
            },
            "right": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Nmsgs",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "check",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"List the msg headers\\\\n\\"",
          "unicode": false,
          "value": "List the msg headers
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "imap_stream",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "imap_headers",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "imap_stream",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "imap_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
