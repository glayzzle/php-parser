// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GH-7867 (FFI::cast() from pointer to array is broken) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "value",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'char[26]'",
              "unicode": false,
              "value": "char[26]",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "new",
            },
            "what": Name {
              "kind": "name",
              "name": "FFI",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "value",
          },
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'a'",
                    "unicode": false,
                    "value": "a",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'z'",
                    "unicode": false,
                    "value": "z",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "implode",
              "resolution": "uqn",
            },
          },
          Number {
            "kind": "number",
            "value": "26",
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "memcpy",
          },
          "what": Name {
            "kind": "name",
            "name": "FFI",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "slice",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'char[4]'",
              "unicode": false,
              "value": "char[4]",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "new",
            },
            "what": Name {
              "kind": "name",
              "name": "FFI",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'cast from start'",
            "unicode": false,
            "value": "cast from start",
          },
          "right": Name {
            "kind": "name",
            "name": "PHP_EOL",
            "resolution": "uqn",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "slice",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "value",
          },
          Number {
            "kind": "number",
            "value": "4",
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "memcpy",
          },
          "what": Name {
            "kind": "name",
            "name": "FFI",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "value",
            },
            "right": Number {
              "kind": "number",
              "value": "0",
            },
            "type": "+",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "slice",
          },
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'char[4]'",
                "unicode": false,
                "value": "char[4]",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "value",
              },
            ],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "cast",
              },
              "what": Name {
                "kind": "name",
                "name": "FFI",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Name {
          "kind": "name",
          "name": "PHP_EOL",
          "resolution": "uqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'cast with offset'",
            "unicode": false,
            "value": "cast with offset",
          },
          "right": Name {
            "kind": "name",
            "name": "PHP_EOL",
            "resolution": "uqn",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "slice",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "value",
            },
            "right": Number {
              "kind": "number",
              "value": "4",
            },
            "type": "+",
          },
          Number {
            "kind": "number",
            "value": "4",
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "memcpy",
          },
          "what": Name {
            "kind": "name",
            "name": "FFI",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "value",
            },
            "right": Number {
              "kind": "number",
              "value": "4",
            },
            "type": "+",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "slice",
          },
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'char[4]'",
                "unicode": false,
                "value": "char[4]",
              },
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value",
                },
                "right": Number {
                  "kind": "number",
                  "value": "4",
                },
                "type": "+",
              },
            ],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "cast",
              },
              "what": Name {
                "kind": "name",
                "name": "FFI",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Name {
          "kind": "name",
          "name": "PHP_EOL",
          "resolution": "uqn",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
