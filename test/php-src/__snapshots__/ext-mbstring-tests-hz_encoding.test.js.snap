// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of verification and conversion of HZ text 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1000",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "srand",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'ASCII'",
                    "unicode": false,
                    "value": "ASCII",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'HZ'",
                    "unicode": false,
                    "value": "HZ",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "testValidString",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x7E",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested ASCII -> HZ\\\\n\\"",
          "unicode": false,
          "value": "Tested ASCII -> HZ
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'HZ'",
                    "unicode": false,
                    "value": "HZ",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'ASCII'",
                    "unicode": false,
                    "value": "ASCII",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "testValidString",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x7E",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested HZ -> ASCII\\\\n\\"",
          "unicode": false,
          "value": "Tested HZ -> ASCII
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'%'",
                  "unicode": false,
                  "value": "%",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'HZ'",
                  "unicode": false,
                  "value": "HZ",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'ASCII'",
                  "unicode": false,
                  "value": "ASCII",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0x80",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xFF",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested non-ASCII bytes in ASCII mode\\\\n\\"",
          "unicode": false,
          "value": "Tested non-ASCII bytes in ASCII mode
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'~~'",
            "unicode": false,
            "value": "~~",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'~'",
            "unicode": false,
            "value": "~",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'HZ'",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'ASCII'",
            "unicode": false,
            "value": "ASCII",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"~\\\\n\\"",
            "unicode": false,
            "value": "~
",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "''",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'HZ'",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'ASCII'",
            "unicode": false,
            "value": "ASCII",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'~{~}'",
            "unicode": false,
            "value": "~{~}",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "''",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'HZ'",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'ASCII'",
            "unicode": false,
            "value": "ASCII",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"~{~\\\\n~}\\"",
            "unicode": false,
            "value": "~{~
~}",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "''",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'HZ'",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'ASCII'",
            "unicode": false,
            "value": "ASCII",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testValidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested valid ~ escapes\\\\n\\"",
          "unicode": false,
          "value": "Tested valid ~ escapes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"~\\"",
                            "unicode": false,
                            "value": "~",
                          },
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "chr",
                              "resolution": "uqn",
                            },
                          },
                          "type": ".",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'%'",
                          "unicode": false,
                          "value": "%",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'HZ'",
                          "unicode": false,
                          "value": "HZ",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'ASCII'",
                          "unicode": false,
                          "value": "ASCII",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "testInvalidString",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0x7E",
                      },
                      "type": "!=",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0x7B",
                      },
                      "type": "!=",
                    },
                    "type": "&&",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"~{~\\"",
                              "unicode": false,
                              "value": "~{~",
                            },
                            "right": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "i",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "chr",
                                "resolution": "uqn",
                              },
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"~}\\"",
                            "unicode": false,
                            "value": "~}",
                          },
                          "type": ".",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'%'",
                          "unicode": false,
                          "value": "%",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'HZ'",
                          "unicode": false,
                          "value": "HZ",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'ASCII'",
                          "unicode": false,
                          "value": "ASCII",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "testInvalidString",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0x7D",
                    },
                    "type": "!=",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "i",
              },
              "right": Number {
                "kind": "number",
                "value": "0x0A",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xFF",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested all invalid ~ escapes\\\\n\\"",
          "unicode": false,
          "value": "Tested all invalid ~ escapes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/data/GB2312.txt'",
              "unicode": false,
              "value": "/data/GB2312.txt",
            },
            "type": ".",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "readConversionTable",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "toUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "irreversible",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x21\\\\x2C\\"",
                "unicode": false,
                "value": "!,",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "goodChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "toUnicode",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "goodChars",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "shuffle",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "reversible",
              },
              "operator": "=",
              "right": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "length",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fromString",
              },
              "operator": "=",
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "toString",
                },
                "operator": "=",
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "''",
                  "unicode": false,
                  "value": "",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "goodChar",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "goodChars",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "array_pop",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fromString",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "goodChar",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "toString",
                    },
                    "operator": ".=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "goodChar",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "toUnicode",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "reversible",
                      },
                      "operator": "=",
                      "right": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Isset {
                    "kind": "isset",
                    "variables": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "goodChar",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "irreversible",
                        },
                      },
                    ],
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Post {
              "kind": "post",
              "type": "-",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "length",
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'~{'",
                      "unicode": false,
                      "value": "~{",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fromString",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'~}'",
                    "unicode": false,
                    "value": "~}",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "toString",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'HZ'",
                  "unicode": false,
                  "value": "HZ",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "reversible",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testValidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "goodChars",
          },
          "kind": "empty",
        },
      },
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"~\\"",
            "unicode": false,
            "value": "~",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "badChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "invalid",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "goodChars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "goodChars",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "toUnicode",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "array_keys",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "goodChars",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "shuffle",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Empty {
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "goodChars",
              },
              "kind": "empty",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "goodChar",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "goodChars",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "array_pop",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fromString",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "badChars",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "array_pop",
                    "resolution": "uqn",
                  },
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "goodChar",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "toString",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
                "right": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "goodChar",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "toUnicode",
                  },
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'~{'",
                      "unicode": false,
                      "value": "~{",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fromString",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'~}'",
                    "unicode": false,
                    "value": "~}",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "toString",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'HZ'",
                  "unicode": false,
                  "value": "HZ",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "badChars",
          },
          "kind": "empty",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "truncatedChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "truncated",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'~{'",
                    "unicode": false,
                    "value": "~{",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "truncatedChar",
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\x00%\\"",
                  "unicode": false,
                  "value": " %",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'HZ'",
                  "unicode": false,
                  "value": "HZ",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "testInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "truncatedChars",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "truncatedChar",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested HZ -> UTF-16BE (for all GB2312 characters)\\\\n\\"",
          "unicode": false,
          "value": "Tested HZ -> UTF-16BE (for all GB2312 characters)
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalid",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "unused",
          },
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Number {
                    "kind": "number",
                    "value": "0xFF",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Unset {
        "kind": "unset",
        "variables": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\"",
                "unicode": false,
                "value": " ",
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "invalid",
            },
          },
        ],
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7F",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "badChars",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "invalid",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "array_keys",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "goodChars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "goodChars",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fromUnicode",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "array_keys",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "goodChars",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "shuffle",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Empty {
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "goodChars",
              },
              "kind": "empty",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "goodChar",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "goodChars",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "array_pop",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fromString",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "badChars",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "array_pop",
                    "resolution": "uqn",
                  },
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "goodChar",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "toString",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"%~{\\"",
                    "unicode": false,
                    "value": "%~{",
                  },
                  "right": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "goodChar",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fromUnicode",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"~}\\"",
                  "unicode": false,
                  "value": "~}",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fromString",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "toString",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'UTF-16BE'",
                  "unicode": false,
                  "value": "UTF-16BE",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'HZ'",
                  "unicode": false,
                  "value": "HZ",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "convertInvalidString",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Empty {
          "expression": Variable {
            "curly": false,
            "kind": "variable",
            "name": "badChars",
          },
          "kind": "empty",
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Tested UTF-16BE -> HZ (for all GB2312 characters)\\\\n\\"",
          "unicode": false,
          "value": "Tested UTF-16BE -> HZ (for all GB2312 characters)
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"~A\\"",
            "unicode": false,
            "value": "~A",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"HZ\\"",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x80\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"HZ\\"",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"~{\\\\x22\\\\x21\\"",
            "unicode": false,
            "value": "~{\\"!",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"HZ\\"",
            "unicode": false,
            "value": "HZ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
