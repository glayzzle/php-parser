// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug GH-8461 004 (JIT does not account for class re-compile) 1`] = `
Program {
  "children": Array [
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "initialRequest",
              },
              "operator": "=",
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "y",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          Class {
            "attrGroups": Array [],
            "body": Array [
              ClassConstant {
                "attrGroups": Array [],
                "constants": Array [
                  Constant {
                    "kind": "constant",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "A",
                    },
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "classconstant",
                "visibility": "public",
              },
              ClassConstant {
                "attrGroups": Array [],
                "constants": Array [
                  Constant {
                    "kind": "constant",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "B",
                    },
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "classconstant",
                "visibility": "public",
              },
              PropertyStatement {
                "isStatic": false,
                "kind": "propertystatement",
                "properties": Array [
                  Property {
                    "attrGroups": Array [],
                    "kind": "property",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "foo",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                  },
                ],
                "visibility": "private",
              },
              Method {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "b",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Global {
                      "items": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "y",
                        },
                      ],
                      "kind": "global",
                    },
                    ExpressionStatement {
                      "expression": Post {
                        "kind": "post",
                        "type": "+",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "y",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "foo",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Bin {
                          "kind": "bin",
                          "left": StaticLookup {
                            "kind": "staticlookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "A",
                            },
                            "what": SelfReference {
                              "kind": "selfreference",
                              "raw": "self",
                            },
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "b",
                          },
                          "type": "+",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isAbstract": false,
                "isFinal": false,
                "isStatic": false,
                "kind": "method",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "__construct",
                },
                "nullable": false,
                "type": null,
                "visibility": "public",
              },
            ],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "name": Identifier {
              "kind": "identifier",
              "name": "UniqueList",
            },
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "initialRequest",
              },
              "operator": "=",
              "right": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Include {
              "kind": "include",
              "once": false,
              "require": true,
              "target": Bin {
                "kind": "bin",
                "left": Magic {
                  "kind": "magic",
                  "raw": "__DIR__",
                  "value": "__DIR__",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/gh8461-004.inc'",
                  "unicode": false,
                  "value": "/gh8461-004.inc",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Isset {
          "kind": "isset",
          "variables": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Bin {
                "kind": "bin",
                "left": Magic {
                  "kind": "magic",
                  "raw": "__DIR__",
                  "value": "__DIR__",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/gh8461-004.inc'",
                  "unicode": false,
                  "value": "/gh8461-004.inc",
                },
                "type": ".",
              },
              "what": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'scripts'",
                  "unicode": false,
                  "value": "scripts",
                },
                "what": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "opcache_get_status",
                    "resolution": "uqn",
                  },
                },
              },
            },
          ],
        },
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "B",
                      },
                      "what": SelfReference {
                        "kind": "selfreference",
                        "raw": "self",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "__construct",
                    },
                    "what": ParentReference {
                      "kind": "parentreference",
                      "raw": "parent",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "UniqueList",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "UniqueListLast",
      },
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": New {
              "arguments": Array [],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "UniqueListLast",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "10",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          RetIf {
            "falseExpr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "y",
            },
            "kind": "retif",
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "initialRequest",
            },
            "trueExpr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"OK\\"",
          "unicode": false,
          "value": "OK",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
