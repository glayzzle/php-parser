// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests PDO Common: Bug #71447 (Quotes inside comments not properly handled) 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'REDIR_TEST_DIR='",
                  "unicode": false,
                  "value": "REDIR_TEST_DIR=",
                },
                "right": Magic {
                  "kind": "magic",
                  "raw": "__DIR__",
                  "value": "__DIR__",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/../../pdo/tests/'",
                "unicode": false,
                "value": "/../../pdo/tests/",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "putenv",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'REDIR_TEST_DIR'",
              "unicode": false,
              "value": "REDIR_TEST_DIR",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "getenv",
            "resolution": "uqn",
          },
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "type": "===",
      },
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'REDIR_TEST_DIR'",
                "unicode": false,
                "value": "REDIR_TEST_DIR",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "getenv",
              "resolution": "uqn",
            },
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pdo_test.inc'",
            "unicode": false,
            "value": "pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "PDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_ERRMODE",
            },
            "what": Name {
              "kind": "name",
              "name": "\\\\PDO",
              "resolution": "fqn",
            },
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ERRMODE_WARNING",
            },
            "what": Name {
              "kind": "name",
              "name": "\\\\PDO",
              "resolution": "fqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_DEFAULT_FETCH_MODE",
            },
            "what": Name {
              "kind": "name",
              "name": "\\\\PDO",
              "resolution": "fqn",
            },
          },
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "FETCH_NUM",
            },
            "what": Name {
              "kind": "name",
              "name": "\\\\PDO",
              "resolution": "fqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_EMULATE_PREPARES",
            },
            "what": Name {
              "kind": "name",
              "name": "\\\\PDO",
              "resolution": "fqn",
            },
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CREATE TABLE test(id int)'",
            "unicode": false,
            "value": "CREATE TABLE test(id int)",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'INSERT INTO test VALUES(1)'",
            "unicode": false,
            "value": "INSERT INTO test VALUES(1)",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT -- That's all folks!
        '\\\\\\"abc\\\\\\":8000'
    FROM test
\\"",
              "unicode": false,
              "value": "
    SELECT -- That's all folks!
        '\\"abc\\\\\\":8000'
    FROM test
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT
        '\\\\\\"abc\\\\\\":8001 -- Wat?'
    FROM test
\\"",
              "unicode": false,
              "value": "
    SELECT
        '\\"abc\\\\\\":8001 -- Wat?'
    FROM test
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT -- That's all folks!
        '\\\\\\"abc\\\\\\":8002'
    FROM test
\\"",
              "unicode": false,
              "value": "
    SELECT -- That's all folks!
        '\\"abc\\\\\\":8002'
    FROM test
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT /* That's all folks! */
        '\\\\\\"abc\\\\\\":8003'
    FROM test
\\"",
              "unicode": false,
              "value": "
    SELECT /* That's all folks! */
        '\\"abc\\\\\\":8003'
    FROM test
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT -- Is it only \\\\\\"single quotes?
        '\\\\\\"abc\\\\\\":8004'
    FROM test
\\"",
              "unicode": false,
              "value": "
    SELECT -- Is it only \\"single quotes?
        '\\\\\\"abc\\\\\\":8004'
    FROM test
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT -- What about question marks here?
        *
    FROM test
    WHERE id = ?
\\"",
              "unicode": false,
              "value": "
    SELECT -- What about question marks here?
        *
    FROM test
    WHERE id = ?
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "stmt",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"
    SELECT -- What about placeholders :bar
        *
    FROM test
    WHERE id = :id
\\"",
              "unicode": false,
              "value": "
    SELECT -- What about placeholders :bar
        *
    FROM test
    WHERE id = :id
",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "prepare",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'id'",
                  "unicode": false,
                  "value": "id",
                },
                "kind": "entry",
                "unpack": false,
                "value": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "execute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "fetchColumn",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
