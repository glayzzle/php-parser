// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #32428 (The @ warning error suppression operator is broken) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Silent {
          "expr": Variable {
            "curly": false,
            "kind": "variable",
            "name": "not_exists",
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Silent {
          "expr": Variable {
            "curly": false,
            "kind": "variable",
            "name": "not_exists",
            "parenthesizedExpression": true,
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Silent {
          "expr": Unary {
            "kind": "unary",
            "type": "!",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "not_exists",
            },
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Silent {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "not_exists",
            },
            "kind": "silent",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Silent {
          "expr": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "not_exists",
            },
            "parenthesizedExpression": true,
            "right": Number {
              "kind": "number",
              "value": "1",
            },
            "type": "+",
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\\\n\\"",
          "unicode": false,
          "value": "ok
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
