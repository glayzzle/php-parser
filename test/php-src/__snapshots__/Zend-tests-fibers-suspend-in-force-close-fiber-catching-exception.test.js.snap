// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Suspend in force-closed fiber, catching exception thrown from destructor 1`] = `
Program {
  "children": Array [
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fiber",
                        },
                        "operator": "=",
                        "right": New {
                          "arguments": Array [
                            Closure {
                              "arguments": Array [],
                              "attrGroups": Array [],
                              "body": Block {
                                "children": Array [
                                  Try {
                                    "always": Block {
                                      "children": Array [
                                        ExpressionStatement {
                                          "expression": Call {
                                            "arguments": Array [],
                                            "kind": "call",
                                            "what": StaticLookup {
                                              "kind": "staticlookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "suspend",
                                              },
                                              "what": Name {
                                                "kind": "name",
                                                "name": "Fiber",
                                                "resolution": "uqn",
                                              },
                                            },
                                          },
                                          "kind": "expressionstatement",
                                        },
                                      ],
                                      "kind": "block",
                                    },
                                    "body": Block {
                                      "children": Array [
                                        ExpressionStatement {
                                          "expression": Call {
                                            "arguments": Array [],
                                            "kind": "call",
                                            "what": StaticLookup {
                                              "kind": "staticlookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "suspend",
                                              },
                                              "what": Name {
                                                "kind": "name",
                                                "name": "Fiber",
                                                "resolution": "uqn",
                                              },
                                            },
                                          },
                                          "kind": "expressionstatement",
                                        },
                                      ],
                                      "kind": "block",
                                    },
                                    "catches": Array [],
                                    "kind": "try",
                                  },
                                ],
                                "kind": "block",
                              },
                              "byref": false,
                              "isStatic": false,
                              "kind": "closure",
                              "nullable": false,
                              "type": TypeReference {
                                "kind": "typereference",
                                "name": "void",
                                "raw": "void",
                              },
                              "uses": Array [],
                            },
                          ],
                          "kind": "new",
                          "what": Name {
                            "kind": "name",
                            "name": "Fiber",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "start",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "fiber",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "parenthesizedExpression": true,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "void",
                  "raw": "void",
                },
                "uses": Array [],
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "exception",
                      },
                    },
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "exception",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "FiberError",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done\\\\n\\"",
          "unicode": false,
          "value": "done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
