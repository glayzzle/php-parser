// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test return type and value for expected input acos() 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_path",
        },
        "operator": "=",
        "right": Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "file_path",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"/allowed_rounding_error.inc\\"",
            "unicode": false,
            "value": "/allowed_rounding_error.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"acos .5  = \\"",
          "unicode": false,
          "value": "acos .5  = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "acosv1",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "360.0",
            },
            "right": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "0.5",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "acos",
                "resolution": "uqn",
              },
            },
            "type": "*",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2.0",
            },
            "parenthesizedExpression": true,
            "right": Name {
              "kind": "name",
              "name": "M_PI",
              "resolution": "uqn",
            },
            "type": "*",
          },
          "type": "/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Fail\\\\n\\"",
                "unicode": false,
                "value": "Fail
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Pass\\\\n\\"",
                "unicode": false,
                "value": "Pass
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv1",
          },
          Number {
            "kind": "number",
            "value": "60",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "allowed_rounding_error",
          "resolution": "uqn",
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"acos 0.86602540378444 = \\"",
          "unicode": false,
          "value": "acos 0.86602540378444 = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "acosv2",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "360.0",
            },
            "right": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "0.86602540378444",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "acos",
                "resolution": "uqn",
              },
            },
            "type": "*",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2.0",
            },
            "parenthesizedExpression": true,
            "right": Name {
              "kind": "name",
              "name": "M_PI",
              "resolution": "uqn",
            },
            "type": "*",
          },
          "type": "/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv2",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Fail\\\\n\\"",
                "unicode": false,
                "value": "Fail
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Pass\\\\n\\"",
                "unicode": false,
                "value": "Pass
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv2",
          },
          Number {
            "kind": "number",
            "value": "30",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "allowed_rounding_error",
          "resolution": "uqn",
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"acos 1.0 = \\"",
          "unicode": false,
          "value": "acos 1.0 = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "acosv3",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "360.0",
            },
            "right": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "1.0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "acos",
                "resolution": "uqn",
              },
            },
            "type": "*",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2.0",
            },
            "parenthesizedExpression": true,
            "right": Name {
              "kind": "name",
              "name": "M_PI",
              "resolution": "uqn",
            },
            "type": "*",
          },
          "type": "/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv3",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Fail\\\\n\\"",
                "unicode": false,
                "value": "Fail
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Pass\\\\n\\"",
                "unicode": false,
                "value": "Pass
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv3",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "allowed_rounding_error",
          "resolution": "uqn",
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"acos 0.0 = \\"",
          "unicode": false,
          "value": "acos 0.0 = ",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "acosv4",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "360.0",
            },
            "right": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "0.0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "acos",
                "resolution": "uqn",
              },
            },
            "type": "*",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2.0",
            },
            "parenthesizedExpression": true,
            "right": Name {
              "kind": "name",
              "name": "M_PI",
              "resolution": "uqn",
            },
            "type": "*",
          },
          "type": "/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv4",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Fail\\\\n\\"",
                "unicode": false,
                "value": "Fail
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Pass\\\\n\\"",
                "unicode": false,
                "value": "Pass
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "acosv3",
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "allowed_rounding_error",
          "resolution": "uqn",
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
