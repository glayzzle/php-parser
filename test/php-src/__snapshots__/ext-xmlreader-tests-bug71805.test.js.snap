// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests XMLReader: Bug #71805 XML files can generate UTF-8 error even if they are UTF-8 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": Name {
                "kind": "name",
                "name": "DIRECTORY_SEPARATOR",
                "resolution": "uqn",
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'XMLReaderGood_bug71805.xml'",
              "unicode": false,
              "value": "XMLReaderGood_bug71805.xml",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "TestXML",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": Name {
                "kind": "name",
                "name": "DIRECTORY_SEPARATOR",
                "resolution": "uqn",
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'XMLReaderBad_bug71805.xml'",
              "unicode": false,
              "value": "XMLReaderBad_bug71805.xml",
            },
            "type": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "TestXML",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "file",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "XR",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "XMLReader",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "file",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "null",
                },
                Name {
                  "kind": "name",
                  "name": "LIBXML_NOBLANKS",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "open",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "XR",
                },
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": null,
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lastRead",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "read",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "XR",
                    },
                  },
                },
              },
              "right": Bin {
                "kind": "bin",
                "left": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "name",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "XR",
                  },
                },
                "parenthesizedExpression": true,
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'records'",
                  "unicode": false,
                  "value": "records",
                },
                "type": "!==",
              },
              "type": "&&",
            },
          },
          While {
            "body": null,
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lastRead",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "read",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "XR",
                    },
                  },
                },
              },
              "right": Bin {
                "kind": "bin",
                "left": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "name",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "XR",
                  },
                },
                "parenthesizedExpression": true,
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'record'",
                  "unicode": false,
                  "value": "record",
                },
                "type": "!==",
              },
              "type": "&&",
            },
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "xml",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "readOuterXML",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "XR",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "err",
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "''",
                            "unicode": false,
                            "value": "",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "err",
                                },
                                "operator": "=",
                                "right": Bin {
                                  "kind": "bin",
                                  "left": Bin {
                                    "kind": "bin",
                                    "left": Bin {
                                      "kind": "bin",
                                      "left": PropertyLookup {
                                        "kind": "propertylookup",
                                        "offset": Identifier {
                                          "kind": "identifier",
                                          "name": "message",
                                        },
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "e",
                                        },
                                      },
                                      "right": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "' (line: '",
                                        "unicode": false,
                                        "value": " (line: ",
                                      },
                                      "type": ".",
                                    },
                                    "right": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "line",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "e",
                                      },
                                    },
                                    "type": ".",
                                  },
                                  "right": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "')'",
                                    "unicode": false,
                                    "value": ")",
                                  },
                                  "type": ".",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "e",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "libxml_get_last_error",
                              "resolution": "uqn",
                            },
                          },
                        },
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "close",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "XR",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Echo {
                        "expressions": Array [
                          Bin {
                            "kind": "bin",
                            "left": Bin {
                              "kind": "bin",
                              "left": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "file",
                                },
                                "right": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "' : Problem with file'",
                                  "unicode": false,
                                  "value": " : Problem with file",
                                },
                                "type": ".",
                              },
                              "right": RetIf {
                                "falseExpr": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "''",
                                  "unicode": false,
                                  "value": "",
                                },
                                "kind": "retif",
                                "parenthesizedExpression": true,
                                "test": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "err",
                                },
                                "trueExpr": Bin {
                                  "kind": "bin",
                                  "left": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "' — '",
                                    "unicode": false,
                                    "value": " — ",
                                  },
                                  "right": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "err",
                                  },
                                  "type": ".",
                                },
                              },
                              "type": ".",
                            },
                            "right": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'.'",
                              "unicode": false,
                              "value": ".",
                            },
                            "type": ".",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\n\\"",
                            "unicode": false,
                            "value": "
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      Return {
                        "expr": null,
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "xml",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "''",
                      "unicode": false,
                      "value": "",
                    },
                    "type": "===",
                  },
                },
                While {
                  "body": null,
                  "kind": "while",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "lastRead",
                      },
                      "operator": "=",
                      "parenthesizedExpression": true,
                      "right": Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "next",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "XR",
                          },
                        },
                      },
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "name",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "XR",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'record'",
                        "unicode": false,
                        "value": "record",
                      },
                      "type": "!==",
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "lastRead",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "close",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "XR",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "file",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "' : Good!'",
                  "unicode": false,
                  "value": " : Good!",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Return {
            "expr": null,
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "TestXML",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
