// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Calling XMLReader::open() and ::XML() statically 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "filename",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/static.xml'",
            "unicode": false,
            "value": "/static.xml",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xmlstring",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<books></books>'",
          "unicode": false,
          "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<books></books>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xmlstring",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "reader",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "filename",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "open",
            },
            "what": Name {
              "kind": "name",
              "name": "XMLReader",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "name",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "reader",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "read",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "reader",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "reader",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "xmlstring",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "XML",
            },
            "what": Name {
              "kind": "name",
              "name": "XMLReader",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "name",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "reader",
                },
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "read",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "reader",
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
