// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests IntlCalendar::equals(), ::before() and ::after() basic test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"intl.error_level\\"",
            "unicode": false,
            "value": "intl.error_level",
          },
          Name {
            "kind": "name",
            "name": "E_WARNING",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"intl.default_locale\\"",
            "unicode": false,
            "value": "intl.default_locale",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"nl\\"",
            "unicode": false,
            "value": "nl",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "intlcal1",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "2012",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "29",
            },
            Number {
              "kind": "number",
              "value": "16",
            },
            Number {
              "kind": "number",
              "value": "59",
            },
            Number {
              "kind": "number",
              "value": "59",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "IntlGregorianCalendar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "intlcal2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            NullKeyword {
              "kind": "nullkeyword",
              "raw": "null",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'@calendar=japanese'",
              "unicode": false,
              "value": "@calendar=japanese",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "createInstance",
            },
            "what": Name {
              "kind": "name",
              "name": "IntlCalendar",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "intlcal3",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "2012",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "29",
            },
            Number {
              "kind": "number",
              "value": "17",
            },
            Number {
              "kind": "number",
              "value": "00",
            },
            Number {
              "kind": "number",
              "value": "00",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "IntlGregorianCalendar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getTime",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setTime",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "intlcal2",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getType",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 eq 1\\"",
            "unicode": false,
            "value": "1 eq 1",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "equals",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 eq 2\\"",
            "unicode": false,
            "value": "1 eq 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "equals",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 before 2\\"",
            "unicode": false,
            "value": "1 before 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "before",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 after 2\\"",
            "unicode": false,
            "value": "1 after 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "after",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 eq 3\\"",
            "unicode": false,
            "value": "1 eq 3",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "equals",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 before 3\\"",
            "unicode": false,
            "value": "1 before 3",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "before",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"1 after 3\\"",
            "unicode": false,
            "value": "1 after 3",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "after",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal1",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"3 eq 2\\"",
            "unicode": false,
            "value": "3 eq 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "intlcal_equals",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"3 before 2\\"",
            "unicode": false,
            "value": "3 before 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "intlcal_before",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"3 after 2\\"",
            "unicode": false,
            "value": "3 after 2",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal3",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "intlcal2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "intlcal_after",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
