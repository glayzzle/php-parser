// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exception during break 2 with multiple try/catch 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "a",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "b",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Throw {
                "kind": "throw",
                "what": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__destruct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "A",
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                Try {
                  "always": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"finally2\\\\n\\"",
                            "unicode": false,
                            "value": "finally2
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Foreach {
                        "body": Block {
                          "children": Array [
                            Try {
                              "always": Block {
                                "children": Array [
                                  Echo {
                                    "expressions": Array [
                                      String {
                                        "isDoubleQuote": true,
                                        "kind": "string",
                                        "raw": "\\"finally1\\\\n\\"",
                                        "unicode": false,
                                        "value": "finally1
",
                                      },
                                    ],
                                    "kind": "echo",
                                    "shortForm": false,
                                  },
                                ],
                                "kind": "block",
                              },
                              "body": Block {
                                "children": Array [
                                  Break {
                                    "kind": "break",
                                    "level": Number {
                                      "kind": "number",
                                      "value": "2",
                                    },
                                  },
                                ],
                                "kind": "block",
                              },
                              "catches": Array [
                                Catch {
                                  "body": Block {
                                    "children": Array [
                                      Echo {
                                        "expressions": Array [
                                          String {
                                            "isDoubleQuote": true,
                                            "kind": "string",
                                            "raw": "\\"catch1\\\\n\\"",
                                            "unicode": false,
                                            "value": "catch1
",
                                          },
                                        ],
                                        "kind": "echo",
                                        "shortForm": false,
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "kind": "catch",
                                  "variable": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "e",
                                  },
                                  "what": Array [
                                    Name {
                                      "kind": "name",
                                      "name": "Exception",
                                      "resolution": "uqn",
                                    },
                                  ],
                                },
                              ],
                              "kind": "try",
                            },
                          ],
                          "kind": "block",
                        },
                        "key": null,
                        "kind": "foreach",
                        "shortForm": false,
                        "source": New {
                          "arguments": Array [],
                          "kind": "new",
                          "what": Name {
                            "kind": "name",
                            "name": "A",
                            "resolution": "uqn",
                          },
                        },
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "value",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "catches": Array [
                    Catch {
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"catch2\\\\n\\"",
                                "unicode": false,
                                "value": "catch2
",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "catch",
                      "variable": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                      "what": Array [
                        Name {
                          "kind": "name",
                          "name": "Exception",
                          "resolution": "uqn",
                        },
                      ],
                    },
                  ],
                  "kind": "try",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "_",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
