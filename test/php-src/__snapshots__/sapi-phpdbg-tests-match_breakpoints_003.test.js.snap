// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test match default breakpoint with dim assignment 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foo'",
            "unicode": false,
            "value": "foo",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
        "operator": "=",
        "right": Match {
          "arms": Array [
            MatchArm {
              "body": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'foo'",
                "unicode": false,
                "value": "foo",
              },
              "conds": Array [
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "matcharm",
            },
            MatchArm {
              "body": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'bar'",
                "unicode": false,
                "value": "bar",
              },
              "conds": null,
              "kind": "matcharm",
            },
          ],
          "cond": Number {
            "kind": "number",
            "value": "0",
          },
          "kind": "match",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "bar",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
        "operator": "=",
        "right": Match {
          "arms": Array [
            MatchArm {
              "body": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'foo'",
                "unicode": false,
                "value": "foo",
              },
              "conds": Array [
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "matcharm",
            },
            MatchArm {
              "body": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'bar'",
                "unicode": false,
                "value": "bar",
              },
              "conds": null,
              "kind": "matcharm",
            },
          ],
          "cond": Number {
            "kind": "number",
            "value": "1",
          },
          "kind": "match",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
