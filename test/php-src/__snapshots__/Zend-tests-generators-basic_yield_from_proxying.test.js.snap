// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Basic test if yield from works 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Yield {
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"from\\"",
                "unicode": false,
                "value": "from",
              },
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "from",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Yield {
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"gen\\"",
                "unicode": false,
                "value": "gen",
              },
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": YieldFrom {
              "kind": "yieldfrom",
              "value": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "from",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Yield {
              "key": null,
              "kind": "yield",
              "value": Number {
                "kind": "number",
                "value": "3",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "gen",
      },
      "nullable": false,
      "type": null,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "gen",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "key",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "gen",
                    },
                  },
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "current",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "gen",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "next",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "gen",
            },
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "gen",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "gen",
              "resolution": "uqn",
            },
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "valid",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "gen",
            },
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
