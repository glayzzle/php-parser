// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Register Alloction 009: Missing type store 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Bin {
                    "kind": "bin",
                    "left": Number {
                      "kind": "number",
                      "value": "4",
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "-",
                      "what": Post {
                        "kind": "post",
                        "type": "+",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "j",
                        },
                      },
                    },
                    "type": ">>",
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "right": Assign {
                  "kind": "assign",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": false,
                    "what": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "4",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "y",
                      },
                    },
                  },
                  "operator": "=",
                  "right": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "y",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "a",
                      },
                      "right": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "a",
                        },
                        "operator": "=",
                        "right": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "b",
                          },
                          "operator": "=",
                          "right": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "a",
                            },
                            "operator": "=",
                            "right": Unary {
                              "kind": "unary",
                              "type": "+",
                              "what": Assign {
                                "kind": "assign",
                                "left": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": false,
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "y",
                                  },
                                },
                                "operator": "=",
                                "right": Number {
                                  "kind": "number",
                                  "value": "0.1",
                                },
                              },
                            },
                          },
                        },
                      },
                      "type": "+",
                    },
                    "type": "<",
                  },
                },
                "type": "+",
              },
            ],
            "init": Array [],
            "kind": "for",
            "shortForm": false,
            "test": Array [],
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
