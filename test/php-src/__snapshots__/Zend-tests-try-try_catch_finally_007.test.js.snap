// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Try catch finally (goto in try/catch block) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "ret",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Boolean {
            "kind": "boolean",
            "raw": "FALSE",
            "value": false,
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"finally2\\"",
                        "unicode": false,
                        "value": "finally2",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Try {
                  "always": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"finally1\\"",
                              "unicode": false,
                              "value": "finally1",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Throw {
                        "kind": "throw",
                        "what": New {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"exception\\"",
                              "unicode": false,
                              "value": "exception",
                            },
                          ],
                          "kind": "new",
                          "what": Name {
                            "kind": "name",
                            "name": "Exception",
                            "resolution": "uqn",
                          },
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Do {
                        "body": Block {
                          "children": Array [
                            Goto {
                              "kind": "goto",
                              "label": Identifier {
                                "kind": "identifier",
                                "name": "label",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "do",
                        "test": Number {
                          "kind": "number",
                          "value": "0",
                        },
                      },
                      Foreach {
                        "body": Block {
                          "children": Array [
                            Continue {
                              "kind": "continue",
                              "level": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "key": null,
                        "kind": "foreach",
                        "shortForm": false,
                        "source": Array {
                          "items": Array [],
                          "kind": "array",
                          "shortForm": false,
                        },
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "val",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "catches": Array [],
                  "kind": "try",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Goto {
                      "kind": "goto",
                      "label": Identifier {
                        "kind": "identifier",
                        "name": "local",
                      },
                    },
                    Label {
                      "kind": "label",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "local",
                      },
                    },
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"caught\\"",
                            "unicode": false,
                            "value": "caught",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_dump",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    If {
                      "alternate": null,
                      "body": Return {
                        "expr": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"return\\"",
                          "unicode": false,
                          "value": "return",
                        },
                        "kind": "return",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ret",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Label {
            "kind": "label",
            "name": Identifier {
              "kind": "identifier",
              "name": "label",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"label\\"",
                  "unicode": false,
                  "value": "label",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
