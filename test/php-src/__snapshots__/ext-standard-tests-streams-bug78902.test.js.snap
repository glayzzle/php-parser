// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #78902: Memory leak when using stream_filter_append 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tmp_file_name",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sys_get_temp_dir",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'test_'",
              "unicode": false,
              "value": "test_",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "tempnam",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp_file_name",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'w+'",
              "unicode": false,
              "value": "w+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "size",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "1024",
            },
            "right": Number {
              "kind": "number",
              "value": "1024",
            },
            "type": "*",
          },
          "right": Number {
            "kind": "number",
            "value": "2",
          },
          "type": "*",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "chunk",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1024",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "''",
                      "unicode": false,
                      "value": "",
                    },
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "chunk",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "size",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "min",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_pad",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fputs",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "size",
              },
              "operator": "-=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "chunk",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "size",
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": ">",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp_file_name",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r'",
              "unicode": false,
              "value": "r",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"string.toupper\\"",
            "unicode": false,
            "value": "string.toupper",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "stream_filter_append",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fread",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "feof",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Boolean {
            "kind": "boolean",
            "raw": "true",
            "value": true,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
