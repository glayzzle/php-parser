// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bind with various bind types not supported by TimesTen 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/connect.inc'",
            "unicode": false,
            "value": "/connect.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "types",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SQLT_CLOB\\"",
                "unicode": false,
                "value": "SQLT_CLOB",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "SQLT_CLOB",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SQLT_BLOB\\"",
                "unicode": false,
                "value": "SQLT_BLOB",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "SQLT_BLOB",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"OCI_B_CLOB\\"",
                "unicode": false,
                "value": "OCI_B_CLOB",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "OCI_B_CLOB",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"OCI_B_BLOB\\"",
                "unicode": false,
                "value": "OCI_B_BLOB",
              },
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "OCI_B_BLOB",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Test - $t\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Test - ",
                      "unicode": false,
                      "value": "Test - ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "t",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"select * from dual where dummy = :c1\\"",
                    "unicode": false,
                    "value": "select * from dual where dummy = :c1",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_parse",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "c1",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Doug\\"",
                "unicode": false,
                "value": "Doug",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\":c1\\"",
                  "unicode": false,
                  "value": ":c1",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "c1",
                },
                Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_bind_by_name",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "t",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "types",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
