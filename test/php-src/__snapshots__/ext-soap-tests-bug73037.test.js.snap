// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #73037 SoapServer reports Bad Request when gzipped, var 0 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"/../../../sapi/cli/tests/php_cli_server.inc\\"",
            "unicode": false,
            "value": "/../../../sapi/cli/tests/php_cli_server.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "max",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "piece",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"<CD>
        <TITLE>Empire Burlesque</TITLE>
        <ARTIST>Bob Dylan</ARTIST>
        <COUNTRY>USA</COUNTRY>
        <COMPANY>Columbia</COMPANY>
        <PRICE>10.90</PRICE>
        <YEAR>1985</YEAR>
    </CD>\\"",
                "unicode": false,
                "value": "<CD>
        <TITLE>Empire Burlesque</TITLE>
        <ARTIST>Bob Dylan</ARTIST>
        <COUNTRY>USA</COUNTRY>
        <COMPANY>Columbia</COMPANY>
        <PRICE>10.90</PRICE>
        <YEAR>1985</YEAR>
    </CD>",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "begin",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><soapenv:Envelope xmlns:soapenv=\\"http://www.w3.org/2003/05/soap-envelope\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"><soapenv:Body><CATALOG>'",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><soapenv:Envelope xmlns:soapenv=\\"http://www.w3.org/2003/05/soap-envelope\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"><soapenv:Body><CATALOG>",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "end",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'</CATALOG></soapenv:Body></soapenv:Envelope>'",
                "unicode": false,
                "value": "</CATALOG></soapenv:Body></soapenv:Envelope>",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "min",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "begin",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "strlen",
                      "resolution": "uqn",
                    },
                  },
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "piece",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "strlen",
                      "resolution": "uqn",
                    },
                  },
                  "type": "+",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "end",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
                "type": "+",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "max",
              },
              "operator": "=",
              "right": RetIf {
                "falseExpr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "max",
                },
                "kind": "retif",
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "max",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "min",
                  },
                  "type": "<",
                },
                "trueExpr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "min",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "begin",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              "operator": ".=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "piece",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"Empire Burlesque\\"",
                                "unicode": false,
                                "value": "Empire Burlesque",
                              },
                            },
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"Bob Dylan\\"",
                                "unicode": false,
                                "value": "Bob Dylan",
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": false,
                        },
                        Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": Call {
                                "arguments": Array [
                                  Call {
                                    "arguments": Array [],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "uniqid",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "md5",
                                  "resolution": "uqn",
                                },
                              },
                            },
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": Call {
                                "arguments": Array [
                                  Call {
                                    "arguments": Array [],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "uniqid",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "sha1",
                                  "resolution": "uqn",
                                },
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": false,
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "piece",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "str_replace",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "begin",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strlen",
                            "resolution": "uqn",
                          },
                        },
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tmp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strlen",
                            "resolution": "uqn",
                          },
                        },
                        "type": "+",
                      },
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "end",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strlen",
                          "resolution": "uqn",
                        },
                      },
                      "type": "+",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "max",
                    },
                    "type": ">",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "end",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
                "type": "+",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "max",
              },
              "type": "<",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              "operator": ".=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "end",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "data",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "get_data",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "router",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"bug73037_server.php\\"",
          "unicode": false,
          "value": "bug73037_server.php",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "args",
        },
        "operator": "=",
        "right": RetIf {
          "falseExpr": Array {
            "items": Array [],
            "kind": "array",
            "shortForm": true,
          },
          "kind": "retif",
          "test": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "PHP_OS",
                  "resolution": "uqn",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "3",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'WIN'",
              "unicode": false,
              "value": "WIN",
            },
            "type": "==",
          },
          "trueExpr": Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"-d\\"",
                  "unicode": false,
                  "value": "-d",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"extension_dir=\\"",
                    "unicode": false,
                    "value": "extension_dir=",
                  },
                  "right": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"extension_dir\\"",
                        "unicode": false,
                        "value": "extension_dir",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "ini_get",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"-d\\"",
                  "unicode": false,
                  "value": "-d",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"extension=php_soap.dll\\"",
                  "unicode": false,
                  "value": "extension=php_soap.dll",
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "code",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "PHP",
          "raw": "<<<'PHP'
$s = new SoapServer(NULL, array('uri' => 'http://here'));
$s->setObject(new stdclass());
$s->handle();
PHP",
          "value": "$s = new SoapServer(NULL, array('uri' => 'http://here'));
$s->setObject(new stdclass());
$s->handle();",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "code",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "router",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "args",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "php_cli_server_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Iteration $k\\\\n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Iteration ",
                      "unicode": false,
                      "value": "Iteration ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "k",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n\\\\n",
                      "unicode": false,
                      "value": "\\\\n\\\\n",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "data",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "get_data",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "data",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "data",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "gzencode",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "len",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "data",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "strlen",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "hdrs",
                    },
                    "operator": "=",
                    "right": Encapsed {
                      "kind": "encapsed",
                      "label": "HDRS",
                      "raw": "<<<HDRS
POST /bug73037_server.php HTTP/1.1
Content-Type: application/soap+xml; charset=UTF-8
Accept: application/soap+xml, application/dime, multipart/related, text/*
SOAPAction: \\"urn:adressen#adressen#SetAda\\"
Expect: 100-continue
Content-Length: \${len}
HDRS",
                      "type": "heredoc",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "POST /bug73037_server.php HTTP/1.1
Content-Type: application/soap+xml; charset=UTF-8
Accept: application/soap+xml, application/dime, multipart/related, text/*
SOAPAction: \\"urn:adressen#adressen#SetAda\\"
Expect: 100-continue
Content-Length: ",
                            "unicode": false,
                            "value": "POST /bug73037_server.php HTTP/1.1
Content-Type: application/soap+xml; charset=UTF-8
Accept: application/soap+xml, application/dime, multipart/related, text/*
SOAPAction: \\"urn:adressen#adressen#SetAda\\"
Expect: 100-continue
Content-Length: ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": true,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "len",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "
",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "hdrs",
                          },
                          "operator": ".=",
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\nContent-Encoding: gzip\\"",
                            "unicode": false,
                            "value": "
Content-Encoding: gzip",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Name {
                          "kind": "name",
                          "name": "PHP_CLI_SERVER_HOSTNAME",
                          "resolution": "uqn",
                        },
                        Name {
                          "kind": "name",
                          "name": "PHP_CLI_SERVER_PORT",
                          "resolution": "uqn",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "errno",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "errstr",
                        },
                        Number {
                          "kind": "number",
                          "value": "5",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fsockopen",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Exit {
                          "expression": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"connect failed\\"",
                            "unicode": false,
                            "value": "connect failed",
                          },
                          "kind": "exit",
                          "useDie": true,
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fp",
                    },
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "out",
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\"",
                            "unicode": false,
                            "value": "",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      While {
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "out",
                                },
                                "operator": ".=",
                                "right": Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "fp",
                                    },
                                    Number {
                                      "kind": "number",
                                      "value": "1024",
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "fread",
                                    "resolution": "uqn",
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "while",
                        "shortForm": false,
                        "test": Unary {
                          "kind": "unary",
                          "type": "!",
                          "what": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fp",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "feof",
                              "resolution": "uqn",
                            },
                          },
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pos",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "out",
                              },
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"<env:Text>\\"",
                                "unicode": false,
                                "value": "<env:Text>",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strpos",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "out",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            Goto {
                              "kind": "goto",
                              "label": Identifier {
                                "kind": "identifier",
                                "name": "cleanup",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Boolean {
                            "kind": "boolean",
                            "raw": "false",
                            "value": false,
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pos",
                          },
                          "type": "===",
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pos0",
                          },
                          "operator": "=",
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pos",
                            },
                            "right": Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"<env:Text>\\"",
                                  "unicode": false,
                                  "value": "<env:Text>",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "strlen",
                                "resolution": "uqn",
                              },
                            },
                            "type": "+",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pos",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "out",
                              },
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"</env:Text>\\"",
                                "unicode": false,
                                "value": "</env:Text>",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strpos",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "out",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            Goto {
                              "kind": "goto",
                              "label": Identifier {
                                "kind": "identifier",
                                "name": "cleanup",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Boolean {
                            "kind": "boolean",
                            "raw": "false",
                            "value": false,
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pos",
                          },
                          "type": "===",
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "len",
                          },
                          "operator": "=",
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pos",
                            },
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pos0",
                            },
                            "type": "-",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Echo {
                        "expressions": Array [
                          Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "out",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "pos0",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "len",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "substr",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fp",
                      },
                      Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"$hdrs\\\\n\\\\n$data\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "hdrs",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "\\\\n\\\\n",
                              "unicode": false,
                              "value": "\\\\n\\\\n",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "data",
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                        ],
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "fwrite",
                      "resolution": "uqn",
                    },
                  },
                },
                Label {
                  "kind": "label",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "cleanup",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "fclose",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\\\n\\"",
                      "unicode": false,
                      "value": "

",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "1024",
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "-",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "8",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "3",
              },
              "type": "-",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "9",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "+",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "16",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "-",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "32",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "5",
              },
              "type": "-",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "64",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "3",
              },
              "type": "+",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "128",
                },
                "type": "*",
              },
              "right": Number {
                "kind": "number",
                "value": "7",
              },
              "type": "-",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "i",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
