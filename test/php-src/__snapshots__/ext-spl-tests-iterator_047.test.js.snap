// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: RecursiveCachingIterator and exception in has/getChildren 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": true,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "fail",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "state",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "method",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    Throw {
                      "kind": "throw",
                      "what": New {
                        "arguments": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"State $state: $method()\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "State ",
                                  "unicode": false,
                                  "value": "State ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "state",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": ": ",
                                  "unicode": false,
                                  "value": ": ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "method",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "()",
                                  "unicode": false,
                                  "value": "()",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "new",
                        "what": Name {
                          "kind": "name",
                          "name": "Exception",
                          "resolution": "uqn",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fail",
                    },
                    "what": SelfReference {
                      "kind": "selfreference",
                      "raw": "self",
                    },
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "state",
                  },
                  "type": "==",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "fail",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "void",
            "raw": "void",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"()\\\\n\\"",
                      "unicode": false,
                      "value": "()
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "1",
                    },
                    Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                  ],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fail",
                    },
                    "what": SelfReference {
                      "kind": "selfreference",
                      "raw": "self",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "hasChildren",
                    },
                    "what": ParentReference {
                      "kind": "parentreference",
                      "raw": "parent",
                    },
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "hasChildren",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "bool",
            "raw": "bool",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"()\\\\n\\"",
                      "unicode": false,
                      "value": "()
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "2",
                    },
                    Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                  ],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fail",
                    },
                    "what": SelfReference {
                      "kind": "selfreference",
                      "raw": "self",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getChildren",
                    },
                    "what": ParentReference {
                      "kind": "parentreference",
                      "raw": "parent",
                    },
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "getChildren",
          },
          "nullable": true,
          "type": Name {
            "kind": "name",
            "name": "RecursiveArrayIterator",
            "resolution": "uqn",
          },
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "RecursiveArrayIterator",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "MyRecursiveArrayIterator",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fail",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "MyRecursiveArrayIterator",
                      "resolution": "uqn",
                    },
                  },
                  "operator": "=",
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                "kind": "expressionstatement",
              },
              While {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"===\\"",
                              "unicode": false,
                              "value": "===",
                            },
                            "right": StaticLookup {
                              "kind": "staticlookup",
                              "offset": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fail",
                              },
                              "what": Name {
                                "kind": "name",
                                "name": "MyRecursiveArrayIterator",
                                "resolution": "uqn",
                              },
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"===\\\\n\\"",
                            "unicode": false,
                            "value": "===
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    Try {
                      "always": null,
                      "body": Block {
                        "children": Array [
                          Foreach {
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "k",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "var_dump",
                                      "resolution": "uqn",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                ExpressionStatement {
                                  "expression": Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "v",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "var_dump",
                                      "resolution": "uqn",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                              ],
                              "kind": "block",
                            },
                            "key": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "k",
                            },
                            "kind": "foreach",
                            "shortForm": false,
                            "source": New {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "this",
                                },
                              ],
                              "kind": "new",
                              "what": Name {
                                "kind": "name",
                                "name": "RecursiveIteratorIterator",
                                "resolution": "uqn",
                              },
                            },
                            "value": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "v",
                            },
                          },
                        ],
                        "kind": "block",
                      },
                      "catches": Array [
                        Catch {
                          "body": Block {
                            "children": Array [
                              Echo {
                                "expressions": Array [
                                  Bin {
                                    "kind": "bin",
                                    "left": Bin {
                                      "kind": "bin",
                                      "left": Bin {
                                        "kind": "bin",
                                        "left": Bin {
                                          "kind": "bin",
                                          "left": Bin {
                                            "kind": "bin",
                                            "left": Bin {
                                              "kind": "bin",
                                              "left": String {
                                                "isDoubleQuote": true,
                                                "kind": "string",
                                                "raw": "\\"Exception: \\"",
                                                "unicode": false,
                                                "value": "Exception: ",
                                              },
                                              "right": Call {
                                                "arguments": Array [],
                                                "kind": "call",
                                                "what": PropertyLookup {
                                                  "kind": "propertylookup",
                                                  "offset": Identifier {
                                                    "kind": "identifier",
                                                    "name": "getMessage",
                                                  },
                                                  "what": Variable {
                                                    "curly": false,
                                                    "kind": "variable",
                                                    "name": "e",
                                                  },
                                                },
                                              },
                                              "type": ".",
                                            },
                                            "right": String {
                                              "isDoubleQuote": true,
                                              "kind": "string",
                                              "raw": "\\" in \\"",
                                              "unicode": false,
                                              "value": " in ",
                                            },
                                            "type": ".",
                                          },
                                          "right": Call {
                                            "arguments": Array [],
                                            "kind": "call",
                                            "what": PropertyLookup {
                                              "kind": "propertylookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "getFile",
                                              },
                                              "what": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "e",
                                              },
                                            },
                                          },
                                          "type": ".",
                                        },
                                        "right": String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\" on line \\"",
                                          "unicode": false,
                                          "value": " on line ",
                                        },
                                        "type": ".",
                                      },
                                      "right": Call {
                                        "arguments": Array [],
                                        "kind": "call",
                                        "what": PropertyLookup {
                                          "kind": "propertylookup",
                                          "offset": Identifier {
                                            "kind": "identifier",
                                            "name": "getLine",
                                          },
                                          "what": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "e",
                                          },
                                        },
                                      },
                                      "type": ".",
                                    },
                                    "right": String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"\\\\n\\"",
                                      "unicode": false,
                                      "value": "
",
                                    },
                                    "type": ".",
                                  },
                                ],
                                "kind": "echo",
                                "shortForm": false,
                              },
                            ],
                            "kind": "block",
                          },
                          "kind": "catch",
                          "variable": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "e",
                          },
                          "what": Array [
                            Name {
                              "kind": "name",
                              "name": "Exception",
                              "resolution": "uqn",
                            },
                          ],
                        },
                      ],
                      "kind": "try",
                    },
                    ExpressionStatement {
                      "expression": Post {
                        "kind": "post",
                        "type": "+",
                        "what": StaticLookup {
                          "kind": "staticlookup",
                          "offset": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "fail",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "MyRecursiveArrayIterator",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "while",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fail",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "MyRecursiveArrayIterator",
                      "resolution": "uqn",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "4",
                  },
                  "type": "<",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "show",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "RecursiveCachingIterator",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "MyRecursiveCachingIterator",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "10",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "30",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "4",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "MyRecursiveArrayIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "it",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "MyRecursiveCachingIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "show",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
