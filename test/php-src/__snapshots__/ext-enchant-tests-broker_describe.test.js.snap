// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests enchant_broker_describe() function 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "broker",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "enchant_broker_init",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "counter",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "parenthesizedExpression": true,
                "raw": "\\"failed, broker_init failure\\\\n\\"",
                "unicode": false,
                "value": "failed, broker_init failure
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "parenthesizedExpression": true,
                "raw": "\\"OK\\\\n\\"",
                "unicode": false,
                "value": "OK
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "provider",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "broker",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "enchant_broker_describe",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"failed, brocker describe array \\\\n\\"",
                      "unicode": false,
                      "value": "failed, brocker describe array 
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "parenthesizedExpression": true,
                      "raw": "\\"OK\\\\n\\"",
                      "unicode": false,
                      "value": "OK
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "parenthesizedExpression": true,
                            "raw": "\\"failed, broker describe\\\\n\\"",
                            "unicode": false,
                            "value": "failed, broker describe
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "parenthesizedExpression": true,
                            "raw": "\\"OK\\\\n\\"",
                            "unicode": false,
                            "value": "OK
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'name'",
                              "unicode": false,
                              "value": "name",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "counter",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "provider",
                              },
                            },
                          },
                        ],
                      },
                      "right": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'desc'",
                              "unicode": false,
                              "value": "desc",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "counter",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "provider",
                              },
                            },
                          },
                        ],
                      },
                      "type": "&&",
                    },
                    "parenthesizedExpression": true,
                    "right": Isset {
                      "kind": "isset",
                      "variables": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'file'",
                            "unicode": false,
                            "value": "file",
                          },
                          "what": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "counter",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "provider",
                            },
                          },
                        },
                      ],
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "provider",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "is_array",
                "resolution": "uqn",
              },
            },
          },
          ExpressionStatement {
            "expression": Silent {
              "expr": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "broker",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "enchant_broker_free",
                  "resolution": "uqn",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "broker",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
