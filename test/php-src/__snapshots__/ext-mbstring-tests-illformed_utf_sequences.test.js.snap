// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Unicode standard conformance test (ill-formed UTF sequences.) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "str",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "n",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "enc",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "src",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "str",
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"UCS-4BE\\"",
                        "unicode": false,
                        "value": "UCS-4BE",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "enc",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mb_convert_encoding",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "bin2hex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dst",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"0000fffd\\"",
                    "unicode": false,
                    "value": "0000fffd",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "n",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_repeat",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Return {
                  "expr": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "src",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dst",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "src",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "chk_enc",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0xfffd",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-8 redundancy\\\\n\\"",
          "unicode": false,
          "value": "UTF-8 redundancy
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x31\\\\x32\\\\x33\\"",
                "unicode": false,
                "value": "123",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x41\\\\x42\\\\x43\\"",
                "unicode": false,
                "value": "ABC",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xc0\\\\xb1\\\\xc0\\\\xb2\\\\xc0\\\\xb3\\"",
                "unicode": false,
                "value": "À±À²À³",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xc1\\\\x81\\\\xc1\\\\x82\\\\xc1\\\\x83\\"",
                "unicode": false,
                "value": "ÁÁÁ",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xe0\\\\x80\\\\xb1\\\\xe0\\\\x80\\\\xb2\\\\xe0\\\\x80\\\\xb3\\"",
                "unicode": false,
                "value": "à±à²à³",
              },
              Number {
                "kind": "number",
                "value": "9",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xe0\\\\x81\\\\x81\\\\xe0\\\\x81\\\\x82\\\\xe0\\\\x81\\\\x83\\"",
                "unicode": false,
                "value": "ààà",
              },
              Number {
                "kind": "number",
                "value": "9",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf0\\\\x80\\\\x80\\\\xb1\\\\xf0\\\\x80\\\\x80\\\\xb2\\\\xf0\\\\x80\\\\x80\\\\xb3\\"",
                "unicode": false,
                "value": "ð±ð²ð³",
              },
              Number {
                "kind": "number",
                "value": "12",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf0\\\\x80\\\\x81\\\\x81\\\\xf0\\\\x80\\\\x81\\\\x82\\\\xf0\\\\x81\\\\x83\\"",
                "unicode": false,
                "value": "ððð",
              },
              Number {
                "kind": "number",
                "value": "11",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf8\\\\x80\\\\x80\\\\x80\\\\xb1\\\\xf8\\\\x80\\\\x80\\\\x80\\\\xb2\\\\xf8\\\\x80\\\\x80\\\\x80\\\\xb3\\"",
                "unicode": false,
                "value": "ø±ø²ø³",
              },
              Number {
                "kind": "number",
                "value": "15",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf8\\\\x80\\\\x80\\\\x81\\\\x81\\\\xf8\\\\x80\\\\x80\\\\x81\\\\x82\\\\xf8\\\\x80\\\\x80\\\\x81\\\\x83\\"",
                "unicode": false,
                "value": "øøø",
              },
              Number {
                "kind": "number",
                "value": "15",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x80\\\\xb1\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x80\\\\xb2\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x80\\\\xb3\\"",
                "unicode": false,
                "value": "ü±ü²ü³",
              },
              Number {
                "kind": "number",
                "value": "18",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x81\\\\x81\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x81\\\\x82\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x81\\\\x83\\"",
                "unicode": false,
                "value": "üüü",
              },
              Number {
                "kind": "number",
                "value": "18",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xc2\\\\xa2\\\\xc2\\\\xa3\\\\xc2\\\\xa5\\"",
                "unicode": false,
                "value": "Â¢Â£Â¥",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xe0\\\\x82\\\\xa2\\\\xe0\\\\x82\\\\xa3\\\\xe0\\\\x82\\\\xa5\\"",
                "unicode": false,
                "value": "à¢à£à¥",
              },
              Number {
                "kind": "number",
                "value": "9",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf0\\\\x80\\\\x82\\\\xa2\\\\xf0\\\\x80\\\\x82\\\\xa3\\\\xf0\\\\x80\\\\x82\\\\xa5\\"",
                "unicode": false,
                "value": "ð¢ð£ð¥",
              },
              Number {
                "kind": "number",
                "value": "12",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf8\\\\x80\\\\x80\\\\x82\\\\xa2\\\\xf8\\\\x80\\\\x80\\\\x82\\\\xa3\\\\xf8\\\\x80\\\\x80\\\\x82\\\\xa5\\"",
                "unicode": false,
                "value": "ø¢ø£ø¥",
              },
              Number {
                "kind": "number",
                "value": "15",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x82\\\\xa2\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x82\\\\xa3\\\\xfc\\\\x80\\\\x80\\\\x80\\\\x82\\\\xa5\\"",
                "unicode": false,
                "value": "ü¢ü£ü¥",
              },
              Number {
                "kind": "number",
                "value": "18",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xc1\\\\xbf\\"",
                "unicode": false,
                "value": "Á¿",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xc2\\\\x80\\"",
                "unicode": false,
                "value": "Â",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xdf\\\\xbf\\"",
                "unicode": false,
                "value": "ß¿",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xe0\\\\x9f\\\\xff\\"",
                "unicode": false,
                "value": "àÿ",
              },
              Number {
                "kind": "number",
                "value": "3",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xe0\\\\xa0\\\\x80\\"",
                "unicode": false,
                "value": "à ",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xef\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ï¿¿",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf0\\\\x8f\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ð¿¿",
              },
              Number {
                "kind": "number",
                "value": "4",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf0\\\\x90\\\\x80\\\\x80\\"",
                "unicode": false,
                "value": "ð",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf7\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "÷¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "4",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf8\\\\x87\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ø¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "5",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xf8\\\\x88\\\\x80\\\\x80\\\\x80\\"",
                "unicode": false,
                "value": "ø",
              },
              Number {
                "kind": "number",
                "value": "5",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfb\\\\xbf\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "û¿¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "5",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfc\\\\x83\\\\xbf\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ü¿¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfc\\\\x84\\\\x80\\\\x80\\\\x80\\\\x80\\"",
                "unicode": false,
                "value": "ü",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfd\\\\xaf\\\\xbf\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ý¯¿¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xfd\\\\xbf\\\\xbf\\\\xbf\\\\xbf\\\\xbf\\"",
                "unicode": false,
                "value": "ý¿¿¿¿¿",
              },
              Number {
                "kind": "number",
                "value": "6",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-8 and surrogates area\\\\n\\"",
          "unicode": false,
          "value": "UTF-8 and surrogates area
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'C3'",
                        "unicode": false,
                        "value": "C3",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "0xe0",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "12",
                          },
                          "type": ">>",
                        },
                        "type": "|",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "0x80",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "6",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0x3f",
                          },
                          "type": "&",
                        },
                        "type": "|",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "0x80",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0x3f",
                          },
                          "type": "&",
                        },
                        "type": "|",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pack",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "3",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-32 code range\\\\n\\"",
          "unicode": false,
          "value": "UTF-32 code range
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x11\\\\x00\\\\x00\\"",
                "unicode": false,
                "value": "   ",
              },
              Number {
                "kind": "number",
                "value": "1",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32BE\\"",
                "unicode": false,
                "value": "UTF-32BE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x10\\\\xff\\\\xff\\"",
                "unicode": false,
                "value": " ÿÿ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32BE\\"",
                "unicode": false,
                "value": "UTF-32BE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x00\\\\x11\\\\x00\\"",
                "unicode": false,
                "value": "   ",
              },
              Number {
                "kind": "number",
                "value": "1",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32LE\\"",
                "unicode": false,
                "value": "UTF-32LE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xff\\\\xff\\\\x10\\\\x00\\"",
                "unicode": false,
                "value": "ÿÿ ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32LE\\"",
                "unicode": false,
                "value": "UTF-32LE",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x11\\\\x00\\\\x00\\"",
                "unicode": false,
                "value": "   ",
              },
              Number {
                "kind": "number",
                "value": "1",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x10\\\\xff\\\\xff\\"",
                "unicode": false,
                "value": " ÿÿ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x00\\\\xfe\\\\xff\\\\x00\\\\x11\\\\x00\\\\x00\\"",
                "unicode": false,
                "value": "  þÿ   ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x00\\\\x00\\\\xfe\\\\xff\\\\x00\\\\x10\\\\xff\\\\xff\\"",
                "unicode": false,
                "value": "  þÿ ÿÿ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xff\\\\xfe\\\\x00\\\\x00\\\\x00\\\\x00\\\\x11\\\\x00\\"",
                "unicode": false,
                "value": "ÿþ     ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\xff\\\\xfe\\\\x00\\\\x00\\\\xff\\\\xff\\\\x10\\\\x00\\"",
                "unicode": false,
                "value": "ÿþ  ÿÿ ",
              },
              Number {
                "kind": "number",
                "value": "0",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32\\"",
                "unicode": false,
                "value": "UTF-32",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chk_enc",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-32 and surrogates area\\\\n\\"",
          "unicode": false,
          "value": "UTF-32 and surrogates area
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'C4'",
                        "unicode": false,
                        "value": "C4",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "24",
                        },
                        "type": ">>",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "16",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "8",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pack",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-32BE\\"",
                    "unicode": false,
                    "value": "UTF-32BE",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'C4'",
                        "unicode": false,
                        "value": "C4",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "8",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "16",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "24",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pack",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-32LE\\"",
                    "unicode": false,
                    "value": "UTF-32LE",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'C4'",
                        "unicode": false,
                        "value": "C4",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "24",
                        },
                        "type": ">>",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "16",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "8",
                          },
                          "type": ">>",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xff",
                        },
                        "type": "&",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "pack",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-32\\"",
                    "unicode": false,
                    "value": "UTF-32",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-32 and surrogates area with BOM\\\\n\\"",
          "unicode": false,
          "value": "UTF-32 and surrogates area with BOM
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x00\\\\x00\\\\xfe\\\\xff\\"",
                      "unicode": false,
                      "value": "  þÿ",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'C4'",
                          "unicode": false,
                          "value": "C4",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "24",
                          },
                          "type": ">>",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "16",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "8",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "pack",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-32\\"",
                    "unicode": false,
                    "value": "UTF-32",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cnt",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\xff\\\\xfe\\\\x00\\\\x00\\"",
                      "unicode": false,
                      "value": "ÿþ  ",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'C4'",
                          "unicode": false,
                          "value": "C4",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "8",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "16",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                        Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            "parenthesizedExpression": true,
                            "right": Number {
                              "kind": "number",
                              "value": "24",
                            },
                            "type": ">>",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "pack",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-32\\"",
                    "unicode": false,
                    "value": "UTF-32",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chk_enc",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "s",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0xd7ff",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0xe000",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cnt",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "out",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
