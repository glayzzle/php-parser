// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Union types in reflection 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "rt",
          },
          "nullable": false,
          "readonly": false,
          "type": Name {
            "kind": "name",
            "name": "ReflectionUnionType",
            "resolution": "uqn",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"Type $rt:\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "Type ",
                      "unicode": false,
                      "value": "Type ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "rt",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ":\\\\n",
                      "unicode": false,
                      "value": ":",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"Allows null: \\"",
                    "unicode": false,
                    "value": "Allows null: ",
                  },
                  "right": RetIf {
                    "falseExpr": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"false\\"",
                      "unicode": false,
                      "value": "false",
                    },
                    "kind": "retif",
                    "parenthesizedExpression": true,
                    "test": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "allowsNull",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "rt",
                        },
                      },
                    },
                    "trueExpr": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"true\\"",
                      "unicode": false,
                      "value": "true",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Foreach {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"  Name: \\"",
                          "unicode": false,
                          "value": "  Name: ",
                        },
                        "right": Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getName",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "type",
                            },
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"  String: \\"",
                          "unicode": false,
                          "value": "  String: ",
                        },
                        "right": Cast {
                          "expr": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "type",
                          },
                          "kind": "cast",
                          "raw": "(string)",
                          "type": "string",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"  Allows Null: \\"",
                          "unicode": false,
                          "value": "  Allows Null: ",
                        },
                        "right": RetIf {
                          "falseExpr": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"false\\"",
                            "unicode": false,
                            "value": "false",
                          },
                          "kind": "retif",
                          "parenthesizedExpression": true,
                          "test": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "allowsNull",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "type",
                              },
                            },
                          },
                          "trueExpr": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"true\\"",
                            "unicode": false,
                            "value": "true",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getTypes",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "rt",
                },
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "type",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "dumpType",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test1",
      },
      "nullable": false,
      "type": UnionType {
        "kind": "uniontype",
        "name": null,
        "types": Array [
          Name {
            "kind": "name",
            "name": "X",
            "resolution": "uqn",
          },
          Name {
            "kind": "name",
            "name": "Y",
            "resolution": "uqn",
          },
          TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          TypeReference {
            "kind": "typereference",
            "name": "float",
            "raw": "float",
          },
          Name {
            "kind": "name",
            "name": "false",
            "resolution": "uqn",
          },
          Name {
            "kind": "name",
            "name": "null",
            "resolution": "uqn",
          },
        ],
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test2",
      },
      "nullable": false,
      "type": UnionType {
        "kind": "uniontype",
        "name": null,
        "types": Array [
          Name {
            "kind": "name",
            "name": "X",
            "resolution": "uqn",
          },
          TypeReference {
            "kind": "typereference",
            "name": "iterable",
            "raw": "iterable",
          },
          TypeReference {
            "kind": "typereference",
            "name": "bool",
            "raw": "bool",
          },
        ],
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "prop",
              },
              "nullable": false,
              "readonly": false,
              "type": UnionType {
                "kind": "uniontype",
                "name": null,
                "types": Array [
                  Name {
                    "kind": "name",
                    "name": "X",
                    "resolution": "uqn",
                  },
                  Name {
                    "kind": "name",
                    "name": "Y",
                    "resolution": "uqn",
                  },
                  TypeReference {
                    "kind": "typereference",
                    "name": "int",
                    "raw": "int",
                  },
                ],
              },
              "value": null,
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Test",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getReturnType",
              },
              "what": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'test1'",
                    "unicode": false,
                    "value": "test1",
                  },
                ],
                "kind": "new",
                "parenthesizedExpression": true,
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionFunction",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dumpType",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getReturnType",
              },
              "what": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'test2'",
                    "unicode": false,
                    "value": "test2",
                  },
                ],
                "kind": "new",
                "parenthesizedExpression": true,
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionFunction",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dumpType",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rc",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "class",
              },
              "what": Name {
                "kind": "name",
                "name": "Test",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ReflectionClass",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'prop'",
              "unicode": false,
              "value": "prop",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getProperty",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getType",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rp",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dumpType",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "x",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "test",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Test",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "prop",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "test",
          },
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "x",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'prop'",
              "unicode": false,
              "value": "prop",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getProperty",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getType",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rp",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dumpType",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "y",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "prop",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "test",
          },
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "y",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "rp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'prop'",
              "unicode": false,
              "value": "prop",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getProperty",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getType",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rp",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dumpType",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
