// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SOAP XML Schema 74: Structure with attributes and qualified elements 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"test_schema.inc\\"",
          "unicode": false,
          "value": "test_schema.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "schema",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
    <complexType name=\\"testType\\">
        <sequence>
            <element name=\\"str\\" type=\\"string\\"/>
        </sequence>
        <attribute name=\\"int\\" type=\\"int\\"/>
    </complexType>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "    <complexType name=\\"testType\\">
        <sequence>
            <element name=\\"str\\" type=\\"string\\"/>
        </sequence>
        <attribute name=\\"int\\" type=\\"int\\"/>
    </complexType>
",
                "unicode": false,
                "value": "    <complexType name=\\"testType\\">
        <sequence>
            <element name=\\"str\\" type=\\"string\\"/>
        </sequence>
        <attribute name=\\"int\\" type=\\"int\\"/>
    </complexType>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "schema",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'type=\\"tns:testType\\"'",
            "unicode": false,
            "value": "type=\\"tns:testType\\"",
          },
          Cast {
            "expr": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"str\\"",
                    "unicode": false,
                    "value": "str",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"str\\"",
                    "unicode": false,
                    "value": "str",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"int\\"",
                    "unicode": false,
                    "value": "int",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "123.5",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
            "kind": "cast",
            "raw": "(object)",
            "type": "object",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"rpc\\"",
            "unicode": false,
            "value": "rpc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"encoded\\"",
            "unicode": false,
            "value": "encoded",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'attributeFormDefault=\\"qualified\\"'",
            "unicode": false,
            "value": "attributeFormDefault=\\"qualified\\"",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_schema",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\"",
          "unicode": false,
          "value": "ok",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
