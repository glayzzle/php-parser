// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests PDO_OCI: PDOStatement->getColumnMeta 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Preparations before the test\\\\n\\"",
          "unicode": false,
          "value": "Preparations before the test
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/../../pdo/tests/pdo_test.inc'",
            "unicode": false,
            "value": "/../../pdo/tests/pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "factory",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDOTest",
                    "resolution": "uqn",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "SQL",
                  "raw": "<<<SQL
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
     RAISE;
      END IF;
END;
SQL
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
     RAISE;
      END IF;
END;
",
                        "unicode": false,
                        "value": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
     RAISE;
      END IF;
END;",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"CREATE TABLE test(id INT)\\"",
                  "unicode": false,
                  "value": "CREATE TABLE test(id INT)",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "beginTransaction",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id FROM test ORDER BY id ASC'",
                    "unicode": false,
                    "value": "SELECT id FROM test ORDER BY id ASC",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "prepare",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 1. calling function with invalid parameters\\\\n\\"",
                "unicode": false,
                "value": "Test 1. calling function with invalid parameters
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" 1.1 Expecting false got %s\\\\n\\"",
                  "unicode": false,
                  "value": " 1.1 Expecting false got %s
",
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_export",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "parenthesizedExpression": true,
                "raw": "\\" 1.2 \\"",
                "unicode": false,
                "value": " 1.2 ",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "execute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "stmt",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getColumnMeta",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"[1.2] Expecting false got %s\\\\n\\"",
                                  "unicode": false,
                                  "value": "[1.2] Expecting false got %s
",
                                },
                                Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                    Boolean {
                                      "kind": "boolean",
                                      "raw": "true",
                                      "value": true,
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "var_export",
                                    "resolution": "uqn",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "printf",
                                "resolution": "uqn",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tmp",
                        },
                        "type": "!==",
                      },
                    },
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "ArgumentCountError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" 1.3 \\"",
                "unicode": false,
                "value": " 1.3 ",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getColumnMeta",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": true,
                                  "kind": "string",
                                  "raw": "\\"[1.3] Expecting false got %s\\\\n\\"",
                                  "unicode": false,
                                  "value": "[1.3] Expecting false got %s
",
                                },
                                Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                    Boolean {
                                      "kind": "boolean",
                                      "raw": "true",
                                      "value": true,
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "var_export",
                                    "resolution": "uqn",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "printf",
                                "resolution": "uqn",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tmp",
                        },
                        "type": "!==",
                      },
                    },
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "ValueError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" 1.4 \\"",
                "unicode": false,
                "value": " 1.4 ",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Array {
                          "items": Array [],
                          "kind": "array",
                          "shortForm": false,
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getColumnMeta",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[1.4] Expecting false got %s\\\\n\\"",
                              "unicode": false,
                              "value": "[1.4] Expecting false got %s
",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tmp",
                        },
                        "type": "!==",
                      },
                    },
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" 1.5 \\"",
                "unicode": false,
                "value": " 1.5 ",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "1",
                        },
                        Number {
                          "kind": "number",
                          "value": "1",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getColumnMeta",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[1.5] Expecting false got %s\\\\n\\"",
                              "unicode": false,
                              "value": "[1.5] Expecting false got %s
",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tmp",
                        },
                        "type": "!==",
                      },
                    },
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "ArgumentCountError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" 1.6 Expecting false because of invalid offset got %s\\\\n\\"",
                  "unicode": false,
                  "value": " 1.6 Expecting false because of invalid offset got %s
",
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_export",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2. testing return values\\\\n\\"",
                "unicode": false,
                "value": "Test 2. testing return values
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.1 testing array returned\\\\n\\"",
                "unicode": false,
                "value": "Test 2.1 testing array returned
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id FROM test ORDER BY id ASC'",
                    "unicode": false,
                    "value": "SELECT id FROM test ORDER BY id ASC",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "prepare",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "execute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "stmt",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "native",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[008] Meta data seems wrong, %s / %s\\\\n\\"",
                        "unicode": false,
                        "value": "[008] Meta data seems wrong, %s / %s
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "native",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "emulated",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "native",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "==",
            },
          },
          _Function {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "meta",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "offset",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "native_type",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "pdo_type",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d + 2] getColumnMeta() failed, %d - %s\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d + 2] getColumnMeta() failed, %d - %s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "stmt",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "stmt",
                                    },
                                  },
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Empty {
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "meta",
                    },
                    "kind": "empty",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "elements",
                    },
                    "operator": "=",
                    "right": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'flags'",
                            "unicode": false,
                            "value": "flags",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'scale'",
                            "unicode": false,
                            "value": "scale",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'name'",
                            "unicode": false,
                            "value": "name",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'len'",
                            "unicode": false,
                            "value": "len",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'precision'",
                            "unicode": false,
                            "value": "precision",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'pdo_type'",
                            "unicode": false,
                            "value": "pdo_type",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                Foreach {
                  "body": If {
                    "alternate": null,
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"[%03d + 3] Element %s missing, %s\\\\n\\"",
                                "unicode": false,
                                "value": "[%03d + 3] Element %s missing, %s
",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "offset",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "element",
                              },
                              Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "meta",
                                  },
                                  Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_export",
                                  "resolution": "uqn",
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "printf",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        Return {
                          "expr": Boolean {
                            "kind": "boolean",
                            "raw": "false",
                            "value": false,
                          },
                          "kind": "return",
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "if",
                    "shortForm": false,
                    "test": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "element",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "meta",
                            },
                          },
                        ],
                      },
                    },
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "k",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "elements",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "element",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d + 4] Element native_type missing, %s\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d + 4] Element native_type missing, %s
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "meta",
                                      },
                                      Boolean {
                                        "kind": "boolean",
                                        "raw": "true",
                                        "value": true,
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "var_export",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Unary {
                          "kind": "unary",
                          "type": "!",
                          "what": Isset {
                            "kind": "isset",
                            "variables": Array [
                              OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'native_type'",
                                  "unicode": false,
                                  "value": "native_type",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "meta",
                                },
                              },
                            ],
                          },
                        },
                      },
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "native_type",
                            },
                            "operator": "=",
                            "right": Array {
                              "items": Array [
                                Entry {
                                  "byRef": false,
                                  "key": null,
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "native_type",
                                  },
                                },
                              ],
                              "kind": "array",
                              "shortForm": false,
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Unary {
                          "kind": "unary",
                          "type": "!",
                          "what": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "native_type",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "is_array",
                              "resolution": "uqn",
                            },
                          },
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "found",
                          },
                          "operator": "=",
                          "right": Boolean {
                            "kind": "boolean",
                            "raw": "false",
                            "value": false,
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Foreach {
                        "body": Block {
                          "children": Array [
                            If {
                              "alternate": null,
                              "body": Block {
                                "children": Array [
                                  ExpressionStatement {
                                    "expression": Assign {
                                      "kind": "assign",
                                      "left": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "found",
                                      },
                                      "operator": "=",
                                      "right": Boolean {
                                        "kind": "boolean",
                                        "raw": "true",
                                        "value": true,
                                      },
                                    },
                                    "kind": "expressionstatement",
                                  },
                                  Break {
                                    "kind": "break",
                                    "level": null,
                                  },
                                ],
                                "kind": "block",
                              },
                              "kind": "if",
                              "shortForm": false,
                              "test": Bin {
                                "kind": "bin",
                                "left": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'native_type'",
                                    "unicode": false,
                                    "value": "native_type",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "meta",
                                  },
                                },
                                "right": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "type",
                                },
                                "type": "==",
                              },
                            },
                          ],
                          "kind": "block",
                        },
                        "key": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "k",
                        },
                        "kind": "foreach",
                        "shortForm": false,
                        "source": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "native_type",
                        },
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "type",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d + 5] Expecting native type %s, %s\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d + 5] Expecting native type %s, %s
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "native_type",
                                      },
                                      Boolean {
                                        "kind": "boolean",
                                        "raw": "true",
                                        "value": true,
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "var_export",
                                      "resolution": "uqn",
                                    },
                                  },
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "meta",
                                      },
                                      Boolean {
                                        "kind": "boolean",
                                        "raw": "true",
                                        "value": true,
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "var_export",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Unary {
                          "kind": "unary",
                          "type": "!",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "found",
                          },
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "native_type",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "is_null",
                        "resolution": "uqn",
                      },
                    },
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d + 6] Expecting PDO type %s got %s (%s)\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d + 6] Expecting PDO type %s got %s (%s)
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "pdo_type",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "meta",
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                            Call {
                              "arguments": Array [
                                OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'native_type'",
                                    "unicode": false,
                                    "value": "native_type",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "meta",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "pdo_type",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "is_null",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'pdo_type'",
                          "unicode": false,
                          "value": "pdo_type",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "meta",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "pdo_type",
                      },
                      "type": "!=",
                    },
                    "type": "&&",
                  },
                },
                Return {
                  "expr": Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "kind": "function",
            "name": Identifier {
              "kind": "identifier",
              "name": "test_return",
            },
            "nullable": false,
            "type": null,
          },
          _Function {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": true,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "db",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "offset",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "sql_type",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "value",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "native_type",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "pdo_type",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Encapsed {
                        "kind": "encapsed",
                        "label": "SQL",
                        "raw": "<<<SQL
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
SQL
",
                        "type": "heredoc",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
",
                              "unicode": false,
                              "value": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "exec",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sql",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'CREATE TABLE test(id INT, label %s)'",
                          "unicode": false,
                          "value": "CREATE TABLE test(id INT, label %s)",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "sql_type",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "sql",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "prepare",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "execute",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "stmt",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d] + 1] Insert failed, %d - %s\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d] + 1] Insert failed, %d - %s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "db",
                                    },
                                  },
                                },
                                Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_export",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"INSERT INTO test(id, label) VALUES (1, '%s')\\"",
                              "unicode": false,
                              "value": "INSERT INTO test(id, label) VALUES (1, '%s')",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "sprintf",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "exec",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT id, label FROM test'",
                          "unicode": false,
                          "value": "SELECT id, label FROM test",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "prepare",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "execute",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "stmt",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "meta",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "1",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getColumnMeta",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                Return {
                  "expr": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "meta",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "offset",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "native_type",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "pdo_type",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "test_return",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "kind": "function",
            "name": Identifier {
              "kind": "identifier",
              "name": "test_meta",
            },
            "nullable": false,
            "type": null,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.2 testing numeric columns\\\\n\\"",
                "unicode": false,
                "value": "Test 2.2 testing numeric columns
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "20",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "30",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Number {
                  "kind": "number",
                  "value": "256",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "40",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INT'",
                  "unicode": false,
                  "value": "INT",
                },
                Number {
                  "kind": "number",
                  "value": "256",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "50",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INTEGER'",
                  "unicode": false,
                  "value": "INTEGER",
                },
                Number {
                  "kind": "number",
                  "value": "256",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "60",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Number {
                  "kind": "number",
                  "value": "256.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "70",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Number {
                    "kind": "number",
                    "value": "8388608",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "80",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Number {
                  "kind": "number",
                  "value": "2147483648",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "90",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                Number {
                  "kind": "number",
                  "value": "4294967295",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "100",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DEC'",
                  "unicode": false,
                  "value": "DEC",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "110",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DECIMAL'",
                  "unicode": false,
                  "value": "DECIMAL",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "120",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'FLOAT'",
                  "unicode": false,
                  "value": "FLOAT",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'FLOAT'",
                  "unicode": false,
                  "value": "FLOAT",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "130",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DOUBLE PRECISION'",
                  "unicode": false,
                  "value": "DOUBLE PRECISION",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'FLOAT'",
                  "unicode": false,
                  "value": "FLOAT",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "140",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BINARY_FLOAT'",
                  "unicode": false,
                  "value": "BINARY_FLOAT",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BINARY_FLOAT'",
                  "unicode": false,
                  "value": "BINARY_FLOAT",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "150",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BINARY_DOUBLE'",
                  "unicode": false,
                  "value": "BINARY_DOUBLE",
                },
                Number {
                  "kind": "number",
                  "value": "1.01",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BINARY_DOUBLE'",
                  "unicode": false,
                  "value": "BINARY_DOUBLE",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.3 testing temporal columns\\\\n\\"",
                "unicode": false,
                "value": "Test 2.3 testing temporal columns
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"alter session set nls_date_format='YYYY-MM-DD'\\"",
                  "unicode": false,
                  "value": "alter session set nls_date_format='YYYY-MM-DD'",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "160",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DATE'",
                  "unicode": false,
                  "value": "DATE",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'2008-04-23'",
                  "unicode": false,
                  "value": "2008-04-23",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DATE'",
                  "unicode": false,
                  "value": "DATE",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.4 testing string columns\\\\n\\"",
                "unicode": false,
                "value": "Test 2.4 testing string columns
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "170",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR(1)'",
                  "unicode": false,
                  "value": "CHAR(1)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR'",
                  "unicode": false,
                  "value": "CHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "180",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR(10)'",
                  "unicode": false,
                  "value": "CHAR(10)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'0123456789'",
                  "unicode": false,
                  "value": "0123456789",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR'",
                  "unicode": false,
                  "value": "CHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "190",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR(255)'",
                  "unicode": false,
                  "value": "CHAR(255)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'z'",
                      "unicode": false,
                      "value": "z",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CHAR'",
                  "unicode": false,
                  "value": "CHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "200",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR(1)'",
                  "unicode": false,
                  "value": "VARCHAR(1)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "210",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR(10)'",
                  "unicode": false,
                  "value": "VARCHAR(10)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'0123456789'",
                  "unicode": false,
                  "value": "0123456789",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "220",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR(255)'",
                  "unicode": false,
                  "value": "VARCHAR(255)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'z'",
                      "unicode": false,
                      "value": "z",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "230",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2(1)'",
                  "unicode": false,
                  "value": "VARCHAR2(1)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "240",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2(10)'",
                  "unicode": false,
                  "value": "VARCHAR2(10)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'0123456789'",
                  "unicode": false,
                  "value": "0123456789",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "250",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2(255)'",
                  "unicode": false,
                  "value": "VARCHAR2(255)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'z'",
                      "unicode": false,
                      "value": "z",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "260",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR(1)'",
                  "unicode": false,
                  "value": "NCHAR(1)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR'",
                  "unicode": false,
                  "value": "NCHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "270",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR(10)'",
                  "unicode": false,
                  "value": "NCHAR(10)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'0123456789'",
                  "unicode": false,
                  "value": "0123456789",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR'",
                  "unicode": false,
                  "value": "NCHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "280",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR(255)'",
                  "unicode": false,
                  "value": "NCHAR(255)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'z'",
                      "unicode": false,
                      "value": "z",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCHAR'",
                  "unicode": false,
                  "value": "NCHAR",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "290",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2(1)'",
                  "unicode": false,
                  "value": "NVARCHAR2(1)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'a'",
                  "unicode": false,
                  "value": "a",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2'",
                  "unicode": false,
                  "value": "NVARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "300",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2(10)'",
                  "unicode": false,
                  "value": "NVARCHAR2(10)",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'0123456789'",
                  "unicode": false,
                  "value": "0123456789",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2'",
                  "unicode": false,
                  "value": "NVARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "310",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2(255)'",
                  "unicode": false,
                  "value": "NVARCHAR2(255)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'z'",
                      "unicode": false,
                      "value": "z",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NVARCHAR2'",
                  "unicode": false,
                  "value": "NVARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.5 testing lobs columns\\\\n\\"",
                "unicode": false,
                "value": "Test 2.5 testing lobs columns
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "320",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CLOB'",
                  "unicode": false,
                  "value": "CLOB",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CLOB'",
                  "unicode": false,
                  "value": "CLOB",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_LOB",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "330",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BLOB'",
                  "unicode": false,
                  "value": "BLOB",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "256",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'BLOB'",
                  "unicode": false,
                  "value": "BLOB",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_LOB",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "340",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCLOB'",
                  "unicode": false,
                  "value": "NCLOB",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "255",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NCLOB'",
                  "unicode": false,
                  "value": "NCLOB",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_LOB",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "350",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'LONG'",
                  "unicode": false,
                  "value": "LONG",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "256",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'LONG'",
                  "unicode": false,
                  "value": "LONG",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "360",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'LONG RAW'",
                  "unicode": false,
                  "value": "LONG RAW",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "256",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'LONG RAW'",
                  "unicode": false,
                  "value": "LONG RAW",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Number {
                  "kind": "number",
                  "value": "370",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'RAW(256)'",
                  "unicode": false,
                  "value": "RAW(256)",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'b'",
                      "unicode": false,
                      "value": "b",
                    },
                    Number {
                      "kind": "number",
                      "value": "256",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'RAW'",
                  "unicode": false,
                  "value": "RAW",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_meta",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "SQL",
                  "raw": "<<<SQL
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
SQL
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
",
                        "unicode": false,
                        "value": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.6 testing function return\\\\n\\"",
                "unicode": false,
                "value": "Test 2.6 testing function return
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT count(*) FROM dual'",
                    "unicode": false,
                    "value": "SELECT count(*) FROM dual",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "query",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "meta",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "meta",
                },
                Number {
                  "kind": "number",
                  "value": "380",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'NUMBER'",
                  "unicode": false,
                  "value": "NUMBER",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_return",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT TO_DATE('2008-04-23') FROM dual\\"",
                    "unicode": false,
                    "value": "SELECT TO_DATE('2008-04-23') FROM dual",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "query",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "meta",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "meta",
                },
                Number {
                  "kind": "number",
                  "value": "390",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DATE'",
                  "unicode": false,
                  "value": "DATE",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_return",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT TO_CHAR(542) FROM dual\\"",
                    "unicode": false,
                    "value": "SELECT TO_CHAR(542) FROM dual",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "query",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "meta",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "meta",
                },
                Number {
                  "kind": "number",
                  "value": "400",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'VARCHAR2'",
                  "unicode": false,
                  "value": "VARCHAR2",
                },
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "PARAM_STR",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_return",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Test 2.7 testing flags returned\\\\n\\"",
                "unicode": false,
                "value": "Test 2.7 testing flags returned
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'CREATE TABLE test(id INT NOT NULL, label INT NULL)'",
                    "unicode": false,
                    "value": "CREATE TABLE test(id INT NOT NULL, label INT NULL)",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "prepare",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "execute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "stmt",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES (1, 1)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES (1, 1)",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "query",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "meta",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "flags",
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'flags'",
                        "unicode": false,
                        "value": "flags",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "meta",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "found",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                Foreach {
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "found",
                            },
                            "operator": "=",
                            "right": Boolean {
                              "kind": "boolean",
                              "raw": "true",
                              "value": true,
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "flag",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'not_null'",
                            "unicode": false,
                            "value": "not_null",
                          },
                          "type": "==",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"[1003] Flags seem wrong %s\\\\n\\"",
                                "unicode": false,
                                "value": "[1003] Flags seem wrong %s
",
                              },
                              Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "meta",
                                  },
                                  Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_export",
                                  "resolution": "uqn",
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "printf",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "flag",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'nullable'",
                            "unicode": false,
                            "value": "nullable",
                          },
                          "type": "==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "k",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flags",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flag",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[1002] Flags seem wrong %s\\\\n\\"",
                          "unicode": false,
                          "value": "[1002] Flags seem wrong %s
",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "meta",
                            },
                            Boolean {
                              "kind": "boolean",
                              "raw": "true",
                              "value": true,
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_export",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "found",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[1001] No flags contained in metadata %s\\\\n\\"",
                        "unicode": false,
                        "value": "[1001] No flags contained in metadata %s
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "meta",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Isset {
                "kind": "isset",
                "variables": Array [
                  OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'flags'",
                      "unicode": false,
                      "value": "flags",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "meta",
                    },
                  },
                ],
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "meta",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getColumnMeta",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "flags",
                    },
                    "operator": "=",
                    "right": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'flags'",
                        "unicode": false,
                        "value": "flags",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "meta",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "found",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                Foreach {
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"[1004] Flags seem wrong %s\\\\n\\"",
                                "unicode": false,
                                "value": "[1004] Flags seem wrong %s
",
                              },
                              Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "meta",
                                  },
                                  Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_export",
                                  "resolution": "uqn",
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "printf",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "flag",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'not_null'",
                            "unicode": false,
                            "value": "not_null",
                          },
                          "type": "==",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "found",
                            },
                            "operator": "=",
                            "right": Boolean {
                              "kind": "boolean",
                              "raw": "true",
                              "value": true,
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "flag",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'nullable'",
                            "unicode": false,
                            "value": "nullable",
                          },
                          "type": "==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "k",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flags",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "flag",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[1005] Flags seem wrong %s\\\\n\\"",
                          "unicode": false,
                          "value": "[1005] Flags seem wrong %s
",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "meta",
                            },
                            Boolean {
                              "kind": "boolean",
                              "raw": "true",
                              "value": true,
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_export",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "found",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[1003] No flags contained in metadata %s\\\\n\\"",
                        "unicode": false,
                        "value": "[1003] No flags contained in metadata %s
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "meta",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Isset {
                "kind": "isset",
                "variables": Array [
                  OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'flags'",
                      "unicode": false,
                      "value": "flags",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "meta",
                    },
                  },
                ],
              },
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[001] %s, [%s} %s\\\\n\\"",
                      "unicode": false,
                      "value": "[001] %s, [%s} %s
",
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorInfo",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "' '",
                          "unicode": false,
                          "value": " ",
                        },
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "errorInfo",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "db",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "PDOException",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Encapsed {
            "kind": "encapsed",
            "label": "SQL",
            "raw": "<<<SQL
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
SQL
",
            "type": "heredoc",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
",
                  "unicode": false,
                  "value": "BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE test';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "exec",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
