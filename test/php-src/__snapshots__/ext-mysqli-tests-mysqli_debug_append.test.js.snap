// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mysqli_debug() - append to trace file 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'connect.inc'",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[001] Expecting boolean/true, got %s/%s\\\\n\\"",
              "unicode": false,
              "value": "[001] Expecting boolean/true, got %s/%s
",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "gettype",
                "resolution": "uqn",
              },
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tmp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tmp",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'d:t:O,%s/mysqli_debug_phpt.trace'",
                    "unicode": false,
                    "value": "d:t:O,%s/mysqli_debug_phpt.trace",
                  },
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "sys_get_temp_dir",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mysqli_debug",
              "resolution": "uqn",
            },
          },
        },
        "type": "!==",
      },
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'table.inc'",
          "unicode": false,
          "value": "table.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "clearstatcache",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "trace_file",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'%s/mysqli_debug_phpt.trace'",
              "unicode": false,
              "value": "%s/mysqli_debug_phpt.trace",
            },
            Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sys_get_temp_dir",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[002] Trace file '%s' has not been created\\\\n\\"",
              "unicode": false,
              "value": "[002] Trace file '%s' has not been created
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_exists",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[003] Trace file '%s' is very small. filesize() reports only %d bytes. Please check.\\\\n\\"",
              "unicode": false,
              "value": "[003] Trace file '%s' is very small. filesize() reports only %d bytes. Please check.
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
            Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "trace_file",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "filesize",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "filesize",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "50",
        },
        "type": "<",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "trace_file",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "unlink",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "clearstatcache",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[005] Cannot write to trace file.\\\\n\\"",
                    "unicode": false,
                    "value": "[005] Cannot write to trace file.
",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "fp",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'mysqli_debug.phpt test line'",
                    "unicode": false,
                    "value": "mysqli_debug.phpt test line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fwrite",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[006] Expecting boolean/true, got %s/%s\\\\n\\"",
                    "unicode": false,
                    "value": "[006] Expecting boolean/true, got %s/%s
",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "gettype",
                      "resolution": "uqn",
                    },
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'d:a,%s'",
                          "unicode": false,
                          "value": "d:a,%s",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "trace_file",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_debug",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "!==",
            },
          },
          If {
            "alternate": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mysqli_free_result",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[007] [%d] %s\\\\n\\"",
                    "unicode": false,
                    "value": "[007] [%d] %s
",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_errno",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'SELECT * FROM test'",
                      "unicode": false,
                      "value": "SELECT * FROM test",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace_file",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "file_get_contents",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[008] Cannot find original file content any more. Seems that the trace file got overwritten and not appended. Please check.\\"",
                    "unicode": false,
                    "value": "[008] Cannot find original file content any more. Seems that the trace file got overwritten and not appended. Please check.",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'mysqli_debug.phpt test line'",
                    "unicode": false,
                    "value": "mysqli_debug.phpt test line",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strstr",
                  "resolution": "uqn",
                },
              },
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[009] Expecting boolean/true, got %s/%s\\\\n\\"",
                    "unicode": false,
                    "value": "[009] Expecting boolean/true, got %s/%s
",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "gettype",
                      "resolution": "uqn",
                    },
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tmp",
                },
                "operator": "=",
                "parenthesizedExpression": true,
                "right": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'d:A,%s'",
                          "unicode": false,
                          "value": "d:A,%s",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "trace_file",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_debug",
                    "resolution": "uqn",
                  },
                },
              },
              "type": "!==",
            },
          },
          If {
            "alternate": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "res",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mysqli_free_result",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[010] [%d] %s\\\\n\\"",
                    "unicode": false,
                    "value": "[010] [%d] %s
",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_errno",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "link",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "mysqli_error",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "res",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "link",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'SELECT * FROM test'",
                      "unicode": false,
                      "value": "SELECT * FROM test",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "mysqli_query",
                    "resolution": "uqn",
                  },
                },
              },
            },
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[011] Cannot find original file content any more. Seems that the trace file got overwritten and not appended. Please check.\\"",
                    "unicode": false,
                    "value": "[011] Cannot find original file content any more. Seems that the trace file got overwritten and not appended. Please check.",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "trace_file",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "file_get_contents",
                      "resolution": "uqn",
                    },
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "trace",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strstr",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[004] Cannot create trace file to test append mode\\\\n\\"",
                  "unicode": false,
                  "value": "[004] Cannot create trace file to test append mode
",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "trace_file",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'w'",
                "unicode": false,
                "value": "w",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "fopen",
              "resolution": "uqn",
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "trace_file",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "unlink",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "clearstatcache",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[012] Could not remove trace file '%s'.\\\\n\\"",
              "unicode": false,
              "value": "[012] Could not remove trace file '%s'.
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "trace_file",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "trace_file",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_exists",
          "resolution": "uqn",
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mysqli_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done\\"",
          "unicode": false,
          "value": "done",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Print {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"libmysql/DBUG package prints some debug info here.\\"",
            "unicode": false,
            "value": "libmysql/DBUG package prints some debug info here.",
          },
          "kind": "print",
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "IS_MYSQLND",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
