// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #68361 Segmentation fault on SoapClient::__getTypes 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "XML",
          "raw": "<<<XML
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<definitions name=\\"TestServer\\" targetNamespace=\\"http://foo.bar/testserver\\" xmlns:tns=\\"http://foo.bar/testserver\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:soap=\\"http://schemas.xmlsoap.org/wsdl/soap/\\" xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns=\\"http://schemas.xmlsoap.org/wsdl/\\" xmlns:ns=\\"http://foo.bar/testserver/types\\">
  <types>
    <xsd:schema targetNamespace=\\"http://foo.bar/testserver/types\\" xmlns=\\"http://foo.bar/testserver/types\\">
      <xsd:complexType name=\\"ArrayOfEmployeeReturn\\">
        <xsd:complexContent>
          <xsd:restriction base=\\"soapenc:Array\\">
            <xsd:attribute ref=\\"soapenc:arrayType\\" arrayType=\\"ns:Employee[]\\"/>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name=\\"Employee\\">
        <xsd:sequence>
          <xsd:element name=\\"id\\" type=\\"xsd:int\\"/>
          <xsd:element name=\\"department\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"Employee\\" nillable=\\"true\\" type=\\"ns:Employee\\"/>
      <xsd:complexType name=\\"User\\">
        <xsd:sequence>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"User\\" nillable=\\"true\\" type=\\"ns:User\\"/>
    </xsd:schema>
  </types>
  <message name=\\"getEmployeeRequest\\">
    <part name=\\"name\\" type=\\"xsd:name\\"/>
  </message>
  <message name=\\"getEmployeeResponse\\">
    <part name=\\"employeeReturn\\" type=\\"ns:ArrayOfEmployeeReturn\\"/>
  </message>
  <message name=\\"getUserRequest\\">
    <part name=\\"id\\" type=\\"xsd:id\\"/>
  </message>
  <message name=\\"getUserResponse\\">
    <part name=\\"userReturn\\" element=\\"ns:User\\"/>
  </message>
  <portType name=\\"TestServerPortType\\">
    <operation name=\\"getEmployee\\">
      <input message=\\"tns:getEmployeeRequest\\"/>
      <output message=\\"tns:getEmployeeResponse\\"/>
    </operation>
    <operation name=\\"getUser\\">
      <input message=\\"tns:getUserRequest\\"/>
      <output message=\\"tns:getUserResponse\\"/>
    </operation>
  </portType>
  <binding name=\\"TestServerBinding\\" type=\\"tns:TestServerPortType\\">
    <soap:binding style=\\"rpc\\" transport=\\"http://schemas.xmlsoap.org/soap/http\\"/>
    <operation name=\\"getEmployee\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getEmployee\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
    <operation name=\\"getUser\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getUser\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
  </binding>
  <service name=\\"TestServerService\\">
    <port name=\\"TestServerPort\\" binding=\\"tns:TestServerBinding\\">
      <soap:address location=\\"http://localhost/wsdl-creator/TestClass.php\\"/>
    </port>
  </service>
</definitions>
XML",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<definitions name=\\"TestServer\\" targetNamespace=\\"http://foo.bar/testserver\\" xmlns:tns=\\"http://foo.bar/testserver\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:soap=\\"http://schemas.xmlsoap.org/wsdl/soap/\\" xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns=\\"http://schemas.xmlsoap.org/wsdl/\\" xmlns:ns=\\"http://foo.bar/testserver/types\\">
  <types>
    <xsd:schema targetNamespace=\\"http://foo.bar/testserver/types\\" xmlns=\\"http://foo.bar/testserver/types\\">
      <xsd:complexType name=\\"ArrayOfEmployeeReturn\\">
        <xsd:complexContent>
          <xsd:restriction base=\\"soapenc:Array\\">
            <xsd:attribute ref=\\"soapenc:arrayType\\" arrayType=\\"ns:Employee[]\\"/>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name=\\"Employee\\">
        <xsd:sequence>
          <xsd:element name=\\"id\\" type=\\"xsd:int\\"/>
          <xsd:element name=\\"department\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"Employee\\" nillable=\\"true\\" type=\\"ns:Employee\\"/>
      <xsd:complexType name=\\"User\\">
        <xsd:sequence>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"User\\" nillable=\\"true\\" type=\\"ns:User\\"/>
    </xsd:schema>
  </types>
  <message name=\\"getEmployeeRequest\\">
    <part name=\\"name\\" type=\\"xsd:name\\"/>
  </message>
  <message name=\\"getEmployeeResponse\\">
    <part name=\\"employeeReturn\\" type=\\"ns:ArrayOfEmployeeReturn\\"/>
  </message>
  <message name=\\"getUserRequest\\">
    <part name=\\"id\\" type=\\"xsd:id\\"/>
  </message>
  <message name=\\"getUserResponse\\">
    <part name=\\"userReturn\\" element=\\"ns:User\\"/>
  </message>
  <portType name=\\"TestServerPortType\\">
    <operation name=\\"getEmployee\\">
      <input message=\\"tns:getEmployeeRequest\\"/>
      <output message=\\"tns:getEmployeeResponse\\"/>
    </operation>
    <operation name=\\"getUser\\">
      <input message=\\"tns:getUserRequest\\"/>
      <output message=\\"tns:getUserResponse\\"/>
    </operation>
  </portType>
  <binding name=\\"TestServerBinding\\" type=\\"tns:TestServerPortType\\">
    <soap:binding style=\\"rpc\\" transport=\\"http://schemas.xmlsoap.org/soap/http\\"/>
    <operation name=\\"getEmployee\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getEmployee\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
    <operation name=\\"getUser\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getUser\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
  </binding>
  <service name=\\"TestServerService\\">
    <port name=\\"TestServerPort\\" binding=\\"tns:TestServerBinding\\">
      <soap:address location=\\"http://localhost/wsdl-creator/TestClass.php\\"/>
    </port>
  </service>
</definitions>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<definitions name=\\"TestServer\\" targetNamespace=\\"http://foo.bar/testserver\\" xmlns:tns=\\"http://foo.bar/testserver\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:soap=\\"http://schemas.xmlsoap.org/wsdl/soap/\\" xmlns:soapenc=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns=\\"http://schemas.xmlsoap.org/wsdl/\\" xmlns:ns=\\"http://foo.bar/testserver/types\\">
  <types>
    <xsd:schema targetNamespace=\\"http://foo.bar/testserver/types\\" xmlns=\\"http://foo.bar/testserver/types\\">
      <xsd:complexType name=\\"ArrayOfEmployeeReturn\\">
        <xsd:complexContent>
          <xsd:restriction base=\\"soapenc:Array\\">
            <xsd:attribute ref=\\"soapenc:arrayType\\" arrayType=\\"ns:Employee[]\\"/>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name=\\"Employee\\">
        <xsd:sequence>
          <xsd:element name=\\"id\\" type=\\"xsd:int\\"/>
          <xsd:element name=\\"department\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"Employee\\" nillable=\\"true\\" type=\\"ns:Employee\\"/>
      <xsd:complexType name=\\"User\\">
        <xsd:sequence>
          <xsd:element name=\\"name\\" type=\\"xsd:string\\"/>
          <xsd:element name=\\"age\\" type=\\"xsd:int\\"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name=\\"User\\" nillable=\\"true\\" type=\\"ns:User\\"/>
    </xsd:schema>
  </types>
  <message name=\\"getEmployeeRequest\\">
    <part name=\\"name\\" type=\\"xsd:name\\"/>
  </message>
  <message name=\\"getEmployeeResponse\\">
    <part name=\\"employeeReturn\\" type=\\"ns:ArrayOfEmployeeReturn\\"/>
  </message>
  <message name=\\"getUserRequest\\">
    <part name=\\"id\\" type=\\"xsd:id\\"/>
  </message>
  <message name=\\"getUserResponse\\">
    <part name=\\"userReturn\\" element=\\"ns:User\\"/>
  </message>
  <portType name=\\"TestServerPortType\\">
    <operation name=\\"getEmployee\\">
      <input message=\\"tns:getEmployeeRequest\\"/>
      <output message=\\"tns:getEmployeeResponse\\"/>
    </operation>
    <operation name=\\"getUser\\">
      <input message=\\"tns:getUserRequest\\"/>
      <output message=\\"tns:getUserResponse\\"/>
    </operation>
  </portType>
  <binding name=\\"TestServerBinding\\" type=\\"tns:TestServerPortType\\">
    <soap:binding style=\\"rpc\\" transport=\\"http://schemas.xmlsoap.org/soap/http\\"/>
    <operation name=\\"getEmployee\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getEmployee\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
    <operation name=\\"getUser\\">
      <soap:operation soapAction=\\"http://foo.bar/testserver/#getUser\\"/>
      <input>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </input>
      <output>
        <soap:body use=\\"literal\\" namespace=\\"http://foo.bar/testserver\\"/>
      </output>
    </operation>
  </binding>
  <service name=\\"TestServerService\\">
    <port name=\\"TestServerPort\\" binding=\\"tns:TestServerBinding\\">
      <soap:address location=\\"http://localhost/wsdl-creator/TestClass.php\\"/>
    </port>
  </service>
</definitions>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/bug68361.xml\\"",
              "unicode": false,
              "value": "/bug68361.xml",
            },
            "type": ".",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "client",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"/bug68361.xml\\"",
                "unicode": false,
                "value": "/bug68361.xml",
              },
              "type": ".",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "SoapClient",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "__getTypes",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "client",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
