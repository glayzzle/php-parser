// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #79257: Duplicate named groups (?J) prefer last alternative even if not matched 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foo'",
            "unicode": false,
            "value": "foo",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foo'",
            "unicode": false,
            "value": "foo",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Name {
            "kind": "name",
            "name": "PREG_UNMATCHED_AS_NULL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foo'",
            "unicode": false,
            "value": "foo",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Name {
            "kind": "name",
            "name": "PREG_OFFSET_CAPTURE",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foo'",
            "unicode": false,
            "value": "foo",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Bin {
            "kind": "bin",
            "left": Name {
              "kind": "name",
              "name": "PREG_UNMATCHED_AS_NULL",
              "resolution": "uqn",
            },
            "right": Name {
              "kind": "name",
              "name": "PREG_OFFSET_CAPTURE",
              "resolution": "uqn",
            },
            "type": "|",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foobaz'",
            "unicode": false,
            "value": "foobaz",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foobaz'",
            "unicode": false,
            "value": "foobaz",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Name {
            "kind": "name",
            "name": "PREG_UNMATCHED_AS_NULL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foobaz'",
            "unicode": false,
            "value": "foobaz",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Name {
            "kind": "name",
            "name": "PREG_OFFSET_CAPTURE",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/'",
            "unicode": false,
            "value": "/(?J)(?:(?<g>foo)|(?<g>bar))(?<h>baz)/",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'foobaz'",
            "unicode": false,
            "value": "foobaz",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
          Bin {
            "kind": "bin",
            "left": Name {
              "kind": "name",
              "name": "PREG_UNMATCHED_AS_NULL",
              "resolution": "uqn",
            },
            "right": Name {
              "kind": "name",
              "name": "PREG_OFFSET_CAPTURE",
              "resolution": "uqn",
            },
            "type": "|",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "preg_match",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "matches",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
