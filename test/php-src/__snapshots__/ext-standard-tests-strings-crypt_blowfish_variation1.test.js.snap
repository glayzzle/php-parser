// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test Blowfish crypt() with invalid rounds 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "salts",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'32'",
                "unicode": false,
                "value": "32",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$32$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$32$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'33'",
                "unicode": false,
                "value": "33",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$33$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$33$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'34'",
                "unicode": false,
                "value": "34",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$34$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$34$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'35'",
                "unicode": false,
                "value": "35",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$35$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$35$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'36'",
                "unicode": false,
                "value": "36",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$36$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$36$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'37'",
                "unicode": false,
                "value": "37",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$37$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$37$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'38'",
                "unicode": false,
                "value": "38",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'$2a$38$CCCCCCCCCCCCCCCCCCCCCC$'",
                "unicode": false,
                "value": "$2a$38$CCCCCCCCCCCCCCCCCCCCCC$",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "crypt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'U*U'",
                    "unicode": false,
                    "value": "U*U",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "salt",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "crypt",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"$i. Not OK\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ". Not OK\\\\n",
                            "unicode": false,
                            "value": ". Not OK",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"$i. OK\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": ". OK\\\\n",
                            "unicode": false,
                            "value": ". OK",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "crypt",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'*0'",
                  "unicode": false,
                  "value": "*0",
                },
                "type": "===",
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "crypt",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'*1'",
                  "unicode": false,
                  "value": "*1",
                },
                "type": "===",
              },
              "type": "||",
            },
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "i",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "salts",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "salt",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
