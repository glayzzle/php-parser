// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test chunk_split() function : usage variations - different heredoc strings as 'str' argument 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing chunk_split() : heredoc strings as 'str' argument ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing chunk_split() : heredoc strings as 'str' argument ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "chunklen",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "4",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_null",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT1",
          "raw": "<<<EOT1
EOT1",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_char",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT2",
          "raw": "<<<EOT2
a
EOT2",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "a
",
                "unicode": false,
                "value": "a",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_str",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT3",
          "raw": "<<<EOT3
This is simple heredoc string
EOT3",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "This is simple heredoc string
",
                "unicode": false,
                "value": "This is simple heredoc string",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_spchar",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT4",
          "raw": "<<<EOT4
This checks heredoc with $, %, &, chars
EOT4",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "This checks heredoc with $, %, &, chars
",
                "unicode": false,
                "value": "This checks heredoc with $, %, &, chars",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_blank",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT5",
          "raw": "<<<EOT5
EOT5",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_escchar",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT6",
          "raw": "<<<EOT6
This checks\\\\t chunk_split()\\\\nEscape\\\\rchars
EOT6",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "This checks\\\\t chunk_split()\\\\nEscape\\\\rchars
",
                "unicode": false,
                "value": "This checks	 chunk_split()
Escape
chars",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_multiline",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT7",
          "raw": "<<<EOT7
This is to check chunk_split
function with multiline
heredoc
EOT7",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "This is to check chunk_split
function with multiline
heredoc
",
                "unicode": false,
                "value": "This is to check chunk_split
function with multiline
heredoc",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_quote_slash",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT8",
          "raw": "<<<EOT8
\\"To check \\" in heredoc\\"
I'm sure it'll work also with \\\\
which is single slash
EOT8",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\"To check \\" in heredoc\\"
I'm sure it'll work also with \\\\
which is single slash
",
                "unicode": false,
                "value": "\\"To check \\" in heredoc\\"
I'm sure it'll work also with \\\\
which is single slash",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "heredoc_arr",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_null",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_blank",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_char",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_str",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_multiline",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_spchar",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_escchar",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "heredoc_quote_slash",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"-- Iteration \\"",
                    "unicode": false,
                    "value": "-- Iteration ",
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "count",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "type": "+",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" --\\\\n\\"",
                  "unicode": false,
                  "value": " --
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "str",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "chunklen",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chunk_split",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Post {
              "kind": "post",
              "type": "+",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "heredoc_arr",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "str",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\"",
          "unicode": false,
          "value": "Done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
