// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests FR #78270 (Usage of __vectorcall convention with FFI) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x86",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Name {
            "kind": "name",
            "name": "PHP_INT_SIZE",
            "resolution": "uqn",
          },
          "parenthesizedExpression": true,
          "right": Number {
            "kind": "number",
            "value": "4",
          },
          "type": "===",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arglists",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, int, int, int, int, int'",
                "unicode": false,
                "value": "int, int, int, int, int, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'double, int, int, int, int, int, int'",
                "unicode": false,
                "value": "double, int, int, int, int, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x86",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, double, int, int, int, int, int'",
                "unicode": false,
                "value": "int, double, int, int, int, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x86",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, double, int, int, int, int'",
                "unicode": false,
                "value": "int, int, double, int, int, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x86",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, int, double, int, int, int'",
                "unicode": false,
                "value": "int, int, int, double, int, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x86",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, int, int, double, int, int'",
                "unicode": false,
                "value": "int, int, int, int, double, int, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, int, int, int, double, int'",
                "unicode": false,
                "value": "int, int, int, int, int, double, int",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'int, int, int, int, int, int, double'",
                "unicode": false,
                "value": "int, int, int, int, int, int, double",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "signature",
              },
              "operator": "=",
              "right": Encapsed {
                "kind": "encapsed",
                "raw": "\\"__vectorcall void foobar($arglist);\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "__vectorcall void foobar(",
                      "unicode": false,
                      "value": "__vectorcall void foobar(",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "arglist",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ");",
                      "unicode": false,
                      "value": ");",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ffi",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "signature",
                        },
                      ],
                      "kind": "call",
                      "what": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "cdef",
                        },
                        "what": Name {
                          "kind": "name",
                          "name": "FFI",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              Encapsed {
                                "kind": "encapsed",
                                "raw": "\\"($arglist): unexpected ParserException\\\\n\\"",
                                "type": "string",
                                "value": Array [
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "(",
                                      "unicode": false,
                                      "value": "(",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": null,
                                  },
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "arglist",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": "simple",
                                  },
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "): unexpected ParserException\\\\n",
                                      "unicode": false,
                                      "value": "): unexpected ParserException",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": null,
                                  },
                                ],
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "allowed",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ex",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "FFI\\\\ParserException",
                    "resolution": "qn",
                  },
                ],
              },
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              Encapsed {
                                "kind": "encapsed",
                                "raw": "\\"($arglist): unexpected Exception\\\\n\\"",
                                "type": "string",
                                "value": Array [
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "(",
                                      "unicode": false,
                                      "value": "(",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": null,
                                  },
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "arglist",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": "simple",
                                  },
                                  EncapsedPart {
                                    "curly": false,
                                    "expression": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "): unexpected Exception\\\\n",
                                      "unicode": false,
                                      "value": "): unexpected Exception",
                                    },
                                    "kind": "encapsedpart",
                                    "syntax": null,
                                  },
                                ],
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "allowed",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ex",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "FFI\\\\Exception",
                    "resolution": "qn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "arglist",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "arglists",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "allowed",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
