// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test strip_tags() function : usage variations - heredoc strings 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing strip_tags() : usage variations ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing strip_tags() : usage variations ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "null_string",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
EOT",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "blank_line",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
EOT",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "multiline_string",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
<html>hello world</html>
<p>13 &lt; 25</p>
<?php 1111 &amp; 0000 = 0000 ?>
<b>This is a double quoted string</b>
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<html>hello world</html>
<p>13 &lt; 25</p>
<?php 1111 &amp; 0000 = 0000 ?>
<b>This is a double quoted string</b>
",
                "unicode": false,
                "value": "<html>hello world</html>
<p>13 &lt; 25</p>
<?php 1111 &amp; 0000 = 0000 ?>
<b>This is a double quoted string</b>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "diff_whitespaces",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
<html>hello\\\\r world\\\\t
1111\\\\t\\\\t != 2222\\\\v\\\\v</html>
<? heredoc\\\\ndouble quoted string. with\\\\vdifferent\\\\fwhite\\\\vspaces ?>
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<html>hello\\\\r world\\\\t
1111\\\\t\\\\t != 2222\\\\v\\\\v</html>
<? heredoc\\\\ndouble quoted string. with\\\\vdifferent\\\\fwhite\\\\vspaces ?>
",
                "unicode": false,
                "value": "<html>hello
 world	
1111		 != 2222</html>
<? heredoc
double quoted string. withdifferentwhitespaces ?>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "numeric_string",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
<html>11 < 12. 123 >22</html>
<p>string</p> 1111\\\\t <b>0000\\\\t = 0000\\\\n</b>
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<html>11 < 12. 123 >22</html>
<p>string</p> 1111\\\\t <b>0000\\\\t = 0000\\\\n</b>
",
                "unicode": false,
                "value": "<html>11 < 12. 123 >22</html>
<p>string</p> 1111	 <b>0000	 = 0000
</b>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "quote_char_string",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
<html>This's a string with quotes:</html>
\\"strings in double quote\\";
'strings in single quote';
<html>this\\\\line is single quoted /with\\\\slashes </html>
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<html>This's a string with quotes:</html>
\\"strings in double quote\\";
'strings in single quote';
<html>this\\\\line is single quoted /with\\\\slashes </html>
",
                "unicode": false,
                "value": "<html>This's a string with quotes:</html>
\\"strings in double quote\\";
'strings in single quote';
<html>this\\\\line is single quoted /with\\\\slashes </html>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res_heredoc_strings",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "null_string",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "blank_line",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "multiline_string",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "diff_whitespaces",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "numeric_string",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "quote_char_string",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "quotes",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"<html><a><?php\\"",
          "unicode": false,
          "value": "<html><a><?php",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"-- Iteration $count --\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "-- Iteration ",
                      "unicode": false,
                      "value": "-- Iteration ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "count",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " --\\\\n",
                      "unicode": false,
                      "value": " --\\\\n",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "index",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "res_heredoc_strings",
                      },
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "quotes",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strip_tags",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Post {
              "kind": "post",
              "type": "+",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "index",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "index",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "index",
          },
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "res_heredoc_strings",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "count",
              "resolution": "uqn",
            },
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
