// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests MySQL PDO->prepare(), native PS 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mysql_pdo_test.inc'",
            "unicode": false,
            "value": "mysql_pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "offset",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": true,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "db",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "query",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "input_params",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "error_info",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": NullKeyword {
            "kind": "nullkeyword",
            "raw": "null",
          },
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "suppress_warning",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "stmt",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "query",
                          },
                        ],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "prepare",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "db",
                          },
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "stmt",
                      },
                      "operator": "=",
                      "right": Silent {
                        "expr": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "query",
                            },
                          ],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "prepare",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "db",
                            },
                          },
                        },
                        "kind": "silent",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "suppress_warning",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "error_info",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "is_array",
                          "resolution": "uqn",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'prepare'",
                              "unicode": false,
                              "value": "prepare",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "error_info",
                            },
                          },
                        ],
                      },
                      "type": "&&",
                    },
                    "type": "||",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "errorInfo",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "db",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d] prepare() - expecting SQLSTATE '%s' got '%s'\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d] prepare() - expecting SQLSTATE '%s' got '%s'
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'sqlstate'",
                                      "unicode": false,
                                      "value": "sqlstate",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "'prepare'",
                                        "unicode": false,
                                        "value": "prepare",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "error_info",
                                      },
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Isset {
                            "kind": "isset",
                            "variables": Array [
                              OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'sqlstate'",
                                  "unicode": false,
                                  "value": "sqlstate",
                                },
                                "what": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'prepare'",
                                    "unicode": false,
                                    "value": "prepare",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "error_info",
                                  },
                                },
                              },
                            ],
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'sqlstate'",
                                "unicode": false,
                                "value": "sqlstate",
                              },
                              "what": OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'prepare'",
                                  "unicode": false,
                                  "value": "prepare",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "error_info",
                                },
                              },
                            },
                            "parenthesizedExpression": true,
                            "right": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                            "type": "!==",
                          },
                          "type": "&&",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d] prepare() - expecting MySQL Code '%s' got '%s'\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d] prepare() - expecting MySQL Code '%s' got '%s'
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'mysql'",
                                      "unicode": false,
                                      "value": "mysql",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "'prepare'",
                                        "unicode": false,
                                        "value": "prepare",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "error_info",
                                      },
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Isset {
                            "kind": "isset",
                            "variables": Array [
                              OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'mysql'",
                                  "unicode": false,
                                  "value": "mysql",
                                },
                                "what": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'prepare'",
                                    "unicode": false,
                                    "value": "prepare",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "error_info",
                                  },
                                },
                              },
                            ],
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'mysql'",
                                "unicode": false,
                                "value": "mysql",
                              },
                              "what": OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'prepare'",
                                  "unicode": false,
                                  "value": "prepare",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "error_info",
                                },
                              },
                            },
                            "parenthesizedExpression": true,
                            "right": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                            "type": "!==",
                          },
                          "type": "&&",
                        },
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "error_info",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "is_array",
                        "resolution": "uqn",
                      },
                    },
                    "right": Isset {
                      "kind": "isset",
                      "variables": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'prepare'",
                            "unicode": false,
                            "value": "prepare",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "error_info",
                          },
                        },
                      ],
                    },
                    "type": "&&",
                  },
                },
                If {
                  "alternate": null,
                  "body": Return {
                    "expr": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                    "kind": "return",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "is_object",
                        "resolution": "uqn",
                      },
                    },
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "input_params",
                      },
                      "operator": "=",
                      "right": Array {
                        "items": Array [],
                        "kind": "array",
                        "shortForm": false,
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "input_params",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "is_null",
                      "resolution": "uqn",
                    },
                  },
                },
                If {
                  "alternate": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ret",
                      },
                      "operator": "=",
                      "right": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "input_params",
                          },
                        ],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "execute",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                        },
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "body": ExpressionStatement {
                    "expression": Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ret",
                      },
                      "operator": "=",
                      "right": Silent {
                        "expr": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "input_params",
                            },
                          ],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "execute",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "stmt",
                            },
                          },
                        },
                        "kind": "silent",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "suppress_warning",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "error_info",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "is_array",
                          "resolution": "uqn",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'execute'",
                              "unicode": false,
                              "value": "execute",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "error_info",
                            },
                          },
                        ],
                      },
                      "type": "&&",
                    },
                    "type": "||",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[%03d] PDO::execute() should return a boolean value, got %s/%s\\\\n\\"",
                          "unicode": false,
                          "value": "[%03d] PDO::execute() should return a boolean value, got %s/%s
",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "ret",
                            },
                            Boolean {
                              "kind": "boolean",
                              "raw": "true",
                              "value": true,
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_export",
                            "resolution": "uqn",
                          },
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ret",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ret",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "is_bool",
                        "resolution": "uqn",
                      },
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorInfo",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Isset {
                      "kind": "isset",
                      "variables": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        },
                      ],
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tmp",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "2030",
                      },
                      "type": "==",
                    },
                    "type": "&&",
                  },
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d] execute() - expecting SQLSTATE '%s' got '%s'\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d] execute() - expecting SQLSTATE '%s' got '%s'
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'sqlstate'",
                                      "unicode": false,
                                      "value": "sqlstate",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "'execute'",
                                        "unicode": false,
                                        "value": "execute",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "error_info",
                                      },
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Isset {
                            "kind": "isset",
                            "variables": Array [
                              OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'sqlstate'",
                                  "unicode": false,
                                  "value": "sqlstate",
                                },
                                "what": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'execute'",
                                    "unicode": false,
                                    "value": "execute",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "error_info",
                                  },
                                },
                              },
                            ],
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'sqlstate'",
                                "unicode": false,
                                "value": "sqlstate",
                              },
                              "what": OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'execute'",
                                  "unicode": false,
                                  "value": "execute",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "error_info",
                                },
                              },
                            },
                            "parenthesizedExpression": true,
                            "right": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                            "type": "!==",
                          },
                          "type": "&&",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[%03d] execute() - expecting MySQL Code '%s' got '%s'\\\\n\\"",
                                    "unicode": false,
                                    "value": "[%03d] execute() - expecting MySQL Code '%s' got '%s'
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "offset",
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'mysql'",
                                      "unicode": false,
                                      "value": "mysql",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "'execute'",
                                        "unicode": false,
                                        "value": "execute",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "error_info",
                                      },
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": Number {
                                      "kind": "number",
                                      "value": "0",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "tmp",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Return {
                              "expr": Boolean {
                                "kind": "boolean",
                                "raw": "false",
                                "value": false,
                              },
                              "kind": "return",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Isset {
                            "kind": "isset",
                            "variables": Array [
                              OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'mysql'",
                                  "unicode": false,
                                  "value": "mysql",
                                },
                                "what": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'execute'",
                                    "unicode": false,
                                    "value": "execute",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "error_info",
                                  },
                                },
                              },
                            ],
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'mysql'",
                                "unicode": false,
                                "value": "mysql",
                              },
                              "what": OffsetLookup {
                                "kind": "offsetlookup",
                                "offset": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'execute'",
                                  "unicode": false,
                                  "value": "execute",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "error_info",
                                },
                              },
                            },
                            "parenthesizedExpression": true,
                            "right": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                            "type": "!==",
                          },
                          "type": "&&",
                        },
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "error_info",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "is_array",
                        "resolution": "uqn",
                      },
                    },
                    "right": Isset {
                      "kind": "isset",
                      "variables": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'execute'",
                            "unicode": false,
                            "value": "execute",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "error_info",
                          },
                        },
                      ],
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"[%03d] %s, [%s} %s\\\\n\\"",
                            "unicode": false,
                            "value": "[%03d] %s, [%s} %s
",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "errorCode",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "db",
                              },
                            },
                          },
                          Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "' '",
                                "unicode": false,
                                "value": " ",
                              },
                              Call {
                                "arguments": Array [],
                                "kind": "call",
                                "what": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Identifier {
                                    "kind": "identifier",
                                    "name": "errorInfo",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "db",
                                  },
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "implode",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "printf",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "stmt",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "prepex",
      },
      "nullable": false,
      "type": null,
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "MYSQL_ATTR_DIRECT_QUERY",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "setAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[002] Unable to turn off emulated prepared statements\\\\n\\"",
                    "unicode": false,
                    "value": "[002] Unable to turn off emulated prepared statements
",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "0",
              },
              "right": Call {
                "arguments": Array [
                  StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "MYSQL_ATTR_DIRECT_QUERY",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "PDO",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getAttribute",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
              "type": "!=",
            },
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "3",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "''",
                        "unicode": false,
                        "value": "",
                      },
                      Array {
                        "items": Array [],
                        "kind": "array",
                        "shortForm": true,
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'prepare'",
                              "unicode": false,
                              "value": "prepare",
                            },
                            "kind": "entry",
                            "unpack": false,
                            "value": Array {
                              "items": Array [
                                Entry {
                                  "byRef": false,
                                  "key": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'sqlstate'",
                                    "unicode": false,
                                    "value": "sqlstate",
                                  },
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'42000'",
                                    "unicode": false,
                                    "value": "42000",
                                  },
                                },
                              ],
                              "kind": "array",
                              "shortForm": true,
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": true,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        Name {
                          "kind": "name",
                          "name": "\\\\PHP_EOL",
                          "resolution": "fqn",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "4",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT 1 as \\"one\\"'",
                    "unicode": false,
                    "value": "SELECT 1 as \\"one\\"",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "expected",
                },
                "operator": "=",
                "right": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'one'",
                        "unicode": false,
                        "value": "one",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'1'",
                        "unicode": false,
                        "value": "1",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "expected",
                },
                "operator": "=",
                "right": Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'one'",
                        "unicode": false,
                        "value": "one",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "isPDOMySQLnd",
                },
                "what": Name {
                  "kind": "name",
                  "name": "MySQLPDOTest",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "FETCH_ASSOC",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "PDO",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "fetch",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[004a] Expecting %s got %s\\\\n\\"",
                        "unicode": false,
                        "value": "[004a] Expecting %s got %s
",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "expected",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "row",
                          },
                          Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_export",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "expected",
              },
              "type": "!==",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "5",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE IF EXISTS test'",
                  "unicode": false,
                  "value": "DROP TABLE IF EXISTS test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "6",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s'",
                      "unicode": false,
                      "value": "CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s",
                    },
                    Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_ENGINE",
                      "resolution": "uqn",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "7",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, label) VALUES(1, ':placeholder')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(1, ':placeholder')",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "8",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT label FROM test ORDER BY id ASC'",
                    "unicode": false,
                    "value": "SELECT label FROM test ORDER BY id ASC",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "FETCH_ASSOC",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fetchAll",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "9",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test'",
                  "unicode": false,
                  "value": "DELETE FROM test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "10",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES(1, :placeholder)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(1, :placeholder)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "':placeholder'",
                        "unicode": false,
                        "value": ":placeholder",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'first row'",
                        "unicode": false,
                        "value": "first row",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "11",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES(2, :placeholder)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(2, :placeholder)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "':placeholder'",
                        "unicode": false,
                        "value": ":placeholder",
                      },
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'second row'",
                        "unicode": false,
                        "value": "second row",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "12",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT label FROM test ORDER BY id ASC'",
                    "unicode": false,
                    "value": "SELECT label FROM test ORDER BY id ASC",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "FETCH_ASSOC",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fetchAll",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "13",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT label FROM test WHERE :placeholder > 1'",
                    "unicode": false,
                    "value": "SELECT label FROM test WHERE :placeholder > 1",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "':placeholder'",
                          "unicode": false,
                          "value": ":placeholder",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'id'",
                          "unicode": false,
                          "value": "id",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "FETCH_ASSOC",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fetchAll",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "params",
                    },
                    "operator": "=",
                    "right": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "':placeholder'",
                            "unicode": false,
                            "value": ":placeholder",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'a'",
                            "unicode": false,
                            "value": "a",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                For {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'a'",
                                  "unicode": false,
                                  "value": "a",
                                },
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "i",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "str_repeat",
                                "resolution": "uqn",
                              },
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "params",
                            },
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'some data'",
                            "unicode": false,
                            "value": "some data",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "increment": Array [
                    Post {
                      "kind": "post",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    },
                  ],
                  "init": Array [
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                  ],
                  "kind": "for",
                  "shortForm": false,
                  "test": Array [
                    Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "num_params",
                      },
                      "type": "<",
                    },
                  ],
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "16",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'SELECT id, label FROM test WHERE label > :placeholder'",
                        "unicode": false,
                        "value": "SELECT id, label FROM test WHERE label > :placeholder",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "params",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'execute'",
                              "unicode": false,
                              "value": "execute",
                            },
                            "kind": "entry",
                            "unpack": false,
                            "value": Array {
                              "items": Array [
                                Entry {
                                  "byRef": false,
                                  "key": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'sqlstate'",
                                    "unicode": false,
                                    "value": "sqlstate",
                                  },
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'HY093'",
                                    "unicode": false,
                                    "value": "HY093",
                                  },
                                },
                              ],
                              "kind": "array",
                              "shortForm": false,
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
                "right": Number {
                  "kind": "number",
                  "value": "100",
                },
                "type": "<",
              },
            ],
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "16",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test WHERE :placeholder IS NOT NULL'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE :placeholder IS NOT NULL",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "':placeholder'",
                          "unicode": false,
                          "value": ":placeholder",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[017] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[017] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "18",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test WHERE :placeholder IS NULL'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE :placeholder IS NULL",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "':placeholder'",
                          "unicode": false,
                          "value": ":placeholder",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[019] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[019] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "20",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE IF EXISTS test'",
                  "unicode": false,
                  "value": "DROP TABLE IF EXISTS test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "21",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM'",
                  "unicode": false,
                  "value": "CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "23",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'INSERT INTO test(id, label) VALUES (1, :placeholder)'",
                        "unicode": false,
                        "value": "INSERT INTO test(id, label) VALUES (1, :placeholder)",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "':placeholder'",
                              "unicode": false,
                              "value": ":placeholder",
                            },
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'MySQL is the best database in the world!'",
                              "unicode": false,
                              "value": "MySQL is the best database in the world!",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "24",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'INSERT INTO test(id, label) VALUES (2, :placeholder)'",
                        "unicode": false,
                        "value": "INSERT INTO test(id, label) VALUES (2, :placeholder)",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "':placeholder'",
                              "unicode": false,
                              "value": ":placeholder",
                            },
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'If I have the freedom to choose, I would always go again for the MySQL Server'",
                              "unicode": false,
                              "value": "If I have the freedom to choose, I would always go again for the MySQL Server",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "25",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT id, label FROM test WHERE MATCH label AGAINST (:placeholder)'",
                          "unicode": false,
                          "value": "SELECT id, label FROM test WHERE MATCH label AGAINST (:placeholder)",
                        },
                        Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "':placeholder'",
                                "unicode": false,
                                "value": ":placeholder",
                              },
                              "kind": "entry",
                              "unpack": false,
                              "value": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'mysql'",
                                "unicode": false,
                                "value": "mysql",
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": false,
                        },
                        NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                        Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "prepex",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "stmt",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Number {
                                "kind": "number",
                                "value": "26",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "db",
                              },
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'SELECT id, label FROM test ORDER BY id ASC'",
                                "unicode": false,
                                "value": "SELECT id, label FROM test ORDER BY id ASC",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "prepex",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"[027] Expecting two rows, got %d rows\\\\n\\"",
                                "unicode": false,
                                "value": "[027] Expecting two rows, got %d rows
",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "printf",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "tmp",
                                },
                                "operator": "=",
                                "parenthesizedExpression": true,
                                "right": Call {
                                  "arguments": Array [
                                    StaticLookup {
                                      "kind": "staticlookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "FETCH_ASSOC",
                                      },
                                      "what": Name {
                                        "kind": "name",
                                        "name": "PDO",
                                        "resolution": "uqn",
                                      },
                                    },
                                  ],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "fetchAll",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "stmt",
                                    },
                                  },
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "count",
                              "resolution": "uqn",
                            },
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "2",
                          },
                          "type": "!=",
                        },
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[028] INSERT seems to have failed, dumping data, check manually\\\\n\\"",
                                    "unicode": false,
                                    "value": "[028] INSERT seems to have failed, dumping data, check manually
",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "tmp",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_dump",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'label'",
                              "unicode": false,
                              "value": "label",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'MySQL is the best database in the world!'",
                            "unicode": false,
                            "value": "MySQL is the best database in the world!",
                          },
                          "type": "!==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "stmt",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "is_object",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "22",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE FULLTEXT INDEX idx1 ON test(label)'",
                      "unicode": false,
                      "value": "CREATE FULLTEXT INDEX idx1 ON test(label)",
                    },
                    NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "prepex",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "is_object",
                "resolution": "uqn",
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test'",
                  "unicode": false,
                  "value": "DELETE FROM test",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, label) VALUES (1, 'row1')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES (1, 'row1')",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, label) VALUES (2, 'row2')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES (2, 'row2')",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "exec",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT id, label FROM test WHERE (label LIKE %s) AND (id = :placeholder)\\"",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE (label LIKE %s) AND (id = :placeholder)",
                  },
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'%ro%'",
                        "unicode": false,
                        "value": "%ro%",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "quote",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "29",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'placeholder'",
                          "unicode": false,
                          "value": "placeholder",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[030] Expecting zero rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[030] Expecting zero rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT id, label FROM test WHERE  (id = :placeholder) OR (label LIKE %s)\\"",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE  (id = :placeholder) OR (label LIKE %s)",
                  },
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'%go%'",
                        "unicode": false,
                        "value": "%go%",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "quote",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "31",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'placeholder'",
                          "unicode": false,
                          "value": "placeholder",
                        },
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[032] Expecting one row, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[032] Expecting one row, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "33",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE IF EXISTS test'",
                  "unicode": false,
                  "value": "DROP TABLE IF EXISTS test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "34",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s'",
                      "unicode": false,
                      "value": "CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s",
                    },
                    Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_ENGINE",
                      "resolution": "uqn",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "35",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, label) VALUES(1, '?')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(1, '?')",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "36",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT label FROM test'",
                    "unicode": false,
                    "value": "SELECT label FROM test",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "FETCH_ASSOC",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fetchAll",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "37",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test'",
                  "unicode": false,
                  "value": "DELETE FROM test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "38",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES(1, ?)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(1, ?)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'first row'",
                        "unicode": false,
                        "value": "first row",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "39",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES(2, ?)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES(2, ?)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'second row'",
                        "unicode": false,
                        "value": "second row",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "40",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT label FROM test'",
                    "unicode": false,
                    "value": "SELECT label FROM test",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "FETCH_ASSOC",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "fetchAll",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "40",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'SELECT label FROM test WHERE ? > 1'",
                  "unicode": false,
                  "value": "SELECT label FROM test WHERE ? > 1",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "41",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'SELECT ? FROM test WHERE id > 1'",
                  "unicode": false,
                  "value": "SELECT ? FROM test WHERE id > 1",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "42",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'SELECT ? FROM test WHERE ? > ?'",
                  "unicode": false,
                  "value": "SELECT ? FROM test WHERE ? > ?",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'label'",
                        "unicode": false,
                        "value": "label",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'value'",
                        "unicode": false,
                        "value": "value",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "params",
                    },
                    "operator": "=",
                    "right": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'a'",
                            "unicode": false,
                            "value": "a",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                For {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": false,
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "params",
                            },
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'some data'",
                            "unicode": false,
                            "value": "some data",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "increment": Array [
                    Post {
                      "kind": "post",
                      "type": "+",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    },
                  ],
                  "init": Array [
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "operator": "=",
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                  ],
                  "kind": "for",
                  "shortForm": false,
                  "test": Array [
                    Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "num_params",
                      },
                      "type": "<",
                    },
                  ],
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "43",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'SELECT id, label FROM test WHERE label > ?'",
                        "unicode": false,
                        "value": "SELECT id, label FROM test WHERE label > ?",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "params",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'execute'",
                              "unicode": false,
                              "value": "execute",
                            },
                            "kind": "entry",
                            "unpack": false,
                            "value": Array {
                              "items": Array [
                                Entry {
                                  "byRef": false,
                                  "key": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'sqlstate'",
                                    "unicode": false,
                                    "value": "sqlstate",
                                  },
                                  "kind": "entry",
                                  "unpack": false,
                                  "value": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "'HY093'",
                                    "unicode": false,
                                    "value": "HY093",
                                  },
                                },
                              ],
                              "kind": "array",
                              "shortForm": false,
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "num_params",
                },
                "right": Number {
                  "kind": "number",
                  "value": "100",
                },
                "type": "<",
              },
            ],
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "44",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test'",
                  "unicode": false,
                  "value": "DELETE FROM test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "45",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES (1, ?), (2, ?)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES (1, ?), (2, ?)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'row'",
                        "unicode": false,
                        "value": "row",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'row'",
                        "unicode": false,
                        "value": "row",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "46",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test ORDER BY id'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test ORDER BY id",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "FETCH_ASSOC",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "PDO",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "fetchAll",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"id\\"",
                            "unicode": false,
                            "value": "id",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"1\\"",
                            "unicode": false,
                            "value": "1",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"label\\"",
                            "unicode": false,
                            "value": "label",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"row\\"",
                            "unicode": false,
                            "value": "row",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"id\\"",
                            "unicode": false,
                            "value": "id",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"2\\"",
                            "unicode": false,
                            "value": "2",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"label\\"",
                            "unicode": false,
                            "value": "label",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"row\\"",
                            "unicode": false,
                            "value": "row",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                      "what": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "exp",
                        },
                      },
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                      "what": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "exp",
                        },
                      },
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "2",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "isPDOMySQLnd",
                },
                "what": Name {
                  "kind": "name",
                  "name": "MySQLPDOTest",
                  "resolution": "uqn",
                },
              },
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[064] Results seem wrong. Please check dumps manually.\\\\n\\"",
                        "unicode": false,
                        "value": "[064] Results seem wrong. Please check dumps manually.
",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "exp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "type": "!==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "47",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test WHERE ? IS NOT NULL'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE ? IS NOT NULL",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[048] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[048] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "49",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label FROM test WHERE ? IS NULL'",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE ? IS NULL",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[050] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[050] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "51",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE IF EXISTS test'",
                  "unicode": false,
                  "value": "DROP TABLE IF EXISTS test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "52",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM'",
                  "unicode": false,
                  "value": "CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "54",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'INSERT INTO test(id, label) VALUES (1, ?)'",
                        "unicode": false,
                        "value": "INSERT INTO test(id, label) VALUES (1, ?)",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": null,
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'MySQL is the best database in the world!'",
                              "unicode": false,
                              "value": "MySQL is the best database in the world!",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "55",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'INSERT INTO test(id, label) VALUES (1, ?)'",
                        "unicode": false,
                        "value": "INSERT INTO test(id, label) VALUES (1, ?)",
                      },
                      Array {
                        "items": Array [
                          Entry {
                            "byRef": false,
                            "key": null,
                            "kind": "entry",
                            "unpack": false,
                            "value": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'If I have the freedom to choose, I would always go again for the MySQL Server'",
                              "unicode": false,
                              "value": "If I have the freedom to choose, I would always go again for the MySQL Server",
                            },
                          },
                        ],
                        "kind": "array",
                        "shortForm": false,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "prepex",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "56",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT id, label FROM test WHERE MATCH label AGAINST (?)'",
                          "unicode": false,
                          "value": "SELECT id, label FROM test WHERE MATCH label AGAINST (?)",
                        },
                        Array {
                          "items": Array [
                            Entry {
                              "byRef": false,
                              "key": null,
                              "kind": "entry",
                              "unpack": false,
                              "value": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "'mysql'",
                                "unicode": false,
                                "value": "mysql",
                              },
                            },
                          ],
                          "kind": "array",
                          "shortForm": false,
                        },
                        NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                        Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "prepex",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "53",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE FULLTEXT INDEX idx1 ON test(label)'",
                      "unicode": false,
                      "value": "CREATE FULLTEXT INDEX idx1 ON test(label)",
                    },
                    NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    NullKeyword {
                      "kind": "nullkeyword",
                      "raw": "null",
                    },
                    Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "prepex",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "is_object",
                "resolution": "uqn",
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "57",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test'",
                  "unicode": false,
                  "value": "DELETE FROM test",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "58",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'INSERT INTO test(id, label) VALUES (1, ?), (2, ?)'",
                  "unicode": false,
                  "value": "INSERT INTO test(id, label) VALUES (1, ?), (2, ?)",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'row1'",
                        "unicode": false,
                        "value": "row1",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'row2'",
                        "unicode": false,
                        "value": "row2",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "prepex",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "59",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'SELECT id, label AS \\"label\\" FROM test WHERE label = ?'",
                    "unicode": false,
                    "value": "SELECT id, label AS \\"label\\" FROM test WHERE label = ?",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'row1'",
                          "unicode": false,
                          "value": "row1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "FETCH_ASSOC",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "PDO",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "fetchAll",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "stmt",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"id\\"",
                            "unicode": false,
                            "value": "id",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"1\\"",
                            "unicode": false,
                            "value": "1",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"label\\"",
                            "unicode": false,
                            "value": "label",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"row1\\"",
                            "unicode": false,
                            "value": "row1",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'id'",
                        "unicode": false,
                        "value": "id",
                      },
                      "what": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "exp",
                        },
                      },
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [],
              "kind": "call",
              "what": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "isPDOMySQLnd",
                },
                "what": Name {
                  "kind": "name",
                  "name": "MySQLPDOTest",
                  "resolution": "uqn",
                },
              },
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"[065] Results seem wrong. Please check dumps manually.\\\\n\\"",
                        "unicode": false,
                        "value": "[065] Results seem wrong. Please check dumps manually.
",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "exp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "type": "!==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT id, label FROM test WHERE (label LIKE %s) AND (id = ?)\\"",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE (label LIKE %s) AND (id = ?)",
                  },
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'%ro%'",
                        "unicode": false,
                        "value": "%ro%",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "quote",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "60",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Number {
                            "kind": "number",
                            "value": "1",
                          },
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[061] Expecting zero rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[061] Expecting zero rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"SELECT id, label FROM test WHERE  (id = ?) OR (label LIKE %s)\\"",
                    "unicode": false,
                    "value": "SELECT id, label FROM test WHERE  (id = ?) OR (label LIKE %s)",
                  },
                  Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'%ro%'",
                        "unicode": false,
                        "value": "%ro%",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "quote",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sprintf",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "61",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[062] Expecting two rows, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[062] Expecting two rows, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sql",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SELECT id, label FROM test WHERE id = ? AND label = (SELECT label AS 'SELECT' FROM test WHERE id = ?)\\"",
                "unicode": false,
                "value": "SELECT id, label FROM test WHERE id = ? AND label = (SELECT label AS 'SELECT' FROM test WHERE id = ?)",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "63",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sql",
                  },
                  Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Number {
                          "kind": "number",
                          "value": "1",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "prepex",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[064] Expecting one row, got %d rows\\\\n\\"",
                    "unicode": false,
                    "value": "[064] Expecting one row, got %d rows
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "parenthesizedExpression": true,
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "count",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "1",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[001] %s [%s] %s\\\\n\\"",
                      "unicode": false,
                      "value": "[001] %s [%s] %s
",
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorCode",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "' '",
                          "unicode": false,
                          "value": " ",
                        },
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "errorInfo",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "db",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "PDOException",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
