// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test uasort() function : usage variations - sort array with all possible keys 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing uasort() : Sorting array with all possible keys ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing uasort() : Sorting array with all possible keys ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "value1",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "value2",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": If {
              "alternate": Block {
                "children": Array [
                  Return {
                    "expr": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "kind": "return",
                  },
                ],
                "kind": "block",
              },
              "body": Block {
                "children": Array [
                  Return {
                    "expr": Unary {
                      "kind": "unary",
                      "type": "-",
                      "what": Number {
                        "kind": "number",
                        "value": "1",
                      },
                    },
                    "kind": "return",
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value1",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value2",
                },
                "type": ">",
              },
            },
            "body": Block {
              "children": Array [
                Return {
                  "expr": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "value1",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "value2",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "cmp_function",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "empty_heredoc",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT1",
          "raw": "<<<EOT1
EOT1",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "simple_heredoc",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT2",
          "raw": "<<<EOT2
simple
EOT2",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "simple
",
                "unicode": false,
                "value": "simple",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "multiline_heredoc",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT3",
          "raw": "<<<EOT3
multiline heredoc with 123
and speci@! ch@r..\\\\ncheck\\\\talso
EOT3",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "multiline heredoc with 123
and speci@! ch@r..\\\\ncheck\\\\talso
",
                "unicode": false,
                "value": "multiline heredoc with 123
and speci@! ch@r..
check	also",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array_arg",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "10",
              },
            },
            Entry {
              "byRef": false,
              "key": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "9",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "012",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "7",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0x34",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "6",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'key'",
                "unicode": false,
                "value": "key",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "5",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"two\\"",
                "unicode": false,
                "value": "two",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "4",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "3",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\" \\"",
                "unicode": false,
                "value": " ",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "15",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "5",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "TRUE",
                "value": true,
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "100",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "FALSE",
                "value": false,
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "25",
              },
            },
            Entry {
              "byRef": false,
              "key": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "20",
              },
            },
            Entry {
              "byRef": false,
              "key": NullKeyword {
                "kind": "nullkeyword",
                "raw": "NULL",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "35",
              },
            },
            Entry {
              "byRef": false,
              "key": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"a\\"",
                    "unicode": false,
                    "value": "a",
                  },
                  "right": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"b\\"",
                  "unicode": false,
                  "value": "b",
                },
                "type": ".",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "45",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "b\\"binary\\"",
                "unicode": true,
                "value": "binary",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "30",
              },
            },
            Entry {
              "byRef": false,
              "key": Variable {
                "curly": false,
                "kind": "variable",
                "name": "empty_heredoc",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "90",
              },
            },
            Entry {
              "byRef": false,
              "key": Variable {
                "curly": false,
                "kind": "variable",
                "name": "simple_heredoc",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "75",
              },
            },
            Entry {
              "byRef": false,
              "key": Variable {
                "curly": false,
                "kind": "variable",
                "name": "multiline_heredoc",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "200",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "array_arg",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'cmp_function'",
                "unicode": false,
                "value": "cmp_function",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "uasort",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"-- Sorted array after uasort() function call --\\\\n\\"",
          "unicode": false,
          "value": "-- Sorted array after uasort() function call --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "array_arg",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\"",
          "unicode": false,
          "value": "Done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
