// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #80072: Cyclic unserialize in TMPVAR operand may leak 1`] = `
Program {
  "children": Array [
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'O:8:\\"stdClass\\":1:{s:1:\\"x\\";r:1;}'",
                "unicode": false,
                "value": "O:8:\\"stdClass\\":1:{s:1:\\"x\\";r:1;}",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "s",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "unserialize",
                  "resolution": "uqn",
                },
              },
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
              "type": "%",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Error",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": AssignRef {
          "kind": "assignref",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": false,
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "a",
          },
        },
        "right": Bin {
          "kind": "bin",
          "left": AssignRef {
            "kind": "assignref",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
          },
          "right": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "gc_collect_cycles",
              "resolution": "uqn",
            },
          },
          "type": ">",
        },
        "type": "==",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
