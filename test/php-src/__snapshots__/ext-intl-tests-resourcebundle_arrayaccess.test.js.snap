// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test ResourceBundle array access and count - existing/missing keys 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"resourcebundle.inc\\"",
          "unicode": false,
          "value": "resourcebundle.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'en_US'",
              "unicode": false,
              "value": "en_US",
            },
            Name {
              "kind": "name",
              "name": "BUNDLE",
              "resolution": "uqn",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ResourceBundle",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"length: %d\\\\n\\"",
            "unicode": false,
            "value": "length: %d
",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "r",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"teststring: %s\\\\n\\"",
            "unicode": false,
            "value": "teststring: %s
",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'teststring'",
              "unicode": false,
              "value": "teststring",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"testint: %d\\\\n\\"",
            "unicode": false,
            "value": "testint: %d
",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'testint'",
              "unicode": false,
              "value": "testint",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'testvector'",
              "unicode": false,
              "value": "testvector",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "print_r",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"testbin: %s\\\\n\\"",
            "unicode": false,
            "value": "testbin: %s
",
          },
          Call {
            "arguments": Array [
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'testbin'",
                  "unicode": false,
                  "value": "testbin",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "r",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "bin2hex",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r2",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'testtable'",
            "unicode": false,
            "value": "testtable",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "r",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"testtable: %d\\\\n\\"",
            "unicode": false,
            "value": "testtable: %d
",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'major'",
              "unicode": false,
              "value": "major",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "r2",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'testarray'",
            "unicode": false,
            "value": "testarray",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "r",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"testarray: %s\\\\n\\"",
            "unicode": false,
            "value": "testarray: %s
",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "2",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "printf",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "t",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'nonexisting'",
            "unicode": false,
            "value": "nonexisting",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "r",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "t",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "debug",
            "resolution": "uqn",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
