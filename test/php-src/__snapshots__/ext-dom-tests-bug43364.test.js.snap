// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #43364 (recursive xincludes don't remove internal xml nodes properly) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "nodes",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "count",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "count",
                                },
                                "operator": "+=",
                                "right": Call {
                                  "arguments": Array [
                                    PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "childNodes",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "node",
                                      },
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "loopElements",
                                    "resolution": "uqn",
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "length",
                            },
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "childNodes",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "node",
                              },
                            },
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "type": ">",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                    "right": Name {
                      "kind": "name",
                      "name": "DOMElement",
                      "resolution": "uqn",
                    },
                    "type": "instanceof",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "nodes",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "node",
            },
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "count",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "loopElements",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "DOC",
          "raw": "<<<DOC
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<root xmlns:xi=\\"http://www.w3.org/2001/XInclude\\">
    <a>
        <a_child1>ac1</a_child1>
        <a_child2>ac2</a_child2>
    </a>
    <b><xi:include xpointer=\\"xpointer(/root/a)\\" /></b>
    <c><xi:include xpointer=\\"xpointer(/root/b)\\" /></c>
</root>
DOC",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<root xmlns:xi=\\"http://www.w3.org/2001/XInclude\\">
    <a>
        <a_child1>ac1</a_child1>
        <a_child2>ac2</a_child2>
    </a>
    <b><xi:include xpointer=\\"xpointer(/root/a)\\" /></b>
    <c><xi:include xpointer=\\"xpointer(/root/b)\\" /></c>
</root>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<root xmlns:xi=\\"http://www.w3.org/2001/XInclude\\">
    <a>
        <a_child1>ac1</a_child1>
        <a_child2>ac2</a_child2>
    </a>
    <b><xi:include xpointer=\\"xpointer(/root/a)\\" /></b>
    <c><xi:include xpointer=\\"xpointer(/root/b)\\" /></c>
</root>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doc",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DomDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXml",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "doc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "xinclude",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "doc",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "documentElement",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "doc",
                    },
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "loopElements",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
              "right": Number {
                "kind": "number",
                "value": "13",
              },
              "type": "==",
            },
            "right": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "count",
              },
              "right": Number {
                "kind": "number",
                "value": "11",
              },
              "type": "==",
            },
            "type": "||",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
