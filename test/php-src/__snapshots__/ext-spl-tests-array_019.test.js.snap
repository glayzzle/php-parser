// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: ArrayIterator and foreach by reference 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ar",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ar",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "3",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "RecursiveArrayIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ar",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "current",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "ArrayIterator",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "current",
          },
          "nullable": false,
          "type": Name {
            "kind": "name",
            "name": "mixed",
            "resolution": "uqn",
          },
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "ArrayIterator",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "ArrayIteratorEx",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "4",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayIteratorEx",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ar",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "5",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayIteratorEx",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "var_dump",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ar",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
