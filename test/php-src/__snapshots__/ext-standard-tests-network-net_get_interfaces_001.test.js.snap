// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests net_get_interfaces IPv4 Loopback 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ifaces",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "net_get_interfaces",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "found",
                          },
                          "operator": "=",
                          "right": Boolean {
                            "kind": "boolean",
                            "raw": "true",
                            "value": true,
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": Number {
                          "kind": "number",
                          "value": "2",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'address'",
                          "unicode": false,
                          "value": "address",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "unicast",
                        },
                      },
                      "parenthesizedExpression": true,
                      "right": NullKeyword {
                        "kind": "nullkeyword",
                        "raw": "null",
                      },
                      "type": "??",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'127.0.0.1'",
                      "unicode": false,
                      "value": "127.0.0.1",
                    },
                    "type": "===",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'unicast'",
                "unicode": false,
                "value": "unicast",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "iface",
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "unicast",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ifaces",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "iface",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "found",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ifaces",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
