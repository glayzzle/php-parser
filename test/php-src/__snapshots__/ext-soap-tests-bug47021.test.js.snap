// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #47021 SoapClient (SoapClient stumbles over WSDL delivered with "Transfer-Encoding: chunked") 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/../../standard/tests/http/server.inc'",
            "unicode": false,
            "value": "/../../standard/tests/http/server.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "body",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "n",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "chunks",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "body",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "n",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_split",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "chunks",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "k",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "chunks",
                      },
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"%08x\\\\r\\\\n%s\\\\r\\\\n\\"",
                          "unicode": false,
                          "value": "%08x
%s
",
                        },
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "v",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "strlen",
                            "resolution": "uqn",
                          },
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "v",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": Variable {
              "curly": false,
              "kind": "variable",
              "name": "k",
            },
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "chunks",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          },
          Return {
            "expr": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "''",
                  "unicode": false,
                  "value": "",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "chunks",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "join",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "chunk_body",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "wsdl",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/server030.wsdl'",
                "unicode": false,
                "value": "/server030.wsdl",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "soap",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOF",
          "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://testuri.org\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body><ns1:getItemsResponse><getItemsReturn SOAP-ENC:arrayType=\\"ns1:Item[10]\\" xsi:type=\\"ns1:ItemArray\\"><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text0</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text1</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text2</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text3</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text4</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text5</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text6</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text7</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text8</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text9</text></item></getItemsReturn></ns1:getItemsResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>
EOF",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://testuri.org\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body><ns1:getItemsResponse><getItemsReturn SOAP-ENC:arrayType=\\"ns1:Item[10]\\" xsi:type=\\"ns1:ItemArray\\"><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text0</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text1</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text2</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text3</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text4</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text5</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text6</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text7</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text8</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text9</text></item></getItemsReturn></ns1:getItemsResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://testuri.org\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body><ns1:getItemsResponse><getItemsReturn SOAP-ENC:arrayType=\\"ns1:Item[10]\\" xsi:type=\\"ns1:ItemArray\\"><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text0</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text1</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text2</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text3</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text4</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text5</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text6</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text7</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text8</text></item><item xsi:type=\\"ns1:Item\\"><text xsi:type=\\"xsd:string\\">text9</text></item></getItemsReturn></ns1:getItemsResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "responses",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"data://text/plain,HTTP/1.1 200 OK\\\\r\\\\n\\"",
                          "unicode": false,
                          "value": "data://text/plain,HTTP/1.1 200 OK
",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"Content-Type: text/xml;charset=utf-8\\\\r\\\\n\\"",
                          "unicode": false,
                          "value": "Content-Type: text/xml;charset=utf-8
",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"Transfer-Encoding: \\\\t  chunked\\\\t \\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "Transfer-Encoding: 	  chunked	 
",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Connection: close\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "Connection: close
",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\r\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "wsdl",
                    },
                    Number {
                      "kind": "number",
                      "value": "64",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chunk_body",
                    "resolution": "uqn",
                  },
                },
                "type": ".",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"data://text/plain,HTTP/1.1 200 OK\\\\r\\\\n\\"",
                          "unicode": false,
                          "value": "data://text/plain,HTTP/1.1 200 OK
",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"Content-Type: text/xml;charset=utf-8\\\\r\\\\n\\"",
                          "unicode": false,
                          "value": "Content-Type: text/xml;charset=utf-8
",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"Transfer-Encoding: \\\\t  chunked\\\\t \\\\r\\\\n\\"",
                        "unicode": false,
                        "value": "Transfer-Encoding: 	  chunked	 
",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Connection: close\\\\r\\\\n\\"",
                      "unicode": false,
                      "value": "Connection: close
",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\r\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "soap",
                    },
                    Number {
                      "kind": "number",
                      "value": "156",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chunk_body",
                    "resolution": "uqn",
                  },
                },
                "type": ".",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": List {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'pid'",
                "unicode": false,
                "value": "pid",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "pid",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'uri'",
                "unicode": false,
                "value": "uri",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uri",
              },
            },
          ],
          "kind": "list",
          "shortForm": true,
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "responses",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "http_server",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "options",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'trace'",
                "unicode": false,
                "value": "trace",
              },
              "kind": "entry",
              "unpack": false,
              "value": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'location'",
                "unicode": false,
                "value": "location",
              },
              "kind": "entry",
              "unpack": false,
              "value": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uri",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "request",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "location",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "action",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "version",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "one_way",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "response",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "request",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "location",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "action",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "version",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "one_way",
                      },
                    ],
                    "kind": "call",
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "__doRequest",
                      },
                      "what": ParentReference {
                        "kind": "parentreference",
                        "raw": "parent",
                      },
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "response",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "strlen",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "var_dump",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "response",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__doRequest",
          },
          "nullable": true,
          "type": TypeReference {
            "kind": "typereference",
            "name": "string",
            "raw": "string",
          },
          "visibility": "public",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "SoapClient",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "BugSoapClient",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "client",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "uri",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "options",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "BugSoapClient",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getItems",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "client",
                  },
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "pid",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "http_server_kill",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
