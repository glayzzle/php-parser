// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #61977 Test exit code for various errors 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"php_cli_server.inc\\"",
          "unicode": false,
          "value": "php_cli_server.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Nowdoc {
            "kind": "nowdoc",
            "label": "SCRIPT",
            "raw": "<<<'SCRIPT'
    ini_set('display_errors', 0);
    switch($_SERVER[\\"REQUEST_URI\\"]) {
            case \\"/parse\\":
                    try {
                        eval(\\"this is a parse error\\");
                    } catch (ParseError $e) {
                    }
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/fatal\\":
                    eval(\\"foo();\\");
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/compile\\":
                    eval(\\"class foo { final private final function bar() {} }\\");
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/fatal2\\":
                    foo();
                    echo \\"OK\\\\n\\";
                    break;
            default:
                    return false;
    }
SCRIPT
",
            "value": "    ini_set('display_errors', 0);
    switch($_SERVER[\\"REQUEST_URI\\"]) {
            case \\"/parse\\":
                    try {
                        eval(\\"this is a parse error\\");
                    } catch (ParseError $e) {
                    }
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/fatal\\":
                    eval(\\"foo();\\");
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/compile\\":
                    eval(\\"class foo { final private final function bar() {} }\\");
                    echo \\"OK\\\\n\\";
                    break;
            case \\"/fatal2\\":
                    foo();
                    echo \\"OK\\\\n\\";
                    break;
            default:
                    return false;
    }",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "php_cli_server_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "host",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "PHP_CLI_SERVER_HOSTNAME",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "php_cli_server_connect",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                While {
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fp",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "fgets",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "feof",
                        "resolution": "uqn",
                      },
                    },
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
                Encapsed {
                  "kind": "encapsed",
                  "label": "HEADER",
                  "raw": "<<<HEADER
GET /$url HTTP/1.1
Host: {$host}
HEADER
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "GET /",
                        "unicode": false,
                        "value": "GET /",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "url",
                      },
                      "kind": "encapsedpart",
                      "syntax": "simple",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": " HTTP/1.1
Host: ",
                        "unicode": false,
                        "value": " HTTP/1.1
Host: ",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "host",
                      },
                      "kind": "encapsedpart",
                      "syntax": "complex",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "
",
                        "unicode": false,
                        "value": "",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"parse\\"",
              "unicode": false,
              "value": "parse",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"fatal\\"",
              "unicode": false,
              "value": "fatal",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"fatal2\\"",
              "unicode": false,
              "value": "fatal2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"compile\\"",
              "unicode": false,
              "value": "compile",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "url",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
