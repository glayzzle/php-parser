// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #32001 (xml_parse*() goes into infinite loop when autodetection in effect), using EUC-JP, Shift_JIS, GB2312 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "encoding",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "bom",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "prologue",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "tags",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "chunk_size",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "enc",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "chunk_size",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "bom",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "omit_prologue",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "encoding",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "enc",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "chunk_size",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "chunk_size",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "bom",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "bom",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "prologue",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "omit_prologue",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "tags",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "testcase",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "parser",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "name",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "attrs",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "attrs",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'bin2hex'",
                        "unicode": false,
                        "value": "bin2hex",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "attrs",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "array_map",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": false,
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "tags",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    },
                  },
                  "operator": "=",
                  "right": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "name",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "bin2hex",
                          "resolution": "uqn",
                        },
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\": \\"",
                        "unicode": false,
                        "value": ": ",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "', '",
                          "unicode": false,
                          "value": ", ",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "attrs",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "start_element",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "parser",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "name",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "end_element",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  "operator": "=",
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "''",
                    "unicode": false,
                    "value": "",
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "canonical_name",
                        },
                        "operator": "=",
                        "right": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'/BE|LE/i'",
                              "unicode": false,
                              "value": "/BE|LE/i",
                            },
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "''",
                              "unicode": false,
                              "value": "",
                            },
                            PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "encoding",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "this",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "preg_replace",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "data",
                        },
                        "operator": ".=",
                        "right": Encapsed {
                          "kind": "encapsed",
                          "raw": "\\"<?xml version=\\\\\\"1.0\\\\\\" encoding=\\\\\\"$canonical_name\\\\\\" ?>\\\\n\\"",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "<?xml version=\\\\\\"1.0\\\\\\" encoding=\\\\\\"",
                                "unicode": false,
                                "value": "<?xml version=\\"1.0\\\\\\" encoding=\\\\\\"",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "canonical_name",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "\\\\\\" ?>\\\\n",
                                "unicode": false,
                                "value": "\\" ?>",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "prologue",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "this",
                  },
                },
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  "operator": ".=",
                  "right": Encapsed {
                    "kind": "encapsed",
                    "label": "HERE",
                    "raw": "<<<HERE
<テスト:テスト1 xmlns:テスト=\\"http://www.example.com/テスト/\\" テスト=\\"テスト\\">
  <テスト:テスト2 テスト=\\"テスト\\">
    <テスト:テスト3>
      test!
    </テスト:テスト3>
  </テスト:テスト2>
</テスト:テスト1>
HERE",
                    "type": "heredoc",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "<テスト:テスト1 xmlns:テスト=\\"http://www.example.com/テスト/\\" テスト=\\"テスト\\">
  <テスト:テスト2 テスト=\\"テスト\\">
    <テスト:テスト3>
      test!
    </テスト:テスト3>
  </テスト:テスト2>
</テスト:テスト1>
",
                          "unicode": false,
                          "value": "<テスト:テスト1 xmlns:テスト=\\"http://www.example.com/テスト/\\" テスト=\\"テスト\\">
  <テスト:テスト2 テスト=\\"テスト\\">
    <テスト:テスト3>
      test!
    </テスト:テスト3>
  </テスト:テスト2>
</テスト:テスト1>",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "data",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"UTF-8\\"",
                        "unicode": false,
                        "value": "UTF-8",
                      },
                      PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "encoding",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "data",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "iconv",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "parser",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      NullKeyword {
                        "kind": "nullkeyword",
                        "raw": "NULL",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "xml_parser_create",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "parser",
                    },
                    Name {
                      "kind": "name",
                      "name": "XML_OPTION_CASE_FOLDING",
                      "resolution": "uqn",
                    },
                    Number {
                      "kind": "number",
                      "value": "0",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "xml_parser_set_option",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "parser",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"start_element\\"",
                      "unicode": false,
                      "value": "start_element",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"end_element\\"",
                      "unicode": false,
                      "value": "end_element",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "xml_set_element_handler",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "parser",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "xml_set_object",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": Block {
                  "children": Array [
                    For {
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "success",
                              },
                              "operator": "=",
                              "right": Silent {
                                "expr": Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "parser",
                                    },
                                    Call {
                                      "arguments": Array [
                                        Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "data",
                                        },
                                        Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "offset",
                                        },
                                        PropertyLookup {
                                          "kind": "propertylookup",
                                          "offset": Identifier {
                                            "kind": "identifier",
                                            "name": "chunk_size",
                                          },
                                          "what": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "this",
                                          },
                                        },
                                      ],
                                      "kind": "call",
                                      "what": Name {
                                        "kind": "name",
                                        "name": "substr",
                                        "resolution": "uqn",
                                      },
                                    },
                                    Boolean {
                                      "kind": "boolean",
                                      "raw": "false",
                                      "value": false,
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "xml_parse",
                                    "resolution": "uqn",
                                  },
                                },
                                "kind": "silent",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          If {
                            "alternate": null,
                            "body": Block {
                              "children": Array [
                                Break {
                                  "kind": "break",
                                  "level": null,
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Unary {
                              "kind": "unary",
                              "type": "!",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "success",
                              },
                            },
                          },
                        ],
                        "kind": "block",
                      },
                      "increment": Array [
                        Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "+=",
                          "right": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "chunk_size",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                        },
                      ],
                      "init": Array [
                        Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "=",
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                        },
                      ],
                      "kind": "for",
                      "shortForm": false,
                      "test": Array [
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "data",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strlen",
                              "resolution": "uqn",
                            },
                          },
                          "type": "<",
                        },
                      ],
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "success",
                              },
                              "operator": "=",
                              "right": Silent {
                                "expr": Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "parser",
                                    },
                                    String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"\\"",
                                      "unicode": false,
                                      "value": "",
                                    },
                                    Boolean {
                                      "kind": "boolean",
                                      "raw": "true",
                                      "value": true,
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "xml_parse",
                                    "resolution": "uqn",
                                  },
                                },
                                "kind": "silent",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "success",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "success",
                        },
                        "operator": "=",
                        "right": Silent {
                          "expr": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "parser",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "data",
                              },
                              Boolean {
                                "kind": "boolean",
                                "raw": "true",
                                "value": true,
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "xml_parse",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "silent",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "chunk_size",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "==",
                },
              },
              Echo {
                "expressions": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"Encoding: $this->encoding\\\\n\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "Encoding: ",
                          "unicode": false,
                          "value": "Encoding: ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "encoding",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "\\\\n",
                          "unicode": false,
                          "value": "\\\\n",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"XML Prologue: \\"",
                      "unicode": false,
                      "value": "XML Prologue: ",
                    },
                    "right": RetIf {
                      "falseExpr": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'not present'",
                        "unicode": false,
                        "value": "not present",
                      },
                      "kind": "retif",
                      "parenthesizedExpression": true,
                      "test": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "prologue",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      "trueExpr": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'present'",
                        "unicode": false,
                        "value": "present",
                      },
                    },
                    "type": ".",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Chunk size: \\"",
                      "unicode": false,
                      "value": "Chunk size: ",
                    },
                    "right": RetIf {
                      "falseExpr": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"all data at once\\\\n\\"",
                        "unicode": false,
                        "value": "all data at once
",
                      },
                      "kind": "retif",
                      "parenthesizedExpression": true,
                      "test": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "chunk_size",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      "trueExpr": Encapsed {
                        "kind": "encapsed",
                        "raw": "\\"$this->chunk_size byte(s)\\\\n\\"",
                        "type": "string",
                        "value": Array [
                          EncapsedPart {
                            "curly": false,
                            "expression": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "chunk_size",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "this",
                              },
                            },
                            "kind": "encapsedpart",
                            "syntax": "simple",
                          },
                          EncapsedPart {
                            "curly": false,
                            "expression": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": " byte(s)\\\\n",
                              "unicode": false,
                              "value": " byte(s)\\\\n",
                            },
                            "kind": "encapsedpart",
                            "syntax": null,
                          },
                        ],
                      },
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"BOM: \\"",
                      "unicode": false,
                      "value": "BOM: ",
                    },
                    "right": RetIf {
                      "falseExpr": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'not prepended'",
                        "unicode": false,
                        "value": "not prepended",
                      },
                      "kind": "retif",
                      "parenthesizedExpression": true,
                      "test": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "bom",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      "trueExpr": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'prepended'",
                        "unicode": false,
                        "value": "prepended",
                      },
                    },
                    "type": ".",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
              If {
                "alternate": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[Error] \\"",
                          "unicode": false,
                          "value": "[Error] ",
                        },
                        Call {
                          "arguments": Array [
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "parser",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "xml_get_error_code",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "xml_error_string",
                            "resolution": "uqn",
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "tags",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "var_dump",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "success",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "testcase",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "suite",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"EUC-JP\\"",
                    "unicode": false,
                    "value": "EUC-JP",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"EUC-JP\\"",
                    "unicode": false,
                    "value": "EUC-JP",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"Shift_JIS\\"",
                    "unicode": false,
                    "value": "Shift_JIS",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"Shift_JIS\\"",
                    "unicode": false,
                    "value": "Shift_JIS",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"GB2312\\"",
                    "unicode": false,
                    "value": "GB2312",
                  },
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": New {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"GB2312\\"",
                    "unicode": false,
                    "value": "GB2312",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "testcase",
                  "resolution": "uqn",
                },
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"libxml2 Version => NONE\\\\n\\"",
                "unicode": false,
                "value": "libxml2 Version => NONE
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"libxml2 Version => \\"",
                    "unicode": false,
                    "value": "libxml2 Version => ",
                  },
                  "right": Name {
                    "kind": "name",
                    "name": "LIBXML_DOTTED_VERSION",
                    "resolution": "uqn",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Name {
          "kind": "name",
          "name": "XML_SAX_IMPL",
          "resolution": "uqn",
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'libxml'",
          "unicode": false,
          "value": "libxml",
        },
        "type": "==",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "run",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "testcase",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "suite",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "testcase",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
