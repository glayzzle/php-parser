// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test fopen() function : variation: use include path and stream context (absolute directories in path) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "thisTestDir",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Magic {
                "kind": "magic",
                "raw": "__FILE__",
                "value": "__FILE__",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\".php\\"",
                "unicode": false,
                "value": ".php",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "basename",
              "resolution": "uqn",
            },
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\".dir\\"",
            "unicode": false,
            "value": ".dir",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "thisTestDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mkdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "thisTestDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "workingDir",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"workdir\\"",
          "unicode": false,
          "value": "workdir",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "filename",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Magic {
                "kind": "magic",
                "raw": "__FILE__",
                "value": "__FILE__",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\".php\\"",
                "unicode": false,
                "value": ".php",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "basename",
              "resolution": "uqn",
            },
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\".tmp\\"",
            "unicode": false,
            "value": ".tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "scriptDir",
        },
        "operator": "=",
        "right": Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "baseDir",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "getcwd",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "secondFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "baseDir",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"/dir2/\\"",
              "unicode": false,
              "value": "/dir2/",
            },
            "type": ".",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "firstFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"../dir1/\\"",
            "unicode": false,
            "value": "../dir1/",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "scriptFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "scriptDir",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/'",
              "unicode": false,
              "value": "/",
            },
            "type": ".",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "newdirs",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"dir1\\"",
                "unicode": false,
                "value": "dir1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"dir2\\"",
                "unicode": false,
                "value": "dir2",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"dir3\\"",
                "unicode": false,
                "value": "dir3",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pathSep",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\":\\"",
          "unicode": false,
          "value": ":",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "newIncludePath",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\"",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "pathSep",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\";\\"",
                "unicode": false,
                "value": ";",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "PHP_OS",
              "resolution": "uqn",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "substr",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'WIN'",
          "unicode": false,
          "value": "WIN",
        },
        "type": "==",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "newdir",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "mkdir",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "newIncludePath",
              },
              "operator": ".=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "baseDir",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'/'",
                      "unicode": false,
                      "value": "/",
                    },
                    "type": ".",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "newdir",
                  },
                  "type": ".",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pathSep",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "newdirs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "newdir",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "workingDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mkdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "workingDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n--- testing include path ---\\\\n\\"",
          "unicode": false,
          "value": "
--- testing include path ---
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "newIncludePath",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_include_path",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "modes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"r\\"",
                "unicode": false,
                "value": "r",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"r+\\"",
                "unicode": false,
                "value": "r+",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"rt\\"",
                "unicode": false,
                "value": "rt",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "mode",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "test_fopen",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "modes",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "mode",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "baseDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "workingDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "rmdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "newdir",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "rmdir",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "newdirs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "newdir",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"..\\"",
            "unicode": false,
            "value": "..",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "chdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "thisTestDir",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "rmdir",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "mode",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "scriptFile",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "secondFile",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "firstFile",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "filename",
              },
            ],
            "kind": "global",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "secondFile",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"w\\"",
                    "unicode": false,
                    "value": "w",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"in dir2\\"",
                  "unicode": false,
                  "value": "in dir2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"\\\\n** testing with mode=$mode **\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n** testing with mode=",
                      "unicode": false,
                      "value": "
** testing with mode=",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "mode",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " **\\\\n",
                      "unicode": false,
                      "value": " **",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fpassthru",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "firstFile",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"w\\"",
                    "unicode": false,
                    "value": "w",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"in dir1\\"",
                  "unicode": false,
                  "value": "in dir1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fpassthru",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"w\\"",
                    "unicode": false,
                    "value": "w",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"in working dir\\"",
                  "unicode": false,
                  "value": "in working dir",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fpassthru",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "firstFile",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "unlink",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "secondFile",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "unlink",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fpassthru",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "scriptFile",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"w\\"",
                    "unicode": false,
                    "value": "w",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"in script dir\\"",
                  "unicode": false,
                  "value": "in script dir",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "h",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "filename",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  Boolean {
                    "kind": "boolean",
                    "raw": "true",
                    "value": true,
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fopen",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fpassthru",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fclose",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "filename",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "unlink",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "scriptFile",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "unlink",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_fopen",
      },
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
