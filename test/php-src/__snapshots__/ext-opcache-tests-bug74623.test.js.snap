// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #74623: Infinite loop in type inference when using HTMLPurifier 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "arr",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "current_item",
              },
              "operator": "=",
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": false,
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "a",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "current_item",
                              },
                            },
                          },
                          "operator": "=",
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "''",
                            "unicode": false,
                            "value": "",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "current_item",
                          },
                          "operator": "=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "item",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "name",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "item",
                      },
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'string'",
                      "unicode": false,
                      "value": "string",
                    },
                    "type": "===",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "arr",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "item",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "crash",
      },
      "nullable": false,
      "type": null,
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
