// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests ReflectionType possible types 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "functions",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "void",
                  "raw": "void",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "int",
                  "raw": "int",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "float",
                  "raw": "float",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "string",
                  "raw": "string",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "bool",
                  "raw": "bool",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "array",
                  "raw": "array",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "callable",
                  "raw": "callable",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": TypeReference {
                  "kind": "typereference",
                  "name": "iterable",
                  "raw": "iterable",
                },
                "uses": Array [],
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": Name {
                  "kind": "name",
                  "name": "StdClass",
                  "resolution": "uqn",
                },
                "uses": Array [],
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "reflectionFunc",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "function",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "ReflectionFunction",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "returnType",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "getReturnType",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "reflectionFunc",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "getName",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "returnType",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "functions",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "function",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
