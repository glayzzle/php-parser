// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #45019 (Segmentation fault with SELECT ? and UNION) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"connect.inc\\"",
          "unicode": false,
          "value": "connect.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"table.inc\\"",
          "unicode": false,
          "value": "table.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Using CAST('somestring' AS CHAR)...\\\\n\\"",
          "unicode": false,
          "value": "Using CAST('somestring' AS CHAR)...
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[001] [%d] %s\\\\n\\"",
              "unicode": false,
              "value": "[001] [%d] %s
",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "errno",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "error",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)\\"",
                "unicode": false,
                "value": "SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "query",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "data",
                },
              },
              "operator": "=",
              "right": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'column1'",
                  "unicode": false,
                  "value": "column1",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "row",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'column1'",
                    "unicode": false,
                    "value": "column1",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "row",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "row",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "fetch_assoc",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "res",
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "free",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "res",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[002] [%d] %s\\\\n\\"",
              "unicode": false,
              "value": "[002] [%d] %s
",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "errno",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "error",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
          "operator": "=",
          "parenthesizedExpression": true,
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)\\"",
                "unicode": false,
                "value": "SELECT CAST('one' AS CHAR) AS column1 UNION SELECT CAST('three' AS CHAR) UNION SELECT CAST('two' AS CHAR)",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "prepare",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "link",
              },
            },
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "column1",
        },
        "operator": "=",
        "right": NullKeyword {
          "kind": "nullkeyword",
          "raw": "null",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[003] [%d] %s\\\\n\\"",
              "unicode": false,
              "value": "[003] [%d] %s
",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "errno",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "error",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "column1",
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "bind_result",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "execute",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "stmt",
              },
            },
          },
        },
        "type": "||",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "index",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"[005] Got '%s'. Please check if http://bugs.mysql.com/bug.php?id=47483 has been fixed and adapt tests bug45019.phpt/mysqli_ps_select_union.phpt\\"",
                                "unicode": false,
                                "value": "[005] Got '%s'. Please check if http://bugs.mysql.com/bug.php?id=47483 has been fixed and adapt tests bug45019.phpt/mysqli_ps_select_union.phpt",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "column1",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "printf",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "column1",
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"thre\\"",
                            "unicode": false,
                            "value": "thre",
                          },
                          "type": "!=",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[004] Row %d, expecting %s/%s got %s/%s\\\\n\\"",
                              "unicode": false,
                              "value": "[004] Row %d, expecting %s/%s got %s/%s
",
                            },
                            Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "index",
                              },
                              "right": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "type": "+",
                            },
                            Call {
                              "arguments": Array [
                                OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "index",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "data",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "index",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "data",
                              },
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "column1",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "column1",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "IS_MYSQLND",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "index",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": "!=",
                    },
                    "type": "||",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "index",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "data",
                },
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "column1",
              },
              "type": "!=",
            },
          },
          ExpressionStatement {
            "expression": Post {
              "kind": "post",
              "type": "+",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "index",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fetch",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "close",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "stmt",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "close",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "link",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
