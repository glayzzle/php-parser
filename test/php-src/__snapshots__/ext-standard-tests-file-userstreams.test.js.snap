// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests User-space streams 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lyrics",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOD",
          "raw": "<<<EOD
...and the road becomes my bride
I have stripped of all but pride
so in her I do confide
and she keeps me satisfied
gives me all I need
...and with dust in throat I crave
to the game you stay a slave
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill redefine anywhere
      Anywhere I roam
      Where I lay my head is home
...and the earth becomes my throne
I adapt to the unknown
under wandering stars Ive grown
by myself but not alone
I ask no one
...and my ties are severed clean
the less I have the more I gain
off the beaten path I reign
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill never mind anywhere
      Anywhere I roam
      Where I lay my head is home
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill take my find anywhere
      Anywhere I roam
      Where I lay my head is home
   carved upon my stone
   my body lie but still I roam
      Wherever I may roam.
Wherever I May Roam
EOD",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "...and the road becomes my bride
I have stripped of all but pride
so in her I do confide
and she keeps me satisfied
gives me all I need
...and with dust in throat I crave
to the game you stay a slave
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill redefine anywhere
      Anywhere I roam
      Where I lay my head is home
...and the earth becomes my throne
I adapt to the unknown
under wandering stars Ive grown
by myself but not alone
I ask no one
...and my ties are severed clean
the less I have the more I gain
off the beaten path I reign
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill never mind anywhere
      Anywhere I roam
      Where I lay my head is home
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill take my find anywhere
      Anywhere I roam
      Where I lay my head is home
   carved upon my stone
   my body lie but still I roam
      Wherever I may roam.
Wherever I May Roam
",
                "unicode": false,
                "value": "...and the road becomes my bride
I have stripped of all but pride
so in her I do confide
and she keeps me satisfied
gives me all I need
...and with dust in throat I crave
to the game you stay a slave
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill redefine anywhere
      Anywhere I roam
      Where I lay my head is home
...and the earth becomes my throne
I adapt to the unknown
under wandering stars Ive grown
by myself but not alone
I ask no one
...and my ties are severed clean
the less I have the more I gain
off the beaten path I reign
rover  wanderer
nomad  vagabond
call me what you will
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill never mind anywhere
      Anywhere I roam
      Where I lay my head is home
   But Ill take my time anywhere
   Free to speak my mind anywhere
   and Ill take my find anywhere
      Anywhere I roam
      Where I lay my head is home
   carved upon my stone
   my body lie but still I roam
      Wherever I may roam.
Wherever I May Roam",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "DATA",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\"",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "DATA",
                },
                "operator": ".=",
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lyrics",
                },
              },
              "kind": "expressionstatement",
            },
            "body": ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "DATA",
                },
                "operator": ".=",
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "lyrics",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_rot13",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "2",
                },
                "type": "%",
              },
              "right": Number {
                "kind": "number",
                "value": "0",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "30",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tf",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "tmpfile",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "tf",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "DATA",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fwrite",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tf",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftell",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tf",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "rewind",
            "resolution": "uqn",
          },
        },
        "right": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"failed to rewind tmp file!\\"",
            "unicode": false,
            "value": "failed to rewind tmp file!",
          },
          "kind": "exit",
          "useDie": true,
        },
        "type": "or",
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"tmpfile is not at start!\\"",
            "unicode": false,
            "value": "tmpfile is not at start!",
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tf",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftell",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "DATALEN",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "DATA",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strlen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Exit {
          "expression": Encapsed {
            "kind": "encapsed",
            "raw": "\\"tmpfile stored $n bytes; should be $DATALEN!\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "tmpfile stored ",
                  "unicode": false,
                  "value": "tmpfile stored ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "n",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": " bytes; should be ",
                  "unicode": false,
                  "value": " bytes; should be ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "DATALEN",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "!",
                  "unicode": false,
                  "value": "!",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
          "kind": "exit",
          "useDie": true,
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "DATALEN",
        },
        "type": "!=",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "uselessstream",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "path",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "mode",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "options",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "position",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "varname",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "path",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "mode",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "options",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": true,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "opened_path",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "path",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "path",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "mode",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "options",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "options",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "split",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "path",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "parse_url",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "varname",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"host\\"",
                      "unicode": false,
                      "value": "host",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "split",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "position",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    },
                    "operator": "=",
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  "kind": "expressionstatement",
                },
                "body": ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "position",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "varname",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "this",
                            },
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "GLOBALS",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "strlen",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                "kind": "if",
                "shortForm": false,
                "test": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "mode",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'a'",
                      "unicode": false,
                      "value": "a",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strchr",
                    "resolution": "uqn",
                  },
                },
              },
              Return {
                "expr": Boolean {
                  "kind": "boolean",
                  "raw": "true",
                  "value": true,
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_open",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "count",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ret",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "varname",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "GLOBALS",
                        },
                      },
                      PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "position",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "this",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "count",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "substr",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "position",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "+=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ret",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "strlen",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ret",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_read",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "position",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "this",
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_tell",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Bin {
                  "kind": "bin",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "position",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "right": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "varname",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "GLOBALS",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "strlen",
                      "resolution": "uqn",
                    },
                  },
                  "type": ">=",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_eof",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "offset",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "whence",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Switch {
                "body": Block {
                  "children": Array [
                    Case {
                      "body": Block {
                        "children": Array [
                          If {
                            "alternate": Block {
                              "children": Array [
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "false",
                                    "value": false,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "position",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "this",
                                      },
                                    },
                                    "operator": "=",
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "offset",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Bin {
                              "kind": "bin",
                              "left": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "offset",
                                },
                                "right": Call {
                                  "arguments": Array [
                                    OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": PropertyLookup {
                                        "kind": "propertylookup",
                                        "offset": Identifier {
                                          "kind": "identifier",
                                          "name": "varname",
                                        },
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "this",
                                        },
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "GLOBALS",
                                      },
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "strlen",
                                    "resolution": "uqn",
                                  },
                                },
                                "type": "<",
                              },
                              "right": Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "offset",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "0",
                                },
                                "type": ">=",
                              },
                              "type": "&&",
                            },
                          },
                          Break {
                            "kind": "break",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "case",
                      "test": Name {
                        "kind": "name",
                        "name": "SEEK_SET",
                        "resolution": "uqn",
                      },
                    },
                    Case {
                      "body": Block {
                        "children": Array [
                          If {
                            "alternate": Block {
                              "children": Array [
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "false",
                                    "value": false,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "position",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "this",
                                      },
                                    },
                                    "operator": "+=",
                                    "right": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "offset",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Bin {
                              "kind": "bin",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "offset",
                              },
                              "right": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "type": ">=",
                            },
                          },
                          Break {
                            "kind": "break",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "case",
                      "test": Name {
                        "kind": "name",
                        "name": "SEEK_CUR",
                        "resolution": "uqn",
                      },
                    },
                    Case {
                      "body": Block {
                        "children": Array [
                          If {
                            "alternate": Block {
                              "children": Array [
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "false",
                                    "value": false,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "position",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "this",
                                      },
                                    },
                                    "operator": "=",
                                    "right": Bin {
                                      "kind": "bin",
                                      "left": Call {
                                        "arguments": Array [
                                          OffsetLookup {
                                            "kind": "offsetlookup",
                                            "offset": PropertyLookup {
                                              "kind": "propertylookup",
                                              "offset": Identifier {
                                                "kind": "identifier",
                                                "name": "varname",
                                              },
                                              "what": Variable {
                                                "curly": false,
                                                "kind": "variable",
                                                "name": "this",
                                              },
                                            },
                                            "what": Variable {
                                              "curly": false,
                                              "kind": "variable",
                                              "name": "GLOBALS",
                                            },
                                          },
                                        ],
                                        "kind": "call",
                                        "what": Name {
                                          "kind": "name",
                                          "name": "strlen",
                                          "resolution": "uqn",
                                        },
                                      },
                                      "right": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "offset",
                                      },
                                      "type": "+",
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                                Return {
                                  "expr": Boolean {
                                    "kind": "boolean",
                                    "raw": "true",
                                    "value": true,
                                  },
                                  "kind": "return",
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": Bin {
                              "kind": "bin",
                              "left": Bin {
                                "kind": "bin",
                                "left": Call {
                                  "arguments": Array [
                                    OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": PropertyLookup {
                                        "kind": "propertylookup",
                                        "offset": Identifier {
                                          "kind": "identifier",
                                          "name": "varname",
                                        },
                                        "what": Variable {
                                          "curly": false,
                                          "kind": "variable",
                                          "name": "this",
                                        },
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "GLOBALS",
                                      },
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "strlen",
                                    "resolution": "uqn",
                                  },
                                },
                                "right": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "offset",
                                },
                                "type": "+",
                              },
                              "right": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "type": ">=",
                            },
                          },
                          Break {
                            "kind": "break",
                            "level": null,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "case",
                      "test": Name {
                        "kind": "name",
                        "name": "SEEK_END",
                        "resolution": "uqn",
                      },
                    },
                    Case {
                      "body": Block {
                        "children": Array [
                          Return {
                            "expr": Boolean {
                              "kind": "boolean",
                              "raw": "false",
                              "value": false,
                            },
                            "kind": "return",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "case",
                      "test": null,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "switch",
                "shortForm": false,
                "test": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "whence",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "stream_seek",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "mystream",
      },
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"bogus\\"",
                  "unicode": false,
                  "value": "bogus",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"class_not_exist\\"",
                  "unicode": false,
                  "value": "class_not_exist",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "stream_wrapper_register",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Registered a non-existent class!!!???\\"",
                "unicode": false,
                "value": "Registered a non-existent class!!!???",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    "right": Name {
                      "kind": "name",
                      "name": "\\\\PHP_EOL",
                      "resolution": "fqn",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "\\\\TypeError",
              "resolution": "fqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Not Registered\\\\n\\"",
          "unicode": false,
          "value": "Not Registered
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"test wrapper registration failed\\"",
                "unicode": false,
                "value": "test wrapper registration failed",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"test\\"",
              "unicode": false,
              "value": "test",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"mystream\\"",
              "unicode": false,
              "value": "mystream",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "stream_wrapper_register",
            "resolution": "uqn",
          },
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Registered\\\\n\\"",
          "unicode": false,
          "value": "Registered
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"bogon wrapper registration failed\\"",
                "unicode": false,
                "value": "bogon wrapper registration failed",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"bogon\\"",
              "unicode": false,
              "value": "bogon",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"uselessstream\\"",
              "unicode": false,
              "value": "uselessstream",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "stream_wrapper_register",
            "resolution": "uqn",
          },
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Registered\\\\n\\"",
          "unicode": false,
          "value": "Registered
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "operator": "=",
        "right": Silent {
          "expr": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"bogon://url\\"",
                "unicode": false,
                "value": "bogon://url",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"rb\\"",
                "unicode": false,
                "value": "rb",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "fopen",
              "resolution": "uqn",
            },
          },
          "kind": "silent",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Opened a bogon??\\"",
                "unicode": false,
                "value": "Opened a bogon??",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "is_resource",
          "resolution": "uqn",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"test://DATA\\"",
              "unicode": false,
              "value": "test://DATA",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"rb\\"",
              "unicode": false,
              "value": "rb",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Failed to open resource\\"",
                "unicode": false,
                "value": "Failed to open resource",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "fp",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_resource",
              "resolution": "uqn",
            },
          },
        },
        "type": "||",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "seeks",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Name {
                      "kind": "name",
                      "name": "SEEK_SET",
                      "resolution": "uqn",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Name {
                      "kind": "name",
                      "name": "SEEK_CUR",
                      "resolution": "uqn",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "8450",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "8450",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Name {
                      "kind": "name",
                      "name": "SEEK_CUR",
                      "resolution": "uqn",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Unary {
                      "kind": "unary",
                      "type": "-",
                      "what": Number {
                        "kind": "number",
                        "value": "7904",
                      },
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "546",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Name {
                      "kind": "name",
                      "name": "SEEK_CUR",
                      "resolution": "uqn",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "12456",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "13002",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Name {
                      "kind": "name",
                      "name": "SEEK_SET",
                      "resolution": "uqn",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "0",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "whence_map",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "SEEK_CUR",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "SEEK_SET",
                "resolution": "uqn",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Name {
                "kind": "name",
                "name": "SEEK_END",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "whence_names",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Name {
                "kind": "name",
                "name": "SEEK_CUR",
                "resolution": "uqn",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK_CUR\\"",
                "unicode": false,
                "value": "SEEK_CUR",
              },
            },
            Entry {
              "byRef": false,
              "key": Name {
                "kind": "name",
                "name": "SEEK_SET",
                "resolution": "uqn",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK_SET\\"",
                "unicode": false,
                "value": "SEEK_SET",
              },
            },
            Entry {
              "byRef": false,
              "key": Name {
                "kind": "name",
                "name": "SEEK_END",
                "resolution": "uqn",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK_END\\"",
                "unicode": false,
                "value": "SEEK_END",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "position",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "whence",
              },
              "operator": "=",
              "right": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "whence_map",
                    },
                    Number {
                      "kind": "number",
                      "value": "1",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "array_rand",
                    "resolution": "uqn",
                  },
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "whence_map",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Switch {
            "body": Block {
              "children": Array [
                Case {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Number {
                                "kind": "number",
                                "value": "0",
                              },
                              Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "DATALEN",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "1",
                                },
                                "type": "-",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "rand",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "position",
                          },
                          "operator": "=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Name {
                    "kind": "name",
                    "name": "SEEK_SET",
                    "resolution": "uqn",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "=",
                          "right": Unary {
                            "kind": "unary",
                            "type": "-",
                            "what": Call {
                              "arguments": Array [
                                Number {
                                  "kind": "number",
                                  "value": "0",
                                },
                                Bin {
                                  "kind": "bin",
                                  "left": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "DATALEN",
                                  },
                                  "right": Number {
                                    "kind": "number",
                                    "value": "1",
                                  },
                                  "type": "-",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "rand",
                                "resolution": "uqn",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "position",
                          },
                          "operator": "=",
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "DATALEN",
                            },
                            "right": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            "type": "+",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Name {
                    "kind": "name",
                    "name": "SEEK_END",
                    "resolution": "uqn",
                  },
                },
                Case {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Number {
                                "kind": "number",
                                "value": "0",
                              },
                              Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "DATALEN",
                                },
                                "right": Number {
                                  "kind": "number",
                                  "value": "1",
                                },
                                "type": "-",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "rand",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "operator": "-=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "position",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "position",
                          },
                          "operator": "+=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "case",
                  "test": Name {
                    "kind": "name",
                    "name": "SEEK_CUR",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "switch",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "whence",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "seeks",
                },
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "whence",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "offset",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "position",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "256",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "line_lengths",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1024",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "256",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "64",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "16",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fail_count",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ob_start",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tf",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "rewind",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "rewind",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": List {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "whence",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "position",
                          },
                        },
                      ],
                      "kind": "list",
                      "shortForm": false,
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "seekdata",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "rpb",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tf",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "ftell",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "rr",
                    },
                    "operator": "=",
                    "right": Cast {
                      "expr": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tf",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "whence",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "fseek",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "cast",
                      "raw": "(int)",
                      "type": "int",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "rpa",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tf",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "ftell",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "rline",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tf",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "line_length",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fgets",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Cast {
                    "expr": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "tf",
                        },
                        Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "rline",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strlen",
                              "resolution": "uqn",
                            },
                          },
                        },
                        Name {
                          "kind": "name",
                          "name": "SEEK_CUR",
                          "resolution": "uqn",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fseek",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "cast",
                    "raw": "(int)",
                    "type": "int",
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "upb",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "ftell",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ur",
                    },
                    "operator": "=",
                    "right": Cast {
                      "expr": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "fp",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "whence",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "fseek",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "cast",
                      "raw": "(int)",
                      "type": "int",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "upa",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "ftell",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "uline",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "line_length",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fgets",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Cast {
                    "expr": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                        Unary {
                          "kind": "unary",
                          "type": "-",
                          "what": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "uline",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strlen",
                              "resolution": "uqn",
                            },
                          },
                        },
                        Name {
                          "kind": "name",
                          "name": "SEEK_CUR",
                          "resolution": "uqn",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "fseek",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "cast",
                    "raw": "(int)",
                    "type": "int",
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n--[%d] whence=%s offset=%d line_length=%d position_should_be=%d --\\\\n\\"",
                        "unicode": false,
                        "value": "
--[%d] whence=%s offset=%d line_length=%d position_should_be=%d --
",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "j",
                      },
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "whence",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "whence_names",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "offset",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "line_length",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "position",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"REAL: pos=(%d,%d,%d) ret=%d line[%d]=\`%s'\\\\n\\"",
                        "unicode": false,
                        "value": "REAL: pos=(%d,%d,%d) ret=%d line[%d]=\`%s'
",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "rpb",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "rpa",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tf",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "ftell",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "rr",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "rline",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strlen",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "rline",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"USER: pos=(%d,%d,%d) ret=%d line[%d]=\`%s'\\\\n\\"",
                        "unicode": false,
                        "value": "USER: pos=(%d,%d,%d) ret=%d line[%d]=\`%s'
",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "upb",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "upa",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "fp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "ftell",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ur",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "uline",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strlen",
                          "resolution": "uqn",
                        },
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "uline",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Post {
                          "kind": "post",
                          "type": "+",
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "fail_count",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"###################################### FAIL!\\\\n\\"",
                            "unicode": false,
                            "value": "###################################### FAIL!
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "dat",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fp",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "stream_get_meta_data",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "dat",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Break {
                        "kind": "break",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "rr",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ur",
                          },
                          "type": "!=",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "rline",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "uline",
                          },
                          "type": "!=",
                        },
                        "type": "||",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "rpa",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "position",
                        },
                        "type": "!=",
                      },
                      "type": "||",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "upa",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "position",
                      },
                      "type": "!=",
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "seeks",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "seekdata",
            },
          },
          If {
            "alternate": null,
            "body": Break {
              "kind": "break",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "fail_count",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line_lengths",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "line_length",
      },
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK: FAIL\\\\n\\"",
                "unicode": false,
                "value": "SEEK: FAIL
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ob_end_flush",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ob_end_clean",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK: OK\\\\n\\"",
                "unicode": false,
                "value": "SEEK: OK
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fail_count",
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fail_count",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "DATALEN",
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "/",
          },
          Name {
            "kind": "name",
            "name": "SEEK_SET",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fseek",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "tf",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "DATALEN",
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "/",
          },
          Name {
            "kind": "name",
            "name": "SEEK_SET",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fseek",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SEEK: positions do not match!\\\\n\\"",
                "unicode": false,
                "value": "SEEK: positions do not match!
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftell",
            "resolution": "uqn",
          },
        },
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "tf",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftell",
            "resolution": "uqn",
          },
        },
        "type": "!=",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "n",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uline",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "fp",
                  },
                  Number {
                    "kind": "number",
                    "value": "1024",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fgets",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rline",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tf",
                  },
                  Number {
                    "kind": "number",
                    "value": "1024",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "fgets",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Encapsed {
                              "kind": "encapsed",
                              "raw": "\\"FGETS: FAIL\\\\niter=$n user=$uline [pos=\\" ",
                              "type": "string",
                              "value": Array [
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": "FGETS: FAIL\\\\niter=",
                                    "unicode": false,
                                    "value": "FGETS: FAIL\\\\niter=",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "n",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": " user=",
                                    "unicode": false,
                                    "value": " user=",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "uline",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": "simple",
                                },
                                EncapsedPart {
                                  "curly": false,
                                  "expression": String {
                                    "isDoubleQuote": false,
                                    "kind": "string",
                                    "raw": " [pos=",
                                    "unicode": false,
                                    "value": " [pos=",
                                  },
                                  "kind": "encapsedpart",
                                  "syntax": null,
                                },
                              ],
                            },
                            "right": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "fp",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "ftell",
                                "resolution": "uqn",
                              },
                            },
                            "type": ".",
                          },
                          "right": Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"]\\\\nreal=$rline [pos=\\" ",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "]\\\\nreal=",
                                  "unicode": false,
                                  "value": "]\\\\nreal=",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "rline",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": " [pos=",
                                  "unicode": false,
                                  "value": " [pos=",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                          "type": ".",
                        },
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tf",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "ftell",
                            "resolution": "uqn",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"]\\\\n\\"",
                        "unicode": false,
                        "value": "]
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "+",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "fail_count",
                    },
                  },
                  "kind": "expressionstatement",
                },
                Break {
                  "kind": "break",
                  "level": null,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uline",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "rline",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "feof",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"FGETS: OK\\\\n\\"",
                "unicode": false,
                "value": "FGETS: OK
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fail_count",
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"test://lyrics\\"",
              "unicode": false,
              "value": "test://lyrics",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"a+\\"",
              "unicode": false,
              "value": "a+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "rewind",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "fp",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "ftell",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgets",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "data",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
