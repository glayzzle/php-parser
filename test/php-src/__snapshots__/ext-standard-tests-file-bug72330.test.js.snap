// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #72330 (CSV fields incorrectly split if escape char followed by UTF chars) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "LC_ALL",
            "resolution": "uqn",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"en_US.utf8\\"",
            "unicode": false,
            "value": "en_US.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"en_AU.utf8\\"",
            "unicode": false,
            "value": "en_AU.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ko_KR.utf8\\"",
            "unicode": false,
            "value": "ko_KR.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"zh_CN.utf8\\"",
            "unicode": false,
            "value": "zh_CN.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"de_DE.utf8\\"",
            "unicode": false,
            "value": "de_DE.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"es_EC.utf8\\"",
            "unicode": false,
            "value": "es_EC.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"fr_FR.utf8\\"",
            "unicode": false,
            "value": "fr_FR.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ja_JP.utf8\\"",
            "unicode": false,
            "value": "ja_JP.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"el_GR.utf8\\"",
            "unicode": false,
            "value": "el_GR.utf8",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"nl_NL.utf8\\"",
            "unicode": false,
            "value": "nl_NL.utf8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "setlocale",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "utf_1",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0xD1",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0x81",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "utf_2",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0xD8",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
          "right": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "0x80",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'\\"first #'",
                "unicode": false,
                "value": "\\"first #",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "utf_1",
              },
              "type": ".",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "utf_2",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'\\";\\"second\\"'",
            "unicode": false,
            "value": "\\";\\"second\\"",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fields",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "string",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "';'",
              "unicode": false,
              "value": ";",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'\\"'",
              "unicode": false,
              "value": "\\"",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"#\\"",
              "unicode": false,
              "value": "#",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_getcsv",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fields",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
