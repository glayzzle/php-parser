// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #70211 (php 7 ZEND_HASH_IF_FULL_DO_RESIZE use after free) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "addr",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0x4141414141414141",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "ptr",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "out",
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\"",
                "unicode": false,
                "value": "",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                    "operator": ".=",
                    "right": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ptr",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xff",
                          },
                          "type": "&",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ptr",
                    },
                    "operator": ">>=",
                    "right": Number {
                      "kind": "number",
                      "value": "8",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "8",
                },
                "type": "<",
              },
            ],
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "out",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "ptr2str",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sf",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'1'",
              "unicode": false,
              "value": "1",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'string'",
              "unicode": false,
              "value": "string",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'detail'",
              "unicode": false,
              "value": "detail",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'header'",
              "unicode": false,
              "value": "header",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'line'",
              "unicode": false,
              "value": "line",
            },
            Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"A\\"",
                    "unicode": false,
                    "value": "A",
                  },
                  Number {
                    "kind": "number",
                    "value": "232",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_repeat",
                  "resolution": "uqn",
                },
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "addr",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "ptr2str",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "SoapFault",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ob",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"a:3:{i:0;\\"",
                  "unicode": false,
                  "value": "a:3:{i:0;",
                },
                "right": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sf",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "serialize",
                    "resolution": "uqn",
                  },
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'i:1;R:13;i:2;R:11;}'",
                "unicode": false,
                "value": "i:1;R:13;i:2;R:11;}",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unserialize",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "1",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ob",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
