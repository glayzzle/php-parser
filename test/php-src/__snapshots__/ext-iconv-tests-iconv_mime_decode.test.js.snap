// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests iconv_mime_decode() 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errno",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "errmsg",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "filename",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "linenum",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$errno: $errmsg\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errno",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ": ",
                      "unicode": false,
                      "value": ": ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "errmsg",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "my_error_handler",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'my_error_handler'",
            "unicode": false,
            "value": "my_error_handler",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "set_error_handler",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "header",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "mode",
              },
            ],
            "kind": "global",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "result",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "header",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "mode",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-8\\"",
                    "unicode": false,
                    "value": "UTF-8",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "iconv_mime_decode",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"(%d) \\\\\\"%s\\\\\\"\\\\n\\"",
                  "unicode": false,
                  "value": "(%d) \\"%s\\\\\\"
",
                },
                Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "result",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"UTF-8\\"",
                      "unicode": false,
                      "value": "UTF-8",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "iconv_strlen",
                    "resolution": "uqn",
                  },
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "result",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "do_single_test",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "HERE",
                  "raw": "<<< HERE
Subject: =?ISO-8859-1?Q?Pr=FCfung?=
    =?ISO-8859-1*de_DE?Q?Pr=FCfung?=\\\\t
     =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
HERE
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "Subject: =?ISO-8859-1?Q?Pr=FCfung?=
    =?ISO-8859-1*de_DE?Q?Pr=FCfung?=\\\\t
     =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
",
                        "unicode": false,
                        "value": "Subject: =?ISO-8859-1?Q?Pr=FCfung?=
    =?ISO-8859-1*de_DE?Q?Pr=FCfung?=	
     =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "do_single_test",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "HERE",
                  "raw": "<<< HERE
Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?=20Pr=FCfung?= \\\\t  =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
HERE
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?=20Pr=FCfung?= \\\\t  =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
",
                        "unicode": false,
                        "value": "Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?=20Pr=FCfung?= 	  =?ISO-8859-2?Q?k=F9=D4=F1=D3let?=",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "do_single_test",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "HERE",
                  "raw": "<<< HERE
Subject: =?ISO-8859-1?Q?Pr=FCfung?==?ISO-8859-1*de_DE?Q?Pr=FCfung?==?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
HERE
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "Subject: =?ISO-8859-1?Q?Pr=FCfung?==?ISO-8859-1*de_DE?Q?Pr=FCfung?==?ISO-8859-2?Q?k=F9=D4=F1=D3let?=
",
                        "unicode": false,
                        "value": "Subject: =?ISO-8859-1?Q?Pr=FCfung?==?ISO-8859-1*de_DE?Q?Pr=FCfung?==?ISO-8859-2?Q?k=F9=D4=F1=D3let?=",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "do_single_test",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "HERE",
                  "raw": "<<< HERE
Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?Pr=FCfung??   =?ISO-8859-2?X?k=F9=D4=F1=D3let?=
HERE
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?Pr=FCfung??   =?ISO-8859-2?X?k=F9=D4=F1=D3let?=
",
                        "unicode": false,
                        "value": "Subject: =?ISO-8859-1?Q?Pr=FCfung?= =?ISO-8859-1*de_DE?Q?Pr=FCfung??   =?ISO-8859-2?X?k=F9=D4=F1=D3let?=",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "do_single_test",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Encapsed {
                  "kind": "encapsed",
                  "label": "HERE",
                  "raw": "<<< HERE
From: =?ISO-2022-JP?B?GyRCJTUbKEI=?=
 =?ISO-2022-JP?B?GyRCJXMlVxsoQg==?=
 =?ISO-2022-JP?B?GyRCJWtKOBsoQg==?=
 =?ISO-2022-JP?B?GyRCO3pOcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJTUlcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJVclaxsoQg==?=
 =?ISO-2022-JP?B?GyRCSjg7ehsoQg==?=
 =?ISO-2022-JP?B?GyRCTnNGfBsoQg==?=
 =?ISO-2022-JP?B?GyRCS1w4bBsoQg==?=
 =?ISO-2022-JP?B?GyRCJUYlLRsoQg==?=
 =?ISO-2022-JP?B?GyRCJTklSBsoQg==?=
HERE
",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "From: =?ISO-2022-JP?B?GyRCJTUbKEI=?=
 =?ISO-2022-JP?B?GyRCJXMlVxsoQg==?=
 =?ISO-2022-JP?B?GyRCJWtKOBsoQg==?=
 =?ISO-2022-JP?B?GyRCO3pOcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJTUlcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJVclaxsoQg==?=
 =?ISO-2022-JP?B?GyRCSjg7ehsoQg==?=
 =?ISO-2022-JP?B?GyRCTnNGfBsoQg==?=
 =?ISO-2022-JP?B?GyRCS1w4bBsoQg==?=
 =?ISO-2022-JP?B?GyRCJUYlLRsoQg==?=
 =?ISO-2022-JP?B?GyRCJTklSBsoQg==?=
",
                        "unicode": false,
                        "value": "From: =?ISO-2022-JP?B?GyRCJTUbKEI=?=
 =?ISO-2022-JP?B?GyRCJXMlVxsoQg==?=
 =?ISO-2022-JP?B?GyRCJWtKOBsoQg==?=
 =?ISO-2022-JP?B?GyRCO3pOcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJTUlcxsoQg==?=
 =?ISO-2022-JP?B?GyRCJVclaxsoQg==?=
 =?ISO-2022-JP?B?GyRCSjg7ehsoQg==?=
 =?ISO-2022-JP?B?GyRCTnNGfBsoQg==?=
 =?ISO-2022-JP?B?GyRCS1w4bBsoQg==?=
 =?ISO-2022-JP?B?GyRCJUYlLRsoQg==?=
 =?ISO-2022-JP?B?GyRCJTklSBsoQg==?=",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "do_single_test",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "do_regression_test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mode",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "do_regression_test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mode",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "ICONV_MIME_DECODE_STRICT",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "do_regression_test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mode",
        },
        "operator": "=",
        "right": Name {
          "kind": "name",
          "name": "ICONV_MIME_DECODE_CONTINUE_ON_ERROR",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "do_regression_test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mode",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Name {
            "kind": "name",
            "name": "ICONV_MIME_DECODE_STRICT",
            "resolution": "uqn",
          },
          "right": Name {
            "kind": "name",
            "name": "ICONV_MIME_DECODE_CONTINUE_ON_ERROR",
            "resolution": "uqn",
          },
          "type": "|",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "do_regression_test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
