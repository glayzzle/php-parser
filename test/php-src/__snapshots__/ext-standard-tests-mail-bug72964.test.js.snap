// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #72964 (White space not unfolded for CC/Bcc headers) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/mail_include.inc'",
            "unicode": false,
            "value": "/mail_include.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "username",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "subject",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "default_mailbox",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "password",
              },
            ],
            "kind": "global",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "imap_stream",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "default_mailbox",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "username",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "password",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "imap_open",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Encapsed {
                          "kind": "encapsed",
                          "raw": "\\"Cannot connect to IMAP server $server: \\" ",
                          "type": "string",
                          "value": Array [
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "Cannot connect to IMAP server ",
                                "unicode": false,
                                "value": "Cannot connect to IMAP server ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "server",
                              },
                              "kind": "encapsedpart",
                              "syntax": "simple",
                            },
                            EncapsedPart {
                              "curly": false,
                              "expression": String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": ": ",
                                "unicode": false,
                                "value": ": ",
                              },
                              "kind": "encapsedpart",
                              "syntax": null,
                            },
                          ],
                        },
                        "right": Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "imap_last_error",
                            "resolution": "uqn",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                    "kind": "exit",
                    "useDie": true,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "imap_stream",
              },
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "type": "===",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "found",
              },
              "operator": "=",
              "right": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "repeat_count",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "20",
              },
            },
            "kind": "expressionstatement",
          },
          While {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "sleep",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "num_messages",
                    },
                    "operator": "=",
                    "right": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "Nmsgs",
                      },
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "imap_stream",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "imap_check",
                          "resolution": "uqn",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                For {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "info",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "imap_stream",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "imap_headerinfo",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "imap_stream",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "imap_delete",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "found",
                                },
                                "operator": "=",
                                "right": Boolean {
                                  "kind": "boolean",
                                  "raw": "true",
                                  "value": true,
                                },
                              },
                              "kind": "expressionstatement",
                            },
                            Break {
                              "kind": "break",
                              "level": null,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "subject",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "info",
                            },
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "subject",
                          },
                          "type": "===",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "increment": Array [
                    Post {
                      "kind": "post",
                      "type": "-",
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                    },
                  ],
                  "init": Array [
                    Assign {
                      "kind": "assign",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "operator": "=",
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "num_messages",
                      },
                    },
                  ],
                  "kind": "for",
                  "shortForm": false,
                  "test": Array [
                    Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "type": ">",
                    },
                  ],
                },
                ExpressionStatement {
                  "expression": Post {
                    "kind": "post",
                    "type": "-",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "repeat_count",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "while",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Unary {
                "kind": "unary",
                "type": "!",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "found",
                },
              },
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "repeat_count",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
                "type": ">",
              },
              "type": "&&",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "imap_stream",
                },
                Name {
                  "kind": "name",
                  "name": "CL_EXPUNGE",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "imap_close",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "found",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "find_and_delete_message",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "to",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": "\\"{$users[2]}@$domain\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "2",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "users",
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "@",
                "unicode": false,
                "value": "@",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "domain",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "subject",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "16",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "random_bytes",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "bin2hex",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "message",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'hello'",
          "unicode": false,
          "value": "hello",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "headers",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"From: webmaster@example.com\\\\r\\\\n\\"",
              "unicode": false,
              "value": "From: webmaster@example.com
",
            },
            "right": Encapsed {
              "kind": "encapsed",
              "raw": "\\"Cc: {$users[0]}@$domain,\\\\r\\\\n\\\\t{$users[1]}@$domain\\\\r\\\\n\\"
    ",
              "type": "string",
              "value": Array [
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "Cc: ",
                    "unicode": false,
                    "value": "Cc: ",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "users",
                    },
                  },
                  "kind": "encapsedpart",
                  "syntax": "complex",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "@",
                    "unicode": false,
                    "value": "@",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "domain",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": ",\\\\r\\\\n\\\\t",
                    "unicode": false,
                    "value": ",
	",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "users",
                    },
                  },
                  "kind": "encapsedpart",
                  "syntax": "complex",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "@",
                    "unicode": false,
                    "value": "@",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
                EncapsedPart {
                  "curly": false,
                  "expression": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "domain",
                  },
                  "kind": "encapsedpart",
                  "syntax": "simple",
                },
                EncapsedPart {
                  "curly": false,
                  "expression": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "\\\\r\\\\n",
                    "unicode": false,
                    "value": "",
                  },
                  "kind": "encapsedpart",
                  "syntax": null,
                },
              ],
            },
            "type": ".",
          },
          "right": Encapsed {
            "kind": "encapsed",
            "raw": "\\"Bcc: {$users[2]}@$domain,\\\\r\\\\n {$users[3]}@$domain\\\\r\\\\n\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "Bcc: ",
                  "unicode": false,
                  "value": "Bcc: ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "users",
                  },
                },
                "kind": "encapsedpart",
                "syntax": "complex",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "@",
                  "unicode": false,
                  "value": "@",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "domain",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": ",\\\\r\\\\n ",
                  "unicode": false,
                  "value": ",
 ",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "3",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "users",
                  },
                },
                "kind": "encapsedpart",
                "syntax": "complex",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "@",
                  "unicode": false,
                  "value": "@",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "domain",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "\\\\r\\\\n",
                  "unicode": false,
                  "value": "",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "to",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "subject",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "message",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "headers",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mail",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Message sent OK\\\\n\\"",
                "unicode": false,
                "value": "Message sent OK
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED : Unable to send test email\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED : Unable to send test email
",
              },
              "kind": "exit",
              "useDie": true,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
        "type": "!==",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"TEST PASSED: Message sent and deleted OK\\\\n\\"",
                      "unicode": false,
                      "value": "TEST PASSED: Message sent and deleted OK
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"TEST FAILED: email not delivered\\\\n\\"",
                      "unicode": false,
                      "value": "TEST FAILED: email not delivered
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"$user@$domain\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "user",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "@",
                          "unicode": false,
                          "value": "@",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "domain",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                    ],
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "subject",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "find_and_delete_message",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "users",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "user",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
