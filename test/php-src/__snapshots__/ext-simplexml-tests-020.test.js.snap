// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SimpleXML: Attribute compared to string 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'<root><name attr=\\"foo\\">bar</name></root>'",
              "unicode": false,
              "value": "<root><name attr=\\"foo\\">bar</name></root>",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "simplexml_load_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"attr\\"",
            "unicode": false,
            "value": "attr",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "name",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "doc",
            },
          },
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Error\\\\n\\"",
                "unicode": false,
                "value": "Error
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Print {
              "expression": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Works\\\\n\\"",
                "unicode": false,
                "value": "Works
",
              },
              "kind": "print",
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"attr\\"",
            "unicode": false,
            "value": "attr",
          },
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "name",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "doc",
            },
          },
        },
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"foo\\"",
          "unicode": false,
          "value": "foo",
        },
        "type": "==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
