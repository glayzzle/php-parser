// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Different calling conventions 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "header",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "HEADER",
          "raw": "<<<HEADER
void __cdecl cdecl_func(int arg1, double arg2, char arg3);
void __stdcall stdcall_func(int arg1, double arg2, char arg3);
void __fastcall fastcall_func(int arg1, double arg2, char arg3);
HEADER",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "void __cdecl cdecl_func(int arg1, double arg2, char arg3);
void __stdcall stdcall_func(int arg1, double arg2, char arg3);
void __fastcall fastcall_func(int arg1, double arg2, char arg3);
",
                "unicode": false,
                "value": "void __cdecl cdecl_func(int arg1, double arg2, char arg3);
void __stdcall stdcall_func(int arg1, double arg2, char arg3);
void __fastcall fastcall_func(int arg1, double arg2, char arg3);",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "headername",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/callconv.h'",
            "unicode": false,
            "value": "/callconv.h",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dllname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"/callconv_x86.dll\\"",
            "unicode": false,
            "value": "/callconv_x86.dll",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ffi1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "header",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "dllname",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "cdef",
            },
            "what": Name {
              "kind": "name",
              "name": "FFI",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
          Number {
            "kind": "number",
            "value": "2.3",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "cdecl_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi1",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "4",
          },
          Number {
            "kind": "number",
            "value": "5.6",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'b'",
            "unicode": false,
            "value": "b",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "stdcall_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi1",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "7",
          },
          Number {
            "kind": "number",
            "value": "8.9",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'c'",
            "unicode": false,
            "value": "c",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fastcall_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi1",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "headername",
          },
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"#define FFI_LIB \\\\\\"$dllname\\\\\\"\\\\n$header\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "#define FFI_LIB \\\\\\"",
                  "unicode": false,
                  "value": "#define FFI_LIB \\\\\\"",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "dllname",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "\\\\\\"\\\\n",
                  "unicode": false,
                  "value": "\\\\\\"\\\\n",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "header",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
            ],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ffi2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "headername",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "load",
            },
            "what": Name {
              "kind": "name",
              "name": "FFI",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2",
          },
          Number {
            "kind": "number",
            "value": "3.4",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "cdecl_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi2",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "5",
          },
          Number {
            "kind": "number",
            "value": "6.7",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'b'",
            "unicode": false,
            "value": "b",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "stdcall_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi2",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "8",
          },
          Number {
            "kind": "number",
            "value": "9.1",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'c'",
            "unicode": false,
            "value": "c",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "fastcall_func",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ffi2",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
