// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #45923 (mb_st[r]ripos() offset not handled correctly) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "func",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "haystack",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "needle",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"\\\\n------- $func -----------\\\\n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n------- ",
                      "unicode": false,
                      "value": "
------- ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "func",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " -----------\\\\n\\\\n",
                      "unicode": false,
                      "value": " -----------
",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Foreach {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"> Offset: $offset\\\\n\\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "> Offset: ",
                            "unicode": false,
                            "value": "> Offset: ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "\\\\n",
                            "unicode": false,
                            "value": "",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Try {
                  "always": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "haystack",
                                },
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "needle",
                                },
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "offset",
                                },
                              ],
                              "kind": "call",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "func",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "catches": Array [
                    Catch {
                      "body": Block {
                        "children": Array [
                          Echo {
                            "expressions": Array [
                              Bin {
                                "kind": "bin",
                                "left": Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "getMessage",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "e",
                                    },
                                  },
                                },
                                "right": Name {
                                  "kind": "name",
                                  "name": "\\\\PHP_EOL",
                                  "resolution": "fqn",
                                },
                                "type": ".",
                              },
                            ],
                            "kind": "echo",
                            "shortForm": false,
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "catch",
                      "variable": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                      "what": Array [
                        Name {
                          "kind": "name",
                          "name": "\\\\ValueError",
                          "resolution": "fqn",
                        },
                      ],
                    },
                  ],
                  "kind": "try",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "3",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "6",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "9",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "11",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "12",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "3",
                    },
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "6",
                    },
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Unary {
                    "kind": "unary",
                    "type": "-",
                    "what": Number {
                      "kind": "number",
                      "value": "20",
                    },
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "offset",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "section",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'strpos'",
            "unicode": false,
            "value": "strpos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc abc abc\\"",
            "unicode": false,
            "value": "abc abc abc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc\\"",
            "unicode": false,
            "value": "abc",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mb_strpos'",
            "unicode": false,
            "value": "mb_strpos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆ ●○◆ ●○◆\\"",
            "unicode": false,
            "value": "●○◆ ●○◆ ●○◆",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆\\"",
            "unicode": false,
            "value": "●○◆",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'stripos'",
            "unicode": false,
            "value": "stripos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc abc abc\\"",
            "unicode": false,
            "value": "abc abc abc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc\\"",
            "unicode": false,
            "value": "abc",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mb_stripos'",
            "unicode": false,
            "value": "mb_stripos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆ ●○◆ ●○◆\\"",
            "unicode": false,
            "value": "●○◆ ●○◆ ●○◆",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆\\"",
            "unicode": false,
            "value": "●○◆",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'strrpos'",
            "unicode": false,
            "value": "strrpos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc abc abc\\"",
            "unicode": false,
            "value": "abc abc abc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc\\"",
            "unicode": false,
            "value": "abc",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mb_strrpos'",
            "unicode": false,
            "value": "mb_strrpos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆ ●○◆ ●○◆\\"",
            "unicode": false,
            "value": "●○◆ ●○◆ ●○◆",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆\\"",
            "unicode": false,
            "value": "●○◆",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'strripos'",
            "unicode": false,
            "value": "strripos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc abc abc\\"",
            "unicode": false,
            "value": "abc abc abc",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"abc\\"",
            "unicode": false,
            "value": "abc",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mb_strripos'",
            "unicode": false,
            "value": "mb_strripos",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆ ●○◆ ●○◆\\"",
            "unicode": false,
            "value": "●○◆ ●○◆ ●○◆",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"●○◆\\"",
            "unicode": false,
            "value": "●○◆",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "section",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
