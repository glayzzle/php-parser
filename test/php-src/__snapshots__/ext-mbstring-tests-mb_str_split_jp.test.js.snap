// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests mb_str_split() tests for the japanese language 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'include_path'",
            "unicode": false,
            "value": "include_path",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.'",
            "unicode": false,
            "value": ".",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "ini_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'common.inc'",
          "unicode": false,
          "value": "common.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"日本\\"",
          "unicode": false,
          "value": "日本",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "len",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "2",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "charset",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"BIG-5\\"",
                "unicode": false,
                "value": "BIG-5",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"EUC-JP\\"",
                "unicode": false,
                "value": "EUC-JP",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"ISO-2022-JP\\"",
                "unicode": false,
                "value": "ISO-2022-JP",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"SJIS\\"",
                "unicode": false,
                "value": "SJIS",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-16BE\\"",
                "unicode": false,
                "value": "UTF-16BE",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-16LE\\"",
                "unicode": false,
                "value": "UTF-16LE",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32BE\\"",
                "unicode": false,
                "value": "UTF-32BE",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-32LE\\"",
                "unicode": false,
                "value": "UTF-32LE",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"UTF-8\\"",
                "unicode": false,
                "value": "UTF-8",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "enc",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "string",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "cs",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"UTF-8\\"",
                    "unicode": false,
                    "value": "UTF-8",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mb_convert_encoding",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "split",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "enc",
                  },
                  Number {
                    "kind": "number",
                    "value": "1",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "cs",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "mb_str_split",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ceil",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "len",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          "type": "/",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "ceil",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "enc",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "i",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "cs",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "mb_str_split",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "count",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"$cs WRONG CHUNKS NUMBER: expected/actual: $ceil/$cnt\\\\n\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "cs",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": " WRONG CHUNKS NUMBER: expected/actual: ",
                                  "unicode": false,
                                  "value": " WRONG CHUNKS NUMBER: expected/actual: ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "ceil",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "/",
                                  "unicode": false,
                                  "value": "/",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "cnt",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "\\\\n",
                                  "unicode": false,
                                  "value": "",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ceil",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cnt",
                    },
                    "type": "!=",
                  },
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Pre {
                "kind": "pre",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "len",
                },
                "type": "<=",
              },
            ],
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$cs:\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cs",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ":",
                      "unicode": false,
                      "value": ":",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          For {
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\" \\"",
                        "unicode": false,
                        "value": " ",
                      },
                      "right": OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Number {
                          "kind": "number",
                          "value": "1",
                        },
                        "what": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"H*\\"",
                              "unicode": false,
                              "value": "H*",
                            },
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "i",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "split",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "unpack",
                            "resolution": "uqn",
                          },
                        },
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Pre {
                "kind": "pre",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "len",
                },
                "type": "<",
              },
            ],
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "charset",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "cs",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "size",
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "50000",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "long",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "string",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "size",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_repeat",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "enc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "long",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ISO-2022-JP\\"",
              "unicode": false,
              "value": "ISO-2022-JP",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"UTF-8\\"",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "enc",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "len",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ISO-2022-JP\\"",
              "unicode": false,
              "value": "ISO-2022-JP",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_str_split",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "array",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "count",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Long string splitting error: actual array size: %d expected: %d\\\\n\\"",
              "unicode": false,
              "value": "Long string splitting error: actual array size: %d expected: %d
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "count",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "size",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "size",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "count",
        },
        "type": "!==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "enc",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "string",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ISO-2022-JP\\"",
              "unicode": false,
              "value": "ISO-2022-JP",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"UTF-8\\"",
              "unicode": false,
              "value": "UTF-8",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_convert_encoding",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Long string splitting error:
        last array element: %s expected: %s\\\\n\\"",
                  "unicode": false,
                  "value": "Long string splitting error:
        last array element: %s expected: %s
",
                },
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "what": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"H*\\"",
                        "unicode": false,
                        "value": "H*",
                      },
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "array",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "end",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "unpack",
                      "resolution": "uqn",
                    },
                  },
                },
                OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "what": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"H*\\"",
                        "unicode": false,
                        "value": "H*",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "enc",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "unpack",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "array",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "end",
            "resolution": "uqn",
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "enc",
        },
        "type": "!==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
