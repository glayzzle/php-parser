// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GC 038: Garbage created by compound assignment operators (e.g. +=) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "+=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"+=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "+=\\\\t",
                      "unicode": false,
                      "value": "+=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_add",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_add",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "-=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"-=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "-=\\\\t",
                      "unicode": false,
                      "value": "-=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_sub",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_sub",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "*=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"*=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "*=\\\\t",
                      "unicode": false,
                      "value": "*=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_mul",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_mul",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "/=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"/=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "/=\\\\t",
                      "unicode": false,
                      "value": "/=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_div",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_div",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "%=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"%=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "%=\\\\t",
                      "unicode": false,
                      "value": "%=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_mod",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_mod",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "<<=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"<<=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "<<=\\\\t",
                      "unicode": false,
                      "value": "<<=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_sl",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_sl",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": ">>=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\">>=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ">>=\\\\t",
                      "unicode": false,
                      "value": ">>=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_sr",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_sr",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "|=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"|=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "|=\\\\t",
                      "unicode": false,
                      "value": "|=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_or",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_or",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "&=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"&=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "&=\\\\t",
                      "unicode": false,
                      "value": "&=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_and",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_and",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "^=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"^=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "^=\\\\t",
                      "unicode": false,
                      "value": "^=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_xor",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_xor",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdClass",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "x",
                    },
                    "operator": "**=",
                    "right": Number {
                      "kind": "number",
                      "value": "5",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Unset {
                      "kind": "unset",
                      "variables": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "TypeError",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"**=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "**=\\\\t",
                      "unicode": false,
                      "value": "**=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_pow",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_pow",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"y\\"",
                  "unicode": false,
                  "value": "y",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__toString",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Y",
      },
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "Y",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "x",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
              "operator": "=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Silent {
              "expr": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                "operator": ".=",
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"x\\"",
                  "unicode": false,
                  "value": "x",
                },
              },
              "kind": "silent",
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "n",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "gc_collect_cycles",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\".=\\\\t$n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ".=\\\\t",
                      "unicode": false,
                      "value": ".=	",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "n",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test_concat",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test_concat",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
