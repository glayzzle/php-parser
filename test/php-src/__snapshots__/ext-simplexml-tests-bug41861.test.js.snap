// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #41861 (getNamespaces() returns the namespaces of a node's siblings) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'<root>
    <first_node_no_ns />
    <ns1:node1 xmlns:ns1=\\"#ns1\\" />
    <ns2:node2 xmlns:ns2=\\"#ns2\\" />
    <ns3:node3 xmlns:ns3=\\"#ns3\\" />
    <last_node_no_ns />
</root>'",
              "unicode": false,
              "value": "<root>
    <first_node_no_ns />
    <ns1:node1 xmlns:ns1=\\"#ns1\\" />
    <ns2:node2 xmlns:ns2=\\"#ns2\\" />
    <ns3:node3 xmlns:ns3=\\"#ns3\\" />
    <last_node_no_ns />
</root>",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "simplexml_load_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "name",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getName",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "namespaces",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Boolean {
              "kind": "boolean",
              "raw": "True",
              "value": true,
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getNamespaces",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"root(recursive): '$name' -- namespaces: \\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "root(recursive): '",
                "unicode": false,
                "value": "root(recursive): '",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "name",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "' -- namespaces: ",
                "unicode": false,
                "value": "' -- namespaces: ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "', '",
              "unicode": false,
              "value": ", ",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "namespaces",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "implode",
            "resolution": "uqn",
          },
        },
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "namespaces",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Boolean {
              "kind": "boolean",
              "raw": "False",
              "value": false,
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getNamespaces",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "xml",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"root(non-recursive): '$name' -- namespaces: \\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "root(non-recursive): '",
                "unicode": false,
                "value": "root(non-recursive): '",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "name",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "' -- namespaces: ",
                "unicode": false,
                "value": "' -- namespaces: ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "', '",
              "unicode": false,
              "value": ", ",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "namespaces",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "implode",
            "resolution": "uqn",
          },
        },
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "name",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getName",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "child",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "namespaces",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getNamespaces",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "child",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                Echo {
                  "expressions": Array [
                    Encapsed {
                      "kind": "encapsed",
                      "raw": "\\"children($ns): '$name' -- namespaces: \\"",
                      "type": "string",
                      "value": Array [
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "children(",
                            "unicode": false,
                            "value": "children(",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "ns",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "): '",
                            "unicode": false,
                            "value": "): '",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "name",
                          },
                          "kind": "encapsedpart",
                          "syntax": "simple",
                        },
                        EncapsedPart {
                          "curly": false,
                          "expression": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "' -- namespaces: ",
                            "unicode": false,
                            "value": "' -- namespaces: ",
                          },
                          "kind": "encapsedpart",
                          "syntax": null,
                        },
                      ],
                    },
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "', '",
                          "unicode": false,
                          "value": ", ",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "namespaces",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\n\\"",
                      "unicode": false,
                      "value": "
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ns",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "children",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xml",
                },
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "child",
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Array {
        "items": Array [
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": NullKeyword {
              "kind": "nullkeyword",
              "raw": "null",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'#ns1'",
              "unicode": false,
              "value": "#ns1",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'#ns2'",
              "unicode": false,
              "value": "#ns2",
            },
          },
          Entry {
            "byRef": false,
            "key": null,
            "kind": "entry",
            "unpack": false,
            "value": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'#ns3'",
              "unicode": false,
              "value": "#ns3",
            },
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ns",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
