// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Register Alloction 001: Spilling in "identical" code 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "EXCLUDE_PUBLIC",
              },
              "value": Number {
                "kind": "number",
                "value": "8",
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "EXCLUDE_PRIVATE",
              },
              "value": Number {
                "kind": "number",
                "value": "32",
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "EXCLUDE_STRICT",
              },
              "value": Number {
                "kind": "number",
                "value": "512",
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "a",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "array",
                "raw": "array",
              },
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "filter",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Foreach {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "type",
                              },
                              "operator": "|=",
                              "right": StaticLookup {
                                "kind": "staticlookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "EXCLUDE_PRIVATE",
                                },
                                "what": SelfReference {
                                  "kind": "selfreference",
                                  "raw": "self",
                                },
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "type",
                              },
                              "operator": "|=",
                              "right": StaticLookup {
                                "kind": "staticlookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "EXCLUDE_PUBLIC",
                                },
                                "what": SelfReference {
                                  "kind": "selfreference",
                                  "raw": "self",
                                },
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": Isset {
                          "kind": "isset",
                          "variables": Array [
                            OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "1",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "k",
                              },
                            },
                          ],
                        },
                      },
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": RetIf {
                        "falseExpr": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "type",
                        },
                        "kind": "retif",
                        "test": Bin {
                          "kind": "bin",
                          "left": StaticLookup {
                            "kind": "staticlookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "EXCLUDE_STRICT",
                            },
                            "what": SelfReference {
                              "kind": "selfreference",
                              "raw": "self",
                            },
                          },
                          "parenthesizedExpression": true,
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "filter",
                          },
                          "type": "&",
                        },
                        "trueExpr": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "type",
                          },
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "filter",
                          },
                          "type": "===",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "key": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                "kind": "foreach",
                "shortForm": false,
                "source": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "value": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "filter",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Caster",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
OK",
      "value": "OK",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
