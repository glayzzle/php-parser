// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Dtor may throw exception furing FE_FETCH assignment 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "v",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Class {
            "attrGroups": Array [],
            "body": Array [
              Method {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Throw {
                      "kind": "throw",
                      "what": New {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"foo\\"",
                            "unicode": false,
                            "value": "foo",
                          },
                        ],
                        "kind": "new",
                        "what": Name {
                          "kind": "name",
                          "name": "Exception",
                          "resolution": "uqn",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isAbstract": false,
                "isFinal": false,
                "isStatic": false,
                "kind": "method",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "__destruct",
                },
                "nullable": false,
                "type": null,
                "visibility": "",
              },
            ],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": true,
            "isFinal": false,
            "kind": "class",
            "name": null,
          },
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "v",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
              ],
              "kind": "array",
              "shortForm": true,
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "getMessage",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "e",
                      },
                    },
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "Exception",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
