// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test ArrayObject::uksort() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing ArrayObject::uksort() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing ArrayObject::uksort() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "value1",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "value2",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": If {
              "alternate": Return {
                "expr": Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                "kind": "return",
              },
              "body": Block {
                "children": Array [
                  Return {
                    "expr": Number {
                      "kind": "number",
                      "value": "1",
                    },
                    "kind": "return",
                  },
                ],
                "kind": "block",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value1",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value2",
                },
                "type": "<",
              },
            },
            "body": Block {
              "children": Array [
                Return {
                  "expr": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "kind": "return",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "value1",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "value2",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "cmp",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ao",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "3",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "0",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "2",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "5",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "6",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "3",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "1",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "4",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'cmp'",
            "unicode": false,
            "value": "cmp",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "uksort",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ao",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ao",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
