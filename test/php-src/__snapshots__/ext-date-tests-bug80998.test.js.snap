// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #80998: Missing second with inverted interval 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "date",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'2021-04-05 14:00:00'",
              "unicode": false,
              "value": "2021-04-05 14:00:00",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DateTime",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "interval",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'P0DT10799S'",
              "unicode": false,
              "value": "P0DT10799S",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DateInterval",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "f",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "interval",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "0.999999",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "invert",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "interval",
          },
        },
        "operator": "=",
        "right": Number {
          "kind": "number",
          "value": "1",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "interval",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "add",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "date",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'Y-m-d H:i:s.u'",
              "unicode": false,
              "value": "Y-m-d H:i:s.u",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "format",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "date",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
