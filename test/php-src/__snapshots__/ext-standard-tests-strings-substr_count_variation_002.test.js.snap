// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test substr_count() function (variation - 2) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n*** Testing possible variations ***\\\\n\\"",
          "unicode": false,
          "value": "
*** Testing possible variations ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- complex strings containing other than 7-bit chars --\\\\n\\"",
          "unicode": false,
          "value": "
-- complex strings containing other than 7-bit chars --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "128",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "right": Call {
                      "arguments": Array [
                        Number {
                          "kind": "number",
                          "value": "129",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "chr",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "128",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "chr",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "256",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "chr",
                    "resolution": "uqn",
                  },
                },
                "type": ".",
              },
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "255",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "254",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": Call {
            "arguments": Array [
              Number {
                "kind": "number",
                "value": "255",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chr",
              "resolution": "uqn",
            },
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "128",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "255",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "256",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "chr",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- heredoc string --\\\\n\\"",
          "unicode": false,
          "value": "
-- heredoc string --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOD",
          "raw": "<<<EOD
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
EOD",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
",
                "unicode": false,
                "value": "abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
acdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"abcd\\"",
                "unicode": false,
                "value": "abcd",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"1234\\"",
                "unicode": false,
                "value": "1234",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- heredoc null string --\\\\n\\"",
          "unicode": false,
          "value": "
-- heredoc null string --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOD",
          "raw": "<<<EOD
EOD",
          "type": "heredoc",
          "value": Array [],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\0\\"",
                "unicode": false,
                "value": " ",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\x000\\"",
                "unicode": false,
                "value": " 0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "str",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"0\\"",
                "unicode": false,
                "value": "0",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "substr_count",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
