// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests XMLReader: libxml2 XML Reader, attributes test 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "filename",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/_004.xml'",
            "unicode": false,
            "value": "/_004.xml",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xmlstring",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<books><book num=\\"1\\" idx=\\"2\\">book1</book></books>'",
          "unicode": false,
          "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<books><book num=\\"1\\" idx=\\"2\\">book1</book></books>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xmlstring",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "reader",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "XMLReader",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "filename",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "open",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "reader",
            },
          },
        },
      },
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "name",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "reader",
                        },
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "attr",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "moveToFirstAttribute",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "reader",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      While {
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Bin {
                                  "kind": "bin",
                                  "left": Bin {
                                    "kind": "bin",
                                    "left": String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"   Attribute Name: \\"",
                                      "unicode": false,
                                      "value": "   Attribute Name: ",
                                    },
                                    "right": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "name",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "reader",
                                      },
                                    },
                                    "type": ".",
                                  },
                                  "right": String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"\\\\n\\"",
                                    "unicode": false,
                                    "value": "
",
                                  },
                                  "type": ".",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            Echo {
                              "expressions": Array [
                                Bin {
                                  "kind": "bin",
                                  "left": Bin {
                                    "kind": "bin",
                                    "left": String {
                                      "isDoubleQuote": true,
                                      "kind": "string",
                                      "raw": "\\"   Attribute Value: \\"",
                                      "unicode": false,
                                      "value": "   Attribute Value: ",
                                    },
                                    "right": PropertyLookup {
                                      "kind": "propertylookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "value",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "reader",
                                      },
                                    },
                                    "type": ".",
                                  },
                                  "right": String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"\\\\n\\"",
                                    "unicode": false,
                                    "value": "
",
                                  },
                                  "type": ".",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                            ExpressionStatement {
                              "expression": Assign {
                                "kind": "assign",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "attr",
                                },
                                "operator": "=",
                                "right": Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "moveToNextAttribute",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "reader",
                                    },
                                  },
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "while",
                        "shortForm": false,
                        "test": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "attr",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "nodeType",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "reader",
                        },
                      },
                      "right": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "ELEMENT",
                        },
                        "what": Name {
                          "kind": "name",
                          "name": "XMLREADER",
                          "resolution": "uqn",
                        },
                      },
                      "type": "==",
                    },
                    "right": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "hasAttributes",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "reader",
                      },
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "nodeType",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "reader",
                },
              },
              "right": StaticLookup {
                "kind": "staticlookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "END_ELEMENT",
                },
                "what": Name {
                  "kind": "name",
                  "name": "XMLREADER",
                  "resolution": "uqn",
                },
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "read",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "reader",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "close",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "reader",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "unlink",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
