// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #64342 ZipArchive::addFile() has to check file existence (variation 1) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "zip",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ZipArchive",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/bug64342.zip'",
                "unicode": false,
                "value": "/bug64342.zip",
              },
              "type": ".",
            },
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "CREATE",
              },
              "what": Name {
                "kind": "name",
                "name": "ZipArchive",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "open",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "zip",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"open failed\\\\n\\"",
                "unicode": false,
                "value": "open failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "f",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "uniqid",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "md5",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.txt'",
                  "unicode": false,
                  "value": ".txt",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$f\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "f",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "res",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "f",
                  },
                ],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "addFile",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "zip",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"add failed\\\\n\\"",
                      "unicode": false,
                      "value": "add failed
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"add ok\\\\n\\"",
                      "unicode": false,
                      "value": "add ok
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "res",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "res",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "close",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "zip",
                  },
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"close failed\\\\n\\"",
                      "unicode": false,
                      "value": "close failed
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"close ok\\\\n\\"",
                      "unicode": false,
                      "value": "close ok
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "res",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "res",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "TRUE",
          "value": true,
        },
        "type": "===",
      },
    },
    Inline {
      "kind": "inline",
      "raw": "
DONE",
      "value": "DONE",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
