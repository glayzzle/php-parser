// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests braced complex variable replacement test (nowdoc) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'nowdoc.inc'",
          "unicode": false,
          "value": "nowdoc.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Nowdoc {
          "kind": "nowdoc",
          "label": "ENDOFNOWDOC",
          "raw": "<<<'ENDOFNOWDOC'
This is nowdoc test #s {$a}, {$b}, {$c['c']}, and {$d->d}.
ENDOFNOWDOC",
          "value": "This is nowdoc test #s {$a}, {$b}, {$c['c']}, and {$d->d}.",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "ENDOFNOWDOC",
          "raw": "<<<'ENDOFNOWDOC'
This is nowdoc test #s {$a}, {$b}, {$c['c']}, and {$d->d}.
ENDOFNOWDOC",
          "value": "This is nowdoc test #s {$a}, {$b}, {$c['c']}, and {$d->d}.",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"{$x}\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "x",
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
