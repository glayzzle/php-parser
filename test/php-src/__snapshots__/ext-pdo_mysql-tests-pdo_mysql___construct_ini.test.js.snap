// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests MySQL PDO->__construct() - URI 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mysql_pdo_test.inc'",
            "unicode": false,
            "value": "mysql_pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
        "operator": "=",
        "right": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "values",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ini_get_all",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"pdo.dsn.mysql=%s\\\\n\\"",
                    "unicode": false,
                    "value": "pdo.dsn.mysql=%s
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "dsn",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "found",
                },
                "operator": "=",
                "right": Boolean {
                  "kind": "boolean",
                  "raw": "true",
                  "value": true,
                },
              },
              "kind": "expressionstatement",
            },
            Break {
              "kind": "break",
              "level": null,
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pdo.dsn.mysql'",
            "unicode": false,
            "value": "pdo.dsn.mysql",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "name",
          },
          "type": "==",
        },
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "name",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "values",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "dsn",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "dsn",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'pdo.dsn.mysql'",
                    "unicode": false,
                    "value": "pdo.dsn.mysql",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "ini_get",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "found",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "dsn",
                },
                "parenthesizedExpression": true,
                "right": Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
                "type": "!==",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"pdo.dsn.mysql cannot be accessed through ini_get_all()/ini_get()\\\\n\\"",
              "unicode": false,
              "value": "pdo.dsn.mysql cannot be accessed through ini_get_all()/ini_get()
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Variable {
          "curly": false,
          "kind": "variable",
          "name": "found",
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "user",
                    },
                    "operator": "=",
                    "right": Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_USER",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "pass",
                    },
                    "operator": "=",
                    "right": Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_PASS",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                    "operator": "=",
                    "right": New {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'mysql'",
                          "unicode": false,
                          "value": "mysql",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "user",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pass",
                        },
                      ],
                      "kind": "new",
                      "what": Name {
                        "kind": "name",
                        "name": "PDO",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"[001] %s, [%s] %s\\\\n\\"",
                            "unicode": false,
                            "value": "[001] %s, [%s] %s
",
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          RetIf {
                            "falseExpr": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'n/a'",
                              "unicode": false,
                              "value": "n/a",
                            },
                            "kind": "retif",
                            "test": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              ],
                              "kind": "call",
                              "parenthesizedExpression": true,
                              "what": Name {
                                "kind": "name",
                                "name": "is_object",
                                "resolution": "uqn",
                              },
                            },
                            "trueExpr": Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              },
                            },
                          },
                          RetIf {
                            "falseExpr": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'n/a'",
                              "unicode": false,
                              "value": "n/a",
                            },
                            "kind": "retif",
                            "test": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              ],
                              "kind": "call",
                              "parenthesizedExpression": true,
                              "what": Name {
                                "kind": "name",
                                "name": "is_object",
                                "resolution": "uqn",
                              },
                            },
                            "trueExpr": Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "' '",
                                  "unicode": false,
                                  "value": " ",
                                },
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "db",
                                    },
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "implode",
                                "resolution": "uqn",
                              },
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "printf",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getDSN",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dsn",
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
