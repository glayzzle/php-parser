// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests assert() - variation  - test callback options using ini_get/ini_set/assert_options 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"f1 called\\\\n\\"",
                "unicode": false,
                "value": "f1 called
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f1",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"f2 called\\\\n\\"",
                "unicode": false,
                "value": "f2 called
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f2",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"f3 called\\\\n\\"",
                "unicode": false,
                "value": "f3 called
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "f3",
      },
      "nullable": false,
      "type": null,
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "file",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "line",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "unused",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "desc",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"Class assertion failed $line, \\\\\\"$desc\\\\\\"\\\\n\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "Class assertion failed ",
                          "unicode": false,
                          "value": "Class assertion failed ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "line",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": ", \\\\\\"",
                          "unicode": false,
                          "value": ", \\"",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "desc",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "\\\\\\"\\\\n",
                          "unicode": false,
                          "value": "\\"",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "assert",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "c1",
      },
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Initial values: assert_options(ASSERT_CALLBACK) => [\\"",
              "unicode": false,
              "value": "Initial values: assert_options(ASSERT_CALLBACK) => [",
            },
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Initial values: ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "Initial values: ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Change callback function using ini.set and test return value \\\\n\\"",
          "unicode": false,
          "value": "Change callback function using ini.set and test return value 
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rv",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"f2\\"",
                  "unicode": false,
                  "value": "f2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_set",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"assert_options(ASSERT_CALLBACK) => [\\"",
              "unicode": false,
              "value": "assert_options(ASSERT_CALLBACK) => [",
            },
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Change callback function using assert_options and test return value \\\\n\\"",
          "unicode": false,
          "value": "Change callback function using assert_options and test return value 
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rv",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"f3\\"",
                  "unicode": false,
                  "value": "f3",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"assert_options(ASSERT_CALLBACK) => [\\"",
              "unicode": false,
              "value": "assert_options(ASSERT_CALLBACK) => [",
            },
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Reset the name of the callback routine to a class method and check that it works\\\\n\\"",
          "unicode": false,
          "value": "Reset the name of the callback routine to a class method and check that it works
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"c1\\"",
                  "unicode": false,
                  "value": "c1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"assert_options(ASSERT_CALLBACK) => [\\"",
              "unicode": false,
              "value": "assert_options(ASSERT_CALLBACK) => [",
            },
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\"",
            "unicode": false,
            "value": "]
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Reset callback options to use a class method \\\\n\\"",
          "unicode": false,
          "value": "Reset callback options to use a class method 
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"c1\\"",
                        "unicode": false,
                        "value": "c1",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"assert\\"",
                        "unicode": false,
                        "value": "assert",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rao",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\\\n\\"",
            "unicode": false,
            "value": "]

",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Reset callback options to use an object method \\\\n\\"",
          "unicode": false,
          "value": "Reset callback options to use an object method 
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "o",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "c1",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rc",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
                Array {
                  "items": Array [
                    Entry {
                      "byRef": true,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "o",
                      },
                    },
                    Entry {
                      "byRef": false,
                      "key": null,
                      "kind": "entry",
                      "unpack": false,
                      "value": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"assert\\"",
                        "unicode": false,
                        "value": "assert",
                      },
                    },
                  ],
                  "kind": "array",
                  "shortForm": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rao",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"ini.get(\\\\\\"assert.callback\\\\\\") => [\\"",
              "unicode": false,
              "value": "ini.get(\\"assert.callback\\\\\\") => [",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"assert.callback\\"",
                  "unicode": false,
                  "value": "assert.callback",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "ini_get",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"]\\\\n\\\\n\\"",
            "unicode": false,
            "value": "]

",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "r2",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0",
                  },
                  "type": "!=",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Set callback to something silly\\\\n\\"",
          "unicode": false,
          "value": "Set callback to something silly
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "ASSERT_CALLBACK",
            "resolution": "uqn",
          },
          Number {
            "kind": "number",
            "value": "3.141",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert_options",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "rao",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                Name {
                  "kind": "name",
                  "name": "ASSERT_CALLBACK",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert_options",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
