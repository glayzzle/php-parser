// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests GH-7752: DateTimeZone::getTransitions() does not return enough information 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "tzid",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "string",
            "raw": "string",
          },
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "from",
          },
          "nullable": false,
          "readonly": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "to",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "2.5",
                        },
                        "parenthesizedExpression": true,
                        "right": Number {
                          "kind": "number",
                          "value": "366",
                        },
                        "type": "*",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "24",
                      },
                      "type": "*",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "60",
                    },
                    "type": "*",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "60",
                  },
                  "type": "*",
                },
                "type": "+",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"{$tzid} from @{$from}-@{$to}:\\\\n\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tzid",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " from @",
                      "unicode": false,
                      "value": " from @",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "from",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "-@",
                      "unicode": false,
                      "value": "-@",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "to",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ":\\\\n\\\\n",
                      "unicode": false,
                      "value": ":
",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tz",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tzid",
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "DateTimeZone",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"%12d %s %6d %s %s\\\\n\\"",
                        "unicode": false,
                        "value": "%12d %s %6d %s %s
",
                      },
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'ts'",
                          "unicode": false,
                          "value": "ts",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "t",
                        },
                      },
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'time'",
                          "unicode": false,
                          "value": "time",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "t",
                        },
                      },
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'offset'",
                          "unicode": false,
                          "value": "offset",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "t",
                        },
                      },
                      RetIf {
                        "falseExpr": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\" x \\"",
                          "unicode": false,
                          "value": " x ",
                        },
                        "kind": "retif",
                        "test": OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'isdst'",
                            "unicode": false,
                            "value": "isdst",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "t",
                          },
                        },
                        "trueExpr": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"DST\\"",
                          "unicode": false,
                          "value": "DST",
                        },
                      },
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'abbr'",
                          "unicode": false,
                          "value": "abbr",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "t",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "printf",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "from",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "to",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "getTransitions",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "tz",
                },
              },
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "t",
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"\\\\n\\"",
                "unicode": false,
                "value": "
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "showTransitions",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'Europe/London'",
            "unicode": false,
            "value": "Europe/London",
          },
          Number {
            "kind": "number",
            "value": "1648342200",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "showTransitions",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'America/Los_Angeles'",
            "unicode": false,
            "value": "America/Los_Angeles",
          },
          Number {
            "kind": "number",
            "value": "1648557596",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "showTransitions",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'America/Chicago'",
            "unicode": false,
            "value": "America/Chicago",
          },
          Number {
            "kind": "number",
            "value": "1293861600",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "showTransitions",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'Europe/Paris'",
            "unicode": false,
            "value": "Europe/Paris",
          },
          Number {
            "kind": "number",
            "value": "1645095600",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "showTransitions",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
