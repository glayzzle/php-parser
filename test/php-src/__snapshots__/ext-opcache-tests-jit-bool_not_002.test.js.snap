// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests JIT BOOL_NOT: 002 Incorrect function JIT for MAY_BE_DOUBLE|MAY_BE_UNDEF 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "j",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "2",
              },
            },
            "kind": "expressionstatement",
          },
          For {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "a",
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "a",
                        },
                      },
                      "right": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "a",
                        },
                        "operator": "&=",
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Number {
                              "kind": "number",
                              "value": "74444444",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "444",
                            },
                            "type": "-",
                          },
                          "right": Bin {
                            "kind": "bin",
                            "left": Number {
                              "kind": "number",
                              "value": "4",
                            },
                            "right": Post {
                              "kind": "post",
                              "type": "+",
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "j",
                              },
                            },
                            "type": "-",
                          },
                          "type": ">>",
                        },
                      },
                      "type": "+",
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Break {
                    "kind": "break",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "j",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "14",
                    },
                    "type": ">",
                  },
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
                "operator": "=",
                "right": Bin {
                  "kind": "bin",
                  "left": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                  },
                  "right": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "c",
                      },
                    },
                    "operator": "=",
                    "right": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Number {
                          "kind": "number",
                          "value": "0xfff0001",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "34028236692903846346336",
                        },
                        "type": "/",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "6",
                      },
                      "type": "*",
                    },
                  },
                  "type": "+",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "right": Number {
                  "kind": "number",
                  "value": "10",
                },
                "type": "<",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "test",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "test",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
