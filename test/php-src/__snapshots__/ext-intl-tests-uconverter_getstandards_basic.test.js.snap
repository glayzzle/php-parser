// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Basic UConverter::getStandards() usage 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "assertion",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "msg",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "msg",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "assertion",
              },
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "assertTrue",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "standards",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getStandards",
            },
            "what": Name {
              "kind": "name",
              "name": "UConverter",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "standards",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "is_array",
              "resolution": "uqn",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'$standards must be an array'",
            "unicode": false,
            "value": "$standards must be an array",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assertTrue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "standards",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "count",
                "resolution": "uqn",
              },
            },
            "right": Number {
              "kind": "number",
              "value": "0",
            },
            "type": ">",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'$standards must not be empty'",
            "unicode": false,
            "value": "$standards must not be empty",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assertTrue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "standards",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "standards",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "array_values",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'$standards keys must be numeric'",
            "unicode": false,
            "value": "$standards keys must be numeric",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assertTrue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "standards",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "standards",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "array_unique",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'$standards values must be unique'",
            "unicode": false,
            "value": "$standards values must be unique",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assertTrue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "standards",
              },
              Closure {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "carry",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "item",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "carry",
                        },
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "item",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "is_string",
                            "resolution": "uqn",
                          },
                        },
                        "type": "&&",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": null,
                "uses": Array [],
              },
              Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_reduce",
              "resolution": "uqn",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'$standards values must be strings'",
            "unicode": false,
            "value": "$standards values must be strings",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assertTrue",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
