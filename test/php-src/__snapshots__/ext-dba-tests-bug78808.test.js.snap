// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #78808 ([LMDB] MDB_MAP_FULL: Environment mapsize limit reached) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "handler",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'lmdb'",
          "unicode": false,
          "value": "lmdb",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/test.inc'",
            "unicode": false,
            "value": "/test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "value",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'*'",
              "unicode": false,
              "value": "*",
            },
            Number {
              "kind": "number",
              "value": "0x100000",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_repeat",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "lmdb_h",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "db_filename",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'c'",
              "unicode": false,
              "value": "c",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'lmdb'",
              "unicode": false,
              "value": "lmdb",
            },
            Number {
              "kind": "number",
              "value": "0644",
            },
            Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "5",
              },
              "right": Number {
                "kind": "number",
                "value": "1048576",
              },
              "type": "*",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "dba_open",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'key'",
                    "unicode": false,
                    "value": "key",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "value",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "lmdb_h",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "dba_insert",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "3",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "lmdb_h",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "dba_close",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done\\\\n\\"",
          "unicode": false,
          "value": "done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
