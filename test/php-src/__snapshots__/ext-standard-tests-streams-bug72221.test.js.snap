// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #72221 (Segmentation fault in stream_get_line / zend_memnstr_ex) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"php://memory\\"",
              "unicode": false,
              "value": "php://memory",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"r+\\"",
              "unicode": false,
              "value": "r+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"baad\\"",
                "unicode": false,
                "value": "baad",
              },
              Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1024",
                },
                "type": "*",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "str_repeat",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fwrite",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "rewind",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Number {
                "kind": "number",
                "value": "1024",
              },
              "right": Number {
                "kind": "number",
                "value": "1024",
              },
              "type": "*",
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "*",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"aaaa\\"",
            "unicode": false,
            "value": "aaaa",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "stream_get_line",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
