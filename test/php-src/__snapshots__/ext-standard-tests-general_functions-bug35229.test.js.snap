// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #35229 (call_user_func() crashes when argument stack is nearly full) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"OK\\\\n\\"",
                    "unicode": false,
                    "value": "OK
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "use_stack",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "test2",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Closure {
            "arguments": Array [
              Parameter {
                "attrGroups": Array [],
                "byref": false,
                "flags": 0,
                "kind": "parameter",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "class",
                },
                "nullable": false,
                "readonly": false,
                "type": null,
                "value": null,
                "variadic": false,
              },
            ],
            "attrGroups": Array [],
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'class test1 extends test2 {}'",
                      "unicode": false,
                      "value": "class test1 extends test2 {}",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      Number {
                        "kind": "number",
                        "value": "2",
                      },
                      Number {
                        "kind": "number",
                        "value": "3",
                      },
                      Number {
                        "kind": "number",
                        "value": "4",
                      },
                      Number {
                        "kind": "number",
                        "value": "5",
                      },
                      Number {
                        "kind": "number",
                        "value": "6",
                      },
                      Number {
                        "kind": "number",
                        "value": "7",
                      },
                      Number {
                        "kind": "number",
                        "value": "8",
                      },
                      Number {
                        "kind": "number",
                        "value": "9",
                      },
                      Number {
                        "kind": "number",
                        "value": "10",
                      },
                      Number {
                        "kind": "number",
                        "value": "11",
                      },
                      Number {
                        "kind": "number",
                        "value": "12",
                      },
                      Number {
                        "kind": "number",
                        "value": "13",
                      },
                      Number {
                        "kind": "number",
                        "value": "14",
                      },
                      Number {
                        "kind": "number",
                        "value": "15",
                      },
                      Number {
                        "kind": "number",
                        "value": "16",
                      },
                      Number {
                        "kind": "number",
                        "value": "17",
                      },
                      Number {
                        "kind": "number",
                        "value": "18",
                      },
                      Number {
                        "kind": "number",
                        "value": "19",
                      },
                      Number {
                        "kind": "number",
                        "value": "20",
                      },
                      Number {
                        "kind": "number",
                        "value": "21",
                      },
                      Number {
                        "kind": "number",
                        "value": "22",
                      },
                      Number {
                        "kind": "number",
                        "value": "23",
                      },
                      Number {
                        "kind": "number",
                        "value": "24",
                      },
                      Number {
                        "kind": "number",
                        "value": "25",
                      },
                      Number {
                        "kind": "number",
                        "value": "26",
                      },
                      Number {
                        "kind": "number",
                        "value": "27",
                      },
                      Number {
                        "kind": "number",
                        "value": "28",
                      },
                      Number {
                        "kind": "number",
                        "value": "29",
                      },
                      Number {
                        "kind": "number",
                        "value": "30",
                      },
                    ],
                    "kind": "call",
                    "what": StaticLookup {
                      "kind": "staticlookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "use_stack",
                      },
                      "what": Name {
                        "kind": "name",
                        "name": "test1",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "byref": false,
            "isStatic": false,
            "kind": "closure",
            "nullable": false,
            "type": null,
            "uses": Array [],
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "spl_autoload_register",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'test1'",
                  "unicode": false,
                  "value": "test1",
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'use_stack'",
                  "unicode": false,
                  "value": "use_stack",
                },
              },
            ],
            "kind": "array",
            "shortForm": false,
          },
          Number {
            "kind": "number",
            "value": "1",
          },
          Number {
            "kind": "number",
            "value": "2",
          },
          Number {
            "kind": "number",
            "value": "3",
          },
          Number {
            "kind": "number",
            "value": "4",
          },
          Number {
            "kind": "number",
            "value": "5",
          },
          Number {
            "kind": "number",
            "value": "6",
          },
          Number {
            "kind": "number",
            "value": "7",
          },
          Number {
            "kind": "number",
            "value": "8",
          },
          Number {
            "kind": "number",
            "value": "9",
          },
          Number {
            "kind": "number",
            "value": "10",
          },
          Number {
            "kind": "number",
            "value": "11",
          },
          Number {
            "kind": "number",
            "value": "12",
          },
          Number {
            "kind": "number",
            "value": "13",
          },
          Number {
            "kind": "number",
            "value": "14",
          },
          Number {
            "kind": "number",
            "value": "15",
          },
          Number {
            "kind": "number",
            "value": "16",
          },
          Number {
            "kind": "number",
            "value": "17",
          },
          Number {
            "kind": "number",
            "value": "18",
          },
          Number {
            "kind": "number",
            "value": "19",
          },
          Number {
            "kind": "number",
            "value": "20",
          },
          Number {
            "kind": "number",
            "value": "21",
          },
          Number {
            "kind": "number",
            "value": "22",
          },
          Number {
            "kind": "number",
            "value": "23",
          },
          Number {
            "kind": "number",
            "value": "24",
          },
          Number {
            "kind": "number",
            "value": "25",
          },
          Number {
            "kind": "number",
            "value": "26",
          },
          Number {
            "kind": "number",
            "value": "27",
          },
          Number {
            "kind": "number",
            "value": "28",
          },
          Number {
            "kind": "number",
            "value": "29",
          },
          Number {
            "kind": "number",
            "value": "30",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "call_user_func",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
