// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #74159: Writing a large buffer to non-blocking encrypted streams fails 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug74159.pem.tmp'",
            "unicode": false,
            "value": "bug74159.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cacertFile",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'bug74159-ca.pem.tmp'",
            "unicode": false,
            "value": "bug74159-ca.pem.tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    $serverUri = \\"ssl://127.0.0.1:10012\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_SERVER,
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $client = stream_socket_accept($server, 1);
    if (!$client) {
        exit();
    }
    $data = '';
    while (strlen($data) < 0xfffff) {
        $buffer = fread($client, 8192);
        if (empty($buffer)) {
            exit();
        }
        $data .= $buffer;
        usleep(100);
    }
    fclose($client);
CODE",
          "value": "    $serverUri = \\"ssl://127.0.0.1:10012\\";
    $serverFlags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN;
    $serverCtx = stream_context_create(['ssl' => [
        'local_cert' => '%s',
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_SERVER,
    ]]);
    $server = stream_socket_server($serverUri, $errno, $errstr, $serverFlags, $serverCtx);
    phpt_notify();
    $client = stream_socket_accept($server, 1);
    if (!$client) {
        exit();
    }
    $data = '';
    while (strlen($data) < 0xfffff) {
        $buffer = fread($client, 8192);
        if (empty($buffer)) {
            exit();
        }
        $data .= $buffer;
        usleep(100);
    }
    fclose($client);",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "serverCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "serverCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "certFile",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "peerName",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'bug74159'",
          "unicode": false,
          "value": "bug74159",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
    function streamRead($stream) : int {
        return strlen(fread($stream, 8192));
    }
    function streamWrite($stream, $data) : int {
        return fwrite($stream, $data);
    }
    function waitForWrite(...$streams) : bool {
        $read = null;
        $except = null;
        while($streams && !($n = stream_select($read, $streams, $except, 1)));
        return $n > 0;
    }
    function waitForRead(...$streams) : bool {
        $write = null;
        $except = null;
        while ($streams && !($n = stream_select($streams, $write, $except, 1)));
        return $n > 0;
    }
    set_error_handler(function ($errno, $errstr) {
        exit(\\"$errstr\\\\n\\");
    });
    $serverUri = \\"tcp://127.0.0.1:10012\\";
    $clientFlags = STREAM_CLIENT_CONNECT;
    $clientCtx = stream_context_create(['ssl' => [
        'verify_peer' => true,
        'cafile' => '%s',
        'peer_name' => '%s',
    ]]);
    phpt_wait();
    $fp = stream_socket_client($serverUri, $errno, $errstr, 1, $clientFlags, $clientCtx);
    stream_set_blocking($fp, false);
    while (0 === ($n = stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT)));
    $data = str_repeat(\\"a\\", 0xfffff);
    $written = 0;
    $total = $written;
    while(!empty($data)) {
        $written = streamWrite($fp, $data);
        $total += $written;
        $data = substr($data, $written);
        waitForWrite($fp);
    }
    printf(\\"Written %%d bytes\\\\n\\", $total);
    while(waitForRead($fp)) {
        streamRead($fp);
        if (feof($fp)) {
            break;
        }
    }
    exit(\\"DONE\\\\n\\");
CODE",
          "value": "    function streamRead($stream) : int {
        return strlen(fread($stream, 8192));
    }
    function streamWrite($stream, $data) : int {
        return fwrite($stream, $data);
    }
    function waitForWrite(...$streams) : bool {
        $read = null;
        $except = null;
        while($streams && !($n = stream_select($read, $streams, $except, 1)));
        return $n > 0;
    }
    function waitForRead(...$streams) : bool {
        $write = null;
        $except = null;
        while ($streams && !($n = stream_select($streams, $write, $except, 1)));
        return $n > 0;
    }
    set_error_handler(function ($errno, $errstr) {
        exit(\\"$errstr\\\\n\\");
    });
    $serverUri = \\"tcp://127.0.0.1:10012\\";
    $clientFlags = STREAM_CLIENT_CONNECT;
    $clientCtx = stream_context_create(['ssl' => [
        'verify_peer' => true,
        'cafile' => '%s',
        'peer_name' => '%s',
    ]]);
    phpt_wait();
    $fp = stream_socket_client($serverUri, $errno, $errstr, 1, $clientFlags, $clientCtx);
    stream_set_blocking($fp, false);
    while (0 === ($n = stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT)));
    $data = str_repeat(\\"a\\", 0xfffff);
    $written = 0;
    $total = $written;
    while(!empty($data)) {
        $written = streamWrite($fp, $data);
        $total += $written;
        $data = substr($data, $written);
        waitForWrite($fp);
    }
    printf(\\"Written %%d bytes\\\\n\\", $total);
    while(waitForRead($fp)) {
        streamRead($fp);
        if (feof($fp)) {
            break;
        }
    }
    exit(\\"DONE\\\\n\\");",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clientCode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "clientCode",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cacertFile",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "peerName",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sprintf",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'CertificateGenerator.inc'",
          "unicode": false,
          "value": "CertificateGenerator.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "certificateGenerator",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "CertificateGenerator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "cacertFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveCaCert",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "peerName",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "certFile",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "saveNewCertAsFileWithKey",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "certificateGenerator",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'ServerClientTestCase.inc'",
          "unicode": false,
          "value": "ServerClientTestCase.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clientCode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "serverCode",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "run",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getInstance",
              },
              "what": Name {
                "kind": "name",
                "name": "ServerClientTestCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
