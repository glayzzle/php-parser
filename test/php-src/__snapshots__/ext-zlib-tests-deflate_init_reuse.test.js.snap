// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test incremental deflate_init() context reuse 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "resource",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "ZLIB_ENCODING_DEFLATE",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "deflate_init",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "resource",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "char",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "deflate_add",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"a\\"",
            "unicode": false,
            "value": "a",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"z\\"",
            "unicode": false,
            "value": "z",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "range",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "char",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "resource",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
          Name {
            "kind": "name",
            "name": "ZLIB_FINISH",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "deflate_add",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "uncompressed",
        },
        "operator": "=",
        "right": Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "compressed",
          },
          "operator": "=",
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\"",
            "unicode": false,
            "value": "",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "uncompressed",
              },
              "operator": ".=",
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "char",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "compressed",
              },
              "operator": ".=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "resource",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "char",
                  },
                  Name {
                    "kind": "name",
                    "name": "ZLIB_NO_FLUSH",
                    "resolution": "uqn",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "deflate_add",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"a\\"",
            "unicode": false,
            "value": "a",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"z\\"",
            "unicode": false,
            "value": "z",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "range",
          "resolution": "uqn",
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "char",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "compressed",
        },
        "operator": ".=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "resource",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            Name {
              "kind": "name",
              "name": "ZLIB_FINISH",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "deflate_add",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "uncompressed",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "compressed",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "zlib_decode",
                "resolution": "uqn",
              },
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
