// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test print() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing print() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing print() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 1 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 1 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "\\"Hello World\\"",
          "unicode": false,
          "value": "Hello World",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 2 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 2 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"print() also works without parentheses.\\"",
          "unicode": false,
          "value": "print() also works without parentheses.",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 3 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 3 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"This spans
multiple lines. The newlines will be
output as well\\"",
          "unicode": false,
          "value": "This spans
multiple lines. The newlines will be
output as well",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 4 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 4 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"This also spans\\\\nmultiple lines. The newlines will be\\\\noutput as well.\\"",
          "unicode": false,
          "value": "This also spans
multiple lines. The newlines will be
output as well.",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 5 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 5 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"escaping characters is done \\\\\\"Like this\\\\\\".\\"",
          "unicode": false,
          "value": "escaping characters is done \\"Like this\\\\\\".",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"foobar\\"",
          "unicode": false,
          "value": "foobar",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"barbaz\\"",
          "unicode": false,
          "value": "barbaz",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 6 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 6 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"foo is $foo\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "foo is ",
                "unicode": false,
                "value": "foo is ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"value\\"",
                "unicode": false,
                "value": "value",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"foo\\"",
                "unicode": false,
                "value": "foo",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 7 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 7 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "raw": "\\"this is {$bar['value']} !\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "this is ",
                "unicode": false,
                "value": "this is ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": OffsetLookup {
                "kind": "offsetlookup",
                "offset": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'value'",
                  "unicode": false,
                  "value": "value",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "bar",
                },
              },
              "kind": "encapsedpart",
              "syntax": "complex",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " !",
                "unicode": false,
                "value": " !",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 8 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 8 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'foo is $foo'",
          "unicode": false,
          "value": "foo is $foo",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 9 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 9 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Iteration 10 --\\\\n\\"",
          "unicode": false,
          "value": "
-- Iteration 10 --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "variable",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"VARIABLE\\"",
          "unicode": false,
          "value": "VARIABLE",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": Encapsed {
          "kind": "encapsed",
          "label": "END",
          "raw": "<<<END
This uses the \\"here document\\" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!\\\\n
END",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "This uses the \\"here document\\" syntax to output
multiple lines with ",
                "unicode": false,
                "value": "This uses the \\"here document\\" syntax to output
multiple lines with ",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "variable",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!\\\\n
",
                "unicode": false,
                "value": " interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!
",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
