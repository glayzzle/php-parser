// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests PDO::ATTR_SERVER_VERSION 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mysql_pdo_test.inc'",
            "unicode": false,
            "value": "mysql_pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
              "parenthesizedExpression": true,
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errorCode",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
              "type": "==",
            },
            "right": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'00000'",
                "unicode": false,
                "value": "00000",
              },
              "parenthesizedExpression": true,
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "errorCode",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "db",
                  },
                },
              },
              "type": "==",
            },
            "type": "||",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "version",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "ATTR_SERVER_VERSION",
              },
              "what": Name {
                "kind": "name",
                "name": "PDO",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getAttribute",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[001] Server version must not be empty\\\\n\\"",
              "unicode": false,
              "value": "[001] Server version must not be empty
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "''",
          "unicode": false,
          "value": "",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "version",
        },
        "type": "==",
      },
    },
    If {
      "alternate": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "major",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "version",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "10000",
                      },
                      "type": "/",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "floor",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "minor",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "version",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "main",
                          },
                          "parenthesizedExpression": true,
                          "right": Number {
                            "kind": "number",
                            "value": "10000",
                          },
                          "type": "*",
                        },
                        "type": "-",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "100",
                      },
                      "type": "/",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "floor",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "sub",
                },
                "operator": "=",
                "right": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "version",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "main",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "10000",
                      },
                      "type": "*",
                    },
                    "type": "-",
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "minor",
                    },
                    "parenthesizedExpression": true,
                    "right": Number {
                      "kind": "number",
                      "value": "100",
                    },
                    "type": "*",
                  },
                  "type": "-",
                },
              },
              "kind": "expressionstatement",
            },
            If {
              "alternate": null,
              "body": ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[006] Strange major version: '%s'. Should be more than 3\\\\n\\"",
                      "unicode": false,
                      "value": "[006] Strange major version: '%s'. Should be more than 3
",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "major",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "major",
                },
                "right": Number {
                  "kind": "number",
                  "value": "3",
                },
                "type": "<",
              },
            },
            If {
              "alternate": null,
              "body": ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[007] Minor version should be at least 0, got '%s'\\\\n\\"",
                      "unicode": false,
                      "value": "[007] Minor version should be at least 0, got '%s'
",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "minor",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "minor",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
                "type": "<",
              },
            },
            If {
              "alternate": null,
              "body": ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[008] Sub version should be at least 0, got '%s'\\\\n\\"",
                      "unicode": false,
                      "value": "[008] Sub version should be at least 0, got '%s'
",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "sub",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
              "kind": "if",
              "shortForm": false,
              "test": Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "sub",
                },
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
                "type": "<",
              },
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "version",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "is_int",
            "resolution": "uqn",
          },
        },
      },
      "body": Block {
        "children": Array [
          If {
            "alternate": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[003] Strange major version: '%s'. Should be more than 3\\\\n\\"",
                          "unicode": false,
                          "value": "[003] Strange major version: '%s'. Should be more than 3
",
                        },
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "matches",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "3",
                    },
                    "type": "<",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[004] Minor version should be at least 0, got '%s'\\\\n\\"",
                          "unicode": false,
                          "value": "[004] Minor version should be at least 0, got '%s'
",
                        },
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "2",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "matches",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "2",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "type": "<",
                  },
                },
                If {
                  "alternate": null,
                  "body": ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"[005] Sub version should be at least 0, got '%s'\\\\n\\"",
                          "unicode": false,
                          "value": "[005] Sub version should be at least 0, got '%s'
",
                        },
                        OffsetLookup {
                          "kind": "offsetlookup",
                          "offset": Number {
                            "kind": "number",
                            "value": "2",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "matches",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "printf",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "3",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "matches",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "type": "<",
                  },
                },
              ],
              "kind": "block",
            },
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[002] Client version string seems wrong, got '%s'\\\\n\\"",
                    "unicode": false,
                    "value": "[002] Client version string seems wrong, got '%s'
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "version",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(.*)/'",
                    "unicode": false,
                    "value": "/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(.*)/",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "version",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "matches",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "preg_match",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "version",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "is_string",
          "resolution": "uqn",
        },
      },
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[009] Wonderful, I can change the client version!\\\\n\\"",
              "unicode": false,
              "value": "[009] Wonderful, I can change the client version!
",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Boolean {
          "kind": "boolean",
          "raw": "false",
          "value": false,
        },
        "right": Call {
          "arguments": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "ATTR_CLIENT_VERSION",
              },
              "what": Name {
                "kind": "name",
                "name": "PDO",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'1.0'",
              "unicode": false,
              "value": "1.0",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "setAttribute",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
        "type": "!==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "new_version",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "ATTR_SERVER_VERSION",
              },
              "what": Name {
                "kind": "name",
                "name": "PDO",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getAttribute",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": ExpressionStatement {
        "expression": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"[010] Did we change it from '%s' to '%s'?\\\\n\\"",
              "unicode": false,
              "value": "[010] Did we change it from '%s' to '%s'?
",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "version",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "new_version",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "printf",
            "resolution": "uqn",
          },
        },
        "kind": "expressionstatement",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "new_version",
        },
        "right": Variable {
          "curly": false,
          "kind": "variable",
          "name": "version",
        },
        "type": "!==",
      },
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
