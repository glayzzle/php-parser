// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test mb_ereg() function : usage variations - different regex features in $pattern 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing mb_ereg() : usage variations ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing mb_ereg() : usage variations ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Could not set regex encoding to utf-8\\\\n\\"",
                "unicode": false,
                "value": "Could not set regex encoding to utf-8
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Regex encoding set to utf-8\\\\n\\"",
                "unicode": false,
                "value": "Regex encoding set to utf-8
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'utf-8'",
              "unicode": false,
              "value": "utf-8",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "mb_regex_encoding",
            "resolution": "uqn",
          },
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
        "type": "==",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string_ascii",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'This is an English string. 0123456789.'",
          "unicode": false,
          "value": "This is an English string. 0123456789.",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex_ascii",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'([A-Z]\\\\w{1,4}is( [aeiou]|h)) ?.*\\\\.\\\\s[0-9]+(5([6-9][79]){2})[[:punct:]]$'",
          "unicode": false,
          "value": "([A-Z]\\\\w{1,4}is( [aeiou]|h)) ?.*\\\\.\\\\s[0-9]+(5([6-9][79]){2})[[:punct:]]$",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex_ascii",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string_ascii",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regs_ascii",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mb_ereg",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "regs_ascii",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "base64_encode_var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string_mb",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'zpHPhc+Ez4wgzrXOr869zrHOuSDOtc67zrvOt869zrnOus+MIM66zrXOr868zrXOvc6/LiAwMTIzNDU2Nzg5Lg=='",
              "unicode": false,
              "value": "zpHPhc+Ez4wgzrXOr869zrHOuSDOtc67zrvOt869zrnOus+MIM66zrXOr868zrXOvc6/LiAwMTIzNDU2Nzg5Lg==",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "regex_mb",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"W86RLc6pXShcdysgKSvOtVvOsS3PiVxzXSvOui4qKM+MfM6/KS4qXC5cc1swLTldKyg1KFs2LTldWzc5XSl7Mn0pW1s6cHVuY3Q6XV0k\\"",
              "unicode": false,
              "value": "W86RLc6pXShcdysgKSvOtVvOsS3PiVxzXSvOui4qKM+MfM6/KS4qXC5cc1swLTldKyg1KFs2LTldWzc5XSl7Mn0pW1s6cHVuY3Q6XV0k",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regex_mb",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "string_mb",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "regs_mb",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "mb_ereg",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "regs_mb",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "base64_encode_var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "regs",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"NULL\\\\n\\"",
                      "unicode": false,
                      "value": "NULL
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"array(\\"",
                          "unicode": false,
                          "value": "array(",
                        },
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "regs",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "count",
                            "resolution": "uqn",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\") {\\\\n\\"",
                        "unicode": false,
                        "value": ") {
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Foreach {
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"  [$key]=>\\\\n  \\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "  [",
                                  "unicode": false,
                                  "value": "  [",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "key",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "]=>\\\\n  ",
                                  "unicode": false,
                                  "value": "]=>
  ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      If {
                        "alternate": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "value",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_dump",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "value",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "base64_encode",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "var_dump",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "value",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "is_string",
                            "resolution": "uqn",
                          },
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "key": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "key",
                  },
                  "kind": "foreach",
                  "shortForm": false,
                  "source": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "regs",
                  },
                  "value": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "value",
                  },
                },
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"}\\\\n\\"",
                      "unicode": false,
                      "value": "}
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Variable {
              "curly": false,
              "kind": "variable",
              "name": "regs",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "base64_encode_var_dump",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\"",
          "unicode": false,
          "value": "Done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
