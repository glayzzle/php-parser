// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test function pcntl_rfork() with no wait flag. 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Test by with child not reporting to the parent ***\\\\n\\"",
          "unicode": false,
          "value": "*** Test by with child not reporting to the parent ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Name {
                "kind": "name",
                "name": "RFNOWAIT",
                "resolution": "uqn",
              },
              "right": Name {
                "kind": "name",
                "name": "RFTSIGZMB",
                "resolution": "uqn",
              },
              "type": "|",
            },
            Name {
              "kind": "name",
              "name": "SIGUSR1",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pcntl_rfork",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sleep",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": ">",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
