// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests MySQL PDO->exec(), affected rows 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "offset",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": true,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "db",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "sql",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "exp",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": NullKeyword {
            "kind": "nullkeyword",
            "raw": "NULL",
          },
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ret",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "sql",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "exec",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s\\\\n\\"",
                              "unicode": false,
                              "value": "[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "offset",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "exp",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "exp",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "ret",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "ret",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "gettype",
                                "resolution": "uqn",
                              },
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "sql",
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "' '",
                                  "unicode": false,
                                  "value": " ",
                                },
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "db",
                                    },
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "implode",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      Return {
                        "expr": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                        "kind": "return",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "exp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "is_null",
                          "resolution": "uqn",
                        },
                      },
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "ret",
                      },
                      "parenthesizedExpression": true,
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "exp",
                      },
                      "type": "!==",
                    },
                    "type": "&&",
                  },
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"[%03d] '%s' has failed, [%s] %s\\\\n\\"",
                            "unicode": false,
                            "value": "[%03d] '%s' has failed, [%s] %s
",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "offset",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "sql",
                          },
                          Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "errorCode",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "db",
                              },
                            },
                          },
                          Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": false,
                                "kind": "string",
                                "raw": "' '",
                                "unicode": false,
                                "value": " ",
                              },
                              Call {
                                "arguments": Array [],
                                "kind": "call",
                                "what": PropertyLookup {
                                  "kind": "propertylookup",
                                  "offset": Identifier {
                                    "kind": "identifier",
                                    "name": "errorInfo",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "db",
                                  },
                                },
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "implode",
                              "resolution": "uqn",
                            },
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "printf",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Return {
            "expr": Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "exec_and_count",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Magic {
              "kind": "magic",
              "raw": "__DIR__",
              "value": "__DIR__",
            },
            "right": Name {
              "kind": "name",
              "name": "DIRECTORY_SEPARATOR",
              "resolution": "uqn",
            },
            "type": ".",
          },
          "parenthesizedExpression": true,
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'mysql_pdo_test.inc'",
            "unicode": false,
            "value": "mysql_pdo_test.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "db",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "factory",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "db",
              },
            ],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "detect_transactional_mysql_engine",
              },
              "what": Name {
                "kind": "name",
                "name": "MySQLPDOTest",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "createTestTable",
          },
          "what": Name {
            "kind": "name",
            "name": "MySQLPDOTest",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "2",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE IF EXISTS test'",
                  "unicode": false,
                  "value": "DROP TABLE IF EXISTS test",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "3",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s'",
                      "unicode": false,
                      "value": "CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s",
                    },
                    Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_ENGINE",
                      "resolution": "uqn",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "4",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, col1) VALUES (1, 'a')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, col1) VALUES (1, 'a')",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "5",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, col1) VALUES (2, 'b'), (3, 'c')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, col1) VALUES (2, 'b'), (3, 'c')",
                },
                Number {
                  "kind": "number",
                  "value": "2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "6",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"UPDATE test SET id = 4 WHERE id = 3\\"",
                  "unicode": false,
                  "value": "UPDATE test SET id = 4 WHERE id = 3",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "7",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, col1) VALUES (1, 'd') ON DUPLICATE KEY UPDATE id = 3\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, col1) VALUES (1, 'd') ON DUPLICATE KEY UPDATE id = 3",
                },
                Number {
                  "kind": "number",
                  "value": "2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "8",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"UPDATE test SET id = 5 WHERE id = 5\\"",
                  "unicode": false,
                  "value": "UPDATE test SET id = 5 WHERE id = 5",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "9",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, col1) VALUES (5, 'e') ON DUPLICATE KEY UPDATE id = 6\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, col1) VALUES (5, 'e') ON DUPLICATE KEY UPDATE id = 6",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "10",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"REPLACE INTO test(id, col1) VALUES (5, 'f')\\"",
                  "unicode": false,
                  "value": "REPLACE INTO test(id, col1) VALUES (5, 'f')",
                },
                Number {
                  "kind": "number",
                  "value": "2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "11",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"REPLACE INTO test(id, col1) VALUES (6, 'g')\\"",
                  "unicode": false,
                  "value": "REPLACE INTO test(id, col1) VALUES (6, 'g')",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "12",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DELETE FROM test WHERE id > 2'",
                  "unicode": false,
                  "value": "DELETE FROM test WHERE id > 2",
                },
                Number {
                  "kind": "number",
                  "value": "4",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "13",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'DROP TABLE test'",
                  "unicode": false,
                  "value": "DROP TABLE test",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "14",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'SET @myvar = 1'",
                  "unicode": false,
                  "value": "SET @myvar = 1",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "15",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'THIS IS NOT VALID SQL, I HOPE'",
                  "unicode": false,
                  "value": "THIS IS NOT VALID SQL, I HOPE",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "false",
                  "value": false,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[016] [%s] %s\\\\n\\"",
                  "unicode": false,
                  "value": "[016] [%s] %s
",
                },
                Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "errorCode",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                  },
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "' '",
                      "unicode": false,
                      "value": " ",
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorInfo",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "implode",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "36",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s'",
                      "unicode": false,
                      "value": "CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s",
                    },
                    Name {
                      "kind": "name",
                      "name": "PDO_MYSQL_TEST_ENGINE",
                      "resolution": "uqn",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "37",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"INSERT INTO test(id, col1) VALUES (1, 'a')\\"",
                  "unicode": false,
                  "value": "INSERT INTO test(id, col1) VALUES (1, 'a')",
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "38",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'TRUNCATE TABLE test'",
                  "unicode": false,
                  "value": "TRUNCATE TABLE test",
                },
                NullKeyword {
                  "kind": "nullkeyword",
                  "raw": "NULL",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec_and_count",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[001] %s, [%s] %s\\\\n\\"",
                      "unicode": false,
                      "value": "[001] %s, [%s] %s
",
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorCode",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "' '",
                          "unicode": false,
                          "value": " ",
                        },
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "errorInfo",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "db",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "PDOException",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ignore_exception",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "18",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'DROP PROCEDURE IF EXISTS p'",
                        "unicode": false,
                        "value": "DROP PROCEDURE IF EXISTS p",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "19",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'CREATE PROCEDURE p(OUT ver_param VARCHAR(255)) BEGIN SELECT VERSION() INTO ver_param; END;'",
                        "unicode": false,
                        "value": "CREATE PROCEDURE p(OUT ver_param VARCHAR(255)) BEGIN SELECT VERSION() INTO ver_param; END;",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ignore_exception",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "20",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'CALL p(@version)'",
                        "unicode": false,
                        "value": "CALL p(@version)",
                      },
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT @version AS p_version'",
                          "unicode": false,
                          "value": "SELECT @version AS p_version",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "query",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "p_version",
                          },
                          "operator": "=",
                          "right": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'p_version'",
                              "unicode": false,
                              "value": "p_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[022] Data seems wrong, dumping\\\\n\\"",
                              "unicode": false,
                              "value": "[022] Data seems wrong, dumping
",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tmp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "count",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": ">",
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'p_version'",
                              "unicode": false,
                              "value": "p_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        ],
                      },
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT VERSION() AS _version'",
                          "unicode": false,
                          "value": "SELECT VERSION() AS _version",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "query",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[024] Found different version strings, SP returned '%s'/%s, SELECT returned '%s'/%s\\\\n\\"",
                                    "unicode": false,
                                    "value": "[024] Found different version strings, SP returned '%s'/%s, SELECT returned '%s'/%s
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "p_version",
                                  },
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "p_version",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "gettype",
                                      "resolution": "uqn",
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'_version'",
                                      "unicode": false,
                                      "value": "_version",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": Number {
                                        "kind": "number",
                                        "value": "0",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "tmp",
                                      },
                                    },
                                  },
                                  Call {
                                    "arguments": Array [
                                      OffsetLookup {
                                        "kind": "offsetlookup",
                                        "offset": String {
                                          "isDoubleQuote": false,
                                          "kind": "string",
                                          "raw": "'_version'",
                                          "unicode": false,
                                          "value": "_version",
                                        },
                                        "what": OffsetLookup {
                                          "kind": "offsetlookup",
                                          "offset": Number {
                                            "kind": "number",
                                            "value": "0",
                                          },
                                          "what": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "tmp",
                                          },
                                        },
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "gettype",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "p_version",
                          },
                          "right": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'_version'",
                              "unicode": false,
                              "value": "_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                          "type": "!==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[023] Data seems wrong, dumping\\\\n\\"",
                              "unicode": false,
                              "value": "[023] Data seems wrong, dumping
",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tmp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "count",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": ">",
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'_version'",
                              "unicode": false,
                              "value": "_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        ],
                      },
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "25",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'DROP PROCEDURE IF EXISTS p'",
                        "unicode": false,
                        "value": "DROP PROCEDURE IF EXISTS p",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[021] %s, [%s] %s\\\\n\\"",
                              "unicode": false,
                              "value": "[021] %s, [%s] %s
",
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "getMessage",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "e",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "' '",
                                  "unicode": false,
                                  "value": " ",
                                },
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "db",
                                    },
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "implode",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ignore_exception",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ignore_exception",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "true",
                      "value": true,
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "27",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'DROP FUNCTION IF EXISTS f'",
                        "unicode": false,
                        "value": "DROP FUNCTION IF EXISTS f",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "28",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'CREATE FUNCTION f( ver_param VARCHAR(255)) RETURNS VARCHAR(255) DETERMINISTIC RETURN ver_param;'",
                        "unicode": false,
                        "value": "CREATE FUNCTION f( ver_param VARCHAR(255)) RETURNS VARCHAR(255) DETERMINISTIC RETURN ver_param;",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "ignore_exception",
                    },
                    "operator": "=",
                    "right": Boolean {
                      "kind": "boolean",
                      "raw": "false",
                      "value": false,
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT f(VERSION()) AS f_version'",
                          "unicode": false,
                          "value": "SELECT f(VERSION()) AS f_version",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "query",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "f_version",
                          },
                          "operator": "=",
                          "right": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'f_version'",
                              "unicode": false,
                              "value": "f_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[029] Data seems wrong, dumping\\\\n\\"",
                              "unicode": false,
                              "value": "[029] Data seems wrong, dumping
",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tmp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "count",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": ">",
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'f_version'",
                              "unicode": false,
                              "value": "f_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        ],
                      },
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "stmt",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'SELECT VERSION() AS _version'",
                          "unicode": false,
                          "value": "SELECT VERSION() AS _version",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "query",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tmp",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "FETCH_ASSOC",
                          },
                          "what": Name {
                            "kind": "name",
                            "name": "PDO",
                            "resolution": "uqn",
                          },
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "fetchAll",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "stmt",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"[031] Found different version strings, SF returned '%s'/%s, SELECT returned '%s'/%s\\\\n\\"",
                                    "unicode": false,
                                    "value": "[031] Found different version strings, SF returned '%s'/%s, SELECT returned '%s'/%s
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "f_version",
                                  },
                                  Call {
                                    "arguments": Array [
                                      Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "f_version",
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "gettype",
                                      "resolution": "uqn",
                                    },
                                  },
                                  OffsetLookup {
                                    "kind": "offsetlookup",
                                    "offset": String {
                                      "isDoubleQuote": false,
                                      "kind": "string",
                                      "raw": "'_version'",
                                      "unicode": false,
                                      "value": "_version",
                                    },
                                    "what": OffsetLookup {
                                      "kind": "offsetlookup",
                                      "offset": Number {
                                        "kind": "number",
                                        "value": "0",
                                      },
                                      "what": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "tmp",
                                      },
                                    },
                                  },
                                  Call {
                                    "arguments": Array [
                                      OffsetLookup {
                                        "kind": "offsetlookup",
                                        "offset": String {
                                          "isDoubleQuote": false,
                                          "kind": "string",
                                          "raw": "'_version'",
                                          "unicode": false,
                                          "value": "_version",
                                        },
                                        "what": OffsetLookup {
                                          "kind": "offsetlookup",
                                          "offset": Number {
                                            "kind": "number",
                                            "value": "0",
                                          },
                                          "what": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "tmp",
                                          },
                                        },
                                      },
                                    ],
                                    "kind": "call",
                                    "what": Name {
                                      "kind": "name",
                                      "name": "gettype",
                                      "resolution": "uqn",
                                    },
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "f_version",
                          },
                          "right": OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'_version'",
                              "unicode": false,
                              "value": "_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                          "type": "!==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[030] Data seems wrong, dumping\\\\n\\"",
                              "unicode": false,
                              "value": "[030] Data seems wrong, dumping
",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "tmp",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "var_dump",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tmp",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "count",
                          "resolution": "uqn",
                        },
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": ">",
                    },
                    "right": Unary {
                      "kind": "unary",
                      "type": "!",
                      "what": Isset {
                        "kind": "isset",
                        "variables": Array [
                          OffsetLookup {
                            "kind": "offsetlookup",
                            "offset": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "'_version'",
                              "unicode": false,
                              "value": "_version",
                            },
                            "what": OffsetLookup {
                              "kind": "offsetlookup",
                              "offset": Number {
                                "kind": "number",
                                "value": "0",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tmp",
                              },
                            },
                          },
                        ],
                      },
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "32",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'DROP FUNCTION IF EXISTS f'",
                        "unicode": false,
                        "value": "DROP FUNCTION IF EXISTS f",
                      },
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "exec_and_count",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"[026] %s, [%s] %s\\\\n\\"",
                              "unicode": false,
                              "value": "[026] %s, [%s] %s
",
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "getMessage",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "e",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "errorCode",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "db",
                                },
                              },
                            },
                            Call {
                              "arguments": Array [
                                String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "' '",
                                  "unicode": false,
                                  "value": " ",
                                },
                                Call {
                                  "arguments": Array [],
                                  "kind": "call",
                                  "what": PropertyLookup {
                                    "kind": "propertylookup",
                                    "offset": Identifier {
                                      "kind": "identifier",
                                      "name": "errorInfo",
                                    },
                                    "what": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "db",
                                    },
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "implode",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Unary {
                        "kind": "unary",
                        "type": "!",
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ignore_exception",
                        },
                      },
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "PDOException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "db",
            },
          ],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getServerVersion",
            },
            "what": Name {
              "kind": "name",
              "name": "MySQLPDOTest",
              "resolution": "uqn",
            },
          },
        },
        "right": Number {
          "kind": "number",
          "value": "50000",
        },
        "type": ">",
      },
    },
    Try {
      "always": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "ATTR_EMULATE_PREPARES",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "PDO",
                    "resolution": "uqn",
                  },
                },
                Number {
                  "kind": "number",
                  "value": "1",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "setAttribute",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "db",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "0",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Silent {
                "expr": Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'DROP TABLE IF EXISTS test; CREATE TABLE test(id INT) ENGINE=%s'",
                          "unicode": false,
                          "value": "DROP TABLE IF EXISTS test; CREATE TABLE test(id INT) ENGINE=%s",
                        },
                        Name {
                          "kind": "name",
                          "name": "PDO_MYSQL_TEST_ENGINE",
                          "resolution": "uqn",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "sprintf",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "exec",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                  },
                },
                "kind": "silent",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"[034] Expecting %s/%s got %s/%s, [%s] %s\\\\n\\"",
                    "unicode": false,
                    "value": "[034] Expecting %s/%s got %s/%s, [%s] %s
",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "exp",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "exp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "gettype",
                      "resolution": "uqn",
                    },
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tmp",
                  },
                  Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tmp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "gettype",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "errorCode",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "db",
                      },
                    },
                  },
                  Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "errorInfo",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "db",
                          },
                        },
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "true",
                        "value": true,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_export",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "printf",
                  "resolution": "uqn",
                },
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "exp",
              },
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "type": "!==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "tmp",
              },
              "operator": "=",
              "right": Silent {
                "expr": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'INSERT INTO test(id) VALUES (1); INSERT INTO test(id) VALUES (2)'",
                      "unicode": false,
                      "value": "INSERT INTO test(id) VALUES (1); INSERT INTO test(id) VALUES (2)",
                    },
                  ],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "exec",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "db",
                    },
                  },
                },
                "kind": "silent",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"[035] With emulated PS it works but makes no sense given that exec() returns sort of affected rows...\\\\n\\"",
                  "unicode": false,
                  "value": "[035] With emulated PS it works but makes no sense given that exec() returns sort of affected rows...
",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"[033] %s, [%s] %s\\\\n\\"",
                      "unicode": false,
                      "value": "[033] %s, [%s] %s
",
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getMessage",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "e",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "errorCode",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "db",
                        },
                      },
                    },
                    Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "' '",
                          "unicode": false,
                          "value": " ",
                        },
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "errorInfo",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "db",
                            },
                          },
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "implode",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "printf",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "curly": false,
            "kind": "variable",
            "name": "e",
          },
          "what": Array [
            Name {
              "kind": "name",
              "name": "PDOException",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          StaticLookup {
            "kind": "staticlookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "ATTR_EMULATE_PREPARES",
            },
            "what": Name {
              "kind": "name",
              "name": "PDO",
              "resolution": "uqn",
            },
          },
          Number {
            "kind": "number",
            "value": "0",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setAttribute",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "db",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done!\\"",
          "unicode": false,
          "value": "done!",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
