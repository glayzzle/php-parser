// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: Cloning nested ArrayObjects. 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "p",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'C::p.orig'",
                "unicode": false,
                "value": "C::p.orig",
              },
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "C",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "wrappedObject",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "C",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "innerArrayObject",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "wrappedObject",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "outerArrayObject",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "innerArrayObject",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "ArrayObject",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "dynamic1",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "wrappedObject",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'new prop added to $wrappedObject before clone'",
          "unicode": false,
          "value": "new prop added to $wrappedObject before clone",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "clonedOuterArrayObject",
        },
        "operator": "=",
        "right": Clone {
          "kind": "clone",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "outerArrayObject",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "dynamic2",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "wrappedObject",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'new prop added to $wrappedObject after clone'",
          "unicode": false,
          "value": "new prop added to $wrappedObject after clone",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'new.iAO'",
            "unicode": false,
            "value": "new.iAO",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "innerArrayObject",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'new element added $innerArrayObject'",
          "unicode": false,
          "value": "new element added $innerArrayObject",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'new.oAO'",
            "unicode": false,
            "value": "new.oAO",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "outerArrayObject",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'new element added to $outerArrayObject'",
          "unicode": false,
          "value": "new element added to $outerArrayObject",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'new.coAO'",
            "unicode": false,
            "value": "new.coAO",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "clonedOuterArrayObject",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'new element added to $clonedOuterArrayObject'",
          "unicode": false,
          "value": "new element added to $clonedOuterArrayObject",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "wrappedObject",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "innerArrayObject",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "outerArrayObject",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "clonedOuterArrayObject",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
