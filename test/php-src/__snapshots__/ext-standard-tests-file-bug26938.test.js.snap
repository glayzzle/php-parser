// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #26938 (exec does not read consecutive long lines correctly) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "out",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "status",
        },
        "operator": "=",
        "right": Unary {
          "kind": "unary",
          "type": "-",
          "what": Number {
            "kind": "number",
            "value": "1",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "php",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'TEST_PHP_EXECUTABLE'",
              "unicode": false,
              "value": "TEST_PHP_EXECUTABLE",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "getenv",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "php",
                            },
                            "right": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "' -n -r \\"'",
                              "unicode": false,
                              "value": " -n -r \\"",
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'$lengths = array(10,20000,10000,5,10000,3);'",
                            "unicode": false,
                            "value": "$lengths = array(10,20000,10000,5,10000,3);",
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'foreach($lengths as $length) {'",
                          "unicode": false,
                          "value": "foreach($lengths as $length) {",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'  for($i=0;$i<$length;$i++) print chr(65+$i % 27);'",
                        "unicode": false,
                        "value": "  for($i=0;$i<$length;$i++) print chr(65+$i % 27);",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'  print \\\\\\\\\\"\\\\\\\\n\\\\\\\\\\";'",
                      "unicode": false,
                      "value": "  print \\\\\\"\\\\n\\\\\\";",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'}\\"'",
                    "unicode": false,
                    "value": "}\\"",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "out",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "status",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "php",
                            },
                            "right": String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "' -n -r \\\\''",
                              "unicode": false,
                              "value": " -n -r '",
                            },
                            "type": ".",
                          },
                          "right": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'$lengths = array(10,20000,10000,5,10000,3);'",
                            "unicode": false,
                            "value": "$lengths = array(10,20000,10000,5,10000,3);",
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'foreach($lengths as $length) {'",
                          "unicode": false,
                          "value": "foreach($lengths as $length) {",
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'  for($i=0;$i<$length;$i++) print chr(65+$i % 27);'",
                        "unicode": false,
                        "value": "  for($i=0;$i<$length;$i++) print chr(65+$i % 27);",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'  print \\"\\\\n\\";'",
                      "unicode": false,
                      "value": "  print \\"\\\\n\\";",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'}\\\\''",
                    "unicode": false,
                    "value": "}'",
                  },
                  "type": ".",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "out",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "status",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "exec",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Name {
              "kind": "name",
              "name": "PHP_OS",
              "resolution": "uqn",
            },
            Number {
              "kind": "number",
              "value": "0",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "substr",
            "resolution": "uqn",
          },
        },
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'WIN'",
          "unicode": false,
          "value": "WIN",
        },
        "type": "!=",
      },
    },
    For {
      "body": ExpressionStatement {
        "expression": Print {
          "expression": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"md5(line $i)= \\" ",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "md5(line ",
                          "unicode": false,
                          "value": "md5(line ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": ")= ",
                          "unicode": false,
                          "value": ")= ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                  "right": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "i",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "out",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "md5",
                      "resolution": "uqn",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\" (length \\"",
                  "unicode": false,
                  "value": " (length ",
                },
                "type": ".",
              },
              "right": Call {
                "arguments": Array [
                  OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "out",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strlen",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "right": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\")\\\\n\\"",
              "unicode": false,
              "value": ")
",
            },
            "type": ".",
          },
          "kind": "print",
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "6",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
