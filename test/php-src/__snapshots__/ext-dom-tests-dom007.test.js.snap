// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test 7: DTD tests 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xml",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOXML",
          "raw": "<<< EOXML
<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<!DOCTYPE courses [
<!ELEMENT courses (course+)>
<!ELEMENT course (title, description, temp*)>
<!ATTLIST course cid ID #REQUIRED>
<!ELEMENT title (#PCDATA)>
<!ELEMENT description (#PCDATA)>
<!ELEMENT temp (#PCDATA)>
<!ATTLIST temp vid ID #REQUIRED>
<!ENTITY test 'http://www.hpl.hp.com/semweb/2003/query_tester#'>
<!ENTITY rdf  'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
<!NOTATION GIF PUBLIC \\"-\\" \\"image/gif\\">
<!ENTITY myimage PUBLIC \\"-\\" \\"mypicture.gif\\" NDATA GIF>
]>
<courses>
   <course cid=\\"c1\\">
      <title>Basic Languages</title>
      <description>Introduction to Languages</description>
   </course>
   <course cid=\\"c6\\">
      <title>French I</title>
      <description>Introduction to French</description>
      <temp vid=\\"c7\\">
      </temp>
   </course>
</courses>
EOXML",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<!DOCTYPE courses [
<!ELEMENT courses (course+)>
<!ELEMENT course (title, description, temp*)>
<!ATTLIST course cid ID #REQUIRED>
<!ELEMENT title (#PCDATA)>
<!ELEMENT description (#PCDATA)>
<!ELEMENT temp (#PCDATA)>
<!ATTLIST temp vid ID #REQUIRED>
<!ENTITY test 'http://www.hpl.hp.com/semweb/2003/query_tester#'>
<!ENTITY rdf  'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
<!NOTATION GIF PUBLIC \\"-\\" \\"image/gif\\">
<!ENTITY myimage PUBLIC \\"-\\" \\"mypicture.gif\\" NDATA GIF>
]>
<courses>
   <course cid=\\"c1\\">
      <title>Basic Languages</title>
      <description>Introduction to Languages</description>
   </course>
   <course cid=\\"c6\\">
      <title>French I</title>
      <description>Introduction to French</description>
      <temp vid=\\"c7\\">
      </temp>
   </course>
</courses>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"ISO-8859-1\\"?>
<!DOCTYPE courses [
<!ELEMENT courses (course+)>
<!ELEMENT course (title, description, temp*)>
<!ATTLIST course cid ID #REQUIRED>
<!ELEMENT title (#PCDATA)>
<!ELEMENT description (#PCDATA)>
<!ELEMENT temp (#PCDATA)>
<!ATTLIST temp vid ID #REQUIRED>
<!ENTITY test 'http://www.hpl.hp.com/semweb/2003/query_tester#'>
<!ENTITY rdf  'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
<!NOTATION GIF PUBLIC \\"-\\" \\"image/gif\\">
<!ENTITY myimage PUBLIC \\"-\\" \\"mypicture.gif\\" NDATA GIF>
]>
<courses>
   <course cid=\\"c1\\">
      <title>Basic Languages</title>
      <description>Introduction to Languages</description>
   </course>
   <course cid=\\"c6\\">
      <title>French I</title>
      <description>Introduction to French</description>
      <temp vid=\\"c7\\">
      </temp>
   </course>
</courses>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dom",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "DOMDocument",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xml",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "loadXML",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dtd",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "doctype",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dom",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "nots",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "notations",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dtd",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "length",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "length",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "nots",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Length: \\"",
              "unicode": false,
              "value": "Length: ",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "length",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"Key $key: \\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "Key ",
                                  "unicode": false,
                                  "value": "Key ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "key",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": ": ",
                                  "unicode": false,
                                  "value": ": ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                          "right": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "nodeName",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "node",
                            },
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\" (\\"",
                          "unicode": false,
                          "value": " (",
                        },
                        "type": ".",
                      },
                      "right": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "systemId",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "node",
                        },
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\") (\\"",
                      "unicode": false,
                      "value": ") (",
                    },
                    "type": ".",
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "publicId",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\")\\\\n\\"",
                  "unicode": false,
                  "value": ")
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "key",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "nots",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "node",
      },
    },
    ExpressionStatement {
      "expression": Print {
        "expression": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
        "kind": "print",
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"Index $x: \\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "Index ",
                                  "unicode": false,
                                  "value": "Index ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "x",
                                },
                                "kind": "encapsedpart",
                                "syntax": "simple",
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": ": ",
                                  "unicode": false,
                                  "value": ": ",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                            ],
                          },
                          "right": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "nodeName",
                            },
                            "what": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "x",
                                },
                              ],
                              "kind": "call",
                              "what": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "item",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "nots",
                                },
                              },
                            },
                          },
                          "type": ".",
                        },
                        "right": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\" (\\"",
                          "unicode": false,
                          "value": " (",
                        },
                        "type": ".",
                      },
                      "right": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "systemId",
                        },
                        "what": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "x",
                            },
                          ],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "item",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "nots",
                            },
                          },
                        },
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\") (\\"",
                      "unicode": false,
                      "value": ") (",
                    },
                    "type": ".",
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "publicId",
                    },
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "item",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "nots",
                        },
                      },
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\")\\\\n\\"",
                  "unicode": false,
                  "value": ")
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "length",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "node",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'xxx'",
              "unicode": false,
              "value": "xxx",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getNamedItem",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "nots",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ents",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "entities",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dtd",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "length",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "length",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ents",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Length: \\"",
              "unicode": false,
              "value": "Length: ",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "length",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\n\\"",
            "unicode": false,
            "value": "
",
          },
          "type": ".",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xkeys",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xkeys",
                },
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"Key: $key Name: \\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "Key: ",
                          "unicode": false,
                          "value": "Key: ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "key",
                        },
                        "kind": "encapsedpart",
                        "syntax": "simple",
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": " Name: ",
                          "unicode": false,
                          "value": " Name: ",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                    ],
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "nodeName",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "node",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "key",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "ents",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "node",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xkeys",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "sort",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "key",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "xkeys",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "node",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "xkeys",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": false,
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "xkeys",
                },
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"Index: \\"",
                    "unicode": false,
                    "value": "Index: ",
                  },
                  "right": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "nodeName",
                    },
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "item",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "ents",
                        },
                      },
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "length",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "xkeys",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "sort",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "node",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "key",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "xkeys",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "node",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "node",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "item",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ents",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "node",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'xxx'",
              "unicode": false,
              "value": "xxx",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getNamedItem",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "ents",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "node",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
