// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #71020 (Use after free in Collator::sortWithSortKeys) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "var_3",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"Whatever\\"",
              "unicode": false,
              "value": "Whatever",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Collator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "microtime",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "md5",
                      "resolution": "uqn",
                    },
                  },
                  Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0",
                      },
                      Number {
                        "kind": "number",
                        "value": "26",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "rand",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "9",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "substr",
                  "resolution": "uqn",
                },
              },
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "x",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "strval",
                  "resolution": "uqn",
                },
              },
              "type": ".",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "myarray",
            },
          },
          "operator": "=",
          "right": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "microtime",
                        "resolution": "uqn",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "md5",
                    "resolution": "uqn",
                  },
                },
                Call {
                  "arguments": Array [
                    Number {
                      "kind": "number",
                      "value": "0",
                    },
                    Number {
                      "kind": "number",
                      "value": "26",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "rand",
                    "resolution": "uqn",
                  },
                },
                Number {
                  "kind": "number",
                  "value": "9",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "substr",
                "resolution": "uqn",
              },
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "strval",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "x",
          },
          "right": Number {
            "kind": "number",
            "value": "0xbb",
          },
          "type": "<",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "myarray",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "sortWithSortKeys",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "var_3",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
okey",
      "value": "okey",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
