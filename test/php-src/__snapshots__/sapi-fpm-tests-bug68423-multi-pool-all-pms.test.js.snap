// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests FPM: bug68423 - Multiple pools with different PMs (dynamic + ondemand + static) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": true,
        "require": true,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"tester.inc\\"",
          "unicode": false,
          "value": "tester.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cfg",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "EOT",
          "raw": "<<<EOT
[global]
error_log = {{FILE:LOG}}
[pool_dynamic]
listen = {{ADDR[dynamic]}}
ping.path = /ping
ping.response = pong-dynamic
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
[pool_ondemand]
listen = {{ADDR[ondemand]}}
ping.path = /ping
ping.response = pong-on-demand
pm = ondemand
pm.max_children = 2
pm.process_idle_timeout = 10
[pool_static]
listen = {{ADDR[static]}}
ping.path = /ping
ping.response = pong-static
pm = static
pm.max_children = 2
EOT",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "[global]
error_log = {{FILE:LOG}}
[pool_dynamic]
listen = {{ADDR[dynamic]}}
ping.path = /ping
ping.response = pong-dynamic
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
[pool_ondemand]
listen = {{ADDR[ondemand]}}
ping.path = /ping
ping.response = pong-on-demand
pm = ondemand
pm.max_children = 2
pm.process_idle_timeout = 10
[pool_static]
listen = {{ADDR[static]}}
ping.path = /ping
ping.response = pong-static
pm = static
pm.max_children = 2
",
                "unicode": false,
                "value": "[global]
error_log = {{FILE:LOG}}
[pool_dynamic]
listen = {{ADDR[dynamic]}}
ping.path = /ping
ping.response = pong-dynamic
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
[pool_ondemand]
listen = {{ADDR[ondemand]}}
ping.path = /ping
ping.response = pong-on-demand
pm = ondemand
pm.max_children = 2
pm.process_idle_timeout = 10
[pool_static]
listen = {{ADDR[static]}}
ping.path = /ping
ping.response = pong-static
pm = static
pm.max_children = 2",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tester",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cfg",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "FPM\\\\Tester",
            "resolution": "qn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "start",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "expectLogStartNotices",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'{{ADDR[dynamic]}}'",
            "unicode": false,
            "value": "{{ADDR[dynamic]}}",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pong-dynamic'",
            "unicode": false,
            "value": "pong-dynamic",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "ping",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'{{ADDR[ondemand]}}'",
            "unicode": false,
            "value": "{{ADDR[ondemand]}}",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pong-on-demand'",
            "unicode": false,
            "value": "pong-on-demand",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "ping",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'{{ADDR[static]}}'",
            "unicode": false,
            "value": "{{ADDR[static]}}",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'pong-static'",
            "unicode": false,
            "value": "pong-static",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "ping",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "terminate",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "expectLogTerminatingNotices",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "close",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tester",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
Done",
      "value": "Done",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
