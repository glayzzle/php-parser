// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Exhaustive test of CP51932 encoding verification and conversion 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "2020",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "srand",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "parenthesizedExpression": true,
          "raw": "'encoding_tests.inc'",
          "unicode": false,
          "value": "encoding_tests.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "0x25",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "validChars",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fromUnicode",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Magic {
                    "kind": "magic",
                    "raw": "__DIR__",
                    "value": "__DIR__",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'/data/CP51932.txt'",
                    "unicode": false,
                    "value": "/data/CP51932.txt",
                  },
                  "type": ".",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "realpath",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'r+'",
              "unicode": false,
              "value": "r+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Continue {
              "kind": "continue",
              "level": null,
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "0",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "line",
                },
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'#'",
                "unicode": false,
                "value": "#",
              },
              "type": "==",
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "byte2",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Continue {
                    "kind": "continue",
                    "level": null,
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xC0",
                          },
                          "type": ">=",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xD6",
                          },
                          "type": "<=",
                        },
                        "type": "&&",
                      },
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xD8",
                          },
                          "type": ">=",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "codepoint",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xF6",
                          },
                          "type": "<=",
                        },
                        "type": "&&",
                      },
                      "type": "||",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codepoint",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xF8",
                        },
                        "type": ">=",
                      },
                      "parenthesizedExpression": true,
                      "right": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codepoint",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0xFF",
                        },
                        "type": "<=",
                      },
                      "type": "&&",
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cp51932",
                    },
                    "operator": "=",
                    "right": RetIf {
                      "falseExpr": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "byte1",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "chr",
                          "resolution": "uqn",
                        },
                      },
                      "kind": "retif",
                      "parenthesizedExpression": true,
                      "test": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte2",
                      },
                      "trueExpr": Bin {
                        "kind": "bin",
                        "left": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "byte1",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "chr",
                            "resolution": "uqn",
                          },
                        },
                        "parenthesizedExpression": true,
                        "right": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "byte2",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "chr",
                            "resolution": "uqn",
                          },
                        },
                        "type": ".",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "utf16",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'n'",
                          "unicode": false,
                          "value": "n",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codepoint",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "pack",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "cp51932",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "validChars",
                      },
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "utf16",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "utf16",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fromUnicode",
                      },
                    },
                    "operator": "=",
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cp51932",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "line",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'<U%x> \\\\x%x\\\\x%x'",
                    "unicode": false,
                    "value": "<U%x> \\\\x%x\\\\x%x",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "codepoint",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte1",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte2",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sscanf",
                  "resolution": "uqn",
                },
              },
              "right": Number {
                "kind": "number",
                "value": "2",
              },
              "type": ">=",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "line",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fp",
            },
            Number {
              "kind": "number",
              "value": "256",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fgets",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x30\\\\x1C\\"",
            "unicode": false,
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xC1\\"",
          "unicode": false,
          "value": "¡Á",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x12\\"",
            "unicode": false,
            "value": "\\"",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xDD\\"",
          "unicode": false,
          "value": "¡Ý",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x20\\\\x16\\"",
            "unicode": false,
            "value": " ",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xC2\\"",
          "unicode": false,
          "value": "¡Â",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x20\\"",
            "unicode": false,
            "value": "\\" ",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xDC\\"",
          "unicode": false,
          "value": "¢Ü",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x29\\"",
            "unicode": false,
            "value": "\\")",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xC1\\"",
          "unicode": false,
          "value": "¢Á",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x2B\\"",
            "unicode": false,
            "value": "\\"+",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xE9\\"",
          "unicode": false,
          "value": "¢é",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x35\\"",
            "unicode": false,
            "value": "\\"5",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xE8\\"",
          "unicode": false,
          "value": "¢è",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x1A\\"",
            "unicode": false,
            "value": "\\"",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xE5\\"",
          "unicode": false,
          "value": "¢å",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x2A\\"",
            "unicode": false,
            "value": "\\"*",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xC0\\"",
          "unicode": false,
          "value": "¢À",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x61\\"",
            "unicode": false,
            "value": "\\"a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xE1\\"",
          "unicode": false,
          "value": "¢á",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\xA5\\"",
            "unicode": false,
            "value": "\\"¥",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xDD\\"",
          "unicode": false,
          "value": "¢Ý",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x22\\\\x52\\"",
            "unicode": false,
            "value": "\\"R",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xE2\\"",
          "unicode": false,
          "value": "¢â",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFF\\\\xE2\\"",
            "unicode": false,
            "value": "ÿâ",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA2\\\\xCC\\"",
          "unicode": false,
          "value": "¢Ì",
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA1\\"",
            "unicode": false,
            "value": " ¡",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA6\\"",
            "unicode": false,
            "value": " ¦",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA9\\"",
            "unicode": false,
            "value": " ©",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAA\\"",
            "unicode": false,
            "value": " ª",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAB\\"",
            "unicode": false,
            "value": " «",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAD\\"",
            "unicode": false,
            "value": " ­",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAE\\"",
            "unicode": false,
            "value": " ®",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAF\\"",
            "unicode": false,
            "value": " ¯",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB2\\"",
            "unicode": false,
            "value": " ²",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB3\\"",
            "unicode": false,
            "value": " ³",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB5\\"",
            "unicode": false,
            "value": " µ",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB7\\"",
            "unicode": false,
            "value": " ·",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB8\\"",
            "unicode": false,
            "value": " ¸",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xB9\\"",
            "unicode": false,
            "value": " ¹",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xBA\\"",
            "unicode": false,
            "value": " º",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xBB\\"",
            "unicode": false,
            "value": " »",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x30\\\\x94\\"",
            "unicode": false,
            "value": "0",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
      ],
    },
    For {
      "body": ExpressionStatement {
        "expression": Assign {
          "kind": "assign",
          "left": OffsetLookup {
            "kind": "offsetlookup",
            "offset": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "validChars",
            },
          },
          "operator": "=",
          "right": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\\\x00\\"",
              "unicode": false,
              "value": " ",
            },
            "right": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chr",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
        },
        "kind": "expressionstatement",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "0x7F",
          },
          "type": "<=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xA5\\"",
            "unicode": false,
            "value": " ¥",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xEF\\"",
          "unicode": false,
          "value": "¡ï",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x20\\\\x3E\\"",
            "unicode": false,
            "value": " >",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xB1\\"",
          "unicode": false,
          "value": "¡±",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00\\\\xAF\\"",
            "unicode": false,
            "value": " ¯",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\xA1\\\\xB1\\"",
          "unicode": false,
          "value": "¡±",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP51932'",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP51932'",
            "unicode": false,
            "value": "CP51932",
          },
          Boolean {
            "kind": "boolean",
            "raw": "false",
            "value": false,
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllValidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"CP51932 verification and conversion works on all valid characters\\\\n\\"",
          "unicode": false,
          "value": "CP51932 verification and conversion works on all valid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
          Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0xA9",
                      },
                      Number {
                        "kind": "number",
                        "value": "0xAF",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "range",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "2",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "array_fill_keys",
                  "resolution": "uqn",
                },
              },
              "right": Call {
                "arguments": Array [
                  Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "0xF5",
                      },
                      Number {
                        "kind": "number",
                        "value": "0xF8",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "range",
                      "resolution": "uqn",
                    },
                  },
                  Number {
                    "kind": "number",
                    "value": "2",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "array_fill_keys",
                  "resolution": "uqn",
                },
              },
              "type": "+",
            },
            "right": Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "0xFD",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": Number {
                    "kind": "number",
                    "value": "0xFE",
                  },
                  "kind": "entry",
                  "unpack": false,
                  "value": Number {
                    "kind": "number",
                    "value": "2",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
            "type": "+",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidChars",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "validChars",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP51932'",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "truncated",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP51932'",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x00%\\"",
            "unicode": false,
            "value": " %",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "testTruncatedChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"CP51932 verification and conversion works on all invalid characters\\\\n\\"",
          "unicode": false,
          "value": "CP51932 verification and conversion works on all invalid characters
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidCodepoints",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "unused",
          },
          Call {
            "arguments": Array [
              Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "0",
                  },
                  Number {
                    "kind": "number",
                    "value": "0xFF",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "range",
                  "resolution": "uqn",
                },
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_fill_keys",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "findInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "invalidCodepoints",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fromUnicode",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-16BE'",
            "unicode": false,
            "value": "UTF-16BE",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'CP51932'",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'%'",
            "unicode": false,
            "value": "%",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertAllInvalidChars",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Unicode -> CP51932 conversion works on all invalid codepoints\\\\n\\"",
          "unicode": false,
          "value": "Unicode -> CP51932 conversion works on all invalid codepoints
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"long\\"",
            "unicode": false,
            "value": "long",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_substitute_character",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\x80\\"",
            "unicode": false,
            "value": "",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"CP51932\\"",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"\\\\xFE\\\\xFF\\"",
            "unicode": false,
            "value": "þÿ",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"%\\"",
            "unicode": false,
            "value": "%",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"CP51932\\"",
            "unicode": false,
            "value": "CP51932",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"UTF-8\\"",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "convertInvalidString",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done!\\\\n\\"",
          "unicode": false,
          "value": "Done!
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
