// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #77198 (auto cropping has insufficient precision) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "x",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "y",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "im",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Number {
                    "kind": "number",
                    "value": "8",
                  },
                  Number {
                    "kind": "number",
                    "value": "8",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "imagecreatetruecolor",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "im",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                Number {
                  "kind": "number",
                  "value": "7",
                },
                Number {
                  "kind": "number",
                  "value": "7",
                },
                Number {
                  "kind": "number",
                  "value": "0xffffff",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "imagefilledrectangle",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "im",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "y",
                },
                Number {
                  "kind": "number",
                  "value": "0x000000",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "imagesetpixel",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "im",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "createWhiteImageWithBlackPixelAt",
      },
      "nullable": false,
      "type": null,
    },
    For {
      "body": Block {
        "children": Array [
          For {
            "body": Block {
              "children": Array [
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      Continue {
                        "kind": "continue",
                        "level": null,
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0",
                        },
                        "type": "==",
                      },
                      "parenthesizedExpression": true,
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "y",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "type": "==",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "y",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "7",
                          },
                          "type": "==",
                        },
                        "type": "||",
                      },
                      "type": "&&",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "7",
                        },
                        "type": "==",
                      },
                      "parenthesizedExpression": true,
                      "right": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "y",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "type": "==",
                        },
                        "parenthesizedExpression": true,
                        "right": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "y",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "7",
                          },
                          "type": "==",
                        },
                        "type": "||",
                      },
                      "type": "&&",
                    },
                    "type": "||",
                  },
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "orig",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "y",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "createWhiteImageWithBlackPixelAt",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cropped",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "orig",
                        },
                        Name {
                          "kind": "name",
                          "name": "IMG_CROP_SIDES",
                          "resolution": "uqn",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "imagecropauto",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "width",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "cropped",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "imagesx",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"Pixel at %d, %d: unexpected width (%d)\\\\n\\"",
                                    "unicode": false,
                                    "value": "Pixel at %d, %d: unexpected width (%d)
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "x",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "y",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "width",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "width",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "type": "!==",
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "height",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "cropped",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "imagesy",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"Pixel at %d, %d: unexpected height (%d)\\\\n\\"",
                                    "unicode": false,
                                    "value": "Pixel at %d, %d: unexpected height (%d)
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "x",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "y",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "height",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "height",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "type": "!==",
                        },
                      },
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "color",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "cropped",
                              },
                              Number {
                                "kind": "number",
                                "value": "0",
                              },
                              Number {
                                "kind": "number",
                                "value": "0",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "imagecolorat",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            ExpressionStatement {
                              "expression": Call {
                                "arguments": Array [
                                  String {
                                    "isDoubleQuote": true,
                                    "kind": "string",
                                    "raw": "\\"Pixel at %d, %d: unexpected color (%d)\\\\n\\"",
                                    "unicode": false,
                                    "value": "Pixel at %d, %d: unexpected color (%d)
",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "x",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "y",
                                  },
                                  Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "color",
                                  },
                                ],
                                "kind": "call",
                                "what": Name {
                                  "kind": "name",
                                  "name": "printf",
                                  "resolution": "uqn",
                                },
                              },
                              "kind": "expressionstatement",
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "color",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0x000000",
                          },
                          "type": "!==",
                        },
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "cropped",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "imagedestroy",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"Pixel at %d, %d: unexpected NULL crop\\\\n\\"",
                              "unicode": false,
                              "value": "Pixel at %d, %d: unexpected NULL crop
",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "x",
                            },
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "y",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "printf",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "cropped",
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "orig",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "imagedestroy",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "increment": Array [
              Post {
                "kind": "post",
                "type": "+",
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
              },
            ],
            "init": Array [
              Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                "operator": "=",
                "right": Number {
                  "kind": "number",
                  "value": "0",
                },
              },
            ],
            "kind": "for",
            "shortForm": false,
            "test": Array [
              Bin {
                "kind": "bin",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "x",
                },
                "right": Number {
                  "kind": "number",
                  "value": "8",
                },
                "type": "<",
              },
            ],
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "y",
          },
          "right": Number {
            "kind": "number",
            "value": "8",
          },
          "type": "<",
        },
      ],
    },
    Inline {
      "kind": "inline",
      "raw": "
===DONE===",
      "value": "===DONE===",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
