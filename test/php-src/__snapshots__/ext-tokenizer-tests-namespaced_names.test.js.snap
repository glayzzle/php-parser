// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Tokenization of namespaced names 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "code",
        },
        "operator": "=",
        "right": Nowdoc {
          "kind": "nowdoc",
          "label": "CODE",
          "raw": "<<<'CODE'
<?php
Foo
Foo\\\\Bar
\\\\Foo\\\\Bar
namespace\\\\Foo
Foo \\\\ Bar
CODE",
          "value": "<?php
Foo
Foo\\\\Bar
\\\\Foo\\\\Bar
namespace\\\\Foo
Foo \\\\ Bar",
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"{$token->getTokenName()}: \\\\\\"$token->text\\\\\\"\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": Call {
                      "arguments": Array [],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "getTokenName",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "token",
                        },
                      },
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": ": \\\\\\"",
                      "unicode": false,
                      "value": ": \\\\\\"",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "text",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "token",
                      },
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\\\"\\\\n",
                      "unicode": false,
                      "value": "\\\\\\"\\\\n",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "code",
          },
        ],
        "kind": "call",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "tokenize",
          },
          "what": Name {
            "kind": "name",
            "name": "PhpToken",
            "resolution": "uqn",
          },
        },
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "token",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
