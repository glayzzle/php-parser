// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar with unsafe object in metadata does not unserialize on reading a file. 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"In wakeup\\\\n\\"",
                    "unicode": false,
                    "value": "In wakeup
",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__wakeup",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "EchoesOnWakeup",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.php'",
            "unicode": false,
            "value": ".phar.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar://'",
            "unicode": false,
            "value": "phar://",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"<?php __HALT_COMPILER(); ?>\\"",
          "unicode": false,
          "value": "<?php __HALT_COMPILER(); ?>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "files",
        },
        "operator": "=",
        "right": Array {
          "items": Array [],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'a'",
            "unicode": false,
            "value": "a",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "files",
          },
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'cont'",
                "unicode": false,
                "value": "cont",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'contents of file a'",
                "unicode": false,
                "value": "contents of file a",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'files/phar_test.inc'",
          "unicode": false,
          "value": "files/phar_test.inc",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Reading file contents through stream wrapper\\\\n\\"",
          "unicode": false,
          "value": "Reading file contents through stream wrapper
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pname",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'/'",
                          "unicode": false,
                          "value": "/",
                        },
                        "type": ".",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "name",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "file_get_contents",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "name",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "files",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "cont",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Original metadata\\\\n\\"",
          "unicode": false,
          "value": "Original metadata
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          New {
            "arguments": Array [],
            "kind": "new",
            "what": Name {
              "kind": "name",
              "name": "EchoesOnWakeup",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setMetadata",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "phar",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
      ],
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname_new",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "raw": "\\"$fname.copy.php\\"",
          "type": "string",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fname",
              },
              "kind": "encapsedpart",
              "syntax": "simple",
            },
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": ".copy.php",
                "unicode": false,
                "value": ".copy.php",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname",
          },
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname_new",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "copy",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname_new",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata with no allowed_classes\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata with no allowed_classes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'allowed_classes'",
                      "unicode": false,
                      "value": "allowed_classes",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata with EchoesOnWakeup allowed\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata with EchoesOnWakeup allowed
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'allowed_classes'",
                      "unicode": false,
                      "value": "allowed_classes",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": StaticLookup {
                            "kind": "staticlookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "class",
                            },
                            "what": Name {
                              "kind": "name",
                              "name": "EchoesOnWakeup",
                              "resolution": "uqn",
                            },
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Array {
            "items": Array [
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "EchoesOnWakeup",
                    "resolution": "uqn",
                  },
                },
              },
              Entry {
                "byRef": false,
                "key": null,
                "kind": "entry",
                "unpack": false,
                "value": New {
                  "arguments": Array [],
                  "kind": "new",
                  "what": Name {
                    "kind": "name",
                    "name": "stdClass",
                    "resolution": "uqn",
                  },
                },
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setMetaData",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "phar",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata with too low max_depth\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata with too low max_depth
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'max_depth'",
                      "unicode": false,
                      "value": "max_depth",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "1",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata with some allowed classes\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata with some allowed classes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'allowed_classes'",
                      "unicode": false,
                      "value": "allowed_classes",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": StaticLookup {
                            "kind": "staticlookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "class",
                            },
                            "what": Name {
                              "kind": "name",
                              "name": "EchoesOnWakeup",
                              "resolution": "uqn",
                            },
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            ],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Calling getMetadata with no options returns the original metadata value\\\\n\\"",
          "unicode": false,
          "value": "Calling getMetadata with no options returns the original metadata value
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "getMetadata",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "phar",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
