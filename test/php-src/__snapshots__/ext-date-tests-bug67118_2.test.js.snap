// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Regression introduce in fix for Bug #67118 - Invalid code 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "time",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "tz",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [
                      String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "'UTC'",
                        "unicode": false,
                        "value": "UTC",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "DateTimeZone",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              Try {
                "always": null,
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"First try\\\\n\\"",
                          "unicode": false,
                          "value": "First try
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                    ExpressionStatement {
                      "expression": Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "time",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "tz",
                          },
                        ],
                        "kind": "call",
                        "what": StaticLookup {
                          "kind": "staticlookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "__construct",
                          },
                          "what": ParentReference {
                            "kind": "parentreference",
                            "raw": "parent",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": null,
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "catches": Array [
                  Catch {
                    "body": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"Second try\\\\n\\"",
                              "unicode": false,
                              "value": "Second try
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                        ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              Bin {
                                "kind": "bin",
                                "left": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "time",
                                },
                                "right": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "'C'",
                                  "unicode": false,
                                  "value": "C",
                                },
                                "type": ".",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "tz",
                              },
                            ],
                            "kind": "call",
                            "what": StaticLookup {
                              "kind": "staticlookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "__construct",
                              },
                              "what": ParentReference {
                                "kind": "parentreference",
                                "raw": "parent",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                      ],
                      "kind": "block",
                    },
                    "kind": "catch",
                    "variable": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "e",
                    },
                    "what": Array [
                      Name {
                        "kind": "name",
                        "name": "Exception",
                        "resolution": "uqn",
                      },
                    ],
                  },
                ],
                "kind": "try",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "DateTime",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "date",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'12 Sep 2007 15:49:12 UT'",
          "unicode": false,
          "value": "12 Sep 2007 15:49:12 UT",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          New {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "date",
              },
            ],
            "kind": "new",
            "what": Name {
              "kind": "name",
              "name": "Foo",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
Done",
      "value": "Done",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
