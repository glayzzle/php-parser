// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #71843 (null ptr deref ZEND_RETURN_SPEC_CONST_HANDLER (zend_vm_execute.h:3479)) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'E'",
            "unicode": false,
            "value": "E",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'E'",
            "unicode": false,
            "value": "E",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'R'",
            "unicode": false,
            "value": "R",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'R'",
            "unicode": false,
            "value": "R",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'See'",
            "unicode": false,
            "value": "See",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'See'",
            "unicode": false,
            "value": "See",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"0\\"",
            "unicode": false,
            "value": "0",
          },
          "right": Unary {
            "kind": "unary",
            "type": "~",
            "what": Name {
              "kind": "name",
              "name": "E",
              "resolution": "uqn",
            },
          },
          "type": "&",
        },
        "right": Unary {
          "kind": "unary",
          "type": "~",
          "what": Name {
            "kind": "name",
            "name": "R",
            "resolution": "uqn",
          },
        },
        "type": "&",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "6",
        },
        "right": Unary {
          "kind": "unary",
          "type": "~",
          "what": Name {
            "kind": "name",
            "name": "See",
            "resolution": "uqn",
          },
        },
        "type": "&&",
      },
      "kind": "expressionstatement",
    },
    Inline {
      "kind": "inline",
      "raw": "
okey",
      "value": "okey",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
