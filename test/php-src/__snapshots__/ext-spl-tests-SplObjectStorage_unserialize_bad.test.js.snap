// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: Test that serialized blob contains unique elements (CVE-2010-2225) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "badblobs",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'x:i:2;i:0;,i:1;;i:0;,i:2;;m:a:0:{}'",
                "unicode": false,
                "value": "x:i:2;i:0;,i:1;;i:0;,i:2;;m:a:0:{}",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'x:i:3;O:8:\\"stdClass\\":0:{},O:8:\\"stdClass\\":0:{};R:2;,i:1;;O:8:\\"stdClass\\":0:{},r:2;;m:a:0:{}'",
                "unicode": false,
                "value": "x:i:3;O:8:\\"stdClass\\":0:{},O:8:\\"stdClass\\":0:{};R:2;,i:1;;O:8:\\"stdClass\\":0:{},r:2;;m:a:0:{}",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'x:i:3;O:8:\\"stdClass\\":0:{},O:8:\\"stdClass\\":0:{};r:2;,i:1;;O:8:\\"stdClass\\":0:{},r:2;;m:a:0:{}'",
                "unicode": false,
                "value": "x:i:3;O:8:\\"stdClass\\":0:{},O:8:\\"stdClass\\":0:{};r:2;,i:1;;O:8:\\"stdClass\\":0:{},r:2;;m:a:0:{}",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'x:i:1;O:8:\\"stdClass\\":0:{},N;;m:s:40:\\"1234567890123456789012345678901234567890\\"'",
                "unicode": false,
                "value": "x:i:1;O:8:\\"stdClass\\":0:{},N;;m:s:40:\\"1234567890123456789012345678901234567890\\"",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "so",
                    },
                    "operator": "=",
                    "right": New {
                      "arguments": Array [],
                      "kind": "new",
                      "what": Name {
                        "kind": "name",
                        "name": "SplObjectStorage",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "blob",
                      },
                    ],
                    "kind": "call",
                    "what": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "unserialize",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "so",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "so",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          "right": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"\\\\n\\"",
                            "unicode": false,
                            "value": "
",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "UnexpectedValueException",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "badblobs",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "blob",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"DONE\\\\n\\"",
          "unicode": false,
          "value": "DONE
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
