// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #73783: (SIG_IGN needs to be set to prevent syscals from returning early) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "SIGCHLD",
            "resolution": "uqn",
          },
          Name {
            "kind": "name",
            "name": "SIG_IGN",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "pcntl_signal",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Switch {
      "body": Block {
        "children": Array [
          Case {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": null,
                    "kind": "exit",
                    "useDie": false,
                  },
                  "kind": "expressionstatement",
                },
                Break {
                  "kind": "break",
                  "level": null,
                },
              ],
              "kind": "block",
            },
            "kind": "case",
            "test": Number {
              "kind": "number",
              "value": "0",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "switch",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "pcntl_fork",
          "resolution": "uqn",
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "before",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Boolean {
              "kind": "boolean",
              "raw": "true",
              "value": true,
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "microtime",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Number {
            "kind": "number",
            "value": "1",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "sleep",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"failed\\\\n\\"",
                "unicode": false,
                "value": "failed
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"working\\\\n\\"",
                "unicode": false,
                "value": "working
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [
              Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "microtime",
              "resolution": "uqn",
            },
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "before",
          },
          "type": "-",
        },
        "right": Number {
          "kind": "number",
          "value": "0.8",
        },
        "type": ">=",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
