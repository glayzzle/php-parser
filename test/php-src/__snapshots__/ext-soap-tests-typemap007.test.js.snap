// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SOAP Typemap 7: SoapClient support for typemap's from_xml() (without WSDL) 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "request",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "location",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "action",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "version",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "one_way",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Return {
                "expr": Encapsed {
                  "kind": "encapsed",
                  "label": "EOF",
                  "raw": "<<<EOF
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://schemas.nothing.com\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body>
<ns1:dotest2Response><res xsi:type=\\"ns1:book\\">
  <a xsi:type=\\"xsd:string\\">foo</a>
  <b xsi:type=\\"xsd:string\\">bar</b>
</res>
</ns1:dotest2Response></SOAP-ENV:Body></SOAP-ENV:Envelope>
EOF",
                  "type": "heredoc",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://schemas.nothing.com\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body>
<ns1:dotest2Response><res xsi:type=\\"ns1:book\\">
  <a xsi:type=\\"xsd:string\\">foo</a>
  <b xsi:type=\\"xsd:string\\">bar</b>
</res>
</ns1:dotest2Response></SOAP-ENV:Body></SOAP-ENV:Envelope>
",
                        "unicode": false,
                        "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:ns1=\\"http://schemas.nothing.com\\" xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xmlns:SOAP-ENC=\\"http://schemas.xmlsoap.org/soap/encoding/\\" SOAP-ENV:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"><SOAP-ENV:Body>
<ns1:dotest2Response><res xsi:type=\\"ns1:book\\">
  <a xsi:type=\\"xsd:string\\">foo</a>
  <b xsi:type=\\"xsd:string\\">bar</b>
</res>
</ns1:dotest2Response></SOAP-ENV:Body></SOAP-ENV:Envelope>",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__doRequest",
          },
          "nullable": true,
          "type": TypeReference {
            "kind": "typereference",
            "name": "string",
            "raw": "string",
          },
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "SoapClient",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "TestSoapClient",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "a",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"a\\"",
                "unicode": false,
                "value": "a",
              },
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "b",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"c\\"",
                "unicode": false,
                "value": "c",
              },
            },
          ],
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "book",
      },
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "xml",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sxe",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "xml",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "simplexml_load_string",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "book",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "a",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "obj",
                },
              },
              "operator": "=",
              "right": Cast {
                "expr": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "a",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sxe",
                  },
                },
                "kind": "cast",
                "raw": "(string)",
                "type": "string",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "b",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "obj",
                },
              },
              "operator": "=",
              "right": Cast {
                "expr": PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "b",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sxe",
                  },
                },
                "kind": "cast",
                "raw": "(string)",
                "type": "string",
              },
            },
            "kind": "expressionstatement",
          },
          Return {
            "expr": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "book_from_xml",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "options",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'uri'",
                "unicode": false,
                "value": "uri",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'http://schemas.nothing.com'",
                "unicode": false,
                "value": "http://schemas.nothing.com",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'location'",
                "unicode": false,
                "value": "location",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'test://'",
                "unicode": false,
                "value": "test://",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'actor'",
                "unicode": false,
                "value": "actor",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'http://schemas.nothing.com'",
                "unicode": false,
                "value": "http://schemas.nothing.com",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'typemap'",
                "unicode": false,
                "value": "typemap",
              },
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"type_ns\\"",
                            "unicode": false,
                            "value": "type_ns",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"http://schemas.nothing.com\\"",
                            "unicode": false,
                            "value": "http://schemas.nothing.com",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"type_name\\"",
                            "unicode": false,
                            "value": "type_name",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"book\\"",
                            "unicode": false,
                            "value": "book",
                          },
                        },
                        Entry {
                          "byRef": false,
                          "key": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"from_xml\\"",
                            "unicode": false,
                            "value": "from_xml",
                          },
                          "kind": "entry",
                          "unpack": false,
                          "value": String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"book_from_xml\\"",
                            "unicode": false,
                            "value": "book_from_xml",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "client",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            NullKeyword {
              "kind": "nullkeyword",
              "raw": "NULL",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "options",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "TestSoapClient",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ret",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"???\\"",
              "unicode": false,
              "value": "???",
            },
          ],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "dotest2",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "client",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "ret",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"ok\\\\n\\"",
          "unicode": false,
          "value": "ok
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
