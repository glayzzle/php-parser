// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #37013 (server hangs when returning circular object references) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "request",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "REQUEST",
          "raw": "<<<REQUEST
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><soapenv:Envelope
xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
<soapenv:Body>
<ns2:getThingWithParent
 soapenv:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
 xmlns:ns2=\\"urn:test.soapserver#\\"/>
</soapenv:Body>
</soapenv:Envelope>
REQUEST",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><soapenv:Envelope
xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
<soapenv:Body>
<ns2:getThingWithParent
 soapenv:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
 xmlns:ns2=\\"urn:test.soapserver#\\"/>
</soapenv:Body>
</soapenv:Envelope>
",
                "unicode": false,
                "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><soapenv:Envelope
xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\"
xmlns:xsd=\\"http://www.w3.org/2001/XMLSchema\\"
xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
<soapenv:Body>
<ns2:getThingWithParent
 soapenv:encodingStyle=\\"http://schemas.xmlsoap.org/soap/encoding/\\"
 xmlns:ns2=\\"urn:test.soapserver#\\"/>
</soapenv:Body>
</soapenv:Envelope>",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "parent",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": null,
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "id",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": null,
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "children",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": null,
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "id",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "parent",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "id",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "id",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "parent",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "parent",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "ThingWithParent",
      },
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "p",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "1",
                      },
                      NullKeyword {
                        "kind": "nullkeyword",
                        "raw": "null",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "ThingWithParent",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "p2",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "2",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "p",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "ThingWithParent",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "p3",
                  },
                  "operator": "=",
                  "right": New {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "3",
                      },
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "p",
                      },
                    ],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "ThingWithParent",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "children",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "p",
                    },
                  },
                  "operator": "=",
                  "right": Array {
                    "items": Array [
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "p2",
                        },
                      },
                      Entry {
                        "byRef": false,
                        "key": null,
                        "kind": "entry",
                        "unpack": false,
                        "value": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "p3",
                        },
                      },
                    ],
                    "kind": "array",
                    "shortForm": false,
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "p2",
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "getThingWithParent",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "MultiRefTest",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "server",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"/bug37013.wsdl\\"",
                "unicode": false,
                "value": "/bug37013.wsdl",
              },
              "type": ".",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "SoapServer",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"MultiRefTest\\"",
            "unicode": false,
            "value": "MultiRefTest",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "setClass",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "server",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "request",
          },
        ],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "server",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
