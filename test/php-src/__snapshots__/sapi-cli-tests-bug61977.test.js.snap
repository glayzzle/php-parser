// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #61977 test CLI web-server support for Mime Type File extensions mapping 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"php_cli_server.inc\\"",
          "unicode": false,
          "value": "php_cli_server.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "doc_root",
        },
        "operator": "=",
        "right": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "docRoot",
          },
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'<?php ?>'",
                "unicode": false,
                "value": "<?php ?>",
              },
              NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "php_cli_server_start",
              "resolution": "uqn",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "mimetypes",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'html'",
                "unicode": false,
                "value": "html",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'htm'",
                "unicode": false,
                "value": "htm",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'svg'",
                "unicode": false,
                "value": "svg",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'css'",
                "unicode": false,
                "value": "css",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'js'",
                "unicode": false,
                "value": "js",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'png'",
                "unicode": false,
                "value": "png",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'webm'",
                "unicode": false,
                "value": "webm",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ogv'",
                "unicode": false,
                "value": "ogv",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'ogg'",
                "unicode": false,
                "value": "ogg",
              },
            },
          ],
          "kind": "array",
          "shortForm": true,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "host",
              },
              "operator": "=",
              "right": Name {
                "kind": "name",
                "name": "PHP_CLI_SERVER_HOSTNAME",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fp",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "php_cli_server_connect",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": ExpressionStatement {
              "expression": Exit {
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Connect failed'",
                  "unicode": false,
                  "value": "Connect failed",
                },
                "kind": "exit",
                "useDie": true,
              },
              "kind": "expressionstatement",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "fp",
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "doc_root",
                  },
                  "right": Encapsed {
                    "kind": "encapsed",
                    "raw": "\\"/foo.{$mimetype}\\"",
                    "type": "string",
                    "value": Array [
                      EncapsedPart {
                        "curly": false,
                        "expression": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "/foo.",
                          "unicode": false,
                          "value": "/foo.",
                        },
                        "kind": "encapsedpart",
                        "syntax": null,
                      },
                      EncapsedPart {
                        "curly": false,
                        "expression": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "mimetype",
                        },
                        "kind": "encapsedpart",
                        "syntax": "complex",
                      },
                    ],
                  },
                  "type": ".",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "''",
                  "unicode": false,
                  "value": "",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "file_put_contents",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "header",
              },
              "operator": "=",
              "right": Encapsed {
                "kind": "encapsed",
                "label": "HEADER",
                "raw": "<<<HEADER
GET /foo.{$mimetype} HTTP/1.1
Host: {$host}
HEADER",
                "type": "heredoc",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "GET /foo.",
                      "unicode": false,
                      "value": "GET /foo.",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "mimetype",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " HTTP/1.1
Host: ",
                      "unicode": false,
                      "value": " HTTP/1.1
Host: ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "host",
                    },
                    "kind": "encapsedpart",
                    "syntax": "complex",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "
",
                      "unicode": false,
                      "value": "",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                While {
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "text",
                          },
                          "operator": "=",
                          "right": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fp",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "fgets",
                              "resolution": "uqn",
                            },
                          },
                        },
                        "kind": "expressionstatement",
                      },
                      If {
                        "alternate": null,
                        "body": Block {
                          "children": Array [
                            Echo {
                              "expressions": Array [
                                Encapsed {
                                  "kind": "encapsed",
                                  "raw": "\\"foo.{$mimetype} => \\"",
                                  "type": "string",
                                  "value": Array [
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": "foo.",
                                        "unicode": false,
                                        "value": "foo.",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "mimetype",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": "complex",
                                    },
                                    EncapsedPart {
                                      "curly": false,
                                      "expression": String {
                                        "isDoubleQuote": false,
                                        "kind": "string",
                                        "raw": " => ",
                                        "unicode": false,
                                        "value": " => ",
                                      },
                                      "kind": "encapsedpart",
                                      "syntax": null,
                                    },
                                  ],
                                },
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "text",
                                },
                              ],
                              "kind": "echo",
                              "shortForm": false,
                            },
                          ],
                          "kind": "block",
                        },
                        "kind": "if",
                        "shortForm": false,
                        "test": Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [
                              String {
                                "isDoubleQuote": true,
                                "kind": "string",
                                "raw": "\\"Content-type:\\"",
                                "unicode": false,
                                "value": "Content-type:",
                              },
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "text",
                              },
                              Number {
                                "kind": "number",
                                "value": "13",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "strncasecmp",
                              "resolution": "uqn",
                            },
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0",
                          },
                          "type": "==",
                        },
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "while",
                  "shortForm": false,
                  "test": Unary {
                    "kind": "unary",
                    "type": "!",
                    "what": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "fp",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "feof",
                        "resolution": "uqn",
                      },
                    },
                  },
                },
                ExpressionStatement {
                  "expression": Silent {
                    "expr": Call {
                      "arguments": Array [
                        Bin {
                          "kind": "bin",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "doc_root",
                          },
                          "right": Encapsed {
                            "kind": "encapsed",
                            "raw": "\\"/foo.{$mimetype}\\"",
                            "type": "string",
                            "value": Array [
                              EncapsedPart {
                                "curly": false,
                                "expression": String {
                                  "isDoubleQuote": false,
                                  "kind": "string",
                                  "raw": "/foo.",
                                  "unicode": false,
                                  "value": "/foo.",
                                },
                                "kind": "encapsedpart",
                                "syntax": null,
                              },
                              EncapsedPart {
                                "curly": false,
                                "expression": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "mimetype",
                                },
                                "kind": "encapsedpart",
                                "syntax": "complex",
                              },
                            ],
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "unlink",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "silent",
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "fp",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "fclose",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "header",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "fwrite",
                "resolution": "uqn",
              },
            },
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "mimetypes",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "mimetype",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
