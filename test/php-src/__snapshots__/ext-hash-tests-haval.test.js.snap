// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Hash: haval algorithm (multi-vector, multi-pass, multi-width) 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Empty String\\\\n\\"",
          "unicode": false,
          "value": "Empty String
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": For {
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "algo",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'haval%d,%d'",
                      "unicode": false,
                      "value": "haval%d,%d",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bits",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "pass",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            Echo {
              "expressions": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "algo",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "': '",
                        "unicode": false,
                        "value": ": ",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "algo",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "''",
                          "unicode": false,
                          "value": "",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "hash",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
          ],
          "kind": "block",
        },
        "increment": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "+=",
            "right": Number {
              "kind": "number",
              "value": "32",
            },
          },
        ],
        "init": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "=",
            "right": Number {
              "kind": "number",
              "value": "128",
            },
          },
        ],
        "kind": "for",
        "shortForm": false,
        "test": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "right": Number {
              "kind": "number",
              "value": "256",
            },
            "type": "<=",
          },
        ],
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "3",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "right": Number {
            "kind": "number",
            "value": "5",
          },
          "type": "<=",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\\\"abc\\\\\\"\\\\n\\"",
          "unicode": false,
          "value": "\\"abc\\\\\\"
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": For {
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "algo",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'haval%d,%d'",
                      "unicode": false,
                      "value": "haval%d,%d",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bits",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "pass",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            Echo {
              "expressions": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "algo",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "': '",
                        "unicode": false,
                        "value": ": ",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "algo",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'abc'",
                          "unicode": false,
                          "value": "abc",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "hash",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
          ],
          "kind": "block",
        },
        "increment": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "+=",
            "right": Number {
              "kind": "number",
              "value": "32",
            },
          },
        ],
        "init": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "=",
            "right": Number {
              "kind": "number",
              "value": "128",
            },
          },
        ],
        "kind": "for",
        "shortForm": false,
        "test": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "right": Number {
              "kind": "number",
              "value": "256",
            },
            "type": "<=",
          },
        ],
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "3",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "right": Number {
            "kind": "number",
            "value": "5",
          },
          "type": "<=",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789\\\\\\"\\\\n\\"",
          "unicode": false,
          "value": "\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789\\\\\\"
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    For {
      "body": For {
        "body": Block {
          "children": Array [
            ExpressionStatement {
              "expression": Assign {
                "kind": "assign",
                "left": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "algo",
                },
                "operator": "=",
                "right": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'haval%d,%d'",
                      "unicode": false,
                      "value": "haval%d,%d",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "bits",
                    },
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "pass",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "sprintf",
                    "resolution": "uqn",
                  },
                },
              },
              "kind": "expressionstatement",
            },
            Echo {
              "expressions": Array [
                Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "algo",
                      },
                      "right": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "': '",
                        "unicode": false,
                        "value": ": ",
                      },
                      "type": ".",
                    },
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "algo",
                        },
                        String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789'",
                          "unicode": false,
                          "value": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ0123456789",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "hash",
                        "resolution": "uqn",
                      },
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"\\\\n\\"",
                    "unicode": false,
                    "value": "
",
                  },
                  "type": ".",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
          ],
          "kind": "block",
        },
        "increment": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "+=",
            "right": Number {
              "kind": "number",
              "value": "32",
            },
          },
        ],
        "init": Array [
          Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "operator": "=",
            "right": Number {
              "kind": "number",
              "value": "128",
            },
          },
        ],
        "kind": "for",
        "shortForm": false,
        "test": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bits",
            },
            "right": Number {
              "kind": "number",
              "value": "256",
            },
            "type": "<=",
          },
        ],
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "3",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pass",
          },
          "right": Number {
            "kind": "number",
            "value": "5",
          },
          "type": "<=",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
