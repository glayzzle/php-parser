// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Testing type-hinted lambda parameter inside namespace 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
            "operator": "=",
            "right": Closure {
              "arguments": Array [
                Parameter {
                  "attrGroups": Array [],
                  "byref": false,
                  "flags": 0,
                  "kind": "parameter",
                  "name": Identifier {
                    "kind": "identifier",
                    "name": "x",
                  },
                  "nullable": false,
                  "readonly": false,
                  "type": Name {
                    "kind": "name",
                    "name": "\\\\stdclass",
                    "resolution": "fqn",
                  },
                  "value": NullKeyword {
                    "kind": "nullkeyword",
                    "raw": "NULL",
                  },
                  "variadic": false,
                },
              ],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  ExpressionStatement {
                    "expression": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "x",
                        },
                      ],
                      "kind": "call",
                      "what": Name {
                        "kind": "name",
                        "name": "var_dump",
                        "resolution": "uqn",
                      },
                    },
                    "kind": "expressionstatement",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isStatic": false,
              "kind": "closure",
              "nullable": false,
              "type": null,
              "uses": Array [],
            },
          },
          "kind": "expressionstatement",
        },
        Class {
          "attrGroups": Array [],
          "body": Array [],
          "extends": Name {
            "kind": "name",
            "name": "\\\\stdclass",
            "resolution": "fqn",
          },
          "implements": null,
          "isAbstract": false,
          "isAnonymous": false,
          "isFinal": false,
          "kind": "class",
          "name": Identifier {
            "kind": "identifier",
            "name": "stdclass",
          },
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              NullKeyword {
                "kind": "nullkeyword",
                "raw": "NULL",
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "stdclass",
                  "resolution": "uqn",
                },
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "\\\\stdclass",
                  "resolution": "fqn",
                },
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
          "kind": "expressionstatement",
        },
      ],
      "kind": "namespace",
      "name": "foo",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
