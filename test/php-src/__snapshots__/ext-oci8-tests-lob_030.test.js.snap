// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test piecewise fetch of CLOBs equal to, and larger than PHP_OCI_LOB_BUFFER_SIZE 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/connect.inc'",
            "unicode": false,
            "value": "/connect.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/create_table.inc'",
            "unicode": false,
            "value": "/create_table.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "c",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "tn",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "id",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "length",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "ora_sql",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"INSERT INTO
                       \\"",
                        "unicode": false,
                        "value": "INSERT INTO
                       ",
                      },
                      "right": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "tn",
                      },
                      "type": ".",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\" (id, clob)
                      VALUES (\\"",
                      "unicode": false,
                      "value": " (id, clob)
                      VALUES (",
                    },
                    "type": ".",
                  },
                  "right": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "id",
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\", empty_clob())
                      RETURNING
                               clob
                      INTO :v_clob \\"",
                  "unicode": false,
                  "value": ", empty_clob())
                      RETURNING
                               clob
                      INTO :v_clob ",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "statement",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "ora_sql",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_parse",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "clob",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                  Name {
                    "kind": "name",
                    "name": "OCI_D_LOB",
                    "resolution": "uqn",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_new_descriptor",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "statement",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\":v_clob\\"",
                  "unicode": false,
                  "value": ":v_clob",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "clob",
                },
                Unary {
                  "kind": "unary",
                  "type": "-",
                  "what": Number {
                    "kind": "number",
                    "value": "1",
                  },
                },
                Name {
                  "kind": "name",
                  "name": "OCI_B_CLOB",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_bind_by_name",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "statement",
                },
                Name {
                  "kind": "name",
                  "name": "OCI_DEFAULT",
                  "resolution": "uqn",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_execute",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"x\\"",
                    "unicode": false,
                    "value": "x",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "length",
                  },
                  String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"x\\"",
                    "unicode": false,
                    "value": "x",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "str_pad",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "data",
                },
              ],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "write",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "clob",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "select_sql",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"SELECT clob FROM \\"",
                      "unicode": false,
                      "value": "SELECT clob FROM ",
                    },
                    "right": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "tn",
                    },
                    "type": ".",
                  },
                  "right": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\" where id = \\"",
                    "unicode": false,
                    "value": " where id = ",
                  },
                  "type": ".",
                },
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "id",
                },
                "type": ".",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "s",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c",
                  },
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "select_sql",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_parse",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "s",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "oci_execute",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "row",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "s",
                  },
                  Name {
                    "kind": "name",
                    "name": "OCI_RETURN_LOBS",
                    "resolution": "uqn",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "oci_fetch_array",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Call {
                  "arguments": Array [
                    OffsetLookup {
                      "kind": "offsetlookup",
                      "offset": Number {
                        "kind": "number",
                        "value": "0",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "row",
                      },
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "strlen",
                    "resolution": "uqn",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "insert_verify",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 1: A CLOB with an even number of bytes\\\\n\\"",
          "unicode": false,
          "value": "Test 1: A CLOB with an even number of bytes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "1",
          },
          Number {
            "kind": "number",
            "value": "1050000",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 2: A CLOB with an odd number of bytes\\\\n\\"",
          "unicode": false,
          "value": "Test 2: A CLOB with an odd number of bytes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "2",
          },
          Number {
            "kind": "number",
            "value": "1050001",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 3: A CLOB of 1048576 bytes (== size of PHP_OCI_LOB_BUFFER_SIZE at time of test creation)\\\\n\\"",
          "unicode": false,
          "value": "Test 3: A CLOB of 1048576 bytes (== size of PHP_OCI_LOB_BUFFER_SIZE at time of test creation)
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "3",
          },
          Number {
            "kind": "number",
            "value": "1048576",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 4: A CLOB of 1049028 bytes (the value used for chunks in the code)\\\\n\\"",
          "unicode": false,
          "value": "Test 4: A CLOB of 1049028 bytes (the value used for chunks in the code)
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "4",
          },
          Number {
            "kind": "number",
            "value": "1049028",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 5: A CLOB of 1049028-1 bytes\\\\n\\"",
          "unicode": false,
          "value": "Test 5: A CLOB of 1049028-1 bytes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "5",
          },
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "1049028",
            },
            "right": Number {
              "kind": "number",
              "value": "1",
            },
            "type": "-",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Test 6: A CLOB of 1049028+1 bytes\\\\n\\"",
          "unicode": false,
          "value": "Test 6: A CLOB of 1049028+1 bytes
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "schema",
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "table_name",
            },
            "type": ".",
          },
          Number {
            "kind": "number",
            "value": "6",
          },
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "1049028",
            },
            "right": Number {
              "kind": "number",
              "value": "1",
            },
            "type": "+",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "insert_verify",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": true,
        "target": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__DIR__",
            "value": "__DIR__",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/drop_table.inc'",
            "unicode": false,
            "value": "/drop_table.inc",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
