// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #79022 (class_exists returns True for classes that are not ready to be used) 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "class",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Foo",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Foo'",
                  "unicode": false,
                  "value": "Foo",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "class_exists",
                "resolution": "uqn",
              },
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"class Foo extends Bar{}\\"",
                      "unicode": false,
                      "value": "class Foo extends Bar{}",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Foo'",
                "unicode": false,
                "value": "Foo",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"class Bar {}\\"",
                      "unicode": false,
                      "value": "class Bar {}",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Bar'",
                "unicode": false,
                "value": "Bar",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"class Dummy implements iFoo {}\\"",
                      "unicode": false,
                      "value": "class Dummy implements iFoo {}",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'Dummy'",
                "unicode": false,
                "value": "Dummy",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "Dummy",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'iFoo'",
                  "unicode": false,
                  "value": "iFoo",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "interface_exists",
                "resolution": "uqn",
              },
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"interface iFoo extends iBar {}\\"",
                      "unicode": false,
                      "value": "interface iFoo extends iBar {}",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'iFoo'",
                "unicode": false,
                "value": "iFoo",
              },
              "type": "==",
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Eval {
                    "kind": "eval",
                    "source": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"interface iBar {}\\"",
                      "unicode": false,
                      "value": "interface iBar {}",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'iBar'",
                "unicode": false,
                "value": "iBar",
              },
              "type": "==",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "my_autoloader",
      },
      "nullable": false,
      "type": null,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'my_autoloader'",
            "unicode": false,
            "value": "my_autoloader",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "spl_autoload_register",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "Foo",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": New {
        "arguments": Array [],
        "kind": "new",
        "what": Name {
          "kind": "name",
          "name": "Dummy",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"okey\\"",
          "unicode": false,
          "value": "okey",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
