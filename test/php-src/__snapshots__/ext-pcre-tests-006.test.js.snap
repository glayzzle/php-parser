// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests preg_replace() with array of failing regular expressions 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "text",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'[CODE]&lt;td align=&quot;$stylevar[right]&quot;&gt;[/CODE]'",
          "unicode": false,
          "value": "[CODE]&lt;td align=&quot;$stylevar[right]&quot;&gt;[/CODE]",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Array {
              "items": Array [
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\\\\\1\\\\]#siU'",
                    "unicode": false,
                    "value": "#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\1\\\\]#siU",
                  },
                },
                Entry {
                  "byRef": false,
                  "key": null,
                  "kind": "entry",
                  "unpack": false,
                  "value": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "'#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\\\\\1\\\\]#siU'",
                    "unicode": false,
                    "value": "#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\1\\\\]#siU",
                  },
                },
              ],
              "kind": "array",
              "shortForm": false,
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "''",
              "unicode": false,
              "value": "",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "text",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_replace",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "text",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "result",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "result",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\\\\\1\\\\]#siU'",
              "unicode": false,
              "value": "#\\\\[(right)\\\\](((?R)|[^[]+?|\\\\[)*)\\\\[/\\\\1\\\\]#siU",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "''",
              "unicode": false,
              "value": "",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "text",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "preg_replace",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "text",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "result",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Done\\\\n\\"",
          "unicode": false,
          "value": "Done
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
