// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #61930: openssl corrupts ssl key resource when using openssl_get_publickey() 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "cert",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/cert.crt'",
                "unicode": false,
                "value": "/cert.crt",
              },
              "type": ".",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Encapsed {
          "kind": "encapsed",
          "label": "DATA",
          "raw": "<<<DATA
Please verify me
DATA",
          "type": "heredoc",
          "value": Array [
            EncapsedPart {
              "curly": false,
              "expression": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "Please verify me
",
                "unicode": false,
                "value": "Please verify me",
              },
              "kind": "encapsedpart",
              "syntax": null,
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sig",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'f9Gyb6NV/ENn7GUa37ygTLcF93XHf5fbFTnoYF/O+fXbq3iChGUbET0RuhOsptl'",
              "unicode": false,
              "value": "f9Gyb6NV/ENn7GUa37ygTLcF93XHf5fbFTnoYF/O+fXbq3iChGUbET0RuhOsptl",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'AODi6JsDLnJO4ikcVZo0tC1fFTj3LyCuPy3ZdgJbbVxQ/rviROCmuMFTqUW/Xa2'",
              "unicode": false,
              "value": "AODi6JsDLnJO4ikcVZo0tC1fFTj3LyCuPy3ZdgJbbVxQ/rviROCmuMFTqUW/Xa2",
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'LQYiapeCCgLQeWTLg7TM/BoHEkKbKLG/XT5jHvep1758A='",
            "unicode": false,
            "value": "LQYiapeCCgLQeWTLg7TM/BoHEkKbKLG/XT5jHvep1758A=",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "key",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "cert",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_get_publickey",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "key",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "openssl_get_publickey",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "sig",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "base64_decode",
                  "resolution": "uqn",
                },
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "key",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "openssl_verify",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
