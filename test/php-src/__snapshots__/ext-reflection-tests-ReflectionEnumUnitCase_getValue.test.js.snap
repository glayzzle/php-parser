// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests ReflectionEnumUnitCase::getValue() 1`] = `
Program {
  "children": Array [
    Enum {
      "attrGroups": Array [],
      "body": Array [
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Bar",
          },
          "value": null,
        },
        EnumCase {
          "kind": "enumcase",
          "name": Identifier {
            "kind": "identifier",
            "name": "Baz",
          },
          "value": null,
        },
      ],
      "implements": null,
      "kind": "enum",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
      "valueType": null,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "barFromReflection",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getValue",
            },
            "what": New {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "class",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "Foo",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Bar'",
                  "unicode": false,
                  "value": "Bar",
                },
              ],
              "kind": "new",
              "parenthesizedExpression": true,
              "what": Name {
                "kind": "name",
                "name": "ReflectionEnumUnitCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "bazFromReflection",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getValue",
            },
            "what": New {
              "arguments": Array [
                StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "class",
                  },
                  "what": Name {
                    "kind": "name",
                    "name": "Foo",
                    "resolution": "uqn",
                  },
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Baz'",
                  "unicode": false,
                  "value": "Baz",
                },
              ],
              "kind": "new",
              "parenthesizedExpression": true,
              "what": Name {
                "kind": "name",
                "name": "ReflectionEnumUnitCase",
                "resolution": "uqn",
              },
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "barFromReflection",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "bazFromReflection",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Bar",
              },
              "what": Name {
                "kind": "name",
                "name": "Foo",
                "resolution": "uqn",
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "barFromReflection",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Baz",
              },
              "what": Name {
                "kind": "name",
                "name": "Foo",
                "resolution": "uqn",
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "barFromReflection",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Bar",
              },
              "what": Name {
                "kind": "name",
                "name": "Foo",
                "resolution": "uqn",
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bazFromReflection",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": StaticLookup {
              "kind": "staticlookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "Baz",
              },
              "what": Name {
                "kind": "name",
                "name": "Foo",
                "resolution": "uqn",
              },
            },
            "right": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bazFromReflection",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
