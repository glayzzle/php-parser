// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test array_diff_ukey() function : usage variation - Passing boolean indexed array 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing array_diff_ukey() : usage variation ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing array_diff_ukey() : usage variation ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "input_array",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "0",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'0'",
                "unicode": false,
                "value": "0",
              },
            },
            Entry {
              "byRef": false,
              "key": Number {
                "kind": "number",
                "value": "1",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'1'",
                "unicode": false,
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "10",
                },
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'-10'",
                "unicode": false,
                "value": "-10",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'true'",
                "unicode": false,
                "value": "true",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'false'",
                "unicode": false,
                "value": "false",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "boolean_indx_array",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "true",
                "value": true,
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'boolt'",
                "unicode": false,
                "value": "boolt",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "false",
                "value": false,
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'boolf'",
                "unicode": false,
                "value": "boolf",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "TRUE",
                "value": true,
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'boolT'",
                "unicode": false,
                "value": "boolT",
              },
            },
            Entry {
              "byRef": false,
              "key": Boolean {
                "kind": "boolean",
                "raw": "FALSE",
                "value": false,
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'boolF'",
                "unicode": false,
                "value": "boolF",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    _Function {
      "arguments": Array [
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "key1",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
        Parameter {
          "attrGroups": Array [],
          "byref": false,
          "flags": 0,
          "kind": "parameter",
          "name": Identifier {
            "kind": "identifier",
            "name": "key2",
          },
          "nullable": false,
          "readonly": false,
          "type": null,
          "value": null,
          "variadic": false,
        },
      ],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [
          Return {
            "expr": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "key1",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "key2",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "strcasecmp",
                "resolution": "uqn",
              },
            },
            "kind": "return",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "key_compare_func",
      },
      "nullable": false,
      "type": null,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n-- Testing array_diff_ukey() function with boolean indexed array --\\\\n\\"",
          "unicode": false,
          "value": "
-- Testing array_diff_ukey() function with boolean indexed array --
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "boolean_indx_array",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "input_array",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'key_compare_func'",
                "unicode": false,
                "value": "key_compare_func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_diff_ukey",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "input_array",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "boolean_indx_array",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'key_compare_func'",
                "unicode": false,
                "value": "key_compare_func",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "array_diff_ukey",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
