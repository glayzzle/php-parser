// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test soundex() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing str_rot13() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing str_rot13() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nBasic tests\\\\n\\"",
          "unicode": false,
          "value": "
Basic tests
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"str_rot13() tests starting\\"",
                "unicode": false,
                "value": "str_rot13() tests starting",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "str_rot13",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"abcdefghijklmnopqrstuvwxyz\\"",
                "unicode": false,
                "value": "abcdefghijklmnopqrstuvwxyz",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "str_rot13",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nEnsure numeric characters are left untouched\\\\n\\"",
          "unicode": false,
          "value": "
Ensure numeric characters are left untouched
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings unequal : TEST FAILED\\\\n\\"",
                "unicode": false,
                "value": "Strings unequal : TEST FAILED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings equal : TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "Strings equal : TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"0123456789\\"",
                  "unicode": false,
                  "value": "0123456789",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "str_rot13",
                "resolution": "uqn",
              },
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"0123456789\\"",
              "unicode": false,
              "value": "0123456789",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strcmp",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "==",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nEnsure non-alphabetic characters are left untouched\\\\n\\"",
          "unicode": false,
          "value": "
Ensure non-alphabetic characters are left untouched
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings unequal : TEST FAILED\\\\n\\"",
                "unicode": false,
                "value": "Strings unequal : TEST FAILED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings equal : TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "Strings equal : TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"!%^&*()_-+={}[]:;@~#<,>.?\\"",
                "unicode": false,
                "value": "!%^&*()_-+={}[]:;@~#<,>.?",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "str_rot13",
              "resolution": "uqn",
            },
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"!%^&*()_-+={}[]:;@~#<,>.?\\"",
            "unicode": false,
            "value": "!%^&*()_-+={}[]:;@~#<,>.?",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "strcmp",
          "resolution": "uqn",
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\nEnsure strings round trip\\\\n\\"",
          "unicode": false,
          "value": "
Ensure strings round trip
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"str_rot13() tests starting\\"",
          "unicode": false,
          "value": "str_rot13() tests starting",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "encode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_rot13",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "decode",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "encode",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "str_rot13",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings unequal : TEST FAILED\\\\n\\"",
                "unicode": false,
                "value": "Strings unequal : TEST FAILED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Strings equal : TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "Strings equal : TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "decode",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "strcmp",
            "resolution": "uqn",
          },
        },
        "right": Number {
          "kind": "number",
          "value": "0",
        },
        "type": "==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
