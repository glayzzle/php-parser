// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Phar: create and modify phar 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Magic {
                "kind": "magic",
                "raw": "__DIR__",
                "value": "__DIR__",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/'",
                "unicode": false,
                "value": "/",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                Magic {
                  "kind": "magic",
                  "raw": "__FILE__",
                  "value": "__FILE__",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'.php'",
                  "unicode": false,
                  "value": ".php",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "basename",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'.phar.php'",
            "unicode": false,
            "value": ".phar.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pname",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'phar://'",
            "unicode": false,
            "value": "phar://",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fname",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Silent {
        "expr": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unlink",
            "resolution": "uqn",
          },
        },
        "kind": "silent",
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "pname",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/a.php'",
              "unicode": false,
              "value": "/a.php",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"brand new!\\\\n\\"",
            "unicode": false,
            "value": "brand new!
",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sig1",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getSignature",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "phar",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pname",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/a.php'",
            "unicode": false,
            "value": "/a.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "status",
              },
              "operator": "=",
              "right": Call {
                "arguments": Array [],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "opcache_get_status",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "pname",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'/a.php'",
                          "unicode": false,
                          "value": "/a.php",
                        },
                        "type": ".",
                      },
                      Boolean {
                        "kind": "boolean",
                        "raw": "true",
                        "value": true,
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "opcache_invalidate",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Number {
                        "kind": "number",
                        "value": "2",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "sleep",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "status",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "is_array",
                  "resolution": "uqn",
                },
              },
              "right": Bin {
                "kind": "bin",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": String {
                    "isDoubleQuote": true,
                    "kind": "string",
                    "raw": "\\"opcache_enabled\\"",
                    "unicode": false,
                    "value": "opcache_enabled",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "status",
                  },
                },
                "parenthesizedExpression": true,
                "right": Bin {
                  "kind": "bin",
                  "left": Isset {
                    "kind": "isset",
                    "variables": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"file_cache_only\\"",
                          "unicode": false,
                          "value": "file_cache_only",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "status",
                        },
                      },
                    ],
                  },
                  "parenthesizedExpression": true,
                  "right": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"file_cache_only\\"",
                      "unicode": false,
                      "value": "file_cache_only",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "status",
                    },
                  },
                  "type": "&&",
                },
                "type": "||",
              },
              "type": "&&",
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"opcache_get_status\\"",
            "unicode": false,
            "value": "opcache_get_status",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "function_exists",
          "resolution": "uqn",
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "pname",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/a.php'",
              "unicode": false,
              "value": "/a.php",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"modified!\\\\n\\"",
            "unicode": false,
            "value": "modified!
",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "pname",
            },
            "right": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'/b.php'",
              "unicode": false,
              "value": "/b.php",
            },
            "type": ".",
          },
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"another!\\\\n\\"",
            "unicode": false,
            "value": "another!
",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "file_put_contents",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "phar",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "fname",
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Phar",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sig2",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": PropertyLookup {
            "kind": "propertylookup",
            "offset": Identifier {
              "kind": "identifier",
              "name": "getSignature",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "phar",
            },
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'hash'",
              "unicode": false,
              "value": "hash",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "sig1",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'hash'",
              "unicode": false,
              "value": "hash",
            },
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "sig2",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'hash'",
                "unicode": false,
                "value": "hash",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sig1",
              },
            },
            "right": OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'hash'",
                "unicode": false,
                "value": "hash",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "sig2",
              },
            },
            "type": "!=",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pname",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/a.php'",
            "unicode": false,
            "value": "/a.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "pname",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/b.php'",
            "unicode": false,
            "value": "/b.php",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
