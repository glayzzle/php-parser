// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests pspell basic tests (warning: may fail with pspell/aspell < GNU Aspell 0.50.3) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "E_ALL",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "error_reporting",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\"",
          "unicode": false,
          "value": "",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"I will not buy this record, it is scratched. \\"",
          "unicode": false,
          "value": "I will not buy this record, it is scratched. ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Sorry \\"",
          "unicode": false,
          "value": "Sorry ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"I will not buy this record, it is scratched. \\"",
          "unicode": false,
          "value": "I will not buy this record, it is scratched. ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Uh, no, no, no. This is a tobacconist's \\"",
          "unicode": false,
          "value": "Uh, no, no, no. This is a tobacconist's ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Ah! I will not buy this tobacconist's, it is scratched. \\"",
          "unicode": false,
          "value": "Ah! I will not buy this tobacconist's, it is scratched. ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"No, no, no, no. Tobacco... um... cigarettes (holds up a pack). \\"",
          "unicode": false,
          "value": "No, no, no, no. Tobacco... um... cigarettes (holds up a pack). ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Ya! See-gar-ets! Ya! Uh... My hovercraft is full of eels. \\"",
          "unicode": false,
          "value": "Ya! See-gar-ets! Ya! Uh... My hovercraft is full of eels. ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Sorry? \\"",
          "unicode": false,
          "value": "Sorry? ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"My hovercraft (pantomimes puffing a cigarette)... is full of eels (pretends to strike a match). \\"",
          "unicode": false,
          "value": "My hovercraft (pantomimes puffing a cigarette)... is full of eels (pretends to strike a match). ",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string",
        },
        "operator": ".=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Ahh, matches!\\"",
          "unicode": false,
          "value": "Ahh, matches!",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pspell",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"en\\"",
              "unicode": false,
              "value": "en",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"\\"",
              "unicode": false,
              "value": "",
            },
            Bin {
              "kind": "bin",
              "left": Name {
                "kind": "name",
                "name": "PSPELL_FAST",
                "resolution": "uqn",
              },
              "parenthesizedExpression": true,
              "right": Name {
                "kind": "name",
                "name": "PSPELL_RUN_TOGETHER",
                "resolution": "uqn",
              },
              "type": "|",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pspell_new",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "array",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "' '",
              "unicode": false,
              "value": " ",
            },
            Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'/[^a-zA-Z0-9 ]/'",
                  "unicode": false,
                  "value": "/[^a-zA-Z0-9 ]/",
                },
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "''",
                  "unicode": false,
                  "value": "",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "string",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_replace",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "explode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": OffsetLookup {
                  "kind": "offsetlookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "i",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "array",
                  },
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "' : '",
                  "unicode": false,
                  "value": " : ",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"true\\\\n\\"",
                      "unicode": false,
                      "value": "true
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"..false\\\\n\\"",
                      "unicode": false,
                      "value": "..false
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                Echo {
                  "expressions": Array [
                    Bin {
                      "kind": "bin",
                      "left": Bin {
                        "kind": "bin",
                        "left": String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"Possible spellings: \\"",
                          "unicode": false,
                          "value": "Possible spellings: ",
                        },
                        "right": Call {
                          "arguments": Array [
                            String {
                              "isDoubleQuote": false,
                              "kind": "string",
                              "raw": "','",
                              "unicode": false,
                              "value": ",",
                            },
                            Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "pspell",
                                },
                                OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "i",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "array",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "pspell_suggest",
                                "resolution": "uqn",
                              },
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "join",
                            "resolution": "uqn",
                          },
                        },
                        "type": ".",
                      },
                      "right": String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                      "type": ".",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "pspell",
                  },
                  OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "array",
                    },
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "pspell_check",
                  "resolution": "uqn",
                },
              },
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "u",
          },
          "operator": "=",
          "right": Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "array",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "count",
              "resolution": "uqn",
            },
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "u",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
