// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Acquire callable to assert() 1`] = `
Program {
  "children": Array [
    Namespace {
      "children": Array [
        ExpressionStatement {
          "expression": Assign {
            "kind": "assign",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "assert",
            },
            "operator": "=",
            "right": Call {
              "arguments": Array [
                VariadicPlaceholder {
                  "kind": "variadicplaceholder",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
          },
          "kind": "expressionstatement",
        },
        ExpressionStatement {
          "expression": Call {
            "arguments": Array [
              Bin {
                "kind": "bin",
                "left": Number {
                  "kind": "number",
                  "value": "1",
                },
                "right": Number {
                  "kind": "number",
                  "value": "1.0",
                },
                "type": "==",
              },
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Message 1\\"",
                "unicode": false,
                "value": "Message 1",
              },
            ],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "assert",
            },
          },
          "kind": "expressionstatement",
        },
        Try {
          "always": null,
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Bin {
                      "kind": "bin",
                      "left": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "2.0",
                      },
                      "type": "==",
                    },
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"Message 2\\"",
                      "unicode": false,
                      "value": "Message 2",
                    },
                  ],
                  "kind": "call",
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "assert",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "catches": Array [
            Catch {
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "getMessage",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "e",
                          },
                        },
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "kind": "catch",
              "variable": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "what": Array [
                Name {
                  "kind": "name",
                  "name": "\\\\AssertionError",
                  "resolution": "fqn",
                },
              ],
            },
          ],
          "kind": "try",
        },
        Try {
          "always": null,
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Call {
                  "arguments": Array [
                    Bin {
                      "kind": "bin",
                      "left": Boolean {
                        "kind": "boolean",
                        "raw": "false",
                        "value": false,
                      },
                      "right": Call {
                        "arguments": Array [
                          VariadicPlaceholder {
                            "kind": "variadicplaceholder",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "strlen",
                          "resolution": "uqn",
                        },
                      },
                      "type": "&&",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "assert",
                    "resolution": "uqn",
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "catches": Array [
            Catch {
              "body": Block {
                "children": Array [
                  Echo {
                    "expressions": Array [
                      Call {
                        "arguments": Array [],
                        "kind": "call",
                        "what": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "getMessage",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "e",
                          },
                        },
                      },
                      String {
                        "isDoubleQuote": true,
                        "kind": "string",
                        "raw": "\\"\\\\n\\"",
                        "unicode": false,
                        "value": "
",
                      },
                    ],
                    "kind": "echo",
                    "shortForm": false,
                  },
                ],
                "kind": "block",
              },
              "kind": "catch",
              "variable": Variable {
                "curly": false,
                "kind": "variable",
                "name": "e",
              },
              "what": Array [
                Name {
                  "kind": "name",
                  "name": "\\\\AssertionError",
                  "resolution": "fqn",
                },
              ],
            },
          ],
          "kind": "try",
        },
      ],
      "kind": "namespace",
      "name": "Foo",
      "withBrackets": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
