// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug MOPB-29 (wrong length calculation for S) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "str",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Bin {
              "kind": "bin",
              "left": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'S:'",
                  "unicode": false,
                  "value": "S:",
                },
                "right": Bin {
                  "kind": "bin",
                  "left": Number {
                    "kind": "number",
                    "value": "100",
                  },
                  "parenthesizedExpression": true,
                  "right": Number {
                    "kind": "number",
                    "value": "3",
                  },
                  "type": "*",
                },
                "type": ".",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "':\\"'",
                "unicode": false,
                "value": ":\\"",
              },
              "type": ".",
            },
            "right": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'\\\\61'",
                  "unicode": false,
                  "value": "\\\\61",
                },
                Number {
                  "kind": "number",
                  "value": "100",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "str_repeat",
                "resolution": "uqn",
              },
            },
            "type": ".",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'\\"'",
            "unicode": false,
            "value": "\\"",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "arr",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'\\"'",
                      "unicode": false,
                      "value": "\\"",
                    },
                    Number {
                      "kind": "number",
                      "value": "200",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"1\\"",
                  "unicode": false,
                  "value": "1",
                },
                "type": ".",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'\\"'",
                      "unicode": false,
                      "value": "\\"",
                    },
                    Number {
                      "kind": "number",
                      "value": "200",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "str_repeat",
                    "resolution": "uqn",
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"2\\"",
                  "unicode": false,
                  "value": "2",
                },
                "type": ".",
              },
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "str",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "unserialize",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "data",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
