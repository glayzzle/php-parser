// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #45161 (Reusing a curl handle leaks memory) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Include {
        "kind": "include",
        "once": false,
        "require": false,
        "target": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'server.inc'",
          "unicode": false,
          "value": "server.inc",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "host",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "curl_cli_server_start",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ch",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "curl_init",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            RetIf {
              "falseExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'/dev/null'",
                "unicode": false,
                "value": "/dev/null",
              },
              "kind": "retif",
              "test": Bin {
                "kind": "bin",
                "left": Name {
                  "kind": "name",
                  "name": "PHP_OS_FAMILY",
                  "resolution": "uqn",
                },
                "right": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'Windows'",
                  "unicode": false,
                  "value": "Windows",
                },
                "type": "===",
              },
              "trueExpr": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'nul'",
                "unicode": false,
                "value": "nul",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'w'",
              "unicode": false,
              "value": "w",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "start",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Call {
            "arguments": Array [],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "memory_get_usage",
              "resolution": "uqn",
            },
          },
          "right": Number {
            "kind": "number",
            "value": "1024",
          },
          "type": "+",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ch",
                },
                Name {
                  "kind": "name",
                  "name": "CURLOPT_URL",
                  "resolution": "uqn",
                },
                Encapsed {
                  "kind": "encapsed",
                  "raw": "\\"{$host}/get.inc\\"",
                  "type": "string",
                  "value": Array [
                    EncapsedPart {
                      "curly": false,
                      "expression": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "host",
                      },
                      "kind": "encapsedpart",
                      "syntax": "complex",
                    },
                    EncapsedPart {
                      "curly": false,
                      "expression": String {
                        "isDoubleQuote": false,
                        "kind": "string",
                        "raw": "/get.inc",
                        "unicode": false,
                        "value": "/get.inc",
                      },
                      "kind": "encapsedpart",
                      "syntax": null,
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "curl_setopt",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ch",
                },
                Name {
                  "kind": "name",
                  "name": "CURLOPT_FILE",
                  "resolution": "uqn",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "fp",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "curl_setopt",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ch",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "curl_exec",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "1024",
          },
          "type": "<",
        },
      ],
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'PASS'",
                "unicode": false,
                "value": "PASS",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'FAIL'",
                "unicode": false,
                "value": "FAIL",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "start",
        },
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "memory_get_usage",
            "resolution": "uqn",
          },
        },
        "type": "<",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"\\\\n\\"",
          "unicode": false,
          "value": "
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fp",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Unset {
      "kind": "unset",
      "variables": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "fp",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
