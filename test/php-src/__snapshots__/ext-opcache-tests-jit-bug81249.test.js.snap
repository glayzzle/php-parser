// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #81249: Intermittent property assignment failure with JIT enabled 1`] = `
Program {
  "children": Array [
    Declare {
      "children": Array [],
      "directives": Array [
        DeclareDirective {
          "key": Identifier {
            "kind": "identifier",
            "name": "strict_types",
          },
          "kind": "declaredirective",
          "value": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "declare",
      "mode": "none",
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "JIS0212_INDEX",
              },
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": Number {
                      "kind": "number",
                      "value": "108",
                    },
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "728",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "private",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "JIS0208_INDEX",
              },
              "value": Array {
                "items": Array [],
                "kind": "array",
                "shortForm": true,
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "private",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "CONTINUE",
              },
              "value": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "1",
                },
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "private",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "FINISHED",
              },
              "value": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "2",
                },
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "private",
        },
        ClassConstant {
          "attrGroups": Array [],
          "constants": Array [
            Constant {
              "kind": "constant",
              "name": Identifier {
                "kind": "identifier",
                "name": "ERROR",
              },
              "value": Unary {
                "kind": "unary",
                "type": "-",
                "what": Number {
                  "kind": "number",
                  "value": "3",
                },
              },
            },
          ],
          "kind": "classconstant",
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "lead",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "isJis0212",
              },
              "nullable": false,
              "readonly": false,
              "type": null,
              "value": null,
            },
          ],
          "visibility": "private",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "lead",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Number {
                    "kind": "number",
                    "value": "0x00",
                  },
                },
                "kind": "expressionstatement",
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "isJis0212",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "operator": "=",
                  "right": Boolean {
                    "kind": "boolean",
                    "raw": "false",
                    "value": false,
                  },
                },
                "kind": "expressionstatement",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "__construct",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
        Method {
          "arguments": Array [
            Parameter {
              "attrGroups": Array [],
              "byref": true,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "ioQueue",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "array",
                "raw": "array",
              },
              "value": null,
              "variadic": false,
            },
            Parameter {
              "attrGroups": Array [],
              "byref": false,
              "flags": 0,
              "kind": "parameter",
              "name": Identifier {
                "kind": "identifier",
                "name": "byte",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "string",
                "raw": "string",
              },
              "value": null,
              "variadic": false,
            },
          ],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": PropertyLookup {
                                "kind": "propertylookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "lead",
                                },
                                "what": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "this",
                                },
                              },
                              "operator": "=",
                              "right": Number {
                                "kind": "number",
                                "value": "0x00",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          Return {
                            "expr": StaticLookup {
                              "kind": "staticlookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "ERROR",
                              },
                              "what": SelfReference {
                                "kind": "selfreference",
                                "raw": "self",
                              },
                            },
                            "kind": "return",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0x00",
                        },
                        "type": "!==",
                      },
                    },
                    Return {
                      "expr": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "FINISHED",
                        },
                        "what": SelfReference {
                          "kind": "selfreference",
                          "raw": "self",
                        },
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte",
                  },
                  "right": String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "''",
                    "unicode": false,
                    "value": "",
                  },
                  "type": "===",
                },
              },
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte",
                  },
                  "operator": "=",
                  "right": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "ord",
                      "resolution": "uqn",
                    },
                  },
                },
                "kind": "expressionstatement",
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Number {
                          "kind": "number",
                          "value": "0x00",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Number {
                            "kind": "number",
                            "value": "0xFF61",
                          },
                          "right": Number {
                            "kind": "number",
                            "value": "0xA1",
                          },
                          "type": "-",
                        },
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "byte",
                        },
                        "type": "+",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "lead",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0x8E",
                    },
                    "type": "===",
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xA1",
                      },
                      "type": ">=",
                    },
                    "parenthesizedExpression": true,
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xDF",
                      },
                      "type": "<=",
                    },
                    "type": "&&",
                  },
                  "type": "&&",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "isJis0212",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Boolean {
                          "kind": "boolean",
                          "raw": "true",
                          "value": true,
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "byte",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "CONTINUE",
                        },
                        "what": SelfReference {
                          "kind": "selfreference",
                          "raw": "self",
                        },
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": PropertyLookup {
                      "kind": "propertylookup",
                      "offset": Identifier {
                        "kind": "identifier",
                        "name": "lead",
                      },
                      "what": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "this",
                      },
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0x8F",
                    },
                    "type": "===",
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xA1",
                      },
                      "type": ">=",
                    },
                    "parenthesizedExpression": true,
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xFE",
                      },
                      "type": "<=",
                    },
                    "type": "&&",
                  },
                  "type": "&&",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "lead",
                        },
                        "operator": "=",
                        "right": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Number {
                          "kind": "number",
                          "value": "0x00",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codePoint",
                        },
                        "operator": "=",
                        "right": NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "index",
                              },
                              "operator": "=",
                              "right": StaticLookup {
                                "kind": "staticlookup",
                                "offset": Identifier {
                                  "kind": "identifier",
                                  "name": "JIS0208_INDEX",
                                },
                                "what": SelfReference {
                                  "kind": "selfreference",
                                  "raw": "self",
                                },
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          If {
                            "alternate": null,
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "index",
                                    },
                                    "operator": "=",
                                    "right": StaticLookup {
                                      "kind": "staticlookup",
                                      "offset": Identifier {
                                        "kind": "identifier",
                                        "name": "JIS0212_INDEX",
                                      },
                                      "what": SelfReference {
                                        "kind": "selfreference",
                                        "raw": "self",
                                      },
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                              ],
                              "kind": "block",
                            },
                            "kind": "if",
                            "shortForm": false,
                            "test": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "isJis0212",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "this",
                              },
                            },
                          },
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "codePoint",
                              },
                              "operator": "=",
                              "right": Bin {
                                "kind": "bin",
                                "left": OffsetLookup {
                                  "kind": "offsetlookup",
                                  "offset": Bin {
                                    "kind": "bin",
                                    "left": Bin {
                                      "kind": "bin",
                                      "left": Bin {
                                        "kind": "bin",
                                        "left": Bin {
                                          "kind": "bin",
                                          "left": Variable {
                                            "curly": false,
                                            "kind": "variable",
                                            "name": "lead",
                                          },
                                          "parenthesizedExpression": true,
                                          "right": Number {
                                            "kind": "number",
                                            "value": "0xA1",
                                          },
                                          "type": "-",
                                        },
                                        "right": Number {
                                          "kind": "number",
                                          "value": "94",
                                        },
                                        "type": "*",
                                      },
                                      "right": Variable {
                                        "curly": false,
                                        "kind": "variable",
                                        "name": "byte",
                                      },
                                      "type": "+",
                                    },
                                    "right": Number {
                                      "kind": "number",
                                      "value": "0xA1",
                                    },
                                    "type": "-",
                                  },
                                  "what": Variable {
                                    "curly": false,
                                    "kind": "variable",
                                    "name": "index",
                                  },
                                },
                                "right": NullKeyword {
                                  "kind": "nullkeyword",
                                  "raw": "null",
                                },
                                "type": "??",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "lead",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0xA1",
                            },
                            "type": ">=",
                          },
                          "parenthesizedExpression": true,
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "lead",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0xFE",
                            },
                            "type": "<=",
                          },
                          "type": "&&",
                        },
                        "right": Bin {
                          "kind": "bin",
                          "left": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "byte",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0xA1",
                            },
                            "type": ">=",
                          },
                          "parenthesizedExpression": true,
                          "right": Bin {
                            "kind": "bin",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "byte",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "0xFE",
                            },
                            "type": "<=",
                          },
                          "type": "&&",
                        },
                        "type": "&&",
                      },
                    },
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "isJis0212",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Boolean {
                          "kind": "boolean",
                          "raw": "false",
                          "value": false,
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          Return {
                            "expr": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "codePoint",
                            },
                            "kind": "return",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "codePoint",
                        },
                        "right": NullKeyword {
                          "kind": "nullkeyword",
                          "raw": "null",
                        },
                        "type": "!==",
                      },
                    },
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "ioQueue",
                                },
                                Call {
                                  "arguments": Array [
                                    Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "byte",
                                    },
                                  ],
                                  "kind": "call",
                                  "what": Name {
                                    "kind": "name",
                                    "name": "chr",
                                    "resolution": "uqn",
                                  },
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "array_unshift",
                                "resolution": "uqn",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "byte",
                        },
                        "right": Number {
                          "kind": "number",
                          "value": "0x7F",
                        },
                        "type": "<=",
                      },
                    },
                    Return {
                      "expr": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "ERROR",
                        },
                        "what": SelfReference {
                          "kind": "selfreference",
                          "raw": "self",
                        },
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "lead",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "this",
                    },
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0x00",
                  },
                  "type": "!==",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    Return {
                      "expr": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "byte",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "0x7F",
                  },
                  "type": "<=",
                },
              },
              If {
                "alternate": null,
                "body": Block {
                  "children": Array [
                    ExpressionStatement {
                      "expression": Assign {
                        "kind": "assign",
                        "left": PropertyLookup {
                          "kind": "propertylookup",
                          "offset": Identifier {
                            "kind": "identifier",
                            "name": "lead",
                          },
                          "what": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "this",
                          },
                        },
                        "operator": "=",
                        "right": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "byte",
                        },
                      },
                      "kind": "expressionstatement",
                    },
                    Return {
                      "expr": StaticLookup {
                        "kind": "staticlookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "CONTINUE",
                        },
                        "what": SelfReference {
                          "kind": "selfreference",
                          "raw": "self",
                        },
                      },
                      "kind": "return",
                    },
                  ],
                  "kind": "block",
                },
                "kind": "if",
                "shortForm": false,
                "test": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0x8E",
                      },
                      "type": "===",
                    },
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0x8F",
                      },
                      "type": "===",
                    },
                    "type": "||",
                  },
                  "right": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xA1",
                      },
                      "type": ">=",
                    },
                    "parenthesizedExpression": true,
                    "right": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "byte",
                      },
                      "right": Number {
                        "kind": "number",
                        "value": "0xFE",
                      },
                      "type": "<=",
                    },
                    "type": "&&",
                  },
                  "type": "||",
                },
              },
              Return {
                "expr": StaticLookup {
                  "kind": "staticlookup",
                  "offset": Identifier {
                    "kind": "identifier",
                    "name": "ERROR",
                  },
                  "what": SelfReference {
                    "kind": "selfreference",
                    "raw": "self",
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "handle",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "int",
            "raw": "int",
          },
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": true,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "EucJpDecoder",
      },
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "decoder",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "EucJpDecoder",
                  "resolution": "uqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "bytes",
              },
              "operator": "=",
              "right": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\x8F\\"",
                      "unicode": false,
                      "value": "",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\xA2\\"",
                      "unicode": false,
                      "value": "¢",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"\\\\xAF\\"",
                      "unicode": false,
                      "value": "¯",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "''",
                      "unicode": false,
                      "value": "",
                    },
                  },
                ],
                "kind": "array",
                "shortForm": true,
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "out",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          Foreach {
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "result",
                    },
                    "operator": "=",
                    "right": Call {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "bytes",
                        },
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "byte",
                        },
                      ],
                      "kind": "call",
                      "what": PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Identifier {
                          "kind": "identifier",
                          "name": "handle",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "decoder",
                        },
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                If {
                  "alternate": null,
                  "body": Block {
                    "children": Array [
                      ExpressionStatement {
                        "expression": Assign {
                          "kind": "assign",
                          "left": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "out",
                          },
                          "operator": "=",
                          "right": Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "result",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "kind": "if",
                  "shortForm": false,
                  "test": Bin {
                    "kind": "bin",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "result",
                    },
                    "right": Number {
                      "kind": "number",
                      "value": "0",
                    },
                    "type": ">=",
                  },
                },
              ],
              "kind": "block",
            },
            "key": null,
            "kind": "foreach",
            "shortForm": false,
            "source": Variable {
              "curly": false,
              "kind": "variable",
              "name": "bytes",
            },
            "value": Variable {
              "curly": false,
              "kind": "variable",
              "name": "byte",
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Bin {
                  "kind": "bin",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "out",
                  },
                  "right": Number {
                    "kind": "number",
                    "value": "728",
                  },
                  "type": "===",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "assert",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "2000",
          },
          "type": "<",
        },
      ],
    },
    Inline {
      "kind": "inline",
      "raw": "
OK",
      "value": "OK",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
