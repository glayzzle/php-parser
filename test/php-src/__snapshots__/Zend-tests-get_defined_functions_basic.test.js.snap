// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests get_defined_functions() function : basic functionality 1`] = `
Program {
  "children": Array [
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing get_defined_functions() : basic functionality ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing get_defined_functions() : basic functionality ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "foo",
      },
      "nullable": false,
      "type": null,
    },
    _Function {
      "arguments": Array [],
      "attrGroups": Array [],
      "body": Block {
        "children": Array [],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": Identifier {
        "kind": "identifier",
        "name": "HelloWorld",
      },
      "nullable": false,
      "type": null,
    },
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "f1",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": true,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "f2",
          },
          "nullable": false,
          "type": null,
          "visibility": "",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "C",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "func",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "get_defined_functions",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED: return type not an array\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED: return type not an array
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "func",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "is_array",
            "resolution": "uqn",
          },
        },
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED: no element in result array with key 'internal'\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED: no element in result array with key 'internal'
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"internal\\"",
                "unicode": false,
                "value": "internal",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "is_array",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "internal",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"internal\\"",
            "unicode": false,
            "value": "internal",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "func",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED: missing elements from 'internal' array\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED: missing elements from 'internal' array
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "internal",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"cos\\"",
                "unicode": false,
                "value": "cos",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "internal",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "in_array",
              "resolution": "uqn",
            },
          },
        },
        "right": Unary {
          "kind": "unary",
          "type": "!",
          "what": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"strlen\\"",
                "unicode": false,
                "value": "strlen",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "internal",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "in_array",
              "resolution": "uqn",
            },
          },
        },
        "type": "||",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED: no element in result array with key 'user'\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED: no element in result array with key 'user'
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"user\\"",
                "unicode": false,
                "value": "user",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "func",
              },
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "is_array",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "user",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"user\\"",
            "unicode": false,
            "value": "user",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "func",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST FAILED: missing elements from 'user' array\\\\n\\"",
                "unicode": false,
                "value": "TEST FAILED: missing elements from 'user' array
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "user",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"TEST PASSED\\\\n\\"",
                "unicode": false,
                "value": "TEST PASSED
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "user",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "count",
                "resolution": "uqn",
              },
            },
            "right": Number {
              "kind": "number",
              "value": "2",
            },
            "type": "==",
          },
          "right": Call {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"foo\\"",
                "unicode": false,
                "value": "foo",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "user",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "in_array",
              "resolution": "uqn",
            },
          },
          "type": "&&",
        },
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"helloworld\\"",
              "unicode": false,
              "value": "helloworld",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "user",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "in_array",
            "resolution": "uqn",
          },
        },
        "type": "&&",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
