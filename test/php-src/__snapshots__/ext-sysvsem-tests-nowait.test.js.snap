// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test sem_acquire with nowait option 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "P_SEMKEY",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Magic {
              "kind": "magic",
              "raw": "__FILE__",
              "value": "__FILE__",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'P'",
              "unicode": false,
              "value": "P",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftok",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "C_SEMKEY",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Magic {
              "kind": "magic",
              "raw": "__FILE__",
              "value": "__FILE__",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'C'",
              "unicode": false,
              "value": "C",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "ftok",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"P: parent process running.\\\\n\\"",
          "unicode": false,
          "value": "P: parent process running.
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Name {
            "kind": "name",
            "name": "SIGCHLD",
            "resolution": "uqn",
          },
          Name {
            "kind": "name",
            "name": "SIG_IGN",
            "resolution": "uqn",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "pcntl_signal",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p_sem_id",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "P_SEMKEY",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sem_get",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"P: failed to parent get semaphore.\\\\n\\"",
                "unicode": false,
                "value": "P: failed to parent get semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "p_sem_id",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "FALSE",
          "value": false,
        },
        "type": "===",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"P: got semaphore.\\\\n\\"",
          "unicode": false,
          "value": "P: got semaphore.
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "c_sem_id",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "C_SEMKEY",
            },
            Number {
              "kind": "number",
              "value": "1",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sem_get",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"P: failed to child get semaphore.\\\\n\\"",
                "unicode": false,
                "value": "P: failed to child get semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "c_sem_id",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "FALSE",
          "value": false,
        },
        "type": "===",
      },
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"P: fail to acquire semaphore.\\\\n\\"",
                "unicode": false,
                "value": "P: fail to acquire semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "p_sem_id",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sem_remove",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "p_sem_id",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sem_acquire",
            "resolution": "uqn",
          },
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"P: acquired semaphore.\\\\n\\"",
          "unicode": false,
          "value": "P: acquired semaphore.
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"P: failed to acquire semaphore.\\\\n\\"",
                "unicode": false,
                "value": "P: failed to acquire semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "c_sem_id",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sem_remove",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Exit {
              "expression": null,
              "kind": "exit",
              "useDie": false,
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "c_sem_id",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "sem_acquire",
            "resolution": "uqn",
          },
        },
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"P: acquired semaphore.\\\\n\\"",
          "unicode": false,
          "value": "P: acquired semaphore.
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pid",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "pcntl_fork",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Closure {
                  "arguments": Array [],
                  "attrGroups": Array [],
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"C: removing semaphore.\\\\n\\"",
                            "unicode": false,
                            "value": "C: removing semaphore.
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "c_sem_id",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "sem_remove",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "byref": false,
                  "isStatic": false,
                  "kind": "closure",
                  "nullable": false,
                  "type": null,
                  "uses": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "c_sem_id",
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "register_shutdown_function",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: child process running.\\\\n\\"",
                "unicode": false,
                "value": "C: child process running.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: got semaphores.\\\\n\\"",
                "unicode": false,
                "value": "C: got semaphores.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"C: test failed, Child was able to acquire semaphore.\\\\n\\"",
                      "unicode": false,
                      "value": "C: test failed, Child was able to acquire semaphore.
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Exit {
                    "expression": null,
                    "kind": "exit",
                    "useDie": false,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "p_sem_id",
                },
                Boolean {
                  "kind": "boolean",
                  "raw": "true",
                  "value": true,
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sem_acquire",
                "resolution": "uqn",
              },
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: failed to acquire semaphore.\\\\n\\"",
                "unicode": false,
                "value": "C: failed to acquire semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: releasing semaphore.\\\\n\\"",
                "unicode": false,
                "value": "C: releasing semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"C: failed to release semaphore.\\\\n\\"",
                      "unicode": false,
                      "value": "C: failed to release semaphore.
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c_sem_id",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sem_release",
                  "resolution": "uqn",
                },
              },
            },
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"C: fail to acquire semaphore.\\\\n\\"",
                      "unicode": false,
                      "value": "C: fail to acquire semaphore.
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Exit {
                    "expression": null,
                    "kind": "exit",
                    "useDie": false,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "p_sem_id",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sem_acquire",
                  "resolution": "uqn",
                },
              },
            },
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: success acquired semaphore.\\\\n\\"",
                "unicode": false,
                "value": "C: success acquired semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"C: releasing semaphore.\\\\n\\"",
                "unicode": false,
                "value": "C: releasing semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "p_sem_id",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sem_release",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Closure {
                  "arguments": Array [],
                  "attrGroups": Array [],
                  "body": Block {
                    "children": Array [
                      Echo {
                        "expressions": Array [
                          String {
                            "isDoubleQuote": true,
                            "kind": "string",
                            "raw": "\\"P: removing semaphore.\\\\n\\"",
                            "unicode": false,
                            "value": "P: removing semaphore.
",
                          },
                        ],
                        "kind": "echo",
                        "shortForm": false,
                      },
                      ExpressionStatement {
                        "expression": Call {
                          "arguments": Array [
                            Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "p_sem_id",
                            },
                          ],
                          "kind": "call",
                          "what": Name {
                            "kind": "name",
                            "name": "sem_remove",
                            "resolution": "uqn",
                          },
                        },
                        "kind": "expressionstatement",
                      },
                    ],
                    "kind": "block",
                  },
                  "byref": false,
                  "isStatic": false,
                  "kind": "closure",
                  "nullable": false,
                  "type": null,
                  "uses": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "p_sem_id",
                    },
                  ],
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "register_shutdown_function",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Number {
                  "kind": "number",
                  "value": "50000",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "usleep",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"P: failed to acquire semaphore.\\\\n\\"",
                      "unicode": false,
                      "value": "P: failed to acquire semaphore.
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
                ExpressionStatement {
                  "expression": Exit {
                    "expression": null,
                    "kind": "exit",
                    "useDie": false,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "c_sem_id",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sem_acquire",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "c_sem_id",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "sem_release",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"P: releasing semaphore.\\\\n\\"",
                "unicode": false,
                "value": "P: releasing semaphore.
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                Echo {
                  "expressions": Array [
                    String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"P: failed to release semaphore.\\\\n\\"",
                      "unicode": false,
                      "value": "P: failed to release semaphore.
",
                    },
                  ],
                  "kind": "echo",
                  "shortForm": false,
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Unary {
              "kind": "unary",
              "type": "!",
              "what": Call {
                "arguments": Array [
                  Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "p_sem_id",
                  },
                ],
                "kind": "call",
                "what": Name {
                  "kind": "name",
                  "name": "sem_release",
                  "resolution": "uqn",
                },
              },
            },
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "status",
              },
              "operator": "=",
              "right": NullKeyword {
                "kind": "nullkeyword",
                "raw": "null",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "pid",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "status",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "pcntl_waitpid",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Variable {
        "curly": false,
        "kind": "variable",
        "name": "pid",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
