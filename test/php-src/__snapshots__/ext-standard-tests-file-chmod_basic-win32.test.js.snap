// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests chmod() basic functionality 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"PERMISSIONS_MASK\\"",
            "unicode": false,
            "value": "PERMISSIONS_MASK",
          },
          Number {
            "kind": "number",
            "value": "0777",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "define",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "filename",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Magic {
            "kind": "magic",
            "raw": "__FILE__",
            "value": "__FILE__",
          },
          "right": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\".tmp\\"",
            "unicode": false,
            "value": ".tmp",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fd",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "filename",
            },
            String {
              "isDoubleQuote": true,
              "kind": "string",
              "raw": "\\"w+\\"",
              "unicode": false,
              "value": "w+",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "fopen",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "fd",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "fclose",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "filename",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "perms_to_set",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "chmod",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "set_perms",
              },
              "operator": "=",
              "right": Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [
                    Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "filename",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "fileperms",
                    "resolution": "uqn",
                  },
                },
                "parenthesizedExpression": true,
                "right": Name {
                  "kind": "name",
                  "name": "PERMISSIONS_MASK",
                  "resolution": "uqn",
                },
                "type": "&",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "clearstatcache",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"Setting mode %o gives mode %o\\\\n\\"",
                  "unicode": false,
                  "value": "Setting mode %o gives mode %o
",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "perms_to_set",
                },
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "set_perms",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "printf",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "-",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "perms_to_set",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "perms_to_set",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0777",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "perms_to_set",
          },
          "right": Number {
            "kind": "number",
            "value": "0",
          },
          "type": ">=",
        },
      ],
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "filename",
              },
              Number {
                "kind": "number",
                "value": "0777",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "chmod",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Variable {
            "curly": false,
            "kind": "variable",
            "name": "filename",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "unlink",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"done\\"",
          "unicode": false,
          "value": "done",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
