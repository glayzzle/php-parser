// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Test mb_strpos() function : usage variations - Pass different integers as $offset argument 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'UTF-8'",
            "unicode": false,
            "value": "UTF-8",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "mb_internal_encoding",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"*** Testing mb_strpos() : usage variations ***\\\\n\\"",
          "unicode": false,
          "value": "*** Testing mb_strpos() : usage variations ***
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string_ascii",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'+Is an English string'",
          "unicode": false,
          "value": "+Is an English string",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "needle_ascii",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'g'",
          "unicode": false,
          "value": "g",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "string_mb",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZ44CCMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII='",
              "unicode": false,
              "value": "5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZ44CCMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII=",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "needle_mb",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'44CC'",
              "unicode": false,
              "value": "44CC",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "base64_decode",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"\\\\n**-- Offset is: $i --**\\\\n\\"",
                "type": "string",
                "value": Array [
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "\\\\n**-- Offset is: ",
                      "unicode": false,
                      "value": "
**-- Offset is: ",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "kind": "encapsedpart",
                    "syntax": "simple",
                  },
                  EncapsedPart {
                    "curly": false,
                    "expression": String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": " --**\\\\n",
                      "unicode": false,
                      "value": " --**",
                    },
                    "kind": "encapsedpart",
                    "syntax": null,
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"-- ASCII String --\\\\n\\"",
                "unicode": false,
                "value": "-- ASCII String --
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "string_ascii",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "needle_ascii",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mb_strpos",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          "right": Name {
                            "kind": "name",
                            "name": "\\\\PHP_EOL",
                            "resolution": "fqn",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"--Multibyte String --\\\\n\\"",
                "unicode": false,
                "value": "--Multibyte String --
",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Call {
                        "arguments": Array [
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "string_mb",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "needle_mb",
                          },
                          Variable {
                            "curly": false,
                            "kind": "variable",
                            "name": "i",
                          },
                          String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'UTF-8'",
                            "unicode": false,
                            "value": "UTF-8",
                          },
                        ],
                        "kind": "call",
                        "what": Name {
                          "kind": "name",
                          "name": "mb_strpos",
                          "resolution": "uqn",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Bin {
                          "kind": "bin",
                          "left": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "getMessage",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "e",
                              },
                            },
                          },
                          "right": Name {
                            "kind": "name",
                            "name": "\\\\PHP_EOL",
                            "resolution": "fqn",
                          },
                          "type": ".",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "\\\\ValueError",
                    "resolution": "fqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "+=",
          "right": Number {
            "kind": "number",
            "value": "10",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Unary {
            "kind": "unary",
            "type": "-",
            "what": Number {
              "kind": "number",
              "value": "30",
            },
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "60",
          },
          "type": "<=",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
