// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests openssl_sign/verify: accept different algos 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "dir",
        },
        "operator": "=",
        "right": Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_pub",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dir",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/bug37820cert.pem'",
            "unicode": false,
            "value": "/bug37820cert.pem",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "file_key",
        },
        "operator": "=",
        "right": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "dir",
          },
          "right": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'/bug37820key.pem'",
            "unicode": false,
            "value": "/bug37820key.pem",
          },
          "type": ".",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "priv_key",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file_key",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "priv_key_id",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "priv_key",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_get_privatekey",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pub_key",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "file_pub",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "file_get_contents",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "pub_key_id",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "pub_key",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_get_publickey",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "data",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"some custom data\\"",
          "unicode": false,
          "value": "some custom data",
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"openssl_sign failed.\\"",
                "unicode": false,
                "value": "openssl_sign failed.",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Unary {
        "kind": "unary",
        "type": "!",
        "what": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "data",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "signature",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "priv_key_id",
            },
            Name {
              "kind": "name",
              "name": "OPENSSL_ALGO_MD5",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_sign",
            "resolution": "uqn",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ok",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "data",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "signature",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "pub_key_id",
            },
            Name {
              "kind": "name",
              "name": "OPENSSL_ALGO_MD5",
              "resolution": "uqn",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "openssl_verify",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    If {
      "alternate": If {
        "alternate": null,
        "body": Block {
          "children": Array [
            Echo {
              "expressions": Array [
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"openssl_verify failed.\\"",
                  "unicode": false,
                  "value": "openssl_verify failed.",
                },
              ],
              "kind": "echo",
              "shortForm": false,
            },
          ],
          "kind": "block",
        },
        "kind": "if",
        "shortForm": false,
        "test": Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "ok",
          },
          "right": Number {
            "kind": "number",
            "value": "0",
          },
          "type": "==",
        },
      },
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"Ok\\"",
                "unicode": false,
                "value": "Ok",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ok",
        },
        "right": Number {
          "kind": "number",
          "value": "1",
        },
        "type": "==",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
