// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #52808 (Segfault when specifying interval as two dates) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'Europe/Oslo'",
            "unicode": false,
            "value": "Europe/Oslo",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "date_default_timezone_set",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "intervals",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2008-05-11T15:30:00Z/2007-03-01T13:00:00Z\\"",
                "unicode": false,
                "value": "2008-05-11T15:30:00Z/2007-03-01T13:00:00Z",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2007-05-11T15:30:00Z/2008-03-01T13:00:00Z\\"",
                "unicode": false,
                "value": "2007-05-11T15:30:00Z/2008-03-01T13:00:00Z",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2007-05-11T15:30:00Z 2008-03-01T13:00:00Z\\"",
                "unicode": false,
                "value": "2007-05-11T15:30:00Z 2008-03-01T13:00:00Z",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2007-05-11T15:30:00Z/\\"",
                "unicode": false,
                "value": "2007-05-11T15:30:00Z/",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2007-05-11T15:30:00Z\\"",
                "unicode": false,
                "value": "2007-05-11T15:30:00Z",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"2007-05-11T15:30:00Z/:00Z\\"",
                "unicode": false,
                "value": "2007-05-11T15:30:00Z/:00Z",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "di",
                    },
                    "operator": "=",
                    "right": New {
                      "arguments": Array [
                        Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "iv",
                        },
                      ],
                      "kind": "new",
                      "what": Name {
                        "kind": "name",
                        "name": "DateInterval",
                        "resolution": "uqn",
                      },
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "di",
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Exception",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "intervals",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "iv",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"==DONE==\\\\n\\"",
          "unicode": false,
          "value": "==DONE==
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
