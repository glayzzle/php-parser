// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests new with an arbitrary expression 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "class",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'class'",
          "unicode": false,
          "value": "class",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          New {
            "arguments": Array [],
            "kind": "new",
            "what": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'std'",
                "unicode": false,
                "value": "std",
              },
              "parenthesizedExpression": true,
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "type": ".",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          New {
            "arguments": Array [],
            "kind": "new",
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Bin {
                "kind": "bin",
                "left": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "'std'",
                  "unicode": false,
                  "value": "std",
                },
                "parenthesizedExpression": true,
                "right": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "class",
                },
                "type": ".",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "obj",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "stdClass",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Variable {
              "curly": false,
              "kind": "variable",
              "name": "obj",
            },
            "right": Bin {
              "kind": "bin",
              "left": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'std'",
                "unicode": false,
                "value": "std",
              },
              "parenthesizedExpression": true,
              "right": Variable {
                "curly": false,
                "kind": "variable",
                "name": "class",
              },
              "type": ".",
            },
            "type": "instanceof",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
