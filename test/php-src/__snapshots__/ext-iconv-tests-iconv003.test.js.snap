// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests iconv() test 3 1`] = `
Program {
  "children": Array [
    For {
      "body": Block {
        "children": Array [
          If {
            "alternate": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Exit {
                    "expression": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"failed\\\\n\\"",
                      "unicode": false,
                      "value": "failed
",
                    },
                    "kind": "exit",
                    "useDie": true,
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "kind": "if",
            "shortForm": false,
            "test": Bin {
              "kind": "bin",
              "left": Silent {
                "expr": Call {
                  "arguments": Array [
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'blah'",
                      "unicode": false,
                      "value": "blah",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'blah'",
                      "unicode": false,
                      "value": "blah",
                    },
                    String {
                      "isDoubleQuote": false,
                      "kind": "string",
                      "raw": "'blah'",
                      "unicode": false,
                      "value": "blah",
                    },
                  ],
                  "kind": "call",
                  "what": Name {
                    "kind": "name",
                    "name": "iconv",
                    "resolution": "uqn",
                  },
                },
                "kind": "silent",
              },
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "''",
                "unicode": false,
                "value": "",
              },
              "type": "!=",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Pre {
          "kind": "pre",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "3",
          },
          "type": "<",
        },
      ],
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"success\\\\n\\"",
          "unicode": false,
          "value": "success
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
