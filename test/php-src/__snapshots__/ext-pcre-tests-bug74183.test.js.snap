// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Bug #74183 - preg_last_error not returning error code after error 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sRegex",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"/([A-Z]|[a-z]|[0-9]| |Ñ|ñ|!|&quot;|%|&amp;|'|´|-|:|;|>|=|&lt;|@|_|,|\\\\{|\\\\}|\`|~|á|é|í|ó|ú|Á|É|Í|Ó|Ú|ü|Ü){1,300}/\\"",
          "unicode": false,
          "value": "/([A-Z]|[a-z]|[0-9]| |Ñ|ñ|!|&quot;|%|&amp;|'|´|-|:|;|>|=|&lt;|@|_|,|\\\\{|\\\\}|\`|~|á|é|í|ó|ú|Á|É|Í|Ó|Ú|ü|Ü){1,300}/",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "sTest",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"Hello world\\"",
          "unicode": false,
          "value": "Hello world",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "sRegex",
              },
              Variable {
                "curly": false,
                "kind": "variable",
                "name": "sTest",
              },
            ],
            "kind": "call",
            "what": Name {
              "kind": "name",
              "name": "preg_match",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "preg_last_error",
                "resolution": "uqn",
              },
            },
            "right": Name {
              "kind": "name",
              "name": "\\\\PREG_INTERNAL_ERROR",
              "resolution": "fqn",
            },
            "type": "===",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
