// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests foreach() must return properly typed references 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "bar",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "int",
                "raw": "int",
              },
              "value": Number {
                "kind": "number",
                "value": "0",
              },
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "baz",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "float",
                "raw": "float",
              },
              "value": Number {
                "kind": "number",
                "value": "0.5",
              },
            },
          ],
          "visibility": "public",
        },
        PropertyStatement {
          "isStatic": false,
          "kind": "propertystatement",
          "properties": Array [
            Property {
              "attrGroups": Array [],
              "kind": "property",
              "name": Identifier {
                "kind": "identifier",
                "name": "privateProp",
              },
              "nullable": false,
              "readonly": false,
              "type": TypeReference {
                "kind": "typereference",
                "name": "float",
                "raw": "float",
              },
              "value": Number {
                "kind": "number",
                "value": "0.5",
              },
            },
          ],
          "visibility": "private",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Foreach {
                "body": Block {
                  "children": Array [
                    If {
                      "alternate": null,
                      "body": Block {
                        "children": Array [
                          ExpressionStatement {
                            "expression": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "val",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_dump",
                                "resolution": "uqn",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          ExpressionStatement {
                            "expression": Assign {
                              "kind": "assign",
                              "left": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "val",
                              },
                              "operator": "=",
                              "right": Number {
                                "kind": "number",
                                "value": "20",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          ExpressionStatement {
                            "expression": Call {
                              "arguments": Array [
                                Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "val",
                                },
                              ],
                              "kind": "call",
                              "what": Name {
                                "kind": "name",
                                "name": "var_dump",
                                "resolution": "uqn",
                              },
                            },
                            "kind": "expressionstatement",
                          },
                          Try {
                            "always": null,
                            "body": Block {
                              "children": Array [
                                ExpressionStatement {
                                  "expression": Assign {
                                    "kind": "assign",
                                    "left": Variable {
                                      "curly": false,
                                      "kind": "variable",
                                      "name": "val",
                                    },
                                    "operator": "=",
                                    "right": Array {
                                      "items": Array [],
                                      "kind": "array",
                                      "shortForm": true,
                                    },
                                  },
                                  "kind": "expressionstatement",
                                },
                              ],
                              "kind": "block",
                            },
                            "catches": Array [
                              Catch {
                                "body": Block {
                                  "children": Array [
                                    Echo {
                                      "expressions": Array [
                                        Call {
                                          "arguments": Array [],
                                          "kind": "call",
                                          "what": PropertyLookup {
                                            "kind": "propertylookup",
                                            "offset": Identifier {
                                              "kind": "identifier",
                                              "name": "getMessage",
                                            },
                                            "what": Variable {
                                              "curly": false,
                                              "kind": "variable",
                                              "name": "e",
                                            },
                                          },
                                        },
                                        String {
                                          "isDoubleQuote": true,
                                          "kind": "string",
                                          "raw": "\\"\\\\n\\"",
                                          "unicode": false,
                                          "value": "
",
                                        },
                                      ],
                                      "kind": "echo",
                                      "shortForm": false,
                                    },
                                  ],
                                  "kind": "block",
                                },
                                "kind": "catch",
                                "variable": Variable {
                                  "curly": false,
                                  "kind": "variable",
                                  "name": "e",
                                },
                                "what": Array [
                                  Name {
                                    "kind": "name",
                                    "name": "Error",
                                    "resolution": "uqn",
                                  },
                                ],
                              },
                            ],
                            "kind": "try",
                          },
                        ],
                        "kind": "block",
                      },
                      "kind": "if",
                      "shortForm": false,
                      "test": Bin {
                        "kind": "bin",
                        "left": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "k",
                        },
                        "right": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'privateProp'",
                          "unicode": false,
                          "value": "privateProp",
                        },
                        "type": "==",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "key": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "k",
                },
                "kind": "foreach",
                "shortForm": false,
                "source": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "this",
                },
                "value": Variable {
                  "byref": true,
                  "curly": false,
                  "kind": "variable",
                  "name": "val",
                },
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "nullable": false,
          "type": null,
          "visibility": "public",
        },
      ],
      "extends": null,
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "Foo",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Foo",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "val",
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "val",
              },
              "operator": "=",
              "right": Number {
                "kind": "number",
                "value": "20",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                PropertyLookup {
                  "kind": "propertylookup",
                  "offset": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "k",
                  },
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "foo",
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
          Try {
            "always": null,
            "body": Block {
              "children": Array [
                ExpressionStatement {
                  "expression": Assign {
                    "kind": "assign",
                    "left": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "val",
                    },
                    "operator": "=",
                    "right": Array {
                      "items": Array [],
                      "kind": "array",
                      "shortForm": true,
                    },
                  },
                  "kind": "expressionstatement",
                },
                ExpressionStatement {
                  "expression": Call {
                    "arguments": Array [
                      PropertyLookup {
                        "kind": "propertylookup",
                        "offset": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "k",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "foo",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "var_dump",
                      "resolution": "uqn",
                    },
                  },
                  "kind": "expressionstatement",
                },
              ],
              "kind": "block",
            },
            "catches": Array [
              Catch {
                "body": Block {
                  "children": Array [
                    Echo {
                      "expressions": Array [
                        Call {
                          "arguments": Array [],
                          "kind": "call",
                          "what": PropertyLookup {
                            "kind": "propertylookup",
                            "offset": Identifier {
                              "kind": "identifier",
                              "name": "getMessage",
                            },
                            "what": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "e",
                            },
                          },
                        },
                        String {
                          "isDoubleQuote": true,
                          "kind": "string",
                          "raw": "\\"\\\\n\\"",
                          "unicode": false,
                          "value": "
",
                        },
                      ],
                      "kind": "echo",
                      "shortForm": false,
                    },
                  ],
                  "kind": "block",
                },
                "kind": "catch",
                "variable": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "e",
                },
                "what": Array [
                  Name {
                    "kind": "name",
                    "name": "Error",
                    "resolution": "uqn",
                  },
                ],
              },
            ],
            "kind": "try",
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "curly": false,
        "kind": "variable",
        "name": "k",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
      "value": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "val",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "test",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
