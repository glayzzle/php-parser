// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests libtidy handling of 'new-blocklevel-tags' 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "contents",
        },
        "operator": "=",
        "right": String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'
<wps:block>
<wps:var>
<wps:value></wps:value>
</wps:var>
</wps:block>'",
          "unicode": false,
          "value": "
<wps:block>
<wps:var>
<wps:value></wps:value>
</wps:var>
</wps:block>",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "config",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'doctype'",
                "unicode": false,
                "value": "doctype",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'omit'",
                "unicode": false,
                "value": "omit",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'new-blocklevel-tags'",
                "unicode": false,
                "value": "new-blocklevel-tags",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'wps:block,wps:var,wps:value'",
                "unicode": false,
                "value": "wps:block,wps:var,wps:value",
              },
            },
            Entry {
              "byRef": false,
              "key": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'newline'",
                "unicode": false,
                "value": "newline",
              },
              "kind": "entry",
              "unpack": false,
              "value": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'LF'",
                "unicode": false,
                "value": "LF",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "tidy",
        },
        "operator": "=",
        "right": Call {
          "arguments": Array [
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "contents",
            },
            Variable {
              "curly": false,
              "kind": "variable",
              "name": "config",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "'utf8'",
              "unicode": false,
              "value": "utf8",
            },
          ],
          "kind": "call",
          "what": Name {
            "kind": "name",
            "name": "tidy_parse_string",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "cleanRepair",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "tidy",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        Variable {
          "curly": false,
          "kind": "variable",
          "name": "tidy",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
