// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests SPL: RecursiveIteratorIterator and begin/endIteration() 1`] = `
Program {
  "children": Array [
    Class {
      "attrGroups": Array [],
      "body": Array [
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"()\\\\n\\"",
                      "unicode": false,
                      "value": "()
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "beginIteration",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "void",
            "raw": "void",
          },
          "visibility": "",
        },
        Method {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              Echo {
                "expressions": Array [
                  Bin {
                    "kind": "bin",
                    "left": Magic {
                      "kind": "magic",
                      "raw": "__METHOD__",
                      "value": "__METHOD__",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\"()\\\\n\\"",
                      "unicode": false,
                      "value": "()
",
                    },
                    "type": ".",
                  },
                ],
                "kind": "echo",
                "shortForm": false,
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isAbstract": false,
          "isFinal": false,
          "isStatic": false,
          "kind": "method",
          "name": Identifier {
            "kind": "identifier",
            "name": "endIteration",
          },
          "nullable": false,
          "type": TypeReference {
            "kind": "typereference",
            "name": "void",
            "raw": "void",
          },
          "visibility": "",
        },
      ],
      "extends": Name {
        "kind": "name",
        "name": "RecursiveIteratorIterator",
        "resolution": "uqn",
      },
      "implements": null,
      "isAbstract": false,
      "isAnonymous": false,
      "isFinal": false,
      "kind": "class",
      "name": Identifier {
        "kind": "identifier",
        "name": "MyRecursiveIteratorIterator",
      },
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "ar",
        },
        "operator": "=",
        "right": Array {
          "items": Array [
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "1",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "2",
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Array {
                "items": Array [
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "31",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Number {
                      "kind": "number",
                      "value": "32",
                    },
                  },
                  Entry {
                    "byRef": false,
                    "key": null,
                    "kind": "entry",
                    "unpack": false,
                    "value": Array {
                      "items": Array [
                        Entry {
                          "byRef": false,
                          "key": null,
                          "kind": "entry",
                          "unpack": false,
                          "value": Number {
                            "kind": "number",
                            "value": "331",
                          },
                        },
                      ],
                      "kind": "array",
                      "shortForm": false,
                    },
                  },
                ],
                "kind": "array",
                "shortForm": false,
              },
            },
            Entry {
              "byRef": false,
              "key": null,
              "kind": "entry",
              "unpack": false,
              "value": Number {
                "kind": "number",
                "value": "4",
              },
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "it",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            New {
              "arguments": Array [
                Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "ar",
                },
                Number {
                  "kind": "number",
                  "value": "0",
                },
                String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"RecursiveArrayIterator\\"",
                  "unicode": false,
                  "value": "RecursiveArrayIterator",
                },
              ],
              "kind": "new",
              "what": Name {
                "kind": "name",
                "name": "ArrayObject",
                "resolution": "uqn",
              },
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "MyRecursiveIteratorIterator",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Echo {
        "expressions": Array [
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"$v\\\\n\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "\\\\n",
                  "unicode": false,
                  "value": "",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "it",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"===MORE===\\\\n\\"",
          "unicode": false,
          "value": "===MORE===
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Foreach {
      "body": Echo {
        "expressions": Array [
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"$v\\\\n\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "\\\\n",
                  "unicode": false,
                  "value": "",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "it",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"===MORE===\\\\n\\"",
          "unicode": false,
          "value": "===MORE===
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "rewind",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
      "kind": "expressionstatement",
    },
    Foreach {
      "body": Echo {
        "expressions": Array [
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"$v\\\\n\\"",
            "type": "string",
            "value": Array [
              EncapsedPart {
                "curly": false,
                "expression": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "v",
                },
                "kind": "encapsedpart",
                "syntax": "simple",
              },
              EncapsedPart {
                "curly": false,
                "expression": String {
                  "isDoubleQuote": false,
                  "kind": "string",
                  "raw": "\\\\n",
                  "unicode": false,
                  "value": "",
                },
                "kind": "encapsedpart",
                "syntax": null,
              },
            ],
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "curly": false,
        "kind": "variable",
        "name": "it",
      },
      "value": Variable {
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": PropertyLookup {
              "kind": "propertylookup",
              "offset": Identifier {
                "kind": "identifier",
                "name": "valid",
              },
              "what": Variable {
                "curly": false,
                "kind": "variable",
                "name": "it",
              },
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    Echo {
      "expressions": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"===MANUAL===\\\\n\\"",
          "unicode": false,
          "value": "===MANUAL===
",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "rewind",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "current",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "it",
                    },
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "next",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "it",
                },
              },
            },
            "kind": "expressionstatement",
          },
          Break {
            "kind": "break",
            "level": null,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "valid",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "rewind",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
      "kind": "expressionstatement",
    },
    While {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": PropertyLookup {
                    "kind": "propertylookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "current",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "it",
                    },
                  },
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [],
              "kind": "call",
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "next",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "it",
                },
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "valid",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "it",
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
