// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Cannot start a new fiber in a finally block in a force-closed fiber 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "fiber",
        },
        "operator": "=",
        "right": New {
          "arguments": Array [
            Closure {
              "arguments": Array [],
              "attrGroups": Array [],
              "body": Block {
                "children": Array [
                  Try {
                    "always": Block {
                      "children": Array [
                        Echo {
                          "expressions": Array [
                            String {
                              "isDoubleQuote": true,
                              "kind": "string",
                              "raw": "\\"finally\\\\n\\"",
                              "unicode": false,
                              "value": "finally
",
                            },
                          ],
                          "kind": "echo",
                          "shortForm": false,
                        },
                        ExpressionStatement {
                          "expression": Assign {
                            "kind": "assign",
                            "left": Variable {
                              "curly": false,
                              "kind": "variable",
                              "name": "fiber",
                            },
                            "operator": "=",
                            "right": New {
                              "arguments": Array [
                                Closure {
                                  "arguments": Array [],
                                  "attrGroups": Array [],
                                  "body": Block {
                                    "children": Array [
                                      Echo {
                                        "expressions": Array [
                                          String {
                                            "isDoubleQuote": true,
                                            "kind": "string",
                                            "raw": "\\"not executed\\\\n\\"",
                                            "unicode": false,
                                            "value": "not executed
",
                                          },
                                        ],
                                        "kind": "echo",
                                        "shortForm": false,
                                      },
                                    ],
                                    "kind": "block",
                                  },
                                  "byref": false,
                                  "isStatic": false,
                                  "kind": "closure",
                                  "nullable": false,
                                  "type": null,
                                  "uses": Array [],
                                },
                              ],
                              "kind": "new",
                              "what": Name {
                                "kind": "name",
                                "name": "Fiber",
                                "resolution": "uqn",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": PropertyLookup {
                              "kind": "propertylookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "start",
                              },
                              "what": Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "fiber",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                      ],
                      "kind": "block",
                    },
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [],
                            "kind": "call",
                            "what": StaticLookup {
                              "kind": "staticlookup",
                              "offset": Identifier {
                                "kind": "identifier",
                                "name": "suspend",
                              },
                              "what": Name {
                                "kind": "name",
                                "name": "Fiber",
                                "resolution": "uqn",
                              },
                            },
                          },
                          "kind": "expressionstatement",
                        },
                      ],
                      "kind": "block",
                    },
                    "catches": Array [],
                    "kind": "try",
                  },
                ],
                "kind": "block",
              },
              "byref": false,
              "isStatic": false,
              "kind": "closure",
              "nullable": false,
              "type": null,
              "uses": Array [],
            },
          ],
          "kind": "new",
          "what": Name {
            "kind": "name",
            "name": "Fiber",
            "resolution": "uqn",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [],
        "kind": "call",
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Identifier {
            "kind": "identifier",
            "name": "start",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "fiber",
          },
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
