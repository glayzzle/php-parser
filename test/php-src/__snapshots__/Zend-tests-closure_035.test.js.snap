// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Testing recursion detection with Closures 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "x",
        },
        "operator": "=",
        "right": Closure {
          "arguments": Array [],
          "attrGroups": Array [],
          "body": Block {
            "children": Array [
              ExpressionStatement {
                "expression": Assign {
                  "kind": "assign",
                  "left": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "h",
                  },
                  "operator": "=",
                  "right": Closure {
                    "arguments": Array [],
                    "attrGroups": Array [],
                    "body": Block {
                      "children": Array [
                        ExpressionStatement {
                          "expression": Call {
                            "arguments": Array [
                              Variable {
                                "curly": false,
                                "kind": "variable",
                                "name": "x",
                              },
                            ],
                            "kind": "call",
                            "what": Name {
                              "kind": "name",
                              "name": "var_dump",
                              "resolution": "uqn",
                            },
                          },
                          "kind": "expressionstatement",
                        },
                        Return {
                          "expr": Number {
                            "kind": "number",
                            "value": "1",
                          },
                          "kind": "return",
                        },
                      ],
                      "kind": "block",
                    },
                    "byref": false,
                    "isStatic": false,
                    "kind": "closure",
                    "nullable": false,
                    "type": null,
                    "uses": Array [
                      Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "x",
                      },
                    ],
                  },
                },
                "kind": "expressionstatement",
              },
              Return {
                "expr": Call {
                  "arguments": Array [],
                  "kind": "call",
                  "what": Variable {
                    "curly": false,
                    "kind": "variable",
                    "name": "h",
                  },
                },
                "kind": "return",
              },
            ],
            "kind": "block",
          },
          "byref": false,
          "isStatic": false,
          "kind": "closure",
          "nullable": false,
          "type": null,
          "uses": Array [
            Variable {
              "byref": true,
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          ],
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Variable {
              "curly": false,
              "kind": "variable",
              "name": "x",
            },
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "var_dump",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
