// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Testing $argc and $argv handling (cli) 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "argc",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'argc'",
            "unicode": false,
            "value": "argc",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "_SERVER",
          },
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Assign {
        "kind": "assign",
        "left": Variable {
          "curly": false,
          "kind": "variable",
          "name": "argv",
        },
        "operator": "=",
        "right": OffsetLookup {
          "kind": "offsetlookup",
          "offset": String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "'argv'",
            "unicode": false,
            "value": "argv",
          },
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "_SERVER",
          },
        },
      },
      "kind": "expressionstatement",
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "expressions": Array [
              Bin {
                "kind": "bin",
                "left": Bin {
                  "kind": "bin",
                  "left": Bin {
                    "kind": "bin",
                    "left": Bin {
                      "kind": "bin",
                      "left": Variable {
                        "curly": false,
                        "kind": "variable",
                        "name": "i",
                      },
                      "parenthesizedExpression": true,
                      "right": Number {
                        "kind": "number",
                        "value": "1",
                      },
                      "type": "-",
                    },
                    "right": String {
                      "isDoubleQuote": true,
                      "kind": "string",
                      "raw": "\\": \\"",
                      "unicode": false,
                      "value": ": ",
                    },
                    "type": ".",
                  },
                  "right": OffsetLookup {
                    "kind": "offsetlookup",
                    "offset": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "i",
                    },
                    "what": Variable {
                      "curly": false,
                      "kind": "variable",
                      "name": "argv",
                    },
                  },
                  "type": ".",
                },
                "right": String {
                  "isDoubleQuote": true,
                  "kind": "string",
                  "raw": "\\"\\\\n\\"",
                  "unicode": false,
                  "value": "
",
                },
                "type": ".",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "1",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Variable {
            "curly": false,
            "kind": "variable",
            "name": "argc",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
