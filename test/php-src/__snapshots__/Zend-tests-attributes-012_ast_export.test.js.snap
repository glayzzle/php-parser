// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Attributes AST can be exported. 1`] = `
Program {
  "children": Array [
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0",
            },
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "parenthesizedExpression": true,
              "right": Closure {
                "arguments": Array [
                  Parameter {
                    "attrGroups": Array [],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "a",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                  Parameter {
                    "attrGroups": Array [
                      AttrGroup {
                        "attrs": Array [
                          Attribute {
                            "args": Array [
                              Number {
                                "kind": "number",
                                "value": "1",
                              },
                            ],
                            "kind": "attribute",
                            "name": "A3",
                          },
                        ],
                        "kind": "attrgroup",
                      },
                    ],
                    "byref": false,
                    "flags": 0,
                    "kind": "parameter",
                    "name": Identifier {
                      "kind": "identifier",
                      "name": "b",
                    },
                    "nullable": false,
                    "readonly": false,
                    "type": null,
                    "value": null,
                    "variadic": false,
                  },
                ],
                "attrGroups": Array [
                  AttrGroup {
                    "attrs": Array [
                      Attribute {
                        "args": Array [],
                        "kind": "attribute",
                        "name": "A1",
                      },
                    ],
                    "kind": "attrgroup",
                  },
                  AttrGroup {
                    "attrs": Array [
                      Attribute {
                        "args": Array [],
                        "kind": "attribute",
                        "name": "A2",
                      },
                    ],
                    "kind": "attrgroup",
                  },
                ],
                "body": Block {
                  "children": Array [],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": null,
                "uses": Array [],
              },
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0",
            },
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "parenthesizedExpression": true,
              "right": Closure {
                "arguments": Array [],
                "attrGroups": Array [
                  AttrGroup {
                    "attrs": Array [
                      Attribute {
                        "args": Array [
                          Number {
                            "kind": "number",
                            "value": "1",
                          },
                          Number {
                            "kind": "number",
                            "value": "2",
                          },
                          Bin {
                            "kind": "bin",
                            "left": Number {
                              "kind": "number",
                              "value": "1",
                            },
                            "right": Number {
                              "kind": "number",
                              "value": "2",
                            },
                            "type": "+",
                          },
                        ],
                        "kind": "attribute",
                        "name": "A1",
                      },
                    ],
                    "kind": "attrgroup",
                  },
                ],
                "body": Number {
                  "kind": "number",
                  "value": "1",
                },
                "byref": false,
                "isStatic": false,
                "kind": "arrowfunc",
                "nullable": false,
                "type": null,
              },
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0",
            },
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "parenthesizedExpression": true,
              "right": New {
                "arguments": Array [],
                "kind": "new",
                "what": Class {
                  "attrGroups": Array [
                    AttrGroup {
                      "attrs": Array [
                        Attribute {
                          "args": Array [],
                          "kind": "attribute",
                          "name": "A1",
                        },
                      ],
                      "kind": "attrgroup",
                    },
                  ],
                  "body": Array [
                    ClassConstant {
                      "attrGroups": Array [
                        AttrGroup {
                          "attrs": Array [
                            Attribute {
                              "args": Array [],
                              "kind": "attribute",
                              "name": "A1",
                            },
                          ],
                          "kind": "attrgroup",
                        },
                        AttrGroup {
                          "attrs": Array [
                            Attribute {
                              "args": Array [],
                              "kind": "attribute",
                              "name": "A2",
                            },
                          ],
                          "kind": "attrgroup",
                        },
                      ],
                      "constants": Array [
                        Constant {
                          "kind": "constant",
                          "name": Identifier {
                            "kind": "identifier",
                            "name": "FOO",
                          },
                          "value": String {
                            "isDoubleQuote": false,
                            "kind": "string",
                            "raw": "'foo'",
                            "unicode": false,
                            "value": "foo",
                          },
                        },
                      ],
                      "kind": "classconstant",
                      "visibility": "",
                    },
                    PropertyStatement {
                      "isStatic": false,
                      "kind": "propertystatement",
                      "properties": Array [
                        Property {
                          "attrGroups": Array [
                            AttrGroup {
                              "attrs": Array [
                                Attribute {
                                  "args": Array [],
                                  "kind": "attribute",
                                  "name": "A2",
                                },
                              ],
                              "kind": "attrgroup",
                            },
                          ],
                          "kind": "property",
                          "name": Identifier {
                            "kind": "identifier",
                            "name": "x",
                          },
                          "nullable": false,
                          "readonly": false,
                          "type": null,
                          "value": null,
                        },
                      ],
                      "visibility": "public",
                    },
                    Method {
                      "arguments": Array [],
                      "attrGroups": Array [
                        AttrGroup {
                          "attrs": Array [
                            Attribute {
                              "args": Array [],
                              "kind": "attribute",
                              "name": "A3",
                            },
                          ],
                          "kind": "attrgroup",
                        },
                      ],
                      "body": Block {
                        "children": Array [],
                        "kind": "block",
                      },
                      "byref": false,
                      "isAbstract": false,
                      "isFinal": false,
                      "isStatic": false,
                      "kind": "method",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "a",
                      },
                      "nullable": false,
                      "type": null,
                      "visibility": "",
                    },
                  ],
                  "extends": null,
                  "implements": null,
                  "isAbstract": false,
                  "isAnonymous": true,
                  "isFinal": false,
                  "kind": "class",
                  "name": null,
                },
              },
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
    ExpressionStatement {
      "expression": Call {
        "arguments": Array [
          Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "0",
            },
            "right": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              "operator": "=",
              "parenthesizedExpression": true,
              "right": Closure {
                "arguments": Array [],
                "attrGroups": Array [],
                "body": Block {
                  "children": Array [
                    Class {
                      "attrGroups": Array [],
                      "body": Array [],
                      "extends": null,
                      "implements": null,
                      "isAbstract": false,
                      "isAnonymous": false,
                      "isFinal": false,
                      "kind": "class",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "Test1",
                      },
                    },
                    Interface {
                      "attrGroups": Array [],
                      "body": Array [],
                      "extends": null,
                      "kind": "interface",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "Test2",
                      },
                    },
                    Trait {
                      "body": Array [],
                      "kind": "trait",
                      "name": Identifier {
                        "kind": "identifier",
                        "name": "Test3",
                      },
                    },
                  ],
                  "kind": "block",
                },
                "byref": false,
                "isStatic": false,
                "kind": "closure",
                "nullable": false,
                "type": null,
                "uses": Array [],
              },
            },
            "type": "&&",
          },
        ],
        "kind": "call",
        "what": Name {
          "kind": "name",
          "name": "assert",
          "resolution": "uqn",
        },
      },
      "kind": "expressionstatement",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
