// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php-src tests Fixed bug #69845 (ArrayObject with ARRAY_AS_PROPS broken) 1`] = `
Program {
  "children": Array [
    For {
      "body": Block {
        "children": Array [
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": Variable {
                "curly": false,
                "kind": "variable",
                "name": "data",
              },
              "operator": "=",
              "right": New {
                "arguments": Array [
                  New {
                    "arguments": Array [],
                    "kind": "new",
                    "what": Name {
                      "kind": "name",
                      "name": "stdClass",
                      "resolution": "uqn",
                    },
                  },
                  StaticLookup {
                    "kind": "staticlookup",
                    "offset": Identifier {
                      "kind": "identifier",
                      "name": "ARRAY_AS_PROPS",
                    },
                    "what": Name {
                      "kind": "name",
                      "name": "ArrayObject",
                      "resolution": "uqn",
                    },
                  },
                ],
                "kind": "new",
                "what": Name {
                  "kind": "name",
                  "name": "\\\\ArrayObject",
                  "resolution": "fqn",
                },
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Assign {
              "kind": "assign",
              "left": PropertyLookup {
                "kind": "propertylookup",
                "offset": Identifier {
                  "kind": "identifier",
                  "name": "itemType",
                },
                "what": Variable {
                  "curly": false,
                  "kind": "variable",
                  "name": "data",
                },
              },
              "operator": "=",
              "right": String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "'bulletin'",
                "unicode": false,
                "value": "bulletin",
              },
            },
            "kind": "expressionstatement",
          },
          ExpressionStatement {
            "expression": Call {
              "arguments": Array [
                Unary {
                  "kind": "unary",
                  "type": "!",
                  "what": Call {
                    "arguments": Array [
                      OffsetLookup {
                        "kind": "offsetlookup",
                        "offset": String {
                          "isDoubleQuote": false,
                          "kind": "string",
                          "raw": "'itemType'",
                          "unicode": false,
                          "value": "itemType",
                        },
                        "what": Variable {
                          "curly": false,
                          "kind": "variable",
                          "name": "data",
                        },
                      },
                    ],
                    "kind": "call",
                    "what": Name {
                      "kind": "name",
                      "name": "is_null",
                      "resolution": "uqn",
                    },
                  },
                },
              ],
              "kind": "call",
              "what": Name {
                "kind": "name",
                "name": "var_dump",
                "resolution": "uqn",
              },
            },
            "kind": "expressionstatement",
          },
        ],
        "kind": "block",
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "2",
          },
          "type": "<",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
