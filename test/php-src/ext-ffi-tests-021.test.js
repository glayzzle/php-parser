// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/ffi/tests/021.phpt
  it("FFI 021: packed enums", function () {
    expect(parser.parseCode("<?php\nfunction test($size, $type) {\n    if (FFI::sizeof(FFI::new($type)) !== $size) {\n        echo \"FAIL: sizeof($type) != $size\\n\";\n    }\n}\ntest(4, \"enum {a1, b1}\");\ntest(1, \"enum __attribute__((packed)) {a2, b2}\");\ntest(4, \"enum {a3=0, b3=0x80000000}\");\ntest(8, \"enum {a4=-1, b4=0x80000000}\");\ntest(8, \"enum {a5=0x80000000, b5=-1}\");\ntest(4, \"enum {a6=-1, b6=0x7fffffff}\");\ntest(8, \"enum {a7=-1, b7=0x7fffffff, c7}\");\ntest(1, \"enum __attribute__((packed)) {a8=0, b8=0xff}\");\ntest(2, \"enum __attribute__((packed)) {a9=0, b9=0x100}\");\ntest(1, \"enum __attribute__((packed)) {a10=-1, b10=0x7f}\");\ntest(2, \"enum __attribute__((packed)) {a11=-1, b11=0x80}\");\ntest(1, \"enum __attribute__((packed)) {a12=0x7f, b12=-0x80}\");\ntest(2, \"enum __attribute__((packed)) {a13=0x7f, b13=-0x81}\");\ntest(2, \"enum __attribute__((packed)) {a8=0, b8=0xffff}\");\ntest(4, \"enum __attribute__((packed)) {a9=0, b9=0x10000}\");\ntest(2, \"enum __attribute__((packed)) {a10=-1, b10=0x7f00}\");\ntest(4, \"enum __attribute__((packed)) {a11=-1, b11=0x8000}\");\ntest(2, \"enum __attribute__((packed)) {a12=0x7f00, b12=-0x8000}\");\ntest(4, \"enum __attribute__((packed)) {a13=0x7f00, b13=-0x8001}\");\ntest(4, \"enum __attribute__((packed)) {a8=0, b8=0xffffffff}\");\ntest(8, \"enum __attribute__((packed)) {a9=0, b9=0x100000000}\");\ntest(4, \"enum __attribute__((packed)) {a10=-1, b10=0x7f000000}\");\ntest(8, \"enum __attribute__((packed)) {a11=-1, b11=0x80000000}\");\ntest(4, \"enum __attribute__((packed)) {a12=0x7f000000, b12=-0x80000000}\");\ntest(8, \"enum __attribute__((packed)) {a13=0x7f000000, b13=-0x80000001}\");\ntest(1, \"enum __attribute__((packed)) {a14=-0x80}\");\ntest(2, \"enum __attribute__((packed)) {a14=-0x81}\");\ntest(2, \"enum __attribute__((packed)) {a14=-0x8000}\");\ntest(4, \"enum __attribute__((packed)) {a14=-0x8001}\");\ntest(4, \"enum __attribute__((packed)) {a14=-0x80000000}\");\ntest(8, \"enum __attribute__((packed)) {a14=-0x80000001}\");\n?>\nok")).toMatchSnapshot();
  });
});
