// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/utf_encodings.phpt
  it("Torture test for UTF-{7,8,16,32}", function () {
    expect(parser.parseCode("<?php\nsrand(232); /* Make results consistent */\nmb_substitute_character(0x25); // '%'\ninclude('encoding_tests.inc');\n// all ranges of valid codepoints in UnicodeData.txt\n$validRanges = [\n [0x0, 0x377],\n [0x37a, 0x37f],\n [0x384, 0x38a],\n [0x38c, 0x38c],\n [0x38e, 0x3a1],\n [0x3a3, 0x52f],\n [0x531, 0x556],\n [0x559, 0x58a],\n [0x58d, 0x58f],\n [0x591, 0x5c7],\n [0x5d0, 0x5ea],\n [0x5ef, 0x5f4],\n [0x600, 0x61c],\n [0x61e, 0x70d],\n [0x70f, 0x74a],\n [0x74d, 0x7b1],\n [0x7c0, 0x7fa],\n [0x7fd, 0x82d],\n [0x830, 0x83e],\n [0x840, 0x85b],\n [0x85e, 0x85e],\n [0x860, 0x86a],\n [0x8a0, 0x8b4],\n [0x8b6, 0x8c7],\n [0x8d3, 0x983],\n [0x985, 0x98c],\n [0x98f, 0x990],\n [0x993, 0x9a8],\n [0x9aa, 0x9b0],\n [0x9b2, 0x9b2],\n [0x9b6, 0x9b9],\n [0x9bc, 0x9c4],\n [0x9c7, 0x9c8],\n [0x9cb, 0x9ce],\n [0x9d7, 0x9d7],\n [0x9dc, 0x9dd],\n [0x9df, 0x9e3],\n [0x9e6, 0x9fe],\n [0xa01, 0xa03],\n [0xa05, 0xa0a],\n [0xa0f, 0xa10],\n [0xa13, 0xa28],\n [0xa2a, 0xa30],\n [0xa32, 0xa33],\n [0xa35, 0xa36],\n [0xa38, 0xa39],\n [0xa3c, 0xa3c],\n [0xa3e, 0xa42],\n [0xa47, 0xa48],\n [0xa4b, 0xa4d],\n [0xa51, 0xa51],\n [0xa59, 0xa5c],\n [0xa5e, 0xa5e],\n [0xa66, 0xa76],\n [0xa81, 0xa83],\n [0xa85, 0xa8d],\n [0xa8f, 0xa91],\n [0xa93, 0xaa8],\n [0xaaa, 0xab0],\n [0xab2, 0xab3],\n [0xab5, 0xab9],\n [0xabc, 0xac5],\n [0xac7, 0xac9],\n [0xacb, 0xacd],\n [0xad0, 0xad0],\n [0xae0, 0xae3],\n [0xae6, 0xaf1],\n [0xaf9, 0xaff],\n [0xb01, 0xb03],\n [0xb05, 0xb0c],\n [0xb0f, 0xb10],\n [0xb13, 0xb28],\n [0xb2a, 0xb30],\n [0xb32, 0xb33],\n [0xb35, 0xb39],\n [0xb3c, 0xb44],\n [0xb47, 0xb48],\n [0xb4b, 0xb4d],\n [0xb55, 0xb57],\n [0xb5c, 0xb5d],\n [0xb5f, 0xb63],\n [0xb66, 0xb77],\n [0xb82, 0xb83],\n [0xb85, 0xb8a],\n [0xb8e, 0xb90],\n [0xb92, 0xb95],\n [0xb99, 0xb9a],\n [0xb9c, 0xb9c],\n [0xb9e, 0xb9f],\n [0xba3, 0xba4],\n [0xba8, 0xbaa],\n [0xbae, 0xbb9],\n [0xbbe, 0xbc2],\n [0xbc6, 0xbc8],\n [0xbca, 0xbcd],\n [0xbd0, 0xbd0],\n [0xbd7, 0xbd7],\n [0xbe6, 0xbfa],\n [0xc00, 0xc0c],\n [0xc0e, 0xc10],\n [0xc12, 0xc28],\n [0xc2a, 0xc39],\n [0xc3d, 0xc44],\n [0xc46, 0xc48],\n [0xc4a, 0xc4d],\n [0xc55, 0xc56],\n [0xc58, 0xc5a],\n [0xc60, 0xc63],\n [0xc66, 0xc6f],\n [0xc77, 0xc8c],\n [0xc8e, 0xc90],\n [0xc92, 0xca8],\n [0xcaa, 0xcb3],\n [0xcb5, 0xcb9],\n [0xcbc, 0xcc4],\n [0xcc6, 0xcc8],\n [0xcca, 0xccd],\n [0xcd5, 0xcd6],\n [0xcde, 0xcde],\n [0xce0, 0xce3],\n [0xce6, 0xcef],\n [0xcf1, 0xcf2],\n [0xd00, 0xd0c],\n [0xd0e, 0xd10],\n [0xd12, 0xd44],\n [0xd46, 0xd48],\n [0xd4a, 0xd4f],\n [0xd54, 0xd63],\n [0xd66, 0xd7f],\n [0xd81, 0xd83],\n [0xd85, 0xd96],\n [0xd9a, 0xdb1],\n [0xdb3, 0xdbb],\n [0xdbd, 0xdbd],\n [0xdc0, 0xdc6],\n [0xdca, 0xdca],\n [0xdcf, 0xdd4],\n [0xdd6, 0xdd6],\n [0xdd8, 0xddf],\n [0xde6, 0xdef],\n [0xdf2, 0xdf4],\n [0xe01, 0xe3a],\n [0xe3f, 0xe5b],\n [0xe81, 0xe82],\n [0xe84, 0xe84],\n [0xe86, 0xe8a],\n [0xe8c, 0xea3],\n [0xea5, 0xea5],\n [0xea7, 0xebd],\n [0xec0, 0xec4],\n [0xec6, 0xec6],\n [0xec8, 0xecd],\n [0xed0, 0xed9],\n [0xedc, 0xedf],\n [0xf00, 0xf47],\n [0xf49, 0xf6c],\n [0xf71, 0xf97],\n [0xf99, 0xfbc],\n [0xfbe, 0xfcc],\n [0xfce, 0xfda],\n [0x1000, 0x10c5],\n [0x10c7, 0x10c7],\n [0x10cd, 0x10cd],\n [0x10d0, 0x1248],\n [0x124a, 0x124d],\n [0x1250, 0x1256],\n [0x1258, 0x1258],\n [0x125a, 0x125d],\n [0x1260, 0x1288],\n [0x128a, 0x128d],\n [0x1290, 0x12b0],\n [0x12b2, 0x12b5],\n [0x12b8, 0x12be],\n [0x12c0, 0x12c0],\n [0x12c2, 0x12c5],\n [0x12c8, 0x12d6],\n [0x12d8, 0x1310],\n [0x1312, 0x1315],\n [0x1318, 0x135a],\n [0x135d, 0x137c],\n [0x1380, 0x1399],\n [0x13a0, 0x13f5],\n [0x13f8, 0x13fd],\n [0x1400, 0x169c],\n [0x16a0, 0x16f8],\n [0x1700, 0x170c],\n [0x170e, 0x1714],\n [0x1720, 0x1736],\n [0x1740, 0x1753],\n [0x1760, 0x176c],\n [0x176e, 0x1770],\n [0x1772, 0x1773],\n [0x1780, 0x17dd],\n [0x17e0, 0x17e9],\n [0x17f0, 0x17f9],\n [0x1800, 0x180e],\n [0x1810, 0x1819],\n [0x1820, 0x1878],\n [0x1880, 0x18aa],\n [0x18b0, 0x18f5],\n [0x1900, 0x191e],\n [0x1920, 0x192b],\n [0x1930, 0x193b],\n [0x1940, 0x1940],\n [0x1944, 0x196d],\n [0x1970, 0x1974],\n [0x1980, 0x19ab],\n [0x19b0, 0x19c9],\n [0x19d0, 0x19da],\n [0x19de, 0x1a1b],\n [0x1a1e, 0x1a5e],\n [0x1a60, 0x1a7c],\n [0x1a7f, 0x1a89],\n [0x1a90, 0x1a99],\n [0x1aa0, 0x1aad],\n [0x1ab0, 0x1ac0],\n [0x1b00, 0x1b4b],\n [0x1b50, 0x1b7c],\n [0x1b80, 0x1bf3],\n [0x1bfc, 0x1c37],\n [0x1c3b, 0x1c49],\n [0x1c4d, 0x1c88],\n [0x1c90, 0x1cba],\n [0x1cbd, 0x1cc7],\n [0x1cd0, 0x1cfa],\n [0x1d00, 0x1df9],\n [0x1dfb, 0x1f15],\n [0x1f18, 0x1f1d],\n [0x1f20, 0x1f45],\n [0x1f48, 0x1f4d],\n [0x1f50, 0x1f57],\n [0x1f59, 0x1f59],\n [0x1f5b, 0x1f5b],\n [0x1f5d, 0x1f5d],\n [0x1f5f, 0x1f7d],\n [0x1f80, 0x1fb4],\n [0x1fb6, 0x1fc4],\n [0x1fc6, 0x1fd3],\n [0x1fd6, 0x1fdb],\n [0x1fdd, 0x1fef],\n [0x1ff2, 0x1ff4],\n [0x1ff6, 0x1ffe],\n [0x2000, 0x2064],\n [0x2066, 0x2071],\n [0x2074, 0x208e],\n [0x2090, 0x209c],\n [0x20a0, 0x20bf],\n [0x20d0, 0x20f0],\n [0x2100, 0x218b],\n [0x2190, 0x2426],\n [0x2440, 0x244a],\n [0x2460, 0x2b73],\n [0x2b76, 0x2b95],\n [0x2b97, 0x2c2e],\n [0x2c30, 0x2c5e],\n [0x2c60, 0x2cf3],\n [0x2cf9, 0x2d25],\n [0x2d27, 0x2d27],\n [0x2d2d, 0x2d2d],\n [0x2d30, 0x2d67],\n [0x2d6f, 0x2d70],\n [0x2d7f, 0x2d96],\n [0x2da0, 0x2da6],\n [0x2da8, 0x2dae],\n [0x2db0, 0x2db6],\n [0x2db8, 0x2dbe],\n [0x2dc0, 0x2dc6],\n [0x2dc8, 0x2dce],\n [0x2dd0, 0x2dd6],\n [0x2dd8, 0x2dde],\n [0x2de0, 0x2e52],\n [0x2e80, 0x2e99],\n [0x2e9b, 0x2ef3],\n [0x2f00, 0x2fd5],\n [0x2ff0, 0x2ffb],\n [0x3000, 0x303f],\n [0x3041, 0x3096],\n [0x3099, 0x30ff],\n [0x3105, 0x312f],\n [0x3131, 0x318e],\n [0x3190, 0x31e3],\n [0x31f0, 0x321e],\n [0x3220, 0x3400],\n [0x4dbf, 0x4e00],\n [0x9ffc, 0x9ffc],\n [0xa000, 0xa48c],\n [0xa490, 0xa4c6],\n [0xa4d0, 0xa62b],\n [0xa640, 0xa6f7],\n [0xa700, 0xa7bf],\n [0xa7c2, 0xa7ca],\n [0xa7f5, 0xa82c],\n [0xa830, 0xa839],\n [0xa840, 0xa877],\n [0xa880, 0xa8c5],\n [0xa8ce, 0xa8d9],\n [0xa8e0, 0xa953],\n [0xa95f, 0xa97c],\n [0xa980, 0xa9cd],\n [0xa9cf, 0xa9d9],\n [0xa9de, 0xa9fe],\n [0xaa00, 0xaa36],\n [0xaa40, 0xaa4d],\n [0xaa50, 0xaa59],\n [0xaa5c, 0xaac2],\n [0xaadb, 0xaaf6],\n [0xab01, 0xab06],\n [0xab09, 0xab0e],\n [0xab11, 0xab16],\n [0xab20, 0xab26],\n [0xab28, 0xab2e],\n [0xab30, 0xab6b],\n [0xab70, 0xabed],\n [0xabf0, 0xabf9],\n [0xac00, 0xac00],\n [0xd7a3, 0xd7a3],\n [0xd7b0, 0xd7c6],\n [0xd7cb, 0xd7fb],\n [0xd800, 0xd800],\n [0xdb7f, 0xdb80],\n [0xdbff, 0xdc00],\n [0xdfff, 0xe000],\n [0xf8ff, 0xfa6d],\n [0xfa70, 0xfad9],\n [0xfb00, 0xfb06],\n [0xfb13, 0xfb17],\n [0xfb1d, 0xfb36],\n [0xfb38, 0xfb3c],\n [0xfb3e, 0xfb3e],\n [0xfb40, 0xfb41],\n [0xfb43, 0xfb44],\n [0xfb46, 0xfbc1],\n [0xfbd3, 0xfd3f],\n [0xfd50, 0xfd8f],\n [0xfd92, 0xfdc7],\n [0xfdf0, 0xfdfd],\n [0xfe00, 0xfe19],\n [0xfe20, 0xfe52],\n [0xfe54, 0xfe66],\n [0xfe68, 0xfe6b],\n [0xfe70, 0xfe74],\n [0xfe76, 0xfefc],\n [0xfeff, 0xfeff],\n [0xff01, 0xffbe],\n [0xffc2, 0xffc7],\n [0xffca, 0xffcf],\n [0xffd2, 0xffd7],\n [0xffda, 0xffdc],\n [0xffe0, 0xffe6],\n [0xffe8, 0xffee],\n [0xfff9, 0xfffd],\n [0x10000, 0x1000b],\n [0x1000d, 0x10026],\n [0x10028, 0x1003a],\n [0x1003c, 0x1003d],\n [0x1003f, 0x1004d],\n [0x10050, 0x1005d],\n [0x10080, 0x100fa],\n [0x10100, 0x10102],\n [0x10107, 0x10133],\n [0x10137, 0x1018e],\n [0x10190, 0x1019c],\n [0x101a0, 0x101a0],\n [0x101d0, 0x101fd],\n [0x10280, 0x1029c],\n [0x102a0, 0x102d0],\n [0x102e0, 0x102fb],\n [0x10300, 0x10323],\n [0x1032d, 0x1034a],\n [0x10350, 0x1037a],\n [0x10380, 0x1039d],\n [0x1039f, 0x103c3],\n [0x103c8, 0x103d5],\n [0x10400, 0x1049d],\n [0x104a0, 0x104a9],\n [0x104b0, 0x104d3],\n [0x104d8, 0x104fb],\n [0x10500, 0x10527],\n [0x10530, 0x10563],\n [0x1056f, 0x1056f],\n [0x10600, 0x10736],\n [0x10740, 0x10755],\n [0x10760, 0x10767],\n [0x10800, 0x10805],\n [0x10808, 0x10808],\n [0x1080a, 0x10835],\n [0x10837, 0x10838],\n [0x1083c, 0x1083c],\n [0x1083f, 0x10855],\n [0x10857, 0x1089e],\n [0x108a7, 0x108af],\n [0x108e0, 0x108f2],\n [0x108f4, 0x108f5],\n [0x108fb, 0x1091b],\n [0x1091f, 0x10939],\n [0x1093f, 0x1093f],\n [0x10980, 0x109b7],\n [0x109bc, 0x109cf],\n [0x109d2, 0x10a03],\n [0x10a05, 0x10a06],\n [0x10a0c, 0x10a13],\n [0x10a15, 0x10a17],\n [0x10a19, 0x10a35],\n [0x10a38, 0x10a3a],\n [0x10a3f, 0x10a48],\n [0x10a50, 0x10a58],\n [0x10a60, 0x10a9f],\n [0x10ac0, 0x10ae6],\n [0x10aeb, 0x10af6],\n [0x10b00, 0x10b35],\n [0x10b39, 0x10b55],\n [0x10b58, 0x10b72],\n [0x10b78, 0x10b91],\n [0x10b99, 0x10b9c],\n [0x10ba9, 0x10baf],\n [0x10c00, 0x10c48],\n [0x10c80, 0x10cb2],\n [0x10cc0, 0x10cf2],\n [0x10cfa, 0x10d27],\n [0x10d30, 0x10d39],\n [0x10e60, 0x10e7e],\n [0x10e80, 0x10ea9],\n [0x10eab, 0x10ead],\n [0x10eb0, 0x10eb1],\n [0x10f00, 0x10f27],\n [0x10f30, 0x10f59],\n [0x10fb0, 0x10fcb],\n [0x10fe0, 0x10ff6],\n [0x11000, 0x1104d],\n [0x11052, 0x1106f],\n [0x1107f, 0x110c1],\n [0x110cd, 0x110cd],\n [0x110d0, 0x110e8],\n [0x110f0, 0x110f9],\n [0x11100, 0x11134],\n [0x11136, 0x11147],\n [0x11150, 0x11176],\n [0x11180, 0x111df],\n [0x111e1, 0x111f4],\n [0x11200, 0x11211],\n [0x11213, 0x1123e],\n [0x11280, 0x11286],\n [0x11288, 0x11288],\n [0x1128a, 0x1128d],\n [0x1128f, 0x1129d],\n [0x1129f, 0x112a9],\n [0x112b0, 0x112ea],\n [0x112f0, 0x112f9],\n [0x11300, 0x11303],\n [0x11305, 0x1130c],\n [0x1130f, 0x11310],\n [0x11313, 0x11328],\n [0x1132a, 0x11330],\n [0x11332, 0x11333],\n [0x11335, 0x11339],\n [0x1133b, 0x11344],\n [0x11347, 0x11348],\n [0x1134b, 0x1134d],\n [0x11350, 0x11350],\n [0x11357, 0x11357],\n [0x1135d, 0x11363],\n [0x11366, 0x1136c],\n [0x11370, 0x11374],\n [0x11400, 0x1145b],\n [0x1145d, 0x11461],\n [0x11480, 0x114c7],\n [0x114d0, 0x114d9],\n [0x11580, 0x115b5],\n [0x115b8, 0x115dd],\n [0x11600, 0x11644],\n [0x11650, 0x11659],\n [0x11660, 0x1166c],\n [0x11680, 0x116b8],\n [0x116c0, 0x116c9],\n [0x11700, 0x1171a],\n [0x1171d, 0x1172b],\n [0x11730, 0x1173f],\n [0x11800, 0x1183b],\n [0x118a0, 0x118f2],\n [0x118ff, 0x11906],\n [0x11909, 0x11909],\n [0x1190c, 0x11913],\n [0x11915, 0x11916],\n [0x11918, 0x11935],\n [0x11937, 0x11938],\n [0x1193b, 0x11946],\n [0x11950, 0x11959],\n [0x119a0, 0x119a7],\n [0x119aa, 0x119d7],\n [0x119da, 0x119e4],\n [0x11a00, 0x11a47],\n [0x11a50, 0x11aa2],\n [0x11ac0, 0x11af8],\n [0x11c00, 0x11c08],\n [0x11c0a, 0x11c36],\n [0x11c38, 0x11c45],\n [0x11c50, 0x11c6c],\n [0x11c70, 0x11c8f],\n [0x11c92, 0x11ca7],\n [0x11ca9, 0x11cb6],\n [0x11d00, 0x11d06],\n [0x11d08, 0x11d09],\n [0x11d0b, 0x11d36],\n [0x11d3a, 0x11d3a],\n [0x11d3c, 0x11d3d],\n [0x11d3f, 0x11d47],\n [0x11d50, 0x11d59],\n [0x11d60, 0x11d65],\n [0x11d67, 0x11d68],\n [0x11d6a, 0x11d8e],\n [0x11d90, 0x11d91],\n [0x11d93, 0x11d98],\n [0x11da0, 0x11da9],\n [0x11ee0, 0x11ef8],\n [0x11fb0, 0x11fb0],\n [0x11fc0, 0x11ff1],\n [0x11fff, 0x12399],\n [0x12400, 0x1246e],\n [0x12470, 0x12474],\n [0x12480, 0x12543],\n [0x13000, 0x1342e],\n [0x13430, 0x13438],\n [0x14400, 0x14646],\n [0x16800, 0x16a38],\n [0x16a40, 0x16a5e],\n [0x16a60, 0x16a69],\n [0x16a6e, 0x16a6f],\n [0x16ad0, 0x16aed],\n [0x16af0, 0x16af5],\n [0x16b00, 0x16b45],\n [0x16b50, 0x16b59],\n [0x16b5b, 0x16b61],\n [0x16b63, 0x16b77],\n [0x16b7d, 0x16b8f],\n [0x16e40, 0x16e9a],\n [0x16f00, 0x16f4a],\n [0x16f4f, 0x16f87],\n [0x16f8f, 0x16f9f],\n [0x16fe0, 0x16fe4],\n [0x16ff0, 0x16ff1],\n [0x17000, 0x17000],\n [0x187f7, 0x187f7],\n [0x18800, 0x18cd5],\n [0x18d00, 0x18d00],\n [0x18d08, 0x18d08],\n [0x1b000, 0x1b11e],\n [0x1b150, 0x1b152],\n [0x1b164, 0x1b167],\n [0x1b170, 0x1b2fb],\n [0x1bc00, 0x1bc6a],\n [0x1bc70, 0x1bc7c],\n [0x1bc80, 0x1bc88],\n [0x1bc90, 0x1bc99],\n [0x1bc9c, 0x1bca3],\n [0x1d000, 0x1d0f5],\n [0x1d100, 0x1d126],\n [0x1d129, 0x1d1e8],\n [0x1d200, 0x1d245],\n [0x1d2e0, 0x1d2f3],\n [0x1d300, 0x1d356],\n [0x1d360, 0x1d378],\n [0x1d400, 0x1d454],\n [0x1d456, 0x1d49c],\n [0x1d49e, 0x1d49f],\n [0x1d4a2, 0x1d4a2],\n [0x1d4a5, 0x1d4a6],\n [0x1d4a9, 0x1d4ac],\n [0x1d4ae, 0x1d4b9],\n [0x1d4bb, 0x1d4bb],\n [0x1d4bd, 0x1d4c3],\n [0x1d4c5, 0x1d505],\n [0x1d507, 0x1d50a],\n [0x1d50d, 0x1d514],\n [0x1d516, 0x1d51c],\n [0x1d51e, 0x1d539],\n [0x1d53b, 0x1d53e],\n [0x1d540, 0x1d544],\n [0x1d546, 0x1d546],\n [0x1d54a, 0x1d550],\n [0x1d552, 0x1d6a5],\n [0x1d6a8, 0x1d7cb],\n [0x1d7ce, 0x1da8b],\n [0x1da9b, 0x1da9f],\n [0x1daa1, 0x1daaf],\n [0x1e000, 0x1e006],\n [0x1e008, 0x1e018],\n [0x1e01b, 0x1e021],\n [0x1e023, 0x1e024],\n [0x1e026, 0x1e02a],\n [0x1e100, 0x1e12c],\n [0x1e130, 0x1e13d],\n [0x1e140, 0x1e149],\n [0x1e14e, 0x1e14f],\n [0x1e2c0, 0x1e2f9],\n [0x1e2ff, 0x1e2ff],\n [0x1e800, 0x1e8c4],\n [0x1e8c7, 0x1e8d6],\n [0x1e900, 0x1e94b],\n [0x1e950, 0x1e959],\n [0x1e95e, 0x1e95f],\n [0x1ec71, 0x1ecb4],\n [0x1ed01, 0x1ed3d],\n [0x1ee00, 0x1ee03],\n [0x1ee05, 0x1ee1f],\n [0x1ee21, 0x1ee22],\n [0x1ee24, 0x1ee24],\n [0x1ee27, 0x1ee27],\n [0x1ee29, 0x1ee32],\n [0x1ee34, 0x1ee37],\n [0x1ee39, 0x1ee39],\n [0x1ee3b, 0x1ee3b],\n [0x1ee42, 0x1ee42],\n [0x1ee47, 0x1ee47],\n [0x1ee49, 0x1ee49],\n [0x1ee4b, 0x1ee4b],\n [0x1ee4d, 0x1ee4f],\n [0x1ee51, 0x1ee52],\n [0x1ee54, 0x1ee54],\n [0x1ee57, 0x1ee57],\n [0x1ee59, 0x1ee59],\n [0x1ee5b, 0x1ee5b],\n [0x1ee5d, 0x1ee5d],\n [0x1ee5f, 0x1ee5f],\n [0x1ee61, 0x1ee62],\n [0x1ee64, 0x1ee64],\n [0x1ee67, 0x1ee6a],\n [0x1ee6c, 0x1ee72],\n [0x1ee74, 0x1ee77],\n [0x1ee79, 0x1ee7c],\n [0x1ee7e, 0x1ee7e],\n [0x1ee80, 0x1ee89],\n [0x1ee8b, 0x1ee9b],\n [0x1eea1, 0x1eea3],\n [0x1eea5, 0x1eea9],\n [0x1eeab, 0x1eebb],\n [0x1eef0, 0x1eef1],\n [0x1f000, 0x1f02b],\n [0x1f030, 0x1f093],\n [0x1f0a0, 0x1f0ae],\n [0x1f0b1, 0x1f0bf],\n [0x1f0c1, 0x1f0cf],\n [0x1f0d1, 0x1f0f5],\n [0x1f100, 0x1f1ad],\n [0x1f1e6, 0x1f202],\n [0x1f210, 0x1f23b],\n [0x1f240, 0x1f248],\n [0x1f250, 0x1f251],\n [0x1f260, 0x1f265],\n [0x1f300, 0x1f6d7],\n [0x1f6e0, 0x1f6ec],\n [0x1f6f0, 0x1f6fc],\n [0x1f700, 0x1f773],\n [0x1f780, 0x1f7d8],\n [0x1f7e0, 0x1f7eb],\n [0x1f800, 0x1f80b],\n [0x1f810, 0x1f847],\n [0x1f850, 0x1f859],\n [0x1f860, 0x1f887],\n [0x1f890, 0x1f8ad],\n [0x1f8b0, 0x1f8b1],\n [0x1f900, 0x1f978],\n [0x1f97a, 0x1f9cb],\n [0x1f9cd, 0x1fa53],\n [0x1fa60, 0x1fa6d],\n [0x1fa70, 0x1fa74],\n [0x1fa78, 0x1fa7a],\n [0x1fa80, 0x1fa86],\n [0x1fa90, 0x1faa8],\n [0x1fab0, 0x1fab6],\n [0x1fac0, 0x1fac2],\n [0x1fad0, 0x1fad6],\n [0x1fb00, 0x1fb92],\n [0x1fb94, 0x1fbca],\n [0x1fbf0, 0x1fbf9],\n [0x20000, 0x20000],\n [0x2a6dd, 0x2a6dd],\n [0x2a700, 0x2a700],\n [0x2b734, 0x2b734],\n [0x2b740, 0x2b740],\n [0x2b81d, 0x2b81d],\n [0x2b820, 0x2b820],\n [0x2cea1, 0x2cea1],\n [0x2ceb0, 0x2ceb0],\n [0x2ebe0, 0x2ebe0],\n [0x2f800, 0x2fa1d],\n [0x30000, 0x30000],\n [0x3134a, 0x3134a],\n [0xe0001, 0xe0001],\n [0xe0020, 0xe007f],\n [0xe0100, 0xe01ef],\n [0xf0000, 0xf0000],\n [0xffffd, 0xffffd],\n [0x100000, 0x100000],\n [0x10fffd, 0x10fffd]];\n// in UTF-32BE\n$validCodepoints = array();\nforeach ($validRanges as $range) {\n  for ($cp = $range[0]; $cp <= $range[1]; $cp++) {\n    if ($cp < 0xD800 || $cp > 0xDFFF) // surrogates; included in UnicodeData.txt\n      $validCodepoints[pack('N', $cp)] = true;\n  }\n}\nfunction testValidCodepoints($encoding) {\n  global $validCodepoints;\n  $good = array_keys($validCodepoints);\n  shuffle($good);\n  while (!empty($good)) {\n    $string = '';\n    $length = min(rand(20,30), count($good));\n    while ($length--) {\n      $string .= array_pop($good);\n    }\n    $converted = mb_convert_encoding($string, $encoding, 'UTF-32BE');\n    if ($converted === false)\n      die(\"mb_convert_encoding failed to convert UTF-32BE to $encoding.\" .\n          \"\\nString: \" . bin2hex($string));\n    testValidString($converted, $string, $encoding, 'UTF-32BE');\n  }\n}\nfunction testInvalidCodepoints($invalid, $encoding) {\n  global $validCodepoints;\n  $good = array_keys($validCodepoints);\n  shuffle($good);\n  foreach ($invalid as $bad => $expected) {\n    $good1  = array_pop($good);\n    $string =  $bad . mb_convert_encoding($good1, $encoding, 'UTF-32BE');\n    testInvalidString($string, $expected . $good1, $encoding, 'UTF-32BE');\n  }\n}\necho \"== UTF-8 ==\\n\";\ntestValidCodepoints('UTF-8');\ntestValidString('', '', 'UTF-8', 'UTF-32BE');\n$invalid = array(\n  // Codepoints outside of valid 0-0x10FFFF range for Unicode\n  \"\\xF4\\x90\\x80\\x80\" => str_repeat(\"\\x00\\x00\\x00%\", 4), // CP 0x110000\n  \"\\xF7\\x80\\x80\\x80\" => str_repeat(\"\\x00\\x00\\x00%\", 4), // CP 0x1C0000\n  \"\\xF7\\xBF\\xBF\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 4), // CP 0x1FFFFF\n  // Reserved range for UTF-16 surrogate pairs\n  \"\\xED\\xA0\\x80\" => str_repeat(\"\\x00\\x00\\x00%\", 3),     // CP 0xD800\n  \"\\xED\\xAF\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 3),     // CP 0xDBFF\n  \"\\xED\\xBF\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 3),     // CP 0xDFFF\n  // Truncated characters\n  \"\\xDF\" => \"\\x00\\x00\\x00%\",         // should have been 2-byte\n  \"\\xEF\\xBF\" => \"\\x00\\x00\\x00%\",     // should have been 3-byte\n  \"\\xF0\\xBF\\xBF\" => \"\\x00\\x00\\x00%\", // should have been 4-byte\n  // Multi-byte characters which end too soon and go to ASCII\n  \"\\xDFA\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  \"\\xEF\\xBFA\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  \"\\xF0\\xBFA\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  \"\\xF0\\xBF\\xBFA\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  // Multi-byte characters which end too soon and go to another MB char\n  \"\\xDF\\xDF\\xBF\" => \"\\x00\\x00\\x00%\\x00\\x00\\x07\\xFF\",\n  \"\\xEF\\xBF\\xDF\\xBF\" => \"\\x00\\x00\\x00%\\x00\\x00\\x07\\xFF\",\n  \"\\xF0\\xBF\\xBF\\xDF\\xBF\" => \"\\x00\\x00\\x00%\\x00\\x00\\x07\\xFF\",\n  // Multi-byte characters which end too soon and go to a junk byte\n  // (Which isn't even valid to start a new character)\n  \"\\xF0\\xBF\\xBF\\xFF\" => str_repeat(\"\\x00\\x00\\x00%\", 2),\n  \"\\xF0\\xBF\\xFF\" => str_repeat(\"\\x00\\x00\\x00%\", 2),\n  // Continuation bytes which appear outside of a MB char\n  \"\\x80\" => \"\\x00\\x00\\x00%\",\n  \"A\\x80\" => \"\\x00\\x00\\x00A\\x00\\x00\\x00%\",\n  \"\\xDF\\xBF\\x80\" => \"\\x00\\x00\\x07\\xFF\\x00\\x00\\x00%\",\n  // Overlong code units\n  // (Using more bytes than needed to encode a character)\n  \"\\xC1\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 2),        // didn't need 2 bytes\n  \"\\xE0\\x9F\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 3),    // didn't need 3 bytes\n  \"\\xF0\\x8F\\xBF\\xBF\" => str_repeat(\"\\x00\\x00\\x00%\", 4) // didn't need 4 bytes\n);\ntestInvalidCodepoints($invalid, 'UTF-8');\necho \"== UTF-16 ==\\n\";\ntestValidCodepoints(\"UTF-16\");\ntestValidCodepoints(\"UTF-16LE\");\ntestValidCodepoints(\"UTF-16BE\");\ntestValidString('', '', 'UTF-16', 'UTF-32BE');\ntestValidString('', '', 'UTF-16LE', 'UTF-32BE');\ntestValidString('', '', 'UTF-16BE', 'UTF-32BE');\n$invalid = array(\n  // UTF-16 _cannot_ represent codepoints bigger than 0x10FFFF, so we're not\n  // worried about that. But there are plenty of other ways to mess up...\n  // Second half of surrogate pair comes first\n  \"\\xDC\\x01\\xD8\\x02\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00%\",\n  // First half of surrogate pair not followed by second part\n  \"\\xD8\\x01\\x00A\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  // First half of surrogate pair at end of string\n  \"\\xD8\\x01\" => \"\\x00\\x00\\x00%\",\n);\ntestInvalidCodepoints($invalid, 'UTF-16');\ntestInvalidCodepoints($invalid, 'UTF-16BE');\n// Truncated strings\ntestInvalidString(\"\\x00\", \"\\x00\\x00\\x00%\", 'UTF-16', 'UTF-32BE');\ntestInvalidString(\"\\x00A\\x01\", \"\\x00\\x00\\x00A\\x00\\x00\\x00%\", 'UTF-16', 'UTF-32BE');\ntestInvalidString(\"\\x00\", \"\\x00\\x00\\x00%\", 'UTF-16BE', 'UTF-32BE');\ntestInvalidString(\"\\x00A\\x01\", \"\\x00\\x00\\x00A\\x00\\x00\\x00%\", 'UTF-16BE', 'UTF-32BE');\n$invalid = array(\n  // Second half of surrogate pair comes first\n  \"\\x01\\xDC\\x02\\xD8\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00%\",\n  // First half of surrogate pair not followed by second part\n  \"\\x01\\xD8A\\x00\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00A\",\n  // First half of surrogate pair at end of string\n  \"\\x01\\xD8\" => \"\\x00\\x00\\x00%\",\n  // Two successive codepoints which are both the 1st part of a surrogate pair\n  \"\\x01\\xD8\\x02\\xD8\" => \"\\x00\\x00\\x00%\\x00\\x00\\x00%\"\n);\ntestInvalidCodepoints($invalid, 'UTF-16LE');\n// Truncated\ntestInvalidString(\"\\x00\", \"\\x00\\x00\\x00%\", 'UTF-16LE', 'UTF-32BE');\ntestInvalidString(\"A\\x00\\x01\", \"\\x00\\x00\\x00A\\x00\\x00\\x00%\", 'UTF-16LE', 'UTF-32BE');\n// TODO: test handling of UTF-16 BOM\necho \"== UTF-32 ==\\n\";\ntestValidCodepoints(\"UTF-32LE\");\ntestValidCodepoints(\"UTF-32BE\");\n// Empty string\ntestValidString('', '', 'UTF-32', 'UTF-32BE');\ntestValidString('', '', 'UTF-32BE', 'UTF-32');\ntestValidString('', '', 'UTF-32LE', 'UTF-32BE');\n$invalid = array(\n  // Codepoints which are too big\n  \"\\x00\\x11\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\x80\\x00\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\xff\\xff\\xfe\\xff\" => \"\\x00\\x00\\x00%\",\n  // Surrogates\n  \"\\x00\\x00\\xd8\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\x00\\x00\\xdb\\xff\" => \"\\x00\\x00\\x00%\",\n  \"\\x00\\x00\\xdc\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\x00\\x00\\xdf\\xff\" => \"\\x00\\x00\\x00%\",\n);\ntestInvalidCodepoints($invalid, 'UTF-32');\ntestInvalidCodepoints($invalid, 'UTF-32BE');\n// Truncated code units\ntestInvalidString(\"\\x00\\x01\\x01\", \"\\x00\\x00\\x00%\", 'UTF-32', 'UTF-32BE');\ntestInvalidString(\"\\x00\\x01\",     \"\\x00\\x00\\x00%\", 'UTF-32', 'UTF-32BE');\ntestInvalidString(\"\\x00\",         \"\\x00\\x00\\x00%\", 'UTF-32', 'UTF-32BE');\ntestInvalidString(\"\\x00\",         \"\\x00\\x00\\x00%\", 'UTF-32BE', 'UTF-32');\ntestInvalidString(\"\\x00\",         \"\\x00\\x00\\x00%\", 'UTF-32BE', 'UTF-32');\ntestInvalidString(\"\\x00\",         \"\\x00\\x00\\x00%\", 'UTF-32BE', 'UTF-32');\n$invalid = array(\n  // Codepoints which are too big\n  \"\\x00\\x00\\x11\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\x00\\x00\\x00\\x80\" => \"\\x00\\x00\\x00%\",\n  \"\\xff\\xfe\\xff\\xff\" => \"\\x00\\x00\\x00%\",\n  // Surrogates\n  \"\\x00\\xd8\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\xff\\xdb\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\x00\\xdc\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n  \"\\xff\\xdf\\x00\\x00\" => \"\\x00\\x00\\x00%\",\n);\ntestInvalidCodepoints($invalid, 'UTF-32LE');\n// Truncated code units\ntestInvalidString(\"\\x00\\x01\\x01\", \"\\x00\\x00\\x00%\", 'UTF-32LE', 'UTF-32BE');\ntestInvalidString(\"\\x00\\x01\",     \"\\x00\\x00\\x00%\", 'UTF-32LE', 'UTF-32BE');\ntestInvalidString(\"\\x00\",         \"\\x00\\x00\\x00%\", 'UTF-32LE', 'UTF-32BE');\n// TODO: test handling of UTF-32 BOM\necho \"== UTF-7 ==\\n\";\ntestValidString('', '', 'UTF-7', 'UTF-32BE');\n// 'Direct' characters\nforeach (range(ord('A'), ord('Z')) as $byte)\n  testValidString(chr($byte), \"\\x00\\x00\\x00\" . chr($byte), 'UTF-7', 'UTF-32BE');\nforeach (range(ord('a'), ord('z')) as $byte)\n  testValidString(chr($byte), \"\\x00\\x00\\x00\" . chr($byte), 'UTF-7', 'UTF-32BE');\nforeach (range(ord('0'), ord('9')) as $byte)\n  testValidString(chr($byte), \"\\x00\\x00\\x00\" . chr($byte), 'UTF-7', 'UTF-32BE');\nforeach (str_split(\"'(),-./:?\") as $char)\n  testValidString($char, \"\\x00\\x00\\x00\" . $char, 'UTF-7', 'UTF-32BE');\n// 'Optional direct' characters are Base64-encoded in mbstring's implementation\n// Whitespace\nforeach (str_split(\" \\t\\r\\n\\x00\") as $char)\n  testValidString($char, \"\\x00\\x00\\x00\" . $char, 'UTF-7', 'UTF-32BE');\n// Encoding + as +-\ntestValidString('+-', \"\\x00\\x00\\x00+\", 'UTF-7', 'UTF-32BE', false);\n// UTF-16 + Base64 encoding\nfunction encode($str, $encoding) {\n  // Base64 encoding for UTF-7 doesn't use '=' for padding\n  return str_replace('=', '', base64_encode(mb_convert_encoding($str, 'UTF-16BE', $encoding)));\n}\nfor ($i = 0; $i < 256; $i++) {\n  $reversible = true;\n  if ($i >= ord('A') && $i <= ord('Z'))\n    $reversible = false;\n  if ($i >= ord('a') && $i <= ord('z'))\n    $reversible = false;\n  if ($i >= ord('0') && $i <= ord('9'))\n    $reversible = false;\n  if (strpos(\"'(),-./:?\\x00 \\t\\r\\n\", chr($i)) !== false)\n    $reversible = false;\n  testValidString('+' . encode(\"\\x00\" . chr($i), 'UTF-16BE') . '-', \"\\x00\\x00\\x00\" . chr($i), 'UTF-7', 'UTF-32BE', $reversible);\n}\ntestValidString('+' . encode(\"\\x12\\x34\", 'UTF-16BE') . '-', \"\\x00\\x00\\x12\\x34\", 'UTF-7', 'UTF-32BE');\ntestValidString('+' . encode(\"\\x12\\x34\\x56\\x78\", 'UTF-16BE') . '-', \"\\x00\\x00\\x12\\x34\\x00\\x00\\x56\\x78\", 'UTF-7', 'UTF-32BE');\ntestValidString('+' . encode(\"\\x12\\x34\\x56\\x78\\x00\\x40\", 'UTF-16BE') . '-', \"\\x00\\x00\\x12\\x34\\x00\\x00\\x56\\x78\\x00\\x00\\x00\\x40\", 'UTF-7', 'UTF-32BE');\n// Surrogate pair\ntestValidString('+' . encode(\"\\x00\\x01\\x04\\x00\", 'UTF-32BE') . '-', \"\\x00\\x01\\x04\\x00\", 'UTF-7', 'UTF-32BE');\ntestValidString('+' . encode(\"\\x00\\x00\\x00A\\x00\\x01\\x04\\x00\\x00\\x00\\x00B\", 'UTF-32BE') . '-', \"\\x00\\x00\\x00A\\x00\\x01\\x04\\x00\\x00\\x00\\x00B\", 'UTF-7', 'UTF-32BE', false);\ntestValidString('+' . encode(\"\\x00\\x01\\x04\\x00\\x00\\x01\\x04\\x00\", 'UTF-32BE') . '-', \"\\x00\\x01\\x04\\x00\\x00\\x01\\x04\\x00\", 'UTF-7', 'UTF-32BE');\n// Unterminated + section\n// (This is not considered illegal)\ntestValidString('+' . encode('ABC', 'ASCII'), \"\\x00A\\x00B\\x00C\", 'UTF-7', 'UTF-16BE', false);\n// + sections immediately after each other\n// (This isn't illegal either)\ntestValidString('+' . encode('AB', 'ASCII') . '-+' . encode('CD', 'ASCII') . '-', \"\\x00A\\x00B\\x00C\\x00D\", 'UTF-7', 'UTF-16BE', false);\n// + sections not immediately after each other\n// (Just trying to be exhaustive here)\ntestValidString('+' . encode('AB', 'ASCII') . '-!+' . encode('CD', 'ASCII') . '-', \"\\x00A\\x00B\\x00!\\x00C\\x00D\", 'UTF-7', 'UTF-16BE', false);\n// + section terminated by a non-Base64 ASCII character which is NOT -\nfor ($i = 0; $i < 128; $i++)  {\n  if ($i >= ord('A') && $i <= ord('Z'))\n    continue;\n  if ($i >= ord('a') && $i <= ord('z'))\n    continue;\n  if ($i >= ord('0') && $i <= ord('9'))\n    continue;\n  if ($i == ord('+') || $i == ord('/') || $i == ord('-') || $i == ord('\\\\') || $i == ord('~'))\n    continue;\n  $char = chr($i);\n  testValidString('+' . encode(\"\\x12\\x34\", 'UTF-16BE') . $char, \"\\x00\\x00\\x12\\x34\\x00\\x00\\x00\" . $char, 'UTF-7', 'UTF-32BE', false);\n}\n// Now let's see how UTF-7 can go BAD...\nfunction rawEncode($str) {\n  return str_replace('=', '', base64_encode($str));\n}\n// First, messed up UTF16 in + section\n// Second half of surrogate pair coming first\ntestInvalidString('+' . rawEncode(\"\\xDC\\x01\\xD8\\x02\") . '-', \"\\x00\\x00\\x00%\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\n// First half of surrogate pair not followed by second half\ntestInvalidString('+' . rawEncode(\"\\xD8\\x01\\x00A\") . '-', \"\\x00\\x00\\x00%\\x00\\x00\\x00A\", 'UTF-7', 'UTF-32BE');\ntestInvalidString('+' . rawEncode(\"\\xD8\\x01\\xD9\\x02\") . '-', \"\\x00\\x00\\x00%\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\n// First half of surrogate pair appearing at end of string\ntestInvalidString('+' . rawEncode(\"\\xD8\\x01\") . '-', \"\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\n// Truncated string\ntestInvalidString('+' . rawEncode(\"\\x01\") . '-', \"\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\n// And then, messed up Base64 encoding\n// Bad padding on + section (not zeroes)\n$encoded = encode(\"\\x12\\x34\", 'UTF-16BE'); // 3 Base64 bytes, 2 bits of padding...\n$corrupted = substr($encoded, 0, 2) . chr(ord($encoded[2]) + 1);\ntestInvalidString('+' . $corrupted . '-', \"\\x00\\x00\\x12\\x34\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\n// Characters which are not Base64 (and not even ASCII) appearing in Base64 section\ntestInvalidString(\"+\\x80\", \"\\x00\\x00\\x00%\", 'UTF-7', 'UTF-32BE');\necho \"Done!\\n\";\n?>")).toMatchSnapshot();
  });
});
