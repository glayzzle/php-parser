// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_pgsql/tests/copy_to.phpt
  it("PDO PgSQL pgsqlCopyToArray and pgsqlCopyToFile", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);\n$db->exec('CREATE TABLE test (a integer not null primary key, b text, c integer)');\n$db->beginTransaction();\necho \"Preparing test table for CopyTo tests\\n\";\n$stmt = $db->prepare(\"INSERT INTO test (a, b, c) values (?, ?, ?)\");\nfor($i=0;$i<3;$i++) {\n    $firstParameter = $i;\n    $secondParameter = \"test insert {$i}\";\n    $thirdParameter = NULL;\n    $stmt->bindValue(1, $firstParameter);\n    $stmt->bindValue(2, $secondParameter);\n    $stmt->bindValue(3, $thirdParameter);\n    $stmt->execute();\n}\n$db->commit();\necho \"Testing pgsqlCopyToArray() with default parameters\\n\";\nvar_dump($db->pgsqlCopyToArray('test'));\necho \"Testing pgsqlCopyToArray() with different field separator and not null indicator\\n\";\nvar_dump($db->pgsqlCopyToArray('test',\";\",\"NULL\"));\necho \"Testing pgsqlCopyToArray() with only selected fields\\n\";\nvar_dump($db->pgsqlCopyToArray('test',\";\",\"NULL\",'a,c'));\necho \"Testing pgsqlCopyToArray() with error\\n\";\ntry {\n    var_dump($db->pgsqlCopyToArray('test_error'));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\necho \"Testing pgsqlCopyToFile() with default parameters\\n\";\n$filename=\"test_pgsqlCopyToFile.csv\";\nvar_dump($db->pgsqlCopyToFile('test',$filename));\necho file_get_contents($filename);\necho \"Testing pgsqlCopyToFile() with different field separator and not null indicator\\n\";\nvar_dump($db->pgsqlCopyToFile('test',$filename,\";\",\"NULL\"));\necho file_get_contents($filename);\necho \"Testing pgsqlCopyToFile() with only selected fields\\n\";\nvar_dump($db->pgsqlCopyToFile('test',$filename,\";\",\"NULL\",'a,c'));\necho file_get_contents($filename);\necho \"Testing pgsqlCopyToFile() with error\\n\";\ntry {\n    var_dump($db->pgsqlCopyToFile('test_error',$filename));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\necho \"Testing pgsqlCopyToFile() to unwritable file\\n\";\ntry {\n    var_dump($db->pgsqlCopyToFile('test', 'nonexistent/foo.csv'));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\nif(isset($filename)) {\n    @unlink($filename);\n}\n?>")).toMatchSnapshot();
  });
});
