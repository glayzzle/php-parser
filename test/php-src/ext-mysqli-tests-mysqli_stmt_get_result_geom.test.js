// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_get_result_geom.phpt
  it("mysqli_stmt_get_result - geometry / spatial types", function () {
    expect(parser.parseCode("<?php\n    require('connect.inc');\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n        printf(\"[001] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n    function func_mysqli_stmt_get_result_geom($link, $engine, $sql_type, $bind_value, $offset) {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_query($link, sprintf(\"CREATE TABLE test(id INT, label %s, PRIMARY KEY(id)) ENGINE = %s\", $sql_type, $engine))) {\n            // don't bail - column type might not be supported by the server, ignore this\n            return false;\n        }\n        for ($id = 1; $id < 4; $id++) {\n            $sql = sprintf(\"INSERT INTO test(id, label) VALUES (%d, %s)\", $id, $bind_value);\n            if (!mysqli_query($link, $sql)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 2 + $id, mysqli_errno($link), mysqli_error($link));\n            }\n        }\n        if (!$stmt = mysqli_stmt_init($link)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 6, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_stmt_prepare($stmt, \"SELECT id, label FROM test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 7, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 8, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        if (!$res = mysqli_stmt_get_result($stmt)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 9, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        $result = mysqli_stmt_result_metadata($stmt);\n        $fields = mysqli_fetch_fields($result);\n        if ($fields[1]->type != MYSQLI_TYPE_GEOMETRY) {\n            printf(\"[%04d] [%d] %s wrong type %d\\n\", $offset + 10, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt), $fields[1]->type);\n        }\n        $num = 0;\n        while ($row = mysqli_fetch_assoc($res)) {\n            $bind_res = &$row['label'];\n            if (!$stmt2 = mysqli_stmt_init($link)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 11, mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n            if (!mysqli_stmt_prepare($stmt2, \"INSERT INTO test(id, label) VALUES (?, ?)\")) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 12, mysqli_stmt_errno($stmt2), mysqli_stmt_error($stmt2));\n                return false;\n            }\n            $id = $row['id'] + 10;\n            if (!mysqli_stmt_bind_param($stmt2, \"is\", $id, $bind_res)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 13, mysqli_stmt_errno($stmt2), mysqli_stmt_error($stmt2));\n                return false;\n            }\n            if (!mysqli_stmt_execute($stmt2)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 14, mysqli_stmt_errno($stmt2), mysqli_stmt_error($stmt2));\n                return false;\n            }\n            mysqli_stmt_close($stmt2);\n            if (!$res_normal = mysqli_query($link, sprintf(\"SELECT id, label FROM test WHERE id = %d\",\n                    $row['id'] + 10))) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 15, mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n            if (!$row_normal = mysqli_fetch_assoc($res_normal)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 16, mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n            if ($row_normal['label'] != $bind_res) {\n                printf(\"[%04d] PS and non-PS return different data.\\n\", $offset + 17);\n                return false;\n            }\n            mysqli_free_result($res_normal);\n            $num++;\n        }\n        if ($num != 3) {\n            printf(\"[%04d] [%d] %s, expecting 3 results, got only %d results\\n\",\n                $offset + 18, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt), $num);\n            mysqli_free_result($res);\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        mysqli_free_result($res);\n        mysqli_stmt_close($stmt);\n        return true;\n    }\n    $geomFromText = $link->server_version >= 80000 ? \"ST_GeomFromText\" : \"GeomFromText\";\n    func_mysqli_stmt_get_result_geom($link, $engine, \"GEOMETRY\", \"$geomFromText('POINT(2 2)')\", 20);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"POINT\", \"$geomFromText('POINT(1 1)')\", 40);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"LINESTRING\", \"$geomFromText('LINESTRING(0 0,1 1,2 2)')\", 60);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"POLYGON\", \"$geomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))')\", 80);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"MULTIPOINT\", \"$geomFromText('MULTIPOINT(1 1, 2 2)')\", 100);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"MULTILINESTRING\", \"$geomFromText('MULTILINESTRING((0 0,1 1,2 2),(0 0,1 1,3 3))')\", 120);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"MULTIPOLYGON\", \"$geomFromText('MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5)),((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5)))')\", 140);\n    func_mysqli_stmt_get_result_geom($link, $engine, \"GEOMETRYCOLLECTION\", \"$geomFromText('GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))')\", 160);\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
