// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/ftruncate_variation4.phpt
  it("Test ftruncate() function : usage variations - truncate file to negative size", function () {
    expect(parser.parseCode("<?php\n// include common file related test functions\ninclude (\"file.inc\");\necho \"*** Testing ftruncate() : usage variations ***\\n\";\n/* test ftruncate with file opened in different modes */\n$file_modes = array(\"r\", \"rb\", \"rt\", \"r+\", \"r+b\", \"r+t\",\n                    \"w\", \"wb\", \"wt\", \"w+\", \"w+b\", \"w+t\",\n                    \"x\", \"xb\", \"xt\", \"x+\", \"x+b\", \"x+t\",\n                    \"a\", \"ab\", \"at\", \"a+\", \"a+b\", \"a+t\");\n$file_content_types = array(\"numeric\",\"text_with_new_line\");\nforeach($file_content_types as $file_content_type) {\n    echo \"\\n-- Testing ftruncate() with file having data of type \". $file_content_type .\" --\\n\";\n    for($mode_counter = 0; $mode_counter < count($file_modes); $mode_counter++) {\n        echo \"-- Testing ftruncate() with file opening using $file_modes[$mode_counter] mode --\\n\";\n        // create 1 file with some contents\n        $filename = __DIR__.\"/ftruncate_variation4.tmp\";\n        if( strstr($file_modes[$mode_counter], \"x\") || strstr($file_modes[$mode_counter], \"w\") ) {\n          // fopen the file using the $file_modes\n          $file_handle = fopen($filename, $file_modes[$mode_counter]);\n          fill_file($file_handle, $file_content_type, 1024);\n        } else {\n          create_files ( __DIR__, 1, $file_content_type, 0755, 1, \"w\", \"ftruncate_variation\", 4);\n          // fopen the file using the $file_modes\n          $file_handle = fopen($filename, $file_modes[$mode_counter]);\n        }\n        if (!$file_handle) {\n          echo \"Error: failed to open file $filename!\\n\";\n          exit();\n        }\n        rewind($file_handle); // file pointer to 0\n        echo \"-- Testing ftruncate(): try truncating file to a negative size --\\n\";\n        /* try to truncate it to a negative size, size should not change*/\n        $new_size = -1000;\n        $file_size = filesize($filename); // current filesize\n        var_dump($file_size === 1024 || $file_size === 1137); // 1137 is for Windows with 't' mode\n        var_dump( ftell($file_handle) );\n        try {\n            var_dump( ftruncate($file_handle, $new_size) ); // truncate it\n        } catch (\\ValueError $e) {\n            echo $e->getMessage() . \\PHP_EOL;\n        }\n        var_dump( ftell($file_handle) );\n        var_dump( feof($file_handle) );\n        fclose($file_handle);\n        clearstatcache(); // clear previous size value in cache\n        $file_size = filesize($filename); // new file size = actual size, no change\n        var_dump($file_size === 1024 || $file_size === 1137); // 1137 is for Windows with 't' mode\n        //delete all files created\n        delete_file( $filename );\n    }//end of inner for loop\n}//end of outer foreach loop\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
