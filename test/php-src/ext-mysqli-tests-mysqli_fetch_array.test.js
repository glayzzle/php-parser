// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_fetch_array.phpt
  it("mysqli_fetch_array() - all datatypes but BIT", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require('table.inc');\n    if (!$res = mysqli_query($link, \"SELECT * FROM test ORDER BY id LIMIT 5\")) {\n        printf(\"[004] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    }\n    print \"[005]\\n\";\n    var_dump(mysqli_fetch_array($res));\n    print \"[006]\\n\";\n    var_dump(mysqli_fetch_array($res, MYSQLI_NUM));\n    print \"[007]\\n\";\n    var_dump(mysqli_fetch_array($res, MYSQLI_BOTH));\n    print \"[008]\\n\";\n    var_dump(mysqli_fetch_array($res, MYSQLI_ASSOC));\n    print \"[009]\\n\";\n    var_dump(mysqli_fetch_array($res));\n    mysqli_free_result($res);\n    if (!$res = mysqli_query($link, \"SELECT 1 AS a, 2 AS a, 3 AS c, 4 AS C, NULL AS d, true AS e\")) {\n        printf(\"[010] Cannot run query, [%d] %s\\n\", mysqli_errno($link), $mysqli_error($link));\n    }\n    print \"[011]\\n\";\n    var_dump(mysqli_fetch_array($res, MYSQLI_BOTH));\n    mysqli_free_result($res);\n    if (!$res = mysqli_query($link, \"SELECT 1 AS a, 2 AS b, 3 AS c, 4 AS C\")) {\n        printf(\"[012] Cannot run query, [%d] %s\\n\",\n            mysqli_errno($link), $mysqli_error($link));\n        exit(1);\n    }\n    do {\n        $illegal_mode = mt_rand(-10000, 10000);\n    } while (in_array($illegal_mode, array(MYSQLI_ASSOC, MYSQLI_NUM, MYSQLI_BOTH)));\n    // NOTE: for BC reasons with ext/mysql, ext/mysqli accepts invalid result modes.\n    try {\n        mysqli_fetch_array($res, $illegal_mode);\n    } catch (ValueError $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    try {\n        mysqli_fetch_array($res, $illegal_mode);\n    } catch (ValueError $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    mysqli_free_result($res);\n    function func_mysqli_fetch_array($link, $engine, $sql_type, $sql_value, $php_value, $offset, $regexp_comparison = NULL, $binary_type = false) {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_query($link, $sql = sprintf(\"CREATE TABLE test(id INT NOT NULL, label %s, PRIMARY KEY(id)) ENGINE = %s\", $sql_type, $engine))) {\n                // don't bail, engine might not support the datatype\n                return false;\n        }\n        if (is_null($php_value)) {\n            if (!mysqli_query($link, $sql = sprintf(\"INSERT INTO test(id, label) VALUES (1, NULL)\"))) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 1, mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n        } else {\n            if (is_string($sql_value)) {\n                if (!mysqli_query($link, $sql = \"INSERT INTO test(id, label) VALUES (1, '\" . $sql_value . \"')\")) {\n                    printf(\"[%04ds] [%d] %s - %s\\n\", $offset + 1, mysqli_errno($link), mysqli_error($link), $sql);\n                    return false;\n                }\n            } else {\n                if (!mysqli_query($link, $sql = sprintf(\"INSERT INTO test(id, label) VALUES (1, '%d')\", $sql_value))) {\n                    printf(\"[%04di] [%d] %s\\n\", $offset + 1, mysqli_errno($link), mysqli_error($link));\n                    return false;\n                }\n            }\n        }\n        if (!$res = mysqli_query($link, \"SELECT id, label FROM test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 2, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!$row = mysqli_fetch_array($res, MYSQLI_BOTH)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 3, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if ($regexp_comparison) {\n            if (!preg_match($regexp_comparison, (string)$row['label']) || !preg_match($regexp_comparison, (string)$row[1])) {\n                printf(\"[%04d] Expecting %s/%s [reg exp = %s], got %s/%s resp. %s/%s. [%d] %s\\n\", $offset + 4,\n                    gettype($php_value), $php_value, $regexp_comparison,\n                    gettype($row[1]), $row[1],\n                    gettype($row['label']), $row['label'], mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n        } else if ((gettype($php_value) == 'unicode') && $binary_type) {\n            // Unicode is on and we are told that the MySQL column type is a binary type.\n            // Don't expect a unicode value from the database, you'll get binary string\n            if (($row['label'] != $php_value) || ($row[1] != $php_value)) {\n                printf(\"[%04d] Expecting %s/%s, got %s/%s resp. %s/%s. [%d] %s\\n\", $offset + 5,\n                    gettype($php_value), $php_value,\n                    gettype($row[1]), $row[1],\n                    gettype($row['label']), $row['label'], mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n            if (gettype($row['label']) == 'unicode') {\n                var_dump(mysqli_fetch_field_direct($res, 1), $row['label']);\n                printf(\"[%04d] SQL Type: '%s', binary columns are supposed to return binary string and not unicode\\n\",\n                    $offset + 6, $sql_type);\n                return false;\n            }\n        } else {\n            if (($row['label'] !== $php_value) || ($row[1] != $php_value)) {\n                printf(\"[%04d] Expecting %s/%s, got %s/%s resp. %s/%s. [%d] %s\\n\", $offset + 7,\n                    gettype($php_value), $php_value,\n                    gettype($row[1]), $row[1],\n                    gettype($row['label']), $row['label'], mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n        }\n        return true;\n    }\n    function func_mysqli_fetch_array_make_string($len) {\n        $ret = '';\n        for ($i = 0; $i < $len; $i++)\n                $ret .= chr(mt_rand(65, 90));\n        return $ret;\n    }\n    func_mysqli_fetch_array($link, $engine, \"TINYINT\", -11, \"-11\", 20);\n    func_mysqli_fetch_array($link, $engine, \"TINYINT\", NULL, NULL, 30);\n    func_mysqli_fetch_array($link, $engine, \"TINYINT UNSIGNED\", 1, \"1\", 40);\n    func_mysqli_fetch_array($link, $engine, \"TINYINT UNSIGNED\", NULL, NULL, 50);\n    func_mysqli_fetch_array($link, $engine, \"BOOL\", 1, \"1\", 60);\n    func_mysqli_fetch_array($link, $engine, \"BOOL\", NULL, NULL, 70);\n    func_mysqli_fetch_array($link, $engine, \"BOOLEAN\", 0, \"0\", 80);\n    func_mysqli_fetch_array($link, $engine, \"BOOLEAN\", NULL, NULL, 90);\n    func_mysqli_fetch_array($link, $engine, \"SMALLINT\", -32768, \"-32768\", 100);\n    func_mysqli_fetch_array($link, $engine, \"SMALLINT\", 32767, \"32767\", 110);\n    func_mysqli_fetch_array($link, $engine, \"SMALLINT\", NULL, NULL, 120);\n    func_mysqli_fetch_array($link, $engine, \"SMALLINT UNSIGNED\", 65535, \"65535\", 130);\n    func_mysqli_fetch_array($link, $engine, \"SMALLINT UNSIGNED\", NULL, NULL, 140);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMINT\", -8388608, \"-8388608\", 150);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMINT\", 8388607, \"8388607\", 160);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMINT\", NULL, NULL, 170);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMINT UNSIGNED\", 16777215, \"16777215\", 180);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMINT UNSIGNED\", NULL, NULL, 190);\n    func_mysqli_fetch_array($link, $engine, \"INTEGER\", -2147483648, \"-2147483648\", 200);\n    func_mysqli_fetch_array($link, $engine, \"INTEGER\", 2147483647, \"2147483647\", 210);\n    func_mysqli_fetch_array($link, $engine, \"INTEGER\", NULL, NULL, 220);\n    func_mysqli_fetch_array($link, $engine, \"INTEGER UNSIGNED\", \"4294967295\", \"4294967295\", 230);\n    func_mysqli_fetch_array($link, $engine, \"INTEGER UNSIGNED\", NULL, NULL, 240);\n    if ($IS_MYSQLND || mysqli_get_server_version($link) >= 51000) {\n        func_mysqli_fetch_array($link, $engine, \"BIGINT\", \"-9223372036854775808\", \"-9223372036854775808\", 250);\n        func_mysqli_fetch_array($link, $engine, \"BIGINT\", NULL, NULL, 260);\n        func_mysqli_fetch_array($link, $engine, \"BIGINT UNSIGNED\", \"18446744073709551615\", \"18446744073709551615\", 260);\n        func_mysqli_fetch_array($link, $engine, \"BIGINT UNSIGNED\", NULL, NULL, 280);\n    }\n    func_mysqli_fetch_array($link, $engine, \"FLOAT\", (string)(-9223372036854775808 - 1.1), \"-9.22337e+18\", 290, \"/-9\\.22337e\\+?[0]?18/iu\");\n    func_mysqli_fetch_array($link, $engine, \"FLOAT\", NULL, NULL, 300);\n    func_mysqli_fetch_array($link, $engine, \"FLOAT UNSIGNED\", (string)(18446744073709551615 + 1.1), \"1.84467e+?19\", 310, \"/1\\.84467e\\+?[0]?19/iu\");\n    func_mysqli_fetch_array($link, $engine, \"FLOAT UNSIGNED \", NULL, NULL, 320);\n    func_mysqli_fetch_array($link, $engine, \"DOUBLE(10,2)\", \"-99999999.99\", \"-99999999.99\", 330);\n    func_mysqli_fetch_array($link, $engine, \"DOUBLE(10,2)\", NULL, NULL, 340);\n    func_mysqli_fetch_array($link, $engine, \"DOUBLE(10,2) UNSIGNED\", \"99999999.99\", \"99999999.99\", 350);\n    func_mysqli_fetch_array($link, $engine, \"DOUBLE(10,2) UNSIGNED\", NULL, NULL, 360);\n    func_mysqli_fetch_array($link, $engine, \"DECIMAL(10,2)\", \"-99999999.99\", \"-99999999.99\", 370);\n    func_mysqli_fetch_array($link, $engine, \"DECIMAL(10,2)\", NULL, NULL, 380);\n    func_mysqli_fetch_array($link, $engine, \"DECIMAL(10,2)\", \"99999999.99\", \"99999999.99\", 390);\n    func_mysqli_fetch_array($link, $engine, \"DECIMAL(10,2)\", NULL, NULL, 400);\n        // don't care about date() strict TZ warnings...\n    $date = @date('Y-m-d');\n    func_mysqli_fetch_array($link, $engine, \"DATE\",$date, $date, 410);\n    func_mysqli_fetch_array($link, $engine, \"DATE NOT NULL\",$date, $date, 420);\n    func_mysqli_fetch_array($link, $engine, \"DATE\", NULL, NULL, 430);\n    $date = @date('Y-m-d H:i:s');\n    func_mysqli_fetch_array($link, $engine, \"DATETIME\", $date, $date, 440);\n    func_mysqli_fetch_array($link, $engine, \"DATETIME NOT NULL\", $date, $date, 450);\n    func_mysqli_fetch_array($link, $engine, \"DATETIME\", NULL, NULL, 460);\n    func_mysqli_fetch_array($link, $engine, \"TIMESTAMP\", $date, $date, 470);\n    $date = @date('H:i:s');\n    func_mysqli_fetch_array($link, $engine, \"TIME\", $date, $date, 480);\n    func_mysqli_fetch_array($link, $engine, \"TIME NOT NULL\", $date, $date, 490);\n    func_mysqli_fetch_array($link, $engine, \"TIME\", NULL, NULL, 500);\n    func_mysqli_fetch_array($link, $engine, \"YEAR\", @date('Y'), @date('Y'), 510);\n    func_mysqli_fetch_array($link, $engine, \"YEAR NOT NULL\", @date('Y'), @date('Y'), 520);\n    func_mysqli_fetch_array($link, $engine, \"YEAR\", NULL, NULL, 530);\n    $string255 = func_mysqli_fetch_array_make_string(255);\n    func_mysqli_fetch_array($link, $engine, \"CHAR(1)\", \"a\", \"a\", 540);\n    func_mysqli_fetch_array($link, $engine, \"CHAR(255)\", $string255,  $string255, 550);\n    func_mysqli_fetch_array($link, $engine, \"CHAR(1) NOT NULL\", \"a\", \"a\", 560);\n    func_mysqli_fetch_array($link, $engine, \"CHAR(1)\", NULL, NULL, 570);\n    $string65k = func_mysqli_fetch_array_make_string(65400);\n    func_mysqli_fetch_array($link, $engine, \"VARCHAR(1)\", \"a\", \"a\", 580);\n    func_mysqli_fetch_array($link, $engine, \"VARCHAR(255)\", $string255, $string255, 590);\n    func_mysqli_fetch_array($link, $engine, \"VARCHAR(65400)\", $string65k, $string65k, 600);\n    func_mysqli_fetch_array($link, $engine, \"VARCHAR(1) NOT NULL\", \"a\", \"a\", 610);\n    func_mysqli_fetch_array($link, $engine, \"VARCHAR(1)\", NULL, NULL, 620);\n    func_mysqli_fetch_array($link, $engine, \"BINARY(1)\", \"a\", \"a\", 630, null, true);\n    func_mysqli_fetch_array($link, $engine, \"BINARY(2)\", chr(0) . \"a\", chr(0) . \"a\", 640, null, true);\n    func_mysqli_fetch_array($link, $engine, \"BINARY(1) NOT NULL\", \"b\", \"b\", 650, null, true);\n    func_mysqli_fetch_array($link, $engine, \"BINARY(1)\", NULL, NULL, 660, null, true);\n    func_mysqli_fetch_array($link, $engine, \"VARBINARY(1)\", \"a\", \"a\", 670, null, true);\n    func_mysqli_fetch_array($link, $engine, \"VARBINARY(2)\", chr(0) . \"a\", chr(0) . \"a\", 680, null, true);\n    func_mysqli_fetch_array($link, $engine, \"VARBINARY(1) NOT NULL\", \"b\", \"b\", 690, null, true);\n    func_mysqli_fetch_array($link, $engine, \"VARBINARY(1)\", NULL, NULL, 700, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TINYBLOB\", \"a\", \"a\", 710, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TINYBLOB\", chr(0) . \"a\", chr(0) . \"a\", 720, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TINYBLOB NOT NULL\", \"b\", \"b\", 730, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TINYBLOB\", NULL, NULL, 740, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TINYTEXT\", \"a\", \"a\", 750);\n    func_mysqli_fetch_array($link, $engine, \"TINYTEXT NOT NULL\", \"a\", \"a\", 760);\n    func_mysqli_fetch_array($link, $engine, \"TINYTEXT\", NULL, NULL, 770);\n    func_mysqli_fetch_array($link, $engine, \"BLOB\", \"a\", \"a\", 780, null, true);\n    func_mysqli_fetch_array($link, $engine, \"BLOB\", chr(0) . \"a\", chr(0) . \"a\", 780, null, true);\n    func_mysqli_fetch_array($link, $engine, \"BLOB\", NULL, NULL, 790, null, true);\n    func_mysqli_fetch_array($link, $engine, \"TEXT\", \"a\", \"a\", 800);\n    func_mysqli_fetch_array($link, $engine, \"TEXT\", chr(0) . \"a\", chr(0) . \"a\", 810);\n    func_mysqli_fetch_array($link, $engine, \"TEXT\", NULL, NULL, 820);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMBLOB\", \"a\", \"a\", 830, null, true);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMBLOB\", chr(0) . \"a\", chr(0) . \"a\", 840, null, true);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMBLOB\", NULL, NULL, 850, null, true);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMTEXT\", \"a\", \"a\", 860);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMTEXT\", chr(0) . \"a\", chr(0) . \"a\", 870);\n    func_mysqli_fetch_array($link, $engine, \"MEDIUMTEXT\", NULL, NULL, 880);\n    func_mysqli_fetch_array($link, $engine, \"LONGBLOB\", \"a\", \"a\", 890, null, true);\n    func_mysqli_fetch_array($link, $engine, \"LONGTEXT\", chr(0) . \"a\", chr(0) . \"a\", 900);\n    func_mysqli_fetch_array($link, $engine, \"LONGBLOB\", NULL, NULL, 910, null, true);\n    func_mysqli_fetch_array($link, $engine, \"ENUM('a', 'b')\", \"a\", \"a\", 920);\n    func_mysqli_fetch_array($link, $engine, \"ENUM('a', 'b')\", NULL, NULL, 930);\n    func_mysqli_fetch_array($link, $engine, \"SET('a', 'b')\", \"a\", \"a\", 940);\n    func_mysqli_fetch_array($link, $engine, \"SET('a', 'b')\", NULL, NULL, 950);\n    mysqli_close($link);\n    try {\n        mysqli_fetch_array($res, MYSQLI_ASSOC);\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
