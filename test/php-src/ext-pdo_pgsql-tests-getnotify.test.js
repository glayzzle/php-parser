// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_pgsql/tests/getnotify.phpt
  it("PDO PgSQL LISTEN/NOTIFY support", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// pgsqlGetPid should return something meaningful\n$pid = $db->pgsqlGetPid();\nvar_dump($pid > 0);\n// No listen, no notifies\nvar_dump($db->pgsqlGetNotify());\n// Listen started, no notifies\n$db->exec(\"LISTEN notifies_phpt\");\nvar_dump($db->pgsqlGetNotify());\n// No parameters, use default PDO::FETCH_NUM\n$db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_NUM);\n$db->exec(\"NOTIFY notifies_phpt\");\n$notify = $db->pgsqlGetNotify();\nvar_dump(count($notify));\nvar_dump($notify[0]);\nvar_dump($notify[1] == $pid);\n// No parameters, use default PDO::FETCH_ASSOC\n$db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);\n$db->exec(\"NOTIFY notifies_phpt\");\n$notify = $db->pgsqlGetNotify();\nvar_dump(count($notify));\nvar_dump($notify['message']);\nvar_dump($notify['pid'] == $pid);\n// Test PDO::FETCH_NUM as parameter\n$db->exec(\"NOTIFY notifies_phpt\");\n$notify = $db->pgsqlGetNotify(PDO::FETCH_NUM);\nvar_dump(count($notify));\nvar_dump($notify[0]);\nvar_dump($notify[1] == $pid);\n// Test PDO::FETCH_ASSOC as parameter\n$db->exec(\"NOTIFY notifies_phpt\");\n$notify = $db->pgsqlGetNotify(PDO::FETCH_ASSOC);\nvar_dump(count($notify));\nvar_dump($notify['message']);\nvar_dump($notify['pid'] == $pid);\n// Test PDO::FETCH_BOTH as parameter\n$db->exec(\"NOTIFY notifies_phpt\");\n$notify = $db->pgsqlGetNotify(PDO::FETCH_BOTH);\nvar_dump(count($notify));\nvar_dump($notify['message']);\nvar_dump($notify['pid'] == $pid);\nvar_dump($notify[0]);\nvar_dump($notify[1] == $pid);\n// Verify that there are no notifies queued\nvar_dump($db->pgsqlGetNotify());\n// Test second parameter, should wait 2 seconds because no notify is queued\n$t = microtime(1);\n$notify = $db->pgsqlGetNotify(PDO::FETCH_ASSOC, 1000);\n$diff = microtime(1) - $t;\nvar_dump($diff >= 1 || 1 - abs($diff) < .05);\nvar_dump($notify);\n// Test second parameter, should return immediately because a notify is queued\n$db->exec(\"NOTIFY notifies_phpt\");\n$t = microtime(1);\n$notify = $db->pgsqlGetNotify(PDO::FETCH_ASSOC, 5000);\n$diff = microtime(1) - $t;\nvar_dump($diff < 1 || abs(1 - abs($diff)) < .05);\nvar_dump(count($notify));\n?>")).toMatchSnapshot();
  });
});
