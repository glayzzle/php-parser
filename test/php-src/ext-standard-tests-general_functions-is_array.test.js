// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_array.phpt
  it("Test is_array() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing is_array() on different type of arrays ***\\n\";\n/* different types of arrays */\n$arrays = array(\n  array(),\n  array(NULL),\n  array(null),\n  array(true),\n  array(\"\"),\n  array(''),\n  array(array(), array()),\n  array(array(1, 2), array('a', 'b')),\n  array(1 => 'One'),\n  array(\"test\" => \"is_array\"),\n  array(0),\n  array(-1),\n  array(10.5, 5.6),\n  array(\"string\", \"test\"),\n  array('string', 'test')\n);\n/* loop to check that is_array() recognizes different\n   type of arrays, expected output bool(true) */\n$loop_counter = 1;\nforeach ($arrays as $var_array ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_array ($var_array) );\n}\necho \"\\n*** Testing is_array() on non array types ***\\n\";\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\n$dfp = opendir ( __DIR__ );\n// unset variables\n$unset_array = array(10);\nunset($unset_array);\n// other types in a array\n$varient_arrays = array (\n  /* integers */\n  543915,\n  -5322,\n  0x55F,\n  -0xCCF,\n  123,\n  -0654,\n  /* strings */\n  \"\",\n  '',\n  \"0\",\n  '0',\n  'string',\n  \"string\",\n  /* floats */\n  10.0000000000000000005,\n  .5e6,\n  -.5E7,\n  .5E+8,\n  -.5e+90,\n  1e5,\n  /* objects */\n  new stdclass,\n  /* resources */\n  $fp,\n  $dfp,\n  /* nulls */\n  null,\n  NULL,\n  /* boolean */\n  true,\n  TRUE,\n  FALSE,\n  false,\n  /* unset/undefined arrays  */\n  @$unset_array,\n  @$undefined_array\n);\n/* loop through the $varient_array to see working of\n   is_array() on non array types, expected output bool(false) */\n$loop_counter = 1;\nforeach ($varient_arrays as $type ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_array ($type) );\n}\necho \"Done\\n\";\n/* close resources */\nfclose($fp);\nclosedir($dfp);\n?>")).toMatchSnapshot();
  });
});
