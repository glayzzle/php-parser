// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/bug77390.phpt
  it("Bug #76705: feof might hang on TLS streams in case of fragmented TLS records", function () {
    expect(parser.parseCode("<?php\n$certFile = __DIR__ . DIRECTORY_SEPARATOR . 'bug77390.pem.tmp';\n$cacertFile = __DIR__ . DIRECTORY_SEPARATOR . 'bug77390-ca.pem.tmp';\n$peerName = 'bug77390';\n$clientCode = <<<'CODE'\n    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);\n    phpt_wait('server');\n    phpt_notify('proxy');\n    phpt_wait('proxy');\n    $fp = stream_socket_client(\"ssl://127.0.0.1:10012\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);\n    stream_set_blocking($fp, false);\n    $read = [$fp];\n    $buf = '';\n    $emptyChunkPrinted = false;\n    $warmedUp = false;\n    while (stream_select($read, $write, $except, 1000)) {\n        $chunk = stream_get_contents($fp, 4096);\n        $buf .= $chunk;\n        phpt_notify('proxy');\n        if (!$warmedUp) {\n            if ($buf !== 'warmup') {\n                continue;\n            }\n            $warmedUp = true;\n            $buf = '';\n            phpt_notify('server');\n            continue;\n        }\n        if ($chunk !== '' || !$emptyChunkPrinted) {\n            $emptyChunkPrinted = true;\n            var_dump($chunk);\n        }\n        if ($buf === 'hello, world') {\n            break;\n        }\n    }\n    phpt_notify('server');\n    phpt_notify('proxy');\nCODE;\n$clientCode = sprintf($clientCode, $peerName);\n$serverCode = <<<'CODE'\n    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);\n    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;\n    $fp = stream_socket_server(\"ssl://127.0.0.1:10011\", $errornum, $errorstr, $flags, $context);\n    phpt_notify();\n    $conn = stream_socket_accept($fp);\n    fwrite($conn, 'warmup');\n    phpt_wait();\n    fwrite($conn, 'hello, world');\n    phpt_wait();\n    fclose($conn);\nCODE;\n$serverCode = sprintf($serverCode, $certFile);\n$proxyCode = <<<'CODE'\n    phpt_wait();\n    $upstream = stream_socket_client(\"tcp://127.0.0.1:10011\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT);\n    stream_set_blocking($upstream, false);\n    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;\n    $server = stream_socket_server(\"tcp://127.0.0.1:10012\", $errornum, $errorstr, $flags);\n    phpt_notify();\n    $conn = stream_socket_accept($server);\n    stream_set_blocking($conn, false);\n    $read = [$upstream, $conn];\n    while (stream_select($read, $write, $except, 1)) {\n        foreach ($read as $fp) {\n            $data = stream_get_contents($fp);\n            if ($fp === $conn) {\n                fwrite($upstream, $data);\n            } else {\n                if ($data !== '' && $data[0] === chr(23)) {\n                    $parts = str_split($data, (int) ceil(strlen($data) / 3));\n                    foreach ($parts as $part) {\n                        fwrite($conn, $part);\n                        phpt_wait(null, 1);\n                    }\n                } else {\n                    fwrite($conn, $data);\n                }\n            }\n        }\n        if (feof($upstream)) {\n            break;\n        }\n        $read = [$upstream, $conn];\n    }\n    phpt_wait();\nCODE;\ninclude 'CertificateGenerator.inc';\n$certificateGenerator = new CertificateGenerator();\n$certificateGenerator->saveCaCert($cacertFile);\n$certificateGenerator->saveNewCertAsFileWithKey($peerName, $certFile);\ninclude 'ServerClientTestCase.inc';\nServerClientTestCase::getInstance()->run($clientCode, [\n    'server' => $serverCode,\n    'proxy' => $proxyCode,\n]);\n?>")).toMatchSnapshot();
  });
});
