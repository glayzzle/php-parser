// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/phar/tests/badparameters.phpt
  it("Phar: bad parameters to various methods", function () {
    expect(parser.parseCode("<?php\nini_set('phar.readonly', 1);\ntry {\n    Phar::mungServer('hi');\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    Phar::createDefaultStub(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    Phar::loadPhar(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    Phar::canCompress('hi');\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a = new Phar(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a = new Phar(__DIR__ . '/files/frontcontroller10.phar');\n} catch (PharException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->convertToExecutable(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->convertToData(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $b = new PharData(__DIR__ . '/whatever.tar');\n} catch (PharException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $c = new PharData(__DIR__ . '/whatever.zip');\n} catch (PharException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $b->delete(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->delete('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $b->delete('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    echo $a->getPath() . \"\\n\";\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->setAlias('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $b->setAlias('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\nini_set('phar.readonly', 0);\ntry {\n    $a->setAlias(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nini_set('phar.readonly', 1);\ntry {\n    $b->stopBuffering();\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->setStub('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $b->setStub('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\nini_set('phar.readonly', 0);\ntry {\n    $a->setStub(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nini_set('phar.readonly', 1);\ntry {\n    $b->setDefaultStub('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->setDefaultStub(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->setDefaultStub('oops');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->setSignatureAlgorithm(Phar::MD5);\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->compress(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->compress(1);\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->compressFiles(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->decompressFiles();\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->copy(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->copy('a', 'b');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->offsetExists(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->offsetGet(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nini_set('phar.readonly', 0);\ntry {\n    $a->offsetSet(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nini_set('phar.readonly', 1);\ntry {\n    $b->offsetUnset(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->offsetUnset('a');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $a->addEmptyDir(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->addFile(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->addFromString(array());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $a->setMetadata('a');\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\nini_set('phar.readonly', 0);\ntry {\n    $a->setMetadata(1,2);\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nini_set('phar.readonly', 1);\ntry {\n    $a->delMetadata();\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
