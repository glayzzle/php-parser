// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/bug72101.phpt
  it("Bug #72101 (crash on complex code)", function () {
    expect(parser.parseCode("<?php\nclass PHPUnit_Framework_MockObject_Stub_ReturnCallback {\n    protected $callback;\n    public function __construct($callback) {\n        $this->callback = $callback;\n    }\n    public function invoke($invocation) {\n        return call_user_func_array($this->callback, $invocation->parameters);\n    }\n}\nclass PHPUnit_Framework_MockObject_InvocationMocker {\n    protected $matchers = [];\n    public function addMatcher( $matcher) {\n        $this->matchers[] = $matcher;\n    }\n    public function invoke( $invocation) {\n        foreach ($this->matchers as $match) {\n            $match->invoked($invocation);\n        }\n    }\n}\nclass PHPUnit_Framework_MockObject_Matcher {\n    public $stub = null;\n    public function invoked($invocation) {\n        return $this->stub->invoke($invocation);\n    }\n}\nclass MethodCallbackByReference {\n    public function bar(&$a, &$b, $c) {\n        Legacy::bar($a, $b, $c);\n    }\n    public function callback(&$a, &$b, $c) {\n        $b = 1;\n    }\n}\nclass PHPUnit_Framework_MockObject_Invocation_Static {\n    public $parameters;\n    public function __construct(array $parameters) {\n        $this->parameters = $parameters;\n    }\n}\nclass Mock_MethodCallbackByReference_7b180d26 extends MethodCallbackByReference {\n    public $inv_mocker;\n    public function bar(&$a, &$b, $c) {\n        $arguments = array($a, $b, $c);\n        $result = $this->inv_mocker->invoke(\n            new PHPUnit_Framework_MockObject_Invocation_Static(\n                $arguments\n            )\n        );\n        return $result;\n    }\n}\nset_error_handler(function() {\n//    var_dump(func_get_args());\n    DoesNotExists::$nope = true;\n}, E_ALL);\n$foo = new Mock_MethodCallbackByReference_7b180d26();\n$InvMocker = new PHPUnit_Framework_MockObject_InvocationMocker();\n$foo->inv_mocker = $InvMocker;\n$OuterMatcher = new PHPUnit_Framework_MockObject_Matcher();\n$InvMocker->addMatcher($OuterMatcher);\n$OuterMatcher->methodNameMatcher = null;\n$OuterMatcher->stub = new PHPUnit_Framework_MockObject_Stub_ReturnCallback([$foo, 'callback']);\n$a = $b = $c = 0;\n$foo->bar($a, $b, $c);\n?>")).toMatchSnapshot();
  });
});
