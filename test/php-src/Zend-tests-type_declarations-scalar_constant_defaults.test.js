// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/type_declarations/scalar_constant_defaults.phpt
  it("Scalar type - default via constants", function () {
    expect(parser.parseCode("<?php\nconst INT_VAL = 10;\nconst FLOAT_VAL = 10.5;\nconst STRING_VAL = \"this is a test\";\nconst INT_ADD_VAL = 10 + 15;\nconst FLOAT_ADD_VAL = 10.5 + 0.2;\nconst STRING_ADD_VAL = \"this\" . \" is a test\";\nconst NULL_VAL = null;\nfunction int_val(int $a = INT_VAL): int {\n    return $a;\n}\nfunction float_val(float $a = FLOAT_VAL): float {\n    return $a;\n}\nfunction string_val(string $a = STRING_VAL): string {\n    return $a;\n}\nfunction int_add_val(int $a = INT_ADD_VAL): int {\n    return $a;\n}\nfunction float_add_val(float $a = FLOAT_ADD_VAL): float {\n    return $a;\n}\nfunction string_add_val(string $a = STRING_ADD_VAL): string {\n    return $a;\n}\nfunction int_val_default_null(int $a = NULL_VAL) {\n    return $a;\n}\nfunction nullable_int_val_default_null(?int $a = NULL_VAL) {\n    return $a;\n}\necho \"Testing int val\" . PHP_EOL;\nvar_dump(int_val());\necho \"Testing float val\" . PHP_EOL;\nvar_dump(float_val());\necho \"Testing string val\" . PHP_EOL;\nvar_dump(string_val());\necho \"Testing int add val\" . PHP_EOL;\nvar_dump(int_add_val());\necho \"Testing float add val\" . PHP_EOL;\nvar_dump(float_add_val());\necho \"Testing string add val\" . PHP_EOL;\nvar_dump(string_add_val());\necho \"Testing int with default null constant\" . PHP_EOL;\ntry {\n    var_dump(int_val_default_null());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"Testing int with null null constant\" . PHP_EOL;\ntry {\n    var_dump(int_val_default_null(null));\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"Testing nullable int with default null constant\" . PHP_EOL;\nvar_dump(nullable_int_val_default_null());\necho \"Testing nullable int with null null constant\" . PHP_EOL;\nvar_dump(nullable_int_val_default_null(null));\n?>")).toMatchSnapshot();
  });
});
