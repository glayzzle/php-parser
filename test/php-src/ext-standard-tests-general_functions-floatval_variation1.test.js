// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/floatval_variation1.phpt
  it("Testing floatval() and its alias doubleval() functions : usage variations - different data types as $y arg", function () {
    expect(parser.parseCode("<?php\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\nfclose($fp);\n$dfp = opendir ( __DIR__ );\nclosedir($dfp);\n// other types in an array\n$not_float_types = array (\n           \"-2147483648\" => -2147483648, // max negative integer value\n           \"2147483647\" => 2147483648,  // max positive integer value\n           \"file resoruce\" => $fp,\n           \"directory resource\" => $dfp,\n           \"\\\"0.0\\\"\" => \"0.0\", // string\n           \"\\\"1.0\\\"\" => \"1.0\",\n           \"\\\"-1.3e3\\\"\" => \"-1.3e3\",\n           \"\\\"bob-1.3e3\\\"\" => \"bob-1.3e3\",\n           \"\\\"10 Some dollars\\\"\" => \"10 Some dollars\",\n           \"\\\"10.2 Some Dollars\\\"\" => \"10.2 Some Dollars\",\n           \"\\\"10.0 dollar\\\" + 1\" => \"10.0 dollar\" + 1,\n           \"\\\"10.0 dollar\\\" + 1.0\" => \"10.0 dollar\" + 1.0,\n           \"\\\"\\\"\" => \"\",\n           \"true\" => true,\n           \"NULL\" => NULL,\n           \"null\" => null,\n                 );\n/* loop through the $not_float_types to see working of\n   floatval() on non float types, expected output: float value valid floating point numbers */\necho \"\\n*** Testing floatval() on non floating types ***\\n\";\nforeach ($not_float_types as $key => $type ) {\n   echo \"\\n-- Iteration : $key --\\n\";\n   var_dump( floatval($type) );\n}\necho \"\\n*** Testing doubleval() on non floating types ***\\n\";\n/* loop through the $not_float_types to see working of\n   doubleval() on non float types, expected output: float value valid floating point numbers */\nforeach ($not_float_types as $key => $type ) {\n   echo \"\\n-- Iteration : $key --\\n\";\n   var_dump( doubleval($type) );\n}\n?>")).toMatchSnapshot();
  });
});
