// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/bug42841.phpt
  it("Bug #42841 (REF CURSOR and oci_new_cursor PHP crash)", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__.'/details.inc';\n// note a oci_new_connect() occurs lower in the script\n$c = oci_connect($user, $password, $dbase);\n// Initialization\n$stmtarray = array(\n    \"create or replace procedure bug42841_proc(out_1 out sys_refcursor) is\n   begin\n      open out_1 for select 11 from dual union all select 12 from dual union all select 13 from dual;\n   end bug42841_proc;\",\n    \"create or replace package bug43449_pkg is\n        type cursortype is ref Cursor;\n        function testcursor return cursortype;\n    end bug43449_pkg;\",\n    \"create or replace package body bug43449_pkg is\n    function testcursor return cursortype is\n    retCursor cursorType;\n    begin\n        Open retCursor For 'select * from dual';\n        return retCursor;\n    end;\n    end bug43449_pkg;\"\n);\noci8_test_sql_execute($c, $stmtarray);\n// Main code\nfunction do_bug42841($c)\n{\n    echo \"First attempt\\n\";\n    $sql = \"BEGIN bug42841_proc(:cursor); END;\";\n    $stmt = oci_parse($c, $sql);\n    $cursor = oci_new_cursor($c);\n    oci_bind_by_name($stmt, \":cursor\", $cursor, -1, OCI_B_CURSOR);\n    oci_execute($stmt, OCI_DEFAULT);\n    oci_execute($cursor);\n    while($row = oci_fetch_array($cursor, OCI_ASSOC + OCI_RETURN_LOBS)) {\n        $data1[] = $row;\n    }\n    oci_free_statement($stmt);\n    oci_free_statement($cursor);\n    var_dump($data1);\n    echo \"Second attempt\\n\";\n    $sql = \"BEGIN bug42841_proc(:cursor); END;\";\n    $stmt = oci_parse($c, $sql);\n    $cursor = oci_new_cursor($c);\n    oci_bind_by_name($stmt, \":cursor\", $cursor, -1, OCI_B_CURSOR);\n    oci_execute($stmt, OCI_DEFAULT);\n    oci_execute($cursor);\n    while($row = oci_fetch_array($cursor, OCI_ASSOC + OCI_RETURN_LOBS)) {\n        $data2[] = $row;\n    }\n    oci_free_statement($stmt);\n    oci_free_statement($cursor);\n    var_dump($data2);\n}\nfunction do_bug43449($c)\n{\n    for ($i = 0; $i < 2; $i++) {\n        var_dump(bug43449_getCur($c));\n    }\n}\nfunction bug43449_getCur($c)\n{\n    $cur = oci_new_cursor($c);\n    $stmt = oci_parse($c, 'begin :cur := bug43449_pkg.testcursor; end;');\n    oci_bind_by_name($stmt, ':cur', $cur, -1, OCI_B_CURSOR);\n    oci_execute($stmt, OCI_DEFAULT);\n    oci_execute($cur, OCI_DEFAULT);\n    $ret = array();\n    while ($row = oci_fetch_assoc($cur)) {\n        $ret[] = $row;\n    }\n    oci_free_statement($cur);\n    oci_free_statement($stmt);\n    return $ret;\n}\necho \"Test bug 42841: Procedure with OUT cursor parameter\\n\";\ndo_bug42841($c);\n$c = oci_new_connect($user, $password, $dbase);\necho \"Test bug 43449: Cursor as function result\\n\";\ndo_bug43449($c);\n// Cleanup\n$stmtarray = array(\n    \"drop procedure bug42841_proc\",\n    \"drop package bug43449_pkg\"\n);\noci8_test_sql_execute($c, $stmtarray);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
