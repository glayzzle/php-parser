// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_oci/tests/bug57702.phpt
  it("PDO OCI Bug #57702 (Multi-row BLOB fetches)", function () {
    expect(parser.parseCode("<?php\nrequire('ext/pdo/tests/pdo_test.inc');\n$db = PDOTest::test_factory('ext/pdo_oci/tests/common.phpt');\n// Note the PDO test setup sets PDO::ATTR_STRINGIFY_FETCHES to true\n// (and sets PDO::ATTR_CASE to PDO::CASE_LOWER)\n$query = \"begin execute immediate 'drop table bug57702'; exception when others then if sqlcode <> -942 then raise; end if; end;\";\n$stmt = $db->prepare($query);\n$stmt->execute();\n$query = \"create table bug57702 (id number, data1 blob, data2 blob)\";\n$stmt = $db->prepare($query);\n$stmt->execute();\nfunction do_insert($db, $id, $data1, $data2)\n{\n    $db->beginTransaction();\n    $stmt = $db->prepare(\"insert into bug57702 (id, data1, data2) values (:id, empty_blob(), empty_blob()) returning data1, data2 into :blob1, :blob2\");\n    $stmt->bindParam(':id', $id);\n    $stmt->bindParam(':blob1', $blob1, PDO::PARAM_LOB);\n    $stmt->bindParam(':blob2', $blob2, PDO::PARAM_LOB);\n    $blob1 = null;\n    $blob2 = null;\n    $stmt->execute();\n    fwrite($blob1, $data1);\n    fclose($blob1);\n    fwrite($blob2, $data2);\n    fclose($blob2);\n    $db->commit();\n}\ndo_insert($db, 1, \"row 1 col 1\", \"row 1 col 2\");\ndo_insert($db, 2, \"row 2 col 1\", \"row 2 col 2\");\n////////////////////\necho \"First Query\\n\";\n// Fetch it back\n$stmt = $db->prepare('select data1, data2 from bug57702 order by id');\n$stmt->execute();\n$row = $stmt->fetch(PDO::FETCH_ASSOC);\nvar_dump($row['data1']);\nvar_dump($row['data2']);\n$row = $stmt->fetch(PDO::FETCH_ASSOC);\nvar_dump($row['data1']);\nvar_dump($row['data2']);\n////////////////////\necho \"\\nSecond Query\\n\";\nforeach($db->query(\"select data1 as d1, data2 as d2 from bug57702 order by id\") as $row) {\n    var_dump($row['d1']);\n    var_dump($row['d2']);\n}\n////////////////////\necho \"\\nThird Query\\n\";\n$stmt = $db->prepare('select data1 as d3_1, data2 as d3_2 from bug57702 order by id');\n$rs = $stmt->execute();\n$stmt->bindColumn('d3_1' , $clob1, PDO::PARAM_LOB);\n$stmt->bindColumn('d3_2' , $clob2, PDO::PARAM_LOB);\nwhile ($stmt->fetch(PDO::FETCH_BOUND)) {\n    var_dump($clob1);\n    var_dump($clob2);\n}\n////////////////////\necho \"\\nFourth Query\\n\";\n$a = array();\n$i = 0;\nforeach($db->query(\"select data1 as d4_1, data2 as d4_2 from bug57702 order by id\") as $row) {\n    $a[$i][0] = $row['d4_1'];\n    $a[$i][1] = $row['d4_2'];\n    $i++;\n}\nfor ($i = 0; $i < count($a); $i++) {\n    var_dump($a[$i][0]);\n    var_dump($a[$i][1]);\n}\n////////////////////\necho \"\\nFifth Query\\n\";\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);  // Let's use streams\n// Since each column only has one lob descriptor, the last row is\n// shown twice because the lob descriptor for each column is reused in\n// the stream\n$a = array();\n$i = 0;\nforeach($db->query(\"select data1 as d4_1, data2 as d4_2 from bug57702 order by id\") as $row) {\n    $a[$i][0] = $row['d4_1'];\n    $a[$i][1] = $row['d4_2'];\n    $i++;\n}\nfor ($i = 0; $i < count($a); $i++) {\n    var_dump(stream_get_contents($a[$i][0]));\n    var_dump(stream_get_contents($a[$i][1]));\n}\n////////////////////\necho \"\\nSixth Query\\n\";\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);  // Let's use streams\n$a = array();\n$i = 0;\nforeach($db->query(\"select data1 as d4_1, data2 as d4_2 from bug57702 order by id\") as $row) {\n    $a[$i][0] = $row['d4_1'];\n    $a[$i][1] = $row['d4_2'];\n    var_dump(stream_get_contents($a[$i][0]));\n    var_dump(stream_get_contents($a[$i][1]));\n    $i++;\n}\n// Cleanup\n$query = \"drop table bug57702\";\n$stmt = $db->prepare($query);\n$stmt->execute();\nprint \"done\\n\";\n?>")).toMatchSnapshot();
  });
});
