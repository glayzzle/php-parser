// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sysvsem/tests/nowait.phpt
  it("Test sem_acquire with nowait option", function () {
    expect(parser.parseCode("<?php\n$P_SEMKEY = ftok(__FILE__, 'P');  //  Parent Semaphore key\n$C_SEMKEY = ftok(__FILE__, 'C');  //  Child Semaphore key\necho \"P: parent process running.\\n\";\npcntl_signal(SIGCHLD, SIG_IGN);\n// Get semaphore for parent\n$p_sem_id = sem_get($P_SEMKEY, 1);\nif ($p_sem_id === FALSE) {\n    echo \"P: failed to parent get semaphore.\\n\";\n    exit;\n}\necho \"P: got semaphore.\\n\";\n// Get semaphore for child\n$c_sem_id = sem_get($C_SEMKEY, 1);\nif ($c_sem_id === FALSE) {\n    echo \"P: failed to child get semaphore.\\n\";\n    exit;\n}\n// Acquire semaphore for parent\nif (!sem_acquire($p_sem_id)) {\n    echo \"P: fail to acquire semaphore.\\n\";\n    sem_remove($p_sem_id);\n    exit;\n}\necho \"P: acquired semaphore.\\n\";\n// Acquire semaphore for child\nif (!sem_acquire($c_sem_id)) {\n    echo \"P: failed to acquire semaphore.\\n\";\n    sem_remove($c_sem_id);\n    exit;\n}\necho \"P: acquired semaphore.\\n\";\n// Fork process\n$pid = pcntl_fork();\nif ($pid) {\n    register_shutdown_function(function () use ($p_sem_id) {\n        echo \"P: removing semaphore.\\n\";\n        sem_remove($p_sem_id);\n    });\n    // Release semaphore after 50ms\n    usleep(50000);\n    /* Wait for the child semaphore to be released to\n       to release the parent semaphore */\n    if (!sem_acquire($c_sem_id)) {\n        echo \"P: failed to acquire semaphore.\\n\";\n        exit;\n    }\n    /* Release the child semahpore before releasing\n       the releasing the parent semaphore and letting\n       the child continue execution */\n    sem_release($c_sem_id);\n    echo \"P: releasing semaphore.\\n\";\n    if (!sem_release($p_sem_id)) {\n        echo \"P: failed to release semaphore.\\n\";\n    }\n    $status = null;\n    pcntl_waitpid($pid, $status);\n} else {\n    register_shutdown_function(function () use ($c_sem_id) {\n        echo \"C: removing semaphore.\\n\";\n        sem_remove($c_sem_id);\n    });\n    echo \"C: child process running.\\n\";\n    // Have the semaphore after process forked\n    echo \"C: got semaphores.\\n\";\n    // This should fail to get to the semaphore and not wait\n    if (sem_acquire($p_sem_id, true)) {\n        echo \"C: test failed, Child was able to acquire semaphore.\\n\";\n        exit;\n    }\n    // The child process did not wait to acquire the semaphore\n    echo \"C: failed to acquire semaphore.\\n\";\n    echo \"C: releasing semaphore.\\n\";\n    if (!sem_release($c_sem_id)) {\n        echo \"C: failed to release semaphore.\\n\";\n    }\n    // Acquire semaphore with waiting\n    if (!sem_acquire($p_sem_id)) {\n        echo \"C: fail to acquire semaphore.\\n\";\n        exit;\n    }\n    echo \"C: success acquired semaphore.\\n\";\n    echo \"C: releasing semaphore.\\n\";\n    sem_release($p_sem_id);\n}\n?>")).toMatchSnapshot();
  });
});
