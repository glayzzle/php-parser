// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/gc_038.phpt
  it("GC 038: Garbage created by compound assignment operators (e.g. +=)", function () {
    expect(parser.parseCode("<?php\nfunction test_add() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x += 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"+=\\t$n\\n\";\n}\ntest_add();\nfunction test_sub() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x -= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"-=\\t$n\\n\";\n}\ntest_sub();\nfunction test_mul() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x *= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"*=\\t$n\\n\";\n}\ntest_mul();\nfunction test_div() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x /= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"/=\\t$n\\n\";\n}\ntest_div();\nfunction test_mod() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x %= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"%=\\t$n\\n\";\n}\ntest_mod();\nfunction test_sl() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x <<= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"<<=\\t$n\\n\";\n}\ntest_sl();\nfunction test_sr() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x >>= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \">>=\\t$n\\n\";\n}\ntest_sr();\nfunction test_or() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x |= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"|=\\t$n\\n\";\n}\ntest_or();\nfunction test_and() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x &= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"&=\\t$n\\n\";\n}\ntest_and();\nfunction test_xor() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x ^= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"^=\\t$n\\n\";\n}\ntest_xor();\nfunction test_pow() {\n    $x = new stdClass;\n    $x->x = $x;\n    try {\n        $x **= 5;\n    } catch (TypeError $e) { unset($x); }\n    $n = gc_collect_cycles();\n    echo \"**=\\t$n\\n\";\n}\ntest_pow();\nclass Y {\n    function __toString() {\n        return \"y\";\n    }\n}\nfunction test_concat() {\n    $x = new Y;\n    $x->x= $x;\n    @$x .= \"x\";\n    $n = gc_collect_cycles();\n    echo \".=\\t$n\\n\";\n}\ntest_concat();\n?>")).toMatchSnapshot();
  });
});
