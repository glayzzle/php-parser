// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_object.phpt
  it("Test array_unshift() function : passing object for 'var' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_unshift() by passing\n * an object to the $var argument\n*/\necho \"*** Testing array_unshift() : Passing object to \\$var argument ***\\n\";\n// simple class with a variable and method\nclass SimpleClass\n{\n  public $var1 = 1;\n  public function fun1() {\n    return $var1;\n  }\n}\n// class without members\nclass EmptyClass\n{\n}\n// abstract class\nabstract class AbstractClass\n{\n  protected $var2 = 5;\n  abstract function emptyFunction();\n}\n// class deriving the above abstract class\nclass ChildClass extends AbstractClass\n{\n  private $var3;\n  public function emptyFunction() {\n    echo \"defined in child\";\n  }\n}\n// class with final method\nclass FinalClass\n{\n  private $var4;\n  final function finalMethod() {\n    echo \"This function can't be overloaded\";\n  }\n}\n// class with static members\nclass StaticClass\n{\n  static $var5 = 2;\n  public static function staticMethod() {\n    echo \"This is a static method\";\n  }\n}\n// array to be passed to $array argument\n$array = array('f' => \"first\", \"s\" => 'second', 1, 2.222);\n// array containing different types of objects as elements\n$vars = array(\n  new SimpleClass(),\n  new EmptyClass(),\n  new ChildClass(),\n  new FinalClass(),\n  new StaticClass()\n);\n// loop through the various elements of $arrays to check the functionality of array_unshift\n$iterator = 1;\nforeach($vars as $var) {\n  echo \"-- Iteration $iterator --\\n\";\n  /* with default argument */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var) );\n  // dump the resulting array\n  var_dump($temp_array);\n  /* with optional arguments */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var, \"hello\", 'world') );\n  // dump the resulting array\n  var_dump($temp_array);\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
