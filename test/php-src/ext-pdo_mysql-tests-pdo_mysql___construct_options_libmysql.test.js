// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql___construct_options_libmysql.phpt
  it("MySQL PDO->__construct(), libmysql only options", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    function set_option_and_check($offset, $option, $value, $option_desc, $ignore_diff = false) {\n        $dsn = MySQLPDOTest::getDSN();\n        $user = PDO_MYSQL_TEST_USER;\n        $pass = PDO_MYSQL_TEST_PASS;\n        try {\n            $db = new PDO($dsn, $user, $pass, array($option => $value));\n            if (!is_object($db) || (!$ignore_diff && ($value !== ($tmp = @$db->getAttribute($option)))))\n                printf(\"[%03d] Expecting '%s'/%s got '%s'/%s' for options '%s'\\n\",\n                    $offset,\n                    $value, gettype($value),\n                    $tmp, gettype($tmp),\n                    $option_desc);\n        } catch (PDOException $e) {\n            echo \"Failed to getAttribute() for $option_desc\\n\";\n        }\n    }\n    $dsn = MySQLPDOTest::getDSN();\n    $user = PDO_MYSQL_TEST_USER;\n    $pass = PDO_MYSQL_TEST_PASS;\n    $valid_options = array();\n    $valid_options[PDO::MYSQL_ATTR_MAX_BUFFER_SIZE] = 'PDO::MYSQL_ATTR_MAX_BUFFER_SIZE';\n    $valid_options[PDO::MYSQL_ATTR_INIT_COMMAND] = 'PDO::MYSQL_ATTR_INIT_COMMAND';\n    $valid_options[PDO::MYSQL_ATTR_READ_DEFAULT_FILE] = 'PDO::MYSQL_ATTR_READ_DEFAULT_FILE';\n    $valid_options[PDO::MYSQL_ATTR_READ_DEFAULT_GROUP] = 'PDO::MYSQL_ATTR_READ_DEFAULT_GROUP';\n    $defaults[PDO::MYSQL_ATTR_MAX_BUFFER_SIZE] = 1048576;\n    /* TODO getAttribute() does not handle it */\n    $defaults[PDO::MYSQL_ATTR_INIT_COMMAND] = '';\n    $defaults[PDO::MYSQL_ATTR_READ_DEFAULT_FILE] = false;\n    $defaults[PDO::MYSQL_ATTR_READ_DEFAULT_GROUP] = false;\n    $db = new PDO($dsn, $user, $pass);\n    foreach ($valid_options as $option => $name) {\n        try {\n            $tmp = $db->getAttribute($option);\n            if ($tmp !== $defaults[$option])\n                printf(\"[001] Expecting default value for '%s' of '%s'/%s, getAttribute() reports setting '%s'/%s\\n\",\n                    $name, $defaults[$option], gettype($defaults[$option]),\n                    $tmp, gettype($tmp));\n        } catch (PDOException $e) {\n            echo \"Failed to getAttribute() for $name\\n\";\n        }\n    }\n    set_option_and_check(26, PDO::MYSQL_ATTR_READ_DEFAULT_FILE, true, 'PDO::MYSQL_ATTR_READ_DEFAULT_FILE');\n    set_option_and_check(27, PDO::MYSQL_ATTR_READ_DEFAULT_FILE, false, 'PDO::MYSQL_ATTR_READ_DEFAULT_FILE');\n    set_option_and_check(30, PDO::MYSQL_ATTR_MAX_BUFFER_SIZE, -1, 'PDO::MYSQL_ATTR_MAX_BUFFER_SIZE', true);\n    set_option_and_check(31, PDO::MYSQL_ATTR_MAX_BUFFER_SIZE, PHP_INT_MAX, 'PDO::MYSQL_ATTR_MAX_BUFFER_SIZE');\n    set_option_and_check(32, PDO::MYSQL_ATTR_MAX_BUFFER_SIZE, 1, 'PDO::MYSQL_ATTR_MAX_BUFFER_SIZE');\n    print \"done!\\n\";\n?>")).toMatchSnapshot();
  });
});
