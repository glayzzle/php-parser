// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_inTransaction.phpt
  it("MySQL PDO class inTransaction", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\nconst BEGIN = ['BEGIN', 'START TRANSACTION'];\nconst END = ['COMMIT', 'ROLLBACK'];\n$db = MySQLPDOTest::factory();\n// $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false); // mysql does not support\nforeach (BEGIN as $begin) {\n    foreach (END as $end) {\n        foreach (['exec', 'query', 'execute'] as $w) {\n            foreach ([$begin, $end] as $command) {\n                switch ($w) {\n                    case 'exec':\n                        $db->exec($command);\n                        break;\n                    case'query':\n                        $db->query($command)->execute();\n                        break;\n                    case 'execute':\n                        /* EMULATE_PREPARES = QUERY */\n                        $db->prepare($command)->execute();\n                        break;\n                    default:\n                        assert(0);\n                }\n                var_dump($db->inTransaction());\n            }\n        }\n    }\n}\necho \"\\n\";\n// Mixing PDO transaction API and explicit queries.\nforeach (END as $end) {\n    $db->beginTransaction();\n    var_dump($db->inTransaction());\n    $db->exec($end);\n    var_dump($db->inTransaction());\n}\n$db->exec('START TRANSACTION');\nvar_dump($db->inTransaction());\n$db->rollBack();\nvar_dump($db->inTransaction());\n$db->exec('START TRANSACTION');\nvar_dump($db->inTransaction());\n$db->commit();\nvar_dump($db->inTransaction());\necho \"\\n\";\n// DDL query causes an implicit commit.\n$db->beginTransaction();\nvar_dump($db->inTransaction());\n$db->exec('DROP TABLE IF EXISTS test');\nvar_dump($db->inTransaction());\n// We should be able to start a new transaction after the implicit commit.\n$db->beginTransaction();\nvar_dump($db->inTransaction());\n$db->commit();\nvar_dump($db->inTransaction());\n?>")).toMatchSnapshot();
  });
});
