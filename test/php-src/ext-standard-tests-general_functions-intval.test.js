// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/intval.phpt
  it("Test intval() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing intval() with valid integer values ***\\n\";\n// different valid  integer values\n$valid_ints = array(\n                '0',\n                '1',\n                '-1',\n                '-2147483648', // max negative integer value\n                '-2147483647',\n                2147483647,  // max positive integer value\n                2147483640,\n                0x123B,      // integer as hexadecimal\n                '0x12ab',\n                '0Xfff',\n                '0XFA',\n                -0x80000000, // max negative integer as hexadecimal\n                '0x7fffffff',  // max positive integer as hexadecimal\n                0x7FFFFFFF,  // max positive integer as hexadecimal\n                '0123',        // integer as octal\n                01,       // should be quivalent to octal 1\n                -020000000000, // max negative integer as octal\n                017777777777,  // max positive integer as octal\n               );\n/* loop to check that intval() recognizes different\n   integer values, expected output:integer value in decimal notation for valid integer */\necho \"\\n***Output with default base value ie 10 ***\\n\";\nforeach ($valid_ints as $value ) {\n   var_dump( intval($value) );\n}\necho \"\\n***Output with base value of 10( explicitly passed as argument) ***\\n\";\nforeach ($valid_ints as $value ) {\n   var_dump( intval($value, 10) );\n}\necho \"\\n***Output with base value  of 16 ***\\n\";\nforeach ($valid_ints as $value ) {\n   var_dump( intval($value, 16) );\n}\necho \"\\n***Output with base value of 8 ***\\n\";\nforeach ($valid_ints as $value ) {\n   var_dump( intval($value, 8) );\n}\necho \"\\n*** Testing intval() on non integer types ***\\n\";\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\nfclose($fp);\n$dfp = opendir ( __DIR__ );\nclosedir($dfp);\n// unset variable\n$unset_var = 10;\nunset ($unset_var);\n// other types in a array\n$not_int_types = array (\n  /* float values */\n  '-2147483649', // float value\n  '2147483648',  // float value\n  '-0x80000001', // float value, beyond max negative int\n  '0x800000001', // float value, beyond max positive int\n  '020000000001', // float value, beyond max positive int\n  '-020000000001', // float value, beyond max negative int\n  0.0,\n  -0.1,\n  1.0,\n  1e5,\n  -1e6,\n  1E8,\n  -1E9,\n  10.0000000000000000005,\n  10.5e+5,\n  /* resources */\n  $fp,\n  $dfp,\n  /* arrays */\n  array(),\n  array(0),\n  array(1),\n  array(NULL),\n  array(null),\n  array(\"string\"),\n  array(true),\n  array(TRUE),\n  array(false),\n  array(FALSE),\n  array(1,2,3,4),\n  array(1 => \"One\", \"two\" => 2),\n  /* strings */\n  \"\",\n  '',\n  \"0\",\n  '0',\n  \"1\",\n  '1',\n  \"\\x01\",\n  '\\x01',\n  \"\\01\",\n  '\\01',\n  'string',\n  \"string\",\n  \"true\",\n  \"FALSE\",\n  'false',\n  'TRUE',\n  \"NULL\",\n  'null',\n  /* booleans */\n  true,\n  false,\n  TRUE,\n  FALSE,\n  /* undefined and unset vars */\n  @$unset_var,\n  @$undefined_var\n);\n/* loop through the $not_int_types to see working of\n   intval() on non integer types, expected output: integer value in decimal notation for valid integers */\nforeach ($not_int_types as $type ) {\n   var_dump( intval($type) );\n}\necho \"\\n--- Done ---\\n\";\n?>")).toMatchSnapshot();
  });
});
