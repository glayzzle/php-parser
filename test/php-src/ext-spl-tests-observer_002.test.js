// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/observer_002.phpt
  it("SPL: SplObjectStorage", function () {
    expect(parser.parseCode("<?php\nclass MyObjectStorage extends SplObjectStorage\n{\n    function rewind(): void\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::rewind();\n    }\n    function valid(): bool\n    {\n        echo __METHOD__ . \"(\" . (parent::valid() ? 1 : 0) . \")\\n\";\n        return parent::valid();\n    }\n    function key(): int\n    {\n        echo __METHOD__ . \"(\" . parent::key() . \")\\n\";\n        return parent::key();\n    }\n    function current(): object\n    {\n        echo __METHOD__ . \"(\" . parent::current()->getName() . \")\\n\";\n        return parent::current();\n    }\n    function next(): void\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::next();\n    }\n}\nclass ObserverImpl implements SplObserver\n{\n    protected $name = '';\n    function __construct($name = 'obj')\n    {\n        $this->name = '$' . $name;\n    }\n    function update(SplSubject $subject): void\n    {\n        echo $this->name . '->' . __METHOD__ . '(' . $subject->getName() . \");\\n\";\n    }\n    function getName()\n    {\n        return $this->name;\n    }\n}\nclass SubjectImpl implements SplSubject\n{\n    protected $name = '';\n    protected $observers;\n    function __construct($name = 'sub')\n    {\n        $this->observers = new MyObjectStorage;\n        $this->name = '$' . $name;\n    }\n    function attach(SplObserver $observer): void\n    {\n        echo $this->name . '->' . __METHOD__ . '(' . $observer->getName() . \");\\n\";\n        $this->observers->attach($observer);\n    }\n    function detach(SplObserver $observer): void\n    {\n        echo $this->name . '->' . __METHOD__ . '(' . $observer->getName() . \");\\n\";\n        $this->observers->detach($observer);\n    }\n    function count(): int\n    {\n        return $this->observers->count();\n    }\n    function notify(): void\n    {\n        echo $this->name . '->' . __METHOD__ . \"();\\n\";\n        foreach($this->observers as $key => $observer)\n        {\n            $observer->update($this);\n        }\n    }\n    function getName()\n    {\n        return $this->name;\n    }\n    function contains($obj)\n    {\n        return $this->observers->contains($obj);\n    }\n}\n$sub = new SubjectImpl;\n$ob1 = new ObserverImpl(\"ob1\");\n$ob2 = new ObserverImpl(\"ob2\");\n$ob3 = new ObserverImpl(\"ob3\");\nvar_dump($sub->contains($ob1));\n$sub->attach($ob1);\nvar_dump($sub->contains($ob1));\n$sub->attach($ob1);\n$sub->attach($ob2);\n$sub->attach($ob3);\nvar_dump($sub->count());\n$sub->notify();\n$sub->detach($ob3);\nvar_dump($sub->count());\n$sub->notify();\n$sub->detach($ob2);\n$sub->detach($ob1);\nvar_dump($sub->count());\n$sub->notify();\n$sub->attach($ob3);\nvar_dump($sub->count());\n$sub->notify();\n?>")).toMatchSnapshot();
  });
});
