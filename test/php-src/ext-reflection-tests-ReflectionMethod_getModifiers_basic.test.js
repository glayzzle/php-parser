// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionMethod_getModifiers_basic.phpt
  it("ReflectionMethod::getModifiers()", function () {
    expect(parser.parseCode("<?php\nfunction reflectMethodModifiers($class) {\n    $classInfo = new reflectionClass($class);\n    $methodArray = $classInfo->getMethods();\n    foreach ($methodArray as $method) {\n        echo \"Modifiers for method $method->class::$method->name():\\n\";\n        printf(\"0x%08x\\n\", $method->getModifiers());\n        echo \"\\n\\n\";\n    }\n}\nclass TestClass\n{\n    public function foo() {\n        echo \"Called foo()\\n\";\n    }\n    static function stat() {\n        echo \"Called stat()\\n\";\n    }\n    private function priv() {\n        echo \"Called priv()\\n\";\n    }\n    protected function prot() {}\n    public final function fin() {}\n    public function __construct() {}\n    public function __destruct() {}\n    public function __call($a, $b) {}\n    public static function __callStatic($a, $b) {}\n    public function __clone() {}\n    public function __get($a) {}\n    public function __set($a, $b) {}\n    public function __unset($a) {}\n    public function __invoke() {}\n    public function __isset($a) {}\n    public function __tostring() {}\n    public function __sleep() {}\n    public function __wakeup() {}\n    public static function __set_state($a) {}\n    public function __autoload() {}\n    public function __serialize() {}\n    public function __unserialize($data) {}\n    public function __debugInfo() {}\n}\nclass DerivedClass extends TestClass {}\ninterface TestInterface {\n    public function int();\n    public function __clone();\n}\nabstract class AbstractClass {\n    public abstract function foo();\n}\nreflectMethodModifiers(\"TestClass\");\nreflectMethodModifiers(\"DerivedClass\");\nreflectMethodModifiers(\"TestInterface\");\nreflectMethodModifiers(\"AbstractClass\");\n$a = new ReflectionMethod('ReflectionMethod::getModifiers');\necho \"ReflectionMethod::getModifiers() modifiers:\\n\";\nprintf(\"0x%08x\\n\", $a->getModifiers());\n?>")).toMatchSnapshot();
  });
});
