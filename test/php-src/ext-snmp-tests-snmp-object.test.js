// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/snmp/tests/snmp-object.phpt
  it("OO API", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__.'/snmp_include.inc');\n//EXPECTF format is quickprint OFF\nsnmp_set_enum_print(false);\nsnmp_set_quick_print(false);\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\nsnmp_set_oid_output_format(SNMP_OID_OUTPUT_FULL);\necho \"SNMPv1\\n\";\n$session = new SNMP(SNMP::VERSION_1, $hostname, $community, $timeout, $retries);\n$session->valueretrieval = SNMP_VALUE_LIBRARY;\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->get(array('.1.3.6.1.2.1.1.1.0', '.1.3.6.1.2.1.1.3.0')));\nvar_dump($session->getnext('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\necho \"SNMPv2\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getnext('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\necho \"GET with preserving original OID names\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$orig = array('.1.3.6.1.2.1.1.1.0', '.1.3.6.1.2.1.1.5.0');\n$result = $session->get($orig, TRUE);\nforeach($orig as $oid){\n    var_dump($result[$oid]);\n}\nvar_dump($session->close());\necho \"WALK multiple on single OID\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$z = $session->walk('.1.3.6.1.2.1.1');\nvar_dump(gettype($z));\nvar_dump(count($z));\nvar_dump(key($z));\nvar_dump(array_shift($z));\nvar_dump($session->close());\necho \"WALK multiple on single OID, max_repetitions set to 30\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$z = $session->walk('.1.3.6.1.2.1.1', FALSE, 30);\nvar_dump(gettype($z));\nvar_dump(count($z));\nvar_dump(key($z));\nvar_dump(array_shift($z));\nvar_dump($session->close());\necho \"WALK multiple on single OID, max_repetitions set to 30, non_repeaters set to 0\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$z = $session->walk('.1.3.6.1.2.1.1', FALSE, 30, 0);\nvar_dump(gettype($z));\nvar_dump(count($z));\nvar_dump(key($z));\nvar_dump(array_shift($z));\nvar_dump($session->close());\necho \"WALK multiple on single OID, max_oids set to 30\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$session->max_oids = 30;\n$z = $session->walk('.1.3.6.1.2.1.1');\nvar_dump(gettype($z));\nvar_dump(count($z));\nvar_dump(key($z));\nvar_dump(array_shift($z));\nvar_dump($session->close());\necho \"WALK multiple on single OID with OID suffix as keys\\n\";\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\n$z = $session->walk('.1.3.6.1.2.1.1', TRUE);\nvar_dump(gettype($z));\nvar_dump(count($z));\nvar_dump(key($z));\nvar_dump(array_shift($z));\nvar_dump(key($z));\narray_shift($z);\nvar_dump(key($z));\narray_shift($z);\nvar_dump(key($z));\narray_shift($z);\nvar_dump(key($z));\nvar_dump($session->close());\necho \"SNMPv3 (default security settings)\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $user_noauth, $timeout, $retries);\n#$session->setSecurity($user_noauth, 'noAuthNoPriv', '', '', '', '', '', '');\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getnext('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\necho \"SNMPv3 (noAuthNoPriv)\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $user_noauth, $timeout, $retries);\n$session->setSecurity('noAuthNoPriv');\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getnext('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\necho \"SNMPv3 (authPriv)\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $rwuser, $timeout, $retries);\n$session->setSecurity('authPriv', 'MD5', $auth_pass, 'AES', $priv_pass);\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getnext('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->walk('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\necho \"SET single OID\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $rwuser, $timeout, $retries);\n$session->setSecurity('authPriv', 'MD5', $auth_pass, 'AES', $priv_pass);\n$oid1 = 'SNMPv2-MIB::sysContact.0';\n$oldvalue1 = $session->get($oid1);\n$newvalue1 = $oldvalue1 . '0';\n$z = $session->set($oid1, 's', $newvalue1);\nvar_dump($z);\nvar_dump(($session->get($oid1) === $newvalue1));\n$z = $session->set($oid1, 's', $oldvalue1);\nvar_dump($z);\nvar_dump(($session->get($oid1) === $oldvalue1));\nvar_dump($session->close());\necho \"Multiple OID with max_oids = 1\\n\";\n$oid2 = 'SNMPv2-MIB::sysLocation.0';\n$session = new SNMP(SNMP::VERSION_3, $hostname, $rwuser, $timeout, $retries);\n$session->setSecurity('authPriv', 'MD5', $auth_pass, 'AES', $priv_pass);\n$session->max_oids = 1;\n$oldvalue2 = $session->get($oid2);\n$newvalue2 = $oldvalue2 . '0';\n$z = $session->set(array($oid1, $oid2), array('s','s'), array($newvalue1, $newvalue2));\nvar_dump($z);\nvar_dump(($session->get($oid1) === $newvalue1));\nvar_dump(($session->get($oid2) === $newvalue2));\n$z = $session->set(array($oid1, $oid2), array('s','s'), array($oldvalue1, $oldvalue2));\nvar_dump($z);\nvar_dump(($session->get($oid1) === $oldvalue1));\nvar_dump(($session->get($oid2) === $oldvalue2));\nvar_dump($session->close());\necho \"SNMPv3, setting contextEngineID (authPriv)\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $rwuser, $timeout, $retries);\n$session->setSecurity('authPriv', 'MD5', $auth_pass, 'AES', $priv_pass, '', 'aeeeff');\nvar_dump($session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->close());\n?>")).toMatchSnapshot();
  });
});
