// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fread_basic.phpt
  it("Test fread() function : basic functionality", function () {
    expect(parser.parseCode("<?php\n// include the file.inc for common functions for test\ninclude (\"file.inc\");\n/* Function : function check_size(string $data, int $expect_size)\n   Description : Check the length of the data, and compare the size with $expect_size\n     $data : Text data.\n     $expect_size : Expected data length\n*/\nfunction check_size($data, $expect_size) {\n  $size=strlen($data);\n  if ( $size == $expect_size)\n    echo \"OK\\n\";\n  else\n    echo \"Error: Expected: $expect_size, Actual: $size\";\n }\necho \"*** Testing fread() basic operations ***\\n\";\n/*\n test fread with file opened in \"r\" and \"rb\" mode only\n Content with numeric and strings with it\n*/\n$file_modes = array( \"r\", \"rb\", \"rt\", \"r+\", \"r+b\", \"r+t\");\n$file_content_types = array(\"numeric\",\"text\",\"text_with_new_line\",\"alphanumeric\");\n foreach($file_content_types as $file_content_type) {\n   echo \"\\n-- Testing fread) with file having data of type \". $file_content_type .\" --\\n\";\n   /* create files with $file_content_type */\n   create_files ( __DIR__, 1, $file_content_type, 0755, 1, \"w\", \"fread_basic\");\n   $filename = __DIR__.\"/fread_basic1.tmp\"; // this is name of the file created by create_files()\n  /* open the file using $files_modes and perform fread() on it */\n   for($inner_loop_counter = 0;\n       $inner_loop_counter < count($file_modes);\n       $inner_loop_counter++) {\n    echo \"-- File opened in mode \".$file_modes[$inner_loop_counter].\" --\\n\";\n    $file_handle = fopen($filename, $file_modes[$inner_loop_counter]);\n    if (!$file_handle) {\n       echo \"Error: failed to fopen() file: $filename!\";\n       exit();\n    }\n    /* read file by giving the actual length, check the length and content by calculating the\n      hash using md5() function\n    */\n    /* Reading 1024 bytes from file, expecting 1024 bytes */ ;\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    echo \"Reading 1024 bytes from file, expecting 1024 bytes ... \";\n    $data_from_file=fread($file_handle, 1024);\n    check_size($data_from_file,1024);\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    var_dump( md5($data_from_file) ); // calculate the hash and dump it\n    /* read file by giving size more than its size */\n    var_dump(rewind($file_handle));\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    /*reading 1030 bytes from file, expecting 1024 bytes */ ;\n    echo \"Reading 1030 bytes from file, expecting 1024 bytes ... \";\n    $data_from_file=fread($file_handle, 1030);// request for 6 bytes more than its size\n    check_size($data_from_file,1024);\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    var_dump( md5($data_from_file) ); // calculate the hash and dump it\n    // reading 1000 bytes within the file max size\n    var_dump(rewind($file_handle));\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    /*reading 1000 bytes from file, expecting 1000 bytes */ ;\n    echo \"Reading 1000 bytes from file, expecting 1000 bytes ... \";\n    $data_from_file=fread($file_handle, 1000);// request for 24 bytes less than its size\n    check_size($data_from_file,1000);\n    var_dump(ftell($file_handle));\n    var_dump( feof($file_handle) );\n    var_dump( md5($data_from_file) ); // calculate the hash and dump it\n    var_dump(fclose($file_handle)); // now close the file\n  } // end of inner for loop\n  // delete the file created\n  delete_file($filename); // delete file with name\n} // end of outer foreach loop\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
