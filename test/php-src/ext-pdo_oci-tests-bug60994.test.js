// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_oci/tests/bug60994.phpt
  it("PDO OCI Bug #60994 (Reading a multibyte CLOB caps at 8192 characters)", function () {
    expect(parser.parseCode("<?php\nrequire 'ext/pdo/tests/pdo_test.inc';\n$dbh = PDOTest::factory();\n$dbh->setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL);\n$dbh->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);\n@$dbh->exec('DROP TABLE pdo_oci_bug60994');\n$dbh->exec('CREATE TABLE pdo_oci_bug60994 (id NUMBER, data CLOB)');\n$id = null;\n$insert = $dbh->prepare('INSERT INTO pdo_oci_bug60994 (id, data) VALUES (:id, :data)');\n$insert->bindParam(':id', $id, \\PDO::PARAM_STR);\n$select = $dbh->prepare(\"SELECT data FROM pdo_oci_bug60994 WHERE id = :id\");\necho PHP_EOL, 'Test 1:  j', PHP_EOL;\n$string1 = 'abc' . str_repeat('j', 8187) . 'xyz'; // 8193 chars total works fine here (even 1 million works fine, subject to memory_limit)\n$id = 1;\n$insert->bindParam(':data', $string1, \\PDO::PARAM_STR, strlen($string1)); // length in bytes\n$insert->execute();\n$select->bindParam(':id', $id, \\PDO::PARAM_STR);\n$select->execute();\n$row = $select->fetch();\n$stream1 = stream_get_contents($row['DATA']);\n$start1  = mb_substr($stream1, 0, 10);\n$ending1 = mb_substr($stream1, -10);\necho 'size of string1 is ', strlen($string1), ' bytes, ', mb_strlen($string1), ' chars.', PHP_EOL;\necho 'size of stream1 is ', strlen($stream1), ' bytes, ', mb_strlen($stream1), ' chars.', PHP_EOL;\necho 'beg  of stream1 is ', $start1, PHP_EOL;\necho 'end  of stream1 is ', $ending1, PHP_EOL;\necho PHP_EOL, 'Test 2:  £', PHP_EOL;\n$string2 = 'abc' . str_repeat('£', 8187) . 'xyz'; // 8193 chars total is when it breaks\n$id = 2;\n$insert->bindParam(':data', $string2, \\PDO::PARAM_STR, strlen($string2)); // length in bytes\n$insert->execute();\n$select->bindParam(':id', $id, \\PDO::PARAM_STR);\n$select->execute();\n$row = $select->fetch();\n$stream2 = stream_get_contents($row['DATA']);\n$start2  = mb_substr($stream2, 0, 10);\n$ending2 = mb_substr($stream2, -10);\necho 'size of string2 is ', strlen($string2), ' bytes, ', mb_strlen($string2), ' chars.', PHP_EOL;\necho 'size of stream2 is ', strlen($stream2), ' bytes, ', mb_strlen($stream2), ' chars.', PHP_EOL;\necho 'beg  of stream2 is ', $start2, PHP_EOL;\necho 'end  of stream2 is ', $ending2, PHP_EOL;\necho PHP_EOL, 'Test 3:  Җ', PHP_EOL;\n$string3 = 'abc' . str_repeat('Җ', 8187) . 'xyz'; // 8193 chars total is when it breaks\n$id = 3;\n$insert->bindParam(':data', $string3, \\PDO::PARAM_STR, strlen($string3)); // length in bytes\n$insert->execute();\n$select->bindParam(':id', $id, \\PDO::PARAM_STR);\n$select->execute();\n$row = $select->fetch();\n$stream3 = stream_get_contents($row['DATA']);\n$start3  = mb_substr($stream3, 0, 10);\n$ending3 = mb_substr($stream3, -10);\necho 'size of string3 is ', strlen($string3), ' bytes, ', mb_strlen($string3), ' chars.', PHP_EOL;\necho 'size of stream3 is ', strlen($stream3), ' bytes, ', mb_strlen($stream3), ' chars.', PHP_EOL;\necho 'beg  of stream3 is ', $start3, PHP_EOL;\necho 'end  of stream3 is ', $ending3, PHP_EOL;\necho PHP_EOL, 'Test 4:  の', PHP_EOL;\n$string4 = 'abc' . str_repeat('の', 8187) . 'xyz'; // 8193 chars total is when it breaks\n$id = 4;\n$insert->bindParam(':data', $string4, \\PDO::PARAM_STR, strlen($string4)); // length in bytes\n$insert->execute();\n$select->bindParam(':id', $id, \\PDO::PARAM_STR);\n$select->execute();\n$row = $select->fetch();\n$stream4 = stream_get_contents($row['DATA']);\n$start4  = mb_substr($stream4, 0, 10);\n$ending4 = mb_substr($stream4, -10);\necho 'size of string4 is ', strlen($string4), ' bytes, ', mb_strlen($string4), ' chars.', PHP_EOL;\necho 'size of stream4 is ', strlen($stream4), ' bytes, ', mb_strlen($stream4), ' chars.', PHP_EOL;\necho 'beg  of stream4 is ', $start4, PHP_EOL;\necho 'end  of stream4 is ', $ending4, PHP_EOL;\n?>")).toMatchSnapshot();
  });
});
