// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/phar/tests/phar_metadata_write4.phpt
  it("Phar with object in metadata", function () {
    expect(parser.parseCode("<?php\nclass EchoesOnWakeup {\n    public function __wakeup() {\n        echo \"In __wakeup \" . spl_object_id($this) . \"\\n\";\n    }\n    public function __destruct() {\n        echo \"In __destruct \" . spl_object_id($this) . \"\\n\";\n    }\n}\nclass ThrowsOnSerialize {\n    public function __sleep() {\n        throw new RuntimeException(\"In sleep\");\n    }\n}\n$fname = __DIR__ . '/' . basename(__FILE__, '.php') . '.phar.php';\n$pname = 'phar://' . $fname;\n$file = \"<?php __HALT_COMPILER(); ?>\";\n$files = array();\n$files['a'] = array('cont' => 'a', 'meta' => new EchoesOnWakeup());\ninclude 'files/phar_test.inc';\nforeach($files as $name => $cont) {\n    var_dump(file_get_contents($pname.'/'.$name));\n}\nunset($files);\n$phar = new Phar($fname);\necho \"Loading metadata for 'a' without allowed_classes\\n\";\nvar_dump($phar['a']->getMetadata(['allowed_classes' => []]));\necho \"Loading metadata for 'a' with allowed_classes\\n\";\nvar_dump($phar['a']->getMetadata(['allowed_classes' => true]));\nunset($phar);\n// NOTE: Phar will use the cached value of metadata if setMetaData was called on that Phar path before.\n// Save the writes to the phar and use a different file path.\n$fname_new = \"$fname.copy.php\";\ncopy($fname, $fname_new);\n$phar = new Phar($fname_new);\necho \"Loading metadata from 'a' from the new phar\\n\";\nvar_dump($phar['a']->getMetadata());\necho \"Loading metadata from 'a' from the new phar with unserialize options\\n\";\nvar_dump($phar['a']->getMetadata(['allowed_classes' => true]));\n// PharEntry->setMetaData will do the following:\n// 1. serialize, checking for exceptions\n// 2. free the original data, checking for exceptions or the data getting set from destructors or error handlers.\n// 3. set the new data.\ntry {\n    var_dump($phar['a']->setMetadata(new ThrowsOnSerialize()));\n} catch (RuntimeException $e) {\n    echo \"Caught {$e->getMessage()} at {$e->getFile()}:{$e->getLine()}\\n\";\n    unset($e);\n}\nvar_dump($phar['a']->getMetadata([]));\nvar_dump($phar['a']->getMetadata(['allowed_classes' => false]));\n?>")).toMatchSnapshot();
  });
});
