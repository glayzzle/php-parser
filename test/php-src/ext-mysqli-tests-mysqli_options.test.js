// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_options.phpt
  it("mysqli_options()", function () {
    expect(parser.parseCode("<?php\nrequire_once \"connect.inc\";\n$link = mysqli_init();\n/* set it twice, checking if memory for the previous one is correctly freed */\nmysqli_options($link, MYSQLI_SET_CHARSET_NAME, \"utf8\");\nmysqli_options($link, MYSQLI_SET_CHARSET_NAME, \"latin1\");\n// print \"run_tests.php don't fool me with your 'ungreedy' expression '.+?'!\\n\";\nvar_dump(\"MYSQLI_READ_DEFAULT_GROUP\", mysqli_options($link, MYSQLI_READ_DEFAULT_GROUP, 'extra_my.cnf'));\nvar_dump(\"MYSQLI_READ_DEFAULT_FILE\", mysqli_options($link, MYSQLI_READ_DEFAULT_FILE, 'extra_my.cnf'));\nvar_dump(\"MYSQLI_OPT_CONNECT_TIMEOUT\", mysqli_options($link, MYSQLI_OPT_CONNECT_TIMEOUT, 10));\nvar_dump(\"MYSQLI_OPT_LOCAL_INFILE\", mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, 1));\nvar_dump(\"MYSQLI_INIT_COMMAND\", mysqli_options($link, MYSQLI_INIT_COMMAND, array('SET AUTOCOMMIT=0', 'SET AUTOCOMMIT=1')));\nif (!$link2 = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)) {\n    printf(\"[006] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n        $host, $user, $db, $port, $socket);\n}\nif (!$res = mysqli_query($link2, 'SELECT version() AS server_version')) {\n    printf(\"[007] [%d] %s\\n\", mysqli_errno($link2), mysqli_error($link2));\n}\n$tmp = mysqli_fetch_assoc($res);\nmysqli_free_result($res);\n$version = explode('.', $tmp['server_version']);\nif (empty($version)) {\n    printf(\"[008] Cannot determine server version, need MySQL Server 4.1+ for the test!\\n\");\n}\nif ($version[0] <= 4 && $version[1] < 1) {\n    printf(\"[009] Need MySQL Server 4.1+ for the test!\\n\");\n}\nif (!$res = mysqli_query($link2, \"SHOW CHARACTER SET\")) {\n    printf(\"[010] Cannot get list of available character sets, [%d] %s\\n\",\n        mysqli_errno($link2), mysqli_error($link2));\n}\n$charsets = array();\nwhile ($row = mysqli_fetch_assoc($res)) {\n    $charsets[] = $row;\n}\nmysqli_free_result($res);\nmysqli_close($link2);\nforeach ($charsets as $charset) {\n    /* The server currently 17.07.2007 can't handle data sent in ucs2 */\n    /* The server currently 16.08.2010 can't handle data sent in utf16 and utf32 */\n    /* As of MySQL 8.0.28, `SHOW CHARACTER SET` contains utf8mb3, but that is not yet supported by mysqlnd */\n    if ($charset['Charset'] == 'ucs2' || $charset['Charset'] == 'utf16' || $charset['Charset'] == 'utf32' || $charset['Charset'] == 'utf8mb3') {\n        continue;\n    }\n    if (true !== mysqli_options($link, MYSQLI_SET_CHARSET_NAME, $charset['Charset'])) {\n        printf(\"[009] Setting charset name '%s' has failed\\n\", $charset['Charset']);\n    }\n}\nvar_dump(\"MYSQLI_READ_DEFAULT_GROUP\", mysqli_options($link, MYSQLI_READ_DEFAULT_GROUP, 'extra_my.cnf'));\nvar_dump(\"MYSQLI_READ_DEFAULT_FILE\", mysqli_options($link, MYSQLI_READ_DEFAULT_FILE, 'extra_my.cnf'));\nvar_dump(\"MYSQLI_OPT_CONNECT_TIMEOUT\", mysqli_options($link, MYSQLI_OPT_CONNECT_TIMEOUT, 10));\nvar_dump(\"MYSQLI_OPT_LOCAL_INFILE\", mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, 1));\nvar_dump(\"MYSQLI_INIT_COMMAND\", mysqli_options($link, MYSQLI_INIT_COMMAND, 'SET AUTOCOMMIT=0'));\n/* mysqli_real_connect() */\nvar_dump(\"MYSQLI_CLIENT_SSL\", mysqli_options($link, MYSQLI_CLIENT_SSL, 'not a mysqli_option'));\nmysqli_close($link);\necho \"Link closed\\n\";\ntry {\n    mysqli_options($link, MYSQLI_INIT_COMMAND, 'SET AUTOCOMMIT=1');\n} catch (Error $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n$link = mysqli_init();\n// test for error reporting - only mysqlnd reports errors\ntry {\n    mysqli_options($link, MYSQLI_SET_CHARSET_NAME, \"foobar\");\n    if (!$IS_MYSQLND) {\n        print \"Unknown character set\\n\";\n    }\n} catch (mysqli_sql_exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n// invalid options do not generate errors\nmysqli_options($link, -1, \"Invalid option\");\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
