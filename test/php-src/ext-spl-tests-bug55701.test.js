// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/bug55701.phpt
  it("Bug #55701 (GlobIterator throws LogicException with message 'The parent constructor was not called')", function () {
    expect(parser.parseCode("<?php\n//\n// Some methods of GlobIterator do not throw a RuntimeException when the glob pattern doesn't match any file.\n// Most methods of GlobIterator throw a RuntimeException when the glob pattern doesn't match any file\n// because they get the properties of the current file\nfunction testBaseClass($f) {\n    // The tested iterator is in an invalid state; the behaviour of most of its methods is undefined\n    try {\n        $f();\n        echo \"ran normally (expected)\\n\";\n    } catch (RuntimeException $e) {\n        // Throwing a RuntimeException is the correct behaviour for some methods\n        echo \"ran normally (expected)\\n\";\n    } catch (\\Error $e) {\n        // Throwing a LogicException is not correct\n        echo \"threw LogicException (unexpected)\\n\";\n    }\n}\n//\n// The derived classes must throw LogicException if the parent class constructor was not called\nfunction testChildClass($f) {\n    try {\n        $f();\n        echo \"didn't throw (unexpected)\\n\";\n    } catch (\\Error $e) {\n        echo \"threw Error (expected)\\n\";\n    } catch (Exception $e) {\n        echo \"threw other exception (unexpected)\\n\";\n    }\n}\n//\n// It must not throw LogicException when the iterator is not valid\necho \"->count()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->count();\n} );\necho \"->rewind()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->rewind();\n} );\necho \"->getFlags()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getFlags();\n} );\necho \"->setFlags()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->setFlags(FilesystemIterator::KEY_AS_PATHNAME);\n} );\necho \"->valid()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->valid();\n} );\n//\n// When the iterator is not valid, the behaviour of the next methods is undefined\n// Some of them throw a RuntimeException while others just return an invalid value\n// However, they must not throw LogicException\necho \"->current()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->current();\n} );\necho \"->key()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->key();\n} );\necho \"->next()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->next();\n} );\necho \"->getATime()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getATime();\n} );\necho \"->getBasename()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getBasename();\n} );\necho \"->getCTime()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getCTime();\n} );\necho \"->getExtension()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getExtension();\n} );\necho \"->getFilename()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getFilename();\n} );\necho \"->getGroup()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getGroup();\n} );\necho \"->getInode()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getInode();\n} );\necho \"->getMTime()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getMTime();\n} );\necho \"->getOwner()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getOwner();\n} );\necho \"->getPath()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getPath();\n} );\necho \"->getPathname()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getPathname();\n} );\necho \"->getPerms()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getPerms();\n} );\necho \"->getSize()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getSize();\n} );\necho \"->getType()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->getType();\n} );\necho \"->isDir()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isDir();\n} );\necho \"->isDot()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isDot();\n} );\necho \"->isExecutable()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isExecutable();\n} );\necho \"->isFile()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isFile();\n} );\necho \"->isLink()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isLink();\n} );\necho \"->isReadable()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isReadable();\n} );\necho \"->isWritable()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->isWritable();\n} );\necho \"->seek()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->seek(0);\n} );\necho \"->__toString()... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.abcdefghij');\n    $o->__toString();\n} );\n//\n// Supplemental test: no method should throw LogicException if it is invoked\n// after a successful iteration over a non-empty list of files.\necho \"non-empty GlobIterator... \";\ntestBaseClass( function() {\n    $o = new GlobIterator(__DIR__.'/*.phpt');\n    foreach ($o as $file) {\n        // nothing here, just consume all the items\n    }\n    // This must not throw an exception\n    $o->count();\n} );\n//\n// The correct existing behaviour must not change\n// The classes SplFileObject and SplTempFileObject are not affected by the bug\necho \"======================= test there are no regressions =======================\\n\";\necho \"SplFileObject existent file... \";\ntestBaseClass( function() {\n    $o = new SplFileObject(__FILE__);\n    $o->fread(1);\n} );\necho \"SplFileObject non-existent file... \";\ntestBaseClass( function() {\n    $o = new SplFileObject('/tmp/abcdefghij.abcdefghij');\n    $o->fread(1);\n} );\n//\n// Check that when derived classes do not call GlobIterator::__construct()\n// the LogicException is thrown (don't break the behaviour introduced to fix bug #54384)\necho \"extends GlobIterator... \";\nclass GlobIteratorChild extends GlobIterator {\n    public function __construct() {}\n}\ntestChildClass( function() {\n    $o = new GlobIteratorChild();\n    $o->count();\n} );\necho \"extends SplFileObject... \";\nclass SplFileObjectChild extends SplFileObject {\n    public function __construct() {}\n}\ntestChildClass( function() {\n    $o = new SplFileObjectChild();\n    $o->count();\n} );\necho \"extends SplTempFileObject... \";\nclass SplTempFileObjectChild extends SplTempFileObject {\n    public function __construct() {}\n}\ntestChildClass( function() {\n    $o = new SplTempFileObjectChild();\n    $o->count();\n} );\n?>")).toMatchSnapshot();
  });
});
