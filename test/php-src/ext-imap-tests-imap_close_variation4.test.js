// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/imap/tests/imap_close_variation4.phpt
  it("Test imap_close() function : usage variations - different ints as $flags arg", function () {
    expect(parser.parseCode("<?php\n/*\n * Pass different integers as $flags arg to imap_close() to test which are\n * recognised as CL_EXPUNGE option\n */\necho \"*** Testing imap_close() : usage variations ***\\n\";\nrequire_once(__DIR__.'/setup/imap_include.inc');\n$inputs = array (0, 3.2768e4, -32768, PHP_INT_MAX, -PHP_INT_MAX);\n$stream_id = setup_test_mailbox('imapclosevar4', 3, $mailbox); // set up temp mailbox with 3 messages\n// loop through each element of $inputs to check the behavior of imap_close()\n$iterator = 1;\nforeach($inputs as $input) {\n    // mark added messages for deletion\n    for ($i = 1; $i < 4; $i++) {\n        imap_delete($stream_id, $i);\n    }\n    echo \"\\n-- Iteration $iterator --\\n\";\n    try {\n        var_dump( $check = imap_close($stream_id, $input) );\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n        $check = false;\n    }\n    // check that imap_close was successful, if not call imap_close and explicitly set CL_EXPUNGE\n    if(false === $check) {\n        imap_close($stream_id, CL_EXPUNGE);\n    } else {\n        // if imap_close was successful test whether CL_EXPUNGE was set by doing a message count\n        $imap_stream = imap_open($mailbox, IMAP_MAILBOX_USERNAME, IMAP_MAILBOX_PASSWORD);\n        $num_msg = imap_num_msg($imap_stream);\n        if ($num_msg != 0) {\n            echo \"CL_EXPUNGE was not set, $num_msg msgs in mailbox\\n\";\n        } else {\n            echo \"CL_EXPUNGE was set\\n\";\n        }\n        // call imap_close with CL_EXPUNGE explicitly set in case mailbox not empty\n        imap_close($imap_stream, CL_EXPUNGE);\n    }\n    $iterator++;\n    // get $stream_id for next iteration\n    $stream_id = imap_open($mailbox, IMAP_MAILBOX_USERNAME, IMAP_MAILBOX_PASSWORD);\n    populate_mailbox($stream_id, $mailbox, 3);\n};\n?>")).toMatchSnapshot();
  });
});
