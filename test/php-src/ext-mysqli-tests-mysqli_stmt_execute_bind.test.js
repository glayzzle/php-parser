// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_execute_bind.phpt
  it("mysqli_stmt_execute() - bind in execute", function () {
    expect(parser.parseCode("<?php\nrequire_once \"connect.inc\";\nrequire 'table.inc';\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n// first, control case\n$id = 1;\n$abc = 'abc';\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\n$stmt->bind_param('sss', ...[&$abc, 42, $id]);\n$stmt->execute();\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>'abc', 'num' => '42']);\n$stmt = null;\n// 1. same as the control case, but skipping the middle-man (bind_param)\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\n$stmt->execute([&$abc, 42, $id]);\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>'abc', 'num' => '42']);\n$stmt = null;\n// 2. param number has to match - missing 1 parameter\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute([&$abc, 42]);\n} catch (ValueError $e) {\n    echo '[001] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 3. Too many parameters \n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute([&$abc, null, $id, 24]);\n} catch (ValueError $e) {\n    echo '[002] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 4. param number has to match - missing all parameters\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute([]);\n} catch (ValueError $e) {\n    echo '[003] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 5. param number has to match - missing argument to execute()\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute();\n} catch (mysqli_sql_exception $e) {\n    echo '[004] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 6. wrong argument to execute()\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute(42);\n} catch (TypeError $e) {\n    echo '[005] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 7. objects are not arrays and are not accepted\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute((object)[&$abc, 42, $id]);\n} catch (TypeError $e) {\n    echo '[006] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 8. arrays by reference work too\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\n$arr = [&$abc, 42, $id];\n$arr2 = &$arr;\n$stmt->execute($arr2);\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>'abc', 'num' => '42']);\n$stmt = null;\n// 9. no placeholders in statement. nothing to bind in an empty array\n$stmt = $link->prepare('SELECT label FROM test WHERE id=1');\n$stmt->execute([]);\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a']);\n$stmt = null;\n// 10. once bound the values are persisted. Just like in PDO\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\n$stmt->execute(['abc', 42, $id]);\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>'abc', 'num' => '42']);\n$stmt->execute(); // no argument here. Values are already bound\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>'abc', 'num' => '42']);\ntry {\n    $stmt->execute([]); // no params here. PDO doesn't throw an error, but mysqli does\n} catch (ValueError $e) {\n    echo '[007] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\n// 11. mixing binding styles not possible. Also, NULL should stay NULL when bound as string\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\n$stmt->bind_param('sss', ...['abc', 42, null]);\n$stmt->execute([null, null, $id]);\nassert($stmt->get_result()->fetch_assoc() === ['label'=>'a', 'anon'=>null, 'num' => null]);\n$stmt = null;\n// 12. Only list arrays are allowed\n$stmt = $link->prepare('SELECT label, ? AS anon, ? AS num FROM test WHERE id=?');\ntry {\n    $stmt->execute(['A'=>'abc', 2=>42, null=>$id]);\n} catch (ValueError $e) {\n    echo '[008] '.$e->getMessage().\"\\n\";\n}\n$stmt = null;\nmysqli_close($link);\n?>")).toMatchSnapshot();
  });
});
