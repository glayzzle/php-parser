// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/debug_zval_dump_v.phpt
  it("Test debug_zval_dump() function : usage variations", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing debug_zval_dump() on functions ***\\n\";\necho \"--- Variation 1: global variable inside a function ---\\n\";\n$global_var = 10;  //declaring global variable\n/* function to dump reference count of global variable,$global_var\n   and local variable,$local_var */\nfunction dump_globalvar( &$local_var ) {\n  global $global_var;\n  echo \"\\n-- Value of local variable inside dump_globalvar() --\\n\";\n  debug_zval_dump( $local_var );\n  echo \"\\n-- Value of global variable inside dump_globalvar() --\\n\";\n  debug_zval_dump( $global_var );\n}\n/* dump value and reference count of $global_var using debug_zval_dump() */\necho \"\\n-- Value of global variable, before calling dump_globalvar() --\\n\";\ndebug_zval_dump( $global_var );\n/* calling function dump_globalvar() to check the reference count of local\n   and global variables inside the function */\ndump_globalvar( $global_var );\n/* dump value and reference count of $global_var after exiting function\n   dump_globalvar();\n   expected: reference count of $global_var should remain the same as\n             before calling dump_globalvar() function */\necho \"\\n-- Value of global variable, after exiting dump_globalvar() --\\n\";\ndebug_zval_dump( $global_var );\necho \"\\n--- Variation 2: one variable references another ---\\n\";\n$first_var = 10;\n/* dump value and reference count of $first_var */\necho \"\\n-- Value of \\$first_var: --\\n\";\ndebug_zval_dump($first_var);\n/* $ref_first_var references $first_var */\n$ref_first_var = &$var_1;\necho \"\\n-- Value of \\$ref_first_var --\\n\";\ndebug_zval_dump($ref_first_var);\necho \"\\n-- Value of \\$first_var --\\n\";\ndebug_zval_dump($first_var);\nunset($ref_first_var);\n/* dump value and reference count of $first_var, $ref_first_var\n   here $ref_first_var is unset */\necho \"\\n-- Value of \\$ref_first_var --\\n\";\ndebug_zval_dump($ref_first_var);\necho \"\\n-- Value of \\$first_var --\\n\";\ndebug_zval_dump($first_var);\necho \"\\n--- Variation 3: multiple references of variables ---\\n\";\n$var_1 = 10;\n$var_2 = &$var_1;\n$var_3 = &$var_2;\necho \"\\n-- Value of \\$var_1: (before referencing) --\\n\";\ndebug_zval_dump($var_1);\necho \"\\n-- Value of \\$var_2: (referencing var_1) --\\n\";\ndebug_zval_dump($var_2);\necho \"\\n-- Value of \\$var_3: (referencing var_2) --\\n\";\ndebug_zval_dump($var_3);\n/* unsetting $var_3 */\nunset($var_3);\necho \"\\n-- Value of \\$var_3: (after unsetting var_3) --\\n\";\ndebug_zval_dump($var_3);\necho \"\\n-- Value of \\$var_2: --\\n\";\ndebug_zval_dump($var_2);\necho \"\\n-- Value of \\$var_3: --\\n\";\ndebug_zval_dump($var_1);\n/* unsetting $var_1 */\nunset($var_1);\necho \"\\n-- Value of \\$var_1: (after unsetting variable_1) --\\n\";\ndebug_zval_dump($var_1);\necho \"\\n-- Value of \\$var_2: --\\n\";\ndebug_zval_dump($var_2);\necho \"\\n*** Testing debug_zval_dump() on miscellaneous input arguments ***\\n\";\n/* unset a variable */\n$unset_var = 10.5;\nunset($unset_var);\n$misc_values = array (\n  /* nulls */\n  NULL,\n  null,\n  /* unset variable */\n  @$unset_var,\n  /* undefined variable */\n  @$undef_var,\n /* mixed types */\n  \"TRUE123\",\n  \"123string\",\n  \"string123\",\n  \"NULLstring\"\n);\n/* loop to display the variables and its reference count using\n    debug_zval_dump() */\n$counter = 1;\nforeach( $misc_values as $value ) {\n  echo \"-- Iteration $counter --\\n\";\n  debug_zval_dump( $value );\n  $counter++;\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
