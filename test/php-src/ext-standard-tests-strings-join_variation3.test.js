// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/join_variation3.phpt
  it("Test join() function : usage variations - different values for 'pieces' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * test join() by giving different pieces values\n*/\necho \"*** Testing join() : usage variations ***\\n\";\n$pieces_arrays = array (\n  array(1, 2), // array with default keys and numrice values\n  array(1.1, 2.2), // array with default keys & float values\n  array( array(2), array(1)), // sub arrays\n  array(false,true), // array with default keys and boolean values\n  array(), // empty array\n  array(NULL), // array with NULL\n  array(\"a\",\"aaaa\",\"b\",\"bbbb\",\"c\",\"ccccc\"),\n  // associative arrays\n  array(1 => \"one\", 2 => \"two\", 3 => \"three\"),  // explicit numeric keys, string values\n  array(\"one\" => 1, \"two\" => 2, \"three\" => 3 ),  // string keys & numeric values\n  array( 1 => 10, 2 => 20, 4 => 40, 3 => 30),  // explicit numeric keys and numeric values\n  array( \"one\" => \"ten\", \"two\" => \"twenty\", \"three\" => \"thirty\"),  // string key/value\n  array(\"one\" => 1, 2 => \"two\", 4 => \"four\"),  //mixed\n  // associative array, containing null/empty/boolean values as key/value\n  array(NULL => \"NULL\", null => \"null\", \"NULL\" => NULL, \"null\" => null),\n  array(true => \"true\", false => \"false\", \"false\" => false, \"true\" => true),\n  array(\"\" => \"emptyd\", '' => 'emptys', \"emptyd\" => \"\", 'emptys' => ''),\n  array(1 => '', 2 => \"\", 3 => NULL, 4 => null, 5 => false, 6 => true),\n  array('' => 1, \"\" => 2, NULL => 3, null => 4, false => 5, true => 6),\n  // array with repetitive keys\n  array(\"One\" => 1, \"two\" => 2, \"One\" => 10, \"two\" => 20, \"three\" => 3)\n);\n// a multichar glue value\n$glue = \"], [\";\n// loop through each $pieces_arrays element and call join()\n$iteration = 1;\nfor($index = 0; $index < count($pieces_arrays); $index ++) {\n  echo \"-- Iteration $iteration --\\n\";\n  var_dump( join($glue, $pieces_arrays[$index]) );\n  $iteration ++;\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
