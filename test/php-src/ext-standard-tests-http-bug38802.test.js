// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/http/bug38802.phpt
  it("Bug #38802 (ignore_errors and max_redirects)", function () {
    expect(parser.parseCode("<?php\nrequire 'server.inc';\nfunction genResponses($server) {\n    $uri = 'http://' . stream_socket_get_name($server, false);\n    yield \"data://text/plain,HTTP/1.1 302 Moved Temporarily\\r\\nLocation: $uri/foo/bar2\\r\\n\\r\\n1\";\n    yield \"data://text/plain,HTTP/1.1 301 Moved Permanently\\r\\nLocation: $uri/foo/bar3\\r\\n\\r\\n\";\n    yield \"data://text/plain,HTTP/1.1 302 Moved Temporarily\\r\\nLocation: $uri/foo/bar4\\r\\n\\r\\n3\";\n    yield \"data://text/plain,HTTP/1.1 200 OK\\r\\n\\r\\ndone.\";\n}\nfunction do_test($context_options) {\n    $context = stream_context_create(array('http' => $context_options));\n\t$uri = null;\n    ['pid' => $pid, 'uri' => $uri ] = http_server('genResponses', $output);\n    $fd = fopen(\"$uri/foo/bar\", 'rb', false, $context);\n    var_dump($fd);\n    if ($fd) {\n        $meta_data = stream_get_meta_data($fd);\n        var_dump($meta_data['wrapper_data']);\n        var_dump(stream_get_contents($fd));\n    }\n    fseek($output, 0, SEEK_SET);\n    var_dump(stream_get_contents($output));\n    http_server_kill($pid);\n}\necho \"-- Test: follow all redirections --\\n\";\ndo_test(array(), 4);\necho \"-- Test: fail after 2 redirections --\\n\";\ndo_test(array('max_redirects' => 2), 2);\necho \"-- Test: fail at first redirection --\\n\";\ndo_test(array('max_redirects' => 0), 1);\necho \"-- Test: fail at first redirection (2) --\\n\";\ndo_test(array('max_redirects' => 1), 1);\necho \"-- Test: return at first redirection --\\n\";\ndo_test(array('max_redirects' => 0, 'ignore_errors' => 1), 1);\necho \"-- Test: return at first redirection (2) --\\n\";\ndo_test(array('max_redirects' => 1, 'ignore_errors' => 1), 1);\necho \"-- Test: return at second redirection --\\n\";\ndo_test(array('max_redirects' => 2, 'ignore_errors' => 1), 2);\n?>")).toMatchSnapshot();
  });
});
