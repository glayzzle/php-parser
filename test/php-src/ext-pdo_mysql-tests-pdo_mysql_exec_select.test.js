// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_exec_select.phpt
  it("MySQL PDO->exec(), SELECT", function () {
    expect(parser.parseCode("<?php\n    function exec_and_count($offset, &$db, $sql, $exp) {\n        try {\n            $ret = $db->exec($sql);\n            if ($ret !== $exp) {\n                printf(\"[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s\\n\",\n                    $offset, $exp, gettype($exp), $ret, gettype($ret), $sql,\n                    $db->errorCode(), implode(' ', $db->errorInfo()));\n                return false;\n            }\n        } catch (PDOException $e) {\n            printf(\"[%03d] '%s' has failed, [%s] %s\\n\",\n                $offset, $sql, $db->errorCode(), implode(' ', $db->errorInfo()));\n            return false;\n        }\n        return true;\n    }\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    /* affected rows related */\n    try {\n        exec_and_count(2, $db, 'DROP TABLE IF EXISTS test', 0);\n        exec_and_count(3, $db, sprintf('CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE), 0);\n        exec_and_count(4, $db, \"INSERT INTO test(id, col1) VALUES (1, 'a')\", 1);\n        // question is: will the result set be cleaned up, will it be possible to run more queries on the line?\n        // buffered or unbuffered does not matter!\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);\n        exec_and_count(5, $db, 'SELECT id FROM test', 0);\n        exec_and_count(6, $db, \"INSERT INTO test(id, col1) VALUES (2, 'b')\", 1);\n    } catch (PDOException $e) {\n        printf(\"[001] %s, [%s] %s\\n\",\n            $e->getMessage(),\n            $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
