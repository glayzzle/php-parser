// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_prepare_emulated_anonymous.phpt
  it("MySQL PDO->prepare(), emulated PS, anonymous placeholder", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    try {\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 1);\n        if (1 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to switch to emulated prepared statements, test will fail\\n\");\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec(sprintf('CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        $stmt = $db->prepare(\"INSERT INTO test(id, label) VALUES(1, '?')\");\n        // you can bind as many values as you want no matter if they can be replaced or not\n        $stmt->execute(array('first row'));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[003] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        $stmt = $db->prepare('SELECT id, label FROM test');\n        $stmt->execute();\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // now the same with native PS\n        printf(\"now the same with native PS\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[004] Unable to switch off emulated prepared statements, test will fail\\n\");\n        $db->exec('DELETE FROM test');\n        $stmt = $db->prepare(\"INSERT INTO test(id, label) VALUES(1, '?')\");\n        // you can bind as many values as you want no matter if they can be replaced or not\n        $stmt->execute(array('first row'));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[005] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        $stmt = $db->prepare('SELECT id, label FROM test');\n        $stmt->execute();\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
