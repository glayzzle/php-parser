// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_param.phpt
  it("mysqli_stmt_bind_param()", function () {
    expect(parser.parseCode("<?php\n    /*\n    The way we test the INSERT and data types overlaps with\n    the mysqli_stmt_bind_result test in large parts. There is only\n    one difference. This test uses mysqli_query()/mysqli_fetch_assoc() to\n    fetch the inserted values. This way we test\n    mysqli_query()/mysqli_fetch_assoc() for all possible data types\n    in this file and we test mysqli_stmt_bind_result() in the other\n    test -- therefore the \"duplicate\" makes some sense to me.\n    */\n    require_once(\"connect.inc\");\n    require('table.inc');\n    $stmt = mysqli_stmt_init($link);\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[003] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = null;\n    $label = null;\n    /*\n    libmysql gives a less descriptive error message but mysqlnd,\n    we did not unify the error messages but ignore this slight difference silently\n    */\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \" \", $tmp)))\n            printf(\"[003d] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \"\", $id, $label)))\n            printf(\"[003a] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    /* TODO: somehwhat undocumented syntax! */\n    $param = array($id);\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $param)))\n         printf(\"[003b] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    $param = array($id, $label, $id);\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \" \", $tmp)))\n            printf(\"[003d] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $param)))\n            printf(\"[003c] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \"a\", $id)))\n            printf(\"[004] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        if (!false === ($tmp = mysqli_stmt_bind_param($stmt, \"a\", $id, $label)))\n            printf(\"[005] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        mysqli_stmt_bind_param($stmt, \"aa\", $id, $label);\n    } catch (ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        mysqli_stmt_bind_param($stmt, \"ia\", $id, $label);\n    } catch (ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    try {\n        if (!true === ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $id, $label)))\n            printf(\"[008] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    if (function_exists(\"memory_get_usage\")) {\n        $mem = memory_get_usage();\n        for ($i = 0; $i < 20000; $i++) {\n            if (!true === ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $id, $label)))\n                printf(\"[008][$i] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n        }\n        if (($tmp = (memory_get_usage() - $mem)) > 600)\n            printf(\"[009] Function seems to be leaking, because it used %d bytes. During tests it used only 92 bytes.\", $tmp);\n    }\n    $id = 100;\n    $label = \"z\";\n    if (!mysqli_stmt_execute($stmt))\n        printf(\"[010] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    mysqli_stmt_close($stmt);\n    if (!($res = mysqli_query($link, \"SELECT id, label FROM test WHERE id = \" . $id)))\n        printf(\"[011] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    $row = mysqli_fetch_assoc($res);\n    if (($row['id'] != $id) || ($row['label'] != $label))\n        printf(\"[012] Expecting '%s'/%s', got '%s'/%s'!\\n\", $id, $label, $row['id'], $row['label']);\n    mysqli_free_result($res);\n    function func_mysqli_stmt_bind_datatype($link, $engine, $bind_type, $sql_type, $bind_value, $offset, $alternative = null) {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[%03d] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_query($link, sprintf(\"CREATE TABLE test(id INT NOT NULL, label %s, PRIMARY KEY(id)) ENGINE = %s\", $sql_type, $engine))) {\n            // don't bail - it might be that the server does not support the data type\n            return false;\n        }\n        if (!$stmt = mysqli_stmt_init($link)) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 1, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUE (?, ?)\")) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 2, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        $id = 1;\n        if (!mysqli_stmt_bind_param($stmt, \"i\" . $bind_type, $id, $bind_value)) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 3, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 4, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        mysqli_stmt_close($stmt);\n        if (!$res = mysqli_query($link, \"SELECT id, label FROM test\")) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 5, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!$row = mysqli_fetch_assoc($res)) {\n            printf(\"[%03d] [%d] %s\\n\", $offset + 5, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if ($alternative) {\n            if (($row['id'] != $id) || (($row['label'] != $bind_value) && ($row['label'] != $alternative))) {\n                printf(\"[%03d] Testing '%s', '%s': expecting '%s'/'%s' (%s), got '%s'/'%s'\\n\",\n                    $offset + 6, $bind_type, $sql_type,\n                    $id, $bind_value, gettype($bind_value), $row['id'], $row['label']);\n                return false;\n            }\n        } else {\n            if (($row['id'] != $id) || ($row['label'] != $bind_value)) {\n                printf(\"[%03d] Testing '%s', '%s': expecting '%s'/'%s', got '%s'/'%s'\\n\",\n                    $offset + 6, $bind_type, $sql_type,\n                    $id, $bind_value, $row['id'], $row['label']);\n                return false;\n            }\n        }\n        mysqli_free_result($res);\n        return true;\n    }\n    function func_mysqli_stmt_bind_make_string($len) {\n        $ret = '';\n        for ($i = 0; $i < $len; $i++)\n            $ret .= chr(mt_rand(65, 90));\n        return $ret;\n    }\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"TINYINT\", -11, 20);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"TINYINT\", NULL, 30);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"TINYINT UNSIGNED\", 1, 40);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"TINYINT UNSIGNED\", NULL, 50);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BOOL\", 1, 60);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BOOL\", NULL, 70);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BOOLEAN\", 0, 80);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BOOLEAN\", NULL, 90);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"SMALLINT\", -32768, 100);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"SMALLINT\", 32767, 110);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"SMALLINT\", NULL, 120);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"SMALLINT UNSIGNED\", 65535, 130);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"SMALLINT UNSIGNED\", NULL, 140);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"MEDIUMINT\", -8388608, 150);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"MEDIUMINT\", 8388607, 160);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"MEDIUMINT\", NULL, 170);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"MEDIUMINT UNSIGNED\", 16777215, 180);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"MEDIUMINT UNSIGNED\", NULL, 190);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"INTEGER\", -2147483648, 200);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"INTEGER\", 2147483647, 210);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"INTEGER\", NULL, 220);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"INTEGER UNSIGNED\", (defined(\"PHP_INT_MAX\")) ? min(4294967295, PHP_INT_MAX) : 1, 230);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"INTEGER UNSIGNED\", 4294967295, 240);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"INTEGER UNSIGNED\", NULL, 250);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BIGINT\", -1 * PHP_INT_MAX + 1, 260);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BIGINT\", NULL, 270);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BIGINT\", PHP_INT_MAX, 280);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"i\", \"BIGINT UNSIGNED\", NULL, 290);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BIGINT\", \"-9223372036854775808\", 900);\n    // ?? func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"BIGINT\", -9223372036854775808, 910);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BIGINT UNSIGNED\", \"18446744073709551615\", 920);\n/*\n    ??\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT\", -9223372036854775808 - 1.1, 300);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT UNSIGNED\", 18446744073709551615 + 1.1, 320);\n    */\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT\", NULL, 310);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT UNSIGNED \", NULL, 330);\n    if (2147483647 == PHP_INT_MAX) {\n        func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT UNSIGNED\", PHP_INT_MAX, 930, '2.14748e+09');\n        func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT\", -1 * PHP_INT_MAX + 1, 940, '-2.14748e+09');\n    }\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"FLOAT\", \"-9223372036854775808\", 300, '-9.22337e+18');\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"FLOAT UNSIGNED\", \"18446744073709551615\", 320, '1.84467e+19');\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT\", -10.01, 950);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"FLOAT UNSIGNED\", 10.01, 960);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2)\", NULL, 350);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2) UNSIGNED\", NULL, 370);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2)\", -99999999.99, 340);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2) UNSIGNED\", 99999999.99, 360);\n    /*\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2)\", -99999999.99, 340);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DOUBLE(10,2) UNSIGNED\", 99999999.99, 360);\n        */\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DECIMAL(10,2)\", -99999999.99, 380);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DECIMAL(10,2)\", NULL, 390);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DECIMAL(10,2)\", 99999999.99, 400);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"d\", \"DECIMAL(10,2)\", NULL, 410);\n    // don't care about date() strict TZ warnings...\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATE\", @date('Y-m-d'), 420);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATE NOT NULL\", @date('Y-m-d'), 430);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATE\", NULL, 440);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATETIME\", @date('Y-m-d H:i:s'), 450);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATETIME NOT NULL\", @date('Y-m-d H:i:s'), 460);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"DATETIME\", NULL, 470);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TIMESTAMP\", @date('Y-m-d H:i:s'), 480);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TIME\", @date('H:i:s'), 490);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TIME NOT NULL\", @date('H:i:s'), 500);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TIME\", NULL, 510);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"YEAR\", @date('Y'), 520);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"YEAR NOT NULL\", @date('Y'), 530);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"YEAR\", NULL, 540);\n    $string255 = func_mysqli_stmt_bind_make_string(255);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"CHAR(1)\", \"a\", 550);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"CHAR(255)\", $string255, 560);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"CHAR(1) NOT NULL\", \"a\", 570);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"CHAR(1)\", NULL, 580);\n    $string65k = func_mysqli_stmt_bind_make_string(65535);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARCHAR(1)\", \"a\", 590);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARCHAR(255)\", $string255, 600);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARCHAR(65635)\", $string65k, 610);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARCHAR(1) NOT NULL\", \"a\", 620);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARCHAR(1)\", NULL, 630);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BINARY(1)\", \"a\", 640);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BINARY(1)\", chr(0), 650);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BINARY(1) NOT NULL\", \"b\", 660);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"BINARY(1)\", NULL, 670);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARBINARY(1)\", \"a\", 680);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARBINARY(1)\", chr(0), 690);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARBINARY(1) NOT NULL\", \"b\", 700);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"VARBINARY(1)\", NULL, 710);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYBLOB\", \"a\", 720);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYBLOB\", chr(0), 730);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYBLOB NOT NULL\", \"b\", 740);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYBLOB\", NULL, 750);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYTEXT\", \"a\", 760);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYTEXT NOT NULL\", \"a\", 770);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TINYTEXT\", NULL, 780);\n    // Note: you cannot insert any blob values this way. But you can check the API at least partly this way\n    // Extra BLOB tests are in mysqli_stmt_send_long()\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"BLOB\", \"\", 790);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"TEXT\", \"\", 800);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"MEDIUMBLOB\", \"\", 810);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"MEDIUMTEXT\", \"\", 820);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"LONGBLOB\", \"\", 830);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"b\", \"LONGTEXT\", \"\", 840);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"ENUM('a', 'b')\", \"a\", 850);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"ENUM('a', 'b')\", NULL, 860);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"SET('a', 'b')\", \"a\", 870);\n    func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"SET('a', 'b')\", NULL, 880);\n    if (mysqli_get_server_version($link) >= 50600)\n        func_mysqli_stmt_bind_datatype($link, $engine, \"s\", \"TIME\", \"13:27:34.123456\", 890, \"13:27:34\");\n    $stmt = mysqli_stmt_init($link);\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[2000] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = null;\n    $label = null;\n    if (true !== ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $id, $label)))\n        printf(\"[2001] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    mysqli_stmt_execute($stmt);\n    if (true !== ($tmp = mysqli_stmt_bind_param($stmt, \"is\", $id, $label)))\n        printf(\"[2002] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    mysqli_stmt_close($stmt);\n    include(\"table.inc\");\n    if (!$stmt = mysqli_stmt_init($link))\n        printf(\"[2003] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[2004] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = $label = null;\n    if (true !== ($tmp = $stmt->bind_param('is', $id, $label)))\n        printf(\"[2005] Expecting boolean/true got %s/%s, [%d] %s\\n\",\n            gettype($tmp), $tmp,\n            $stmt->errno, $stmt->error);\n    $id = 100; $label = 'z';\n    if (!$stmt->execute())\n        printf(\"[2006] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    if (!$res = mysqli_query($link, \"SELECT id, label FROM test WHERE id = 100\"))\n        printf(\"[2007] Expecting record 100/z, [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[2008] Expecting row, [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if ($row['id'] != 100  || $row['label'] != 'z') {\n        printf(\"[2009] Row seems wrong, dumping record\\n\");\n        var_dump($row);\n    }\n    mysqli_free_result($res);\n    $value_list = array(array('id' => 101, 'label' => 'a'), array('id' => 102, 'label' => 'b'));\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[2010] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n        foreach ($value_list as $k => $values) {\n        if (!mysqli_stmt_bind_param($stmt, 'is', $values['id'], $values['label'])) {\n            printf(\"[2011] bind_param() failed for id = %d, [%d] %s\\n\",\n                $values['id'], mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            continue;\n        }\n        if (!$stmt->execute())\n            printf(\"[2012] [%d] execute() failed for id = %d, [%d] %s\\n\",\n                $values['id'], mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n        if (!$res = mysqli_query($link, sprintf(\"SELECT label FROM test WHERE id = %d\", $values['id'])))\n            printf(\"[2013] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        if (!$row = mysqli_fetch_assoc($res))\n            printf(\"[2014] Cannot find row id = %d\\n\", $values['id']);\n        else if (isset($row['label']) && ($values['label'] != $row['label']))\n            printf(\"[2015] Expecting label = %s, got label = %s\\n\", $values['label'], $row['label']);\n        mysqli_free_result($res);\n    }\n    mysqli_stmt_close($stmt);\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
