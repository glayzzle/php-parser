// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_fetch_array_large.phpt
  it("mysqli_fetch_array() - large packages (to test compression)", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    function mysqli_fetch_array_large($offset, $link, $package_size) {\n        /* we are aiming for maximum compression to test MYSQLI_CLIENT_COMPRESS */\n        $random_char = str_repeat('a', 255);\n        $sql = \"INSERT INTO test(label) VALUES \";\n        while (strlen($sql) < ($package_size - 259))\n            $sql .= sprintf(\"('%s'), \", $random_char);\n        $sql = substr($sql, 0, -2);\n        $len = strlen($sql);\n        assert($len < $package_size);\n        if (!@mysqli_query($link, $sql)) {\n            if (1153 == mysqli_errno($link) || 2006 == mysqli_errno($link) || stristr(mysqli_error($link), 'max_allowed_packet'))\n                /*\n                    myslqnd - [1153] Got a packet bigger than 'max_allowed_packet' bytes\n                    libmysql -[2006] MySQL server has gone away\n                */\n                return false;\n            printf(\"[%03d + 1] len = %d, [%d] %s\\n\", $offset, $len, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        /* buffered result set - let's hope we do not run into PHP memory limit... */\n        if (!$res = mysqli_query($link, \"SELECT id, label FROM test\")) {\n            printf(\"[%03d + 2] len = %d, [%d] %s\\n\", $offset, $len, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        while ($row = mysqli_fetch_assoc($res)) {\n            if ($row['label'] != $random_char) {\n                printf(\"[%03d + 3] Wrong results - expecting '%s' got '%s', len = %d, [%d] %s\\n\",\n                    $offset, $random_char, $row['label'], $len, mysqli_errno($link), mysqli_error($link));\n                return false;\n            }\n        }\n        mysqli_free_result($res);\n        if (!$stmt = mysqli_prepare($link, \"SELECT id, label FROM test\")) {\n            printf(\"[%03d + 4] len = %d, [%d] %s\\n\", $offset, $len, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        /* unbuffered result set */\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%03d + 5] len = %d, [%d] %s, [%d] %s\\n\", $offset, $len, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt), mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        $id = $label = NULL;\n        if (!mysqli_stmt_bind_result($stmt, $id, $label)) {\n            printf(\"[%03d + 6] len = %d, [%d] %s, [%d] %s\\n\", $offset, $len, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt), mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        while (mysqli_stmt_fetch($stmt)) {\n            if ($label != $random_char) {\n                printf(\"[%03d + 7] Wrong results - expecting '%s' got '%s', len = %d, [%d] %s\\n\",\n                    $offset, $random_char, $label, $len, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n                return false;\n            }\n        }\n        mysqli_stmt_free_result($stmt);\n        mysqli_stmt_close($stmt);\n        return true;\n    }\n    function parse_memory_limit($limit) {\n        $val = trim($limit);\n        $last = strtolower($val[strlen($val)-1]);\n        switch($last) {\n                // The 'G' modifier is available since PHP 5.1.0\n                case 'g':\n                    $val *= 1024;\n                case 'm':\n                    $val *= 1024;\n                case 'k':\n                    $val *= 1024;\n                default:\n                    break;\n        }\n            return $val;\n    }\n    function test_fetch($host, $user, $passwd, $db, $port, $socket, $engine, $flags = null) {\n        $link = mysqli_init();\n        if (!my_mysqli_real_connect($link, $host, $user, $passwd, $db, $port, $socket, $flags)) {\n            printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n            return false;\n        }\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\") ||\n            !mysqli_query($link, sprintf(\"CREATE TABLE test(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, label VARCHAR(255)) ENGINE = %s\", $engine))) {\n            printf(\"[002] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        $package_size = 524288;\n        $offset = 3;\n        $limit = (ini_get('memory_limit') > 0) ? parse_memory_limit(ini_get('memory_limit')) : pow(2, 32);\n        /* try to respect php.ini but make run time a soft limit */\n        $max_runtime = (ini_get('max_execution_time') > 0) ? ini_get('max_execution_time') : 30;\n        set_time_limit(0);\n        do {\n            if ($package_size > $limit) {\n                printf(\"stop: memory limit - %s vs. %s\\n\", $package_size, $limit);\n                break;\n            }\n            $start = microtime(true);\n            if (!mysqli_fetch_array_large($offset++, $link, $package_size)) {\n                printf(\"stop: packet size - %d\\n\", $package_size);\n                break;\n            }\n            $duration = microtime(true) - $start;\n            $max_runtime -= $duration;\n            if ($max_runtime < ($duration * 3)) {\n                /* likely the next iteration will not be within max_execution_time */\n                printf(\"stop: time limit - %2.2fs\\n\", $max_runtime);\n                break;\n            }\n            $package_size += $package_size;\n        } while (true);\n        mysqli_close($link);\n        return true;\n    }\n    test_fetch($host, $user, $passwd, $db, $port, $socket, $engine, null);\n    test_fetch($host, $user, $passwd, $db, $port, $socket, $engine, MYSQLI_CLIENT_COMPRESS);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
