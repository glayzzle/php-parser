// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/str_replace_variation3.phpt
  it("Test str_replace() function", function () {
    expect(parser.parseCode("<?php\n/*\n  Description: Replace all occurrences of the search string with\n               the replacement string\n*/\necho \"\\n*** Testing Miscellaneous input data ***\\n\";\n/*  If replace has fewer values than search, then an empty\n    string is used for the rest of replacement values */\nvar_dump( str_replace(array(\"a\", \"a\", \"b\"),\n              array(\"q\", \"q\"),\n              \"aaabb\", $count\n             )\n    );\nvar_dump($count);\nvar_dump( str_replace(array(\"a\", \"a\", \"b\"),\n                      array(\"q\", \"q\"),\n                      array(\"aaa\", \"bbb\", \"ccc\"),\n                      $count\n                     )\n        );\nvar_dump($count);\necho \"\\n-- Testing objects --\\n\";\n/* we get \"Recoverable fatal error: saying Object of class could not be converted\n        to string\" by default, when an object is passed instead of string:\nThe error can be  avoided by choosing the __toString magix method as follows: */\nclass subject\n{\n  function __toString() {\n    return \"Hello, world\";\n  }\n}\n$obj_subject = new subject;\nclass search\n{\n  function __toString() {\n    return \"Hello, world\";\n  }\n}\n$obj_search = new search;\nclass replace\n{\n  function __toString() {\n    return \"Hello, world\";\n  }\n}\n$obj_replace = new replace;\nvar_dump(str_replace(\"$obj_search\", \"$obj_replace\", \"$obj_subject\", $count));\nvar_dump($count);\necho \"\\n-- Testing arrays --\\n\";\nvar_dump(str_replace(array(\"a\", \"a\", \"b\"), \"multi\", \"aaa\", $count));\nvar_dump($count);\nvar_dump(str_replace( array(\"a\", \"a\", \"b\"),\n                      array(\"q\", \"q\", \"c\"),\n                      \"aaa\", $count\n                    )\n);\nvar_dump($count);\nvar_dump(str_replace( array(\"a\", \"a\", \"b\"),\n                      array(\"q\", \"q\", \"c\"),\n                      array(\"aaa\", \"bbb\"),\n                      $count\n                    )\n);\nvar_dump($count);\ntry {\n    str_replace(\"a\", array(\"q\", \"q\", \"c\"), array(\"aaa\"), $count);\n} catch (TypeError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\nvar_dump(str_replace(\"a\", 1, array(\"aaa\", \"bbb\"), $count));\nvar_dump($count);\nvar_dump(str_replace(1, 3, array(\"aaa1\", \"2bbb\"), $count));\nvar_dump($count);\necho \"\\n-- Testing Resources --\\n\";\n$resource1 = fopen( __FILE__, \"r\" );\n$resource2 = opendir( \".\" );\ntry {\n    var_dump(str_replace(\"stream\", \"FOUND\", $resource1, $count));\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump(str_replace(\"stream\", \"FOUND\", $resource2, $count));\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n-- Testing a longer and heredoc string --\\n\";\n$string = <<<EOD\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\n@#$%^&**&^%$#@!~:())))((((&&&**%$###@@@!!!~~~~@###$%^&*\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nEOD;\nvar_dump( str_replace(\"abcdef\", \"FOUND\", $string, $count) );\nvar_dump( $count );\necho \"\\n-- Testing a heredoc null string --\\n\";\n$str = <<<EOD\nEOD;\nvar_dump( str_replace(\"\", \"FOUND\", $str, $count) );\nvar_dump( $count );\necho \"\\n-- Testing simple and complex syntax strings --\\n\";\n$str = 'world';\n/* Simple syntax */\nvar_dump( str_replace(\"world\", \"FOUND\", \"$str\") );\nvar_dump( str_replace(\"world'S\", \"FOUND\", \"$str'S\") );\nvar_dump( str_replace(\"worldS\", \"FOUND\", \"$strS\") );\n/* String with curly braces, complex syntax */\nvar_dump( str_replace(\"worldS\", \"FOUND\", \"${str}S\") );\nvar_dump( str_replace(\"worldS\", \"FOUND\", \"{$str}S\") );\nfclose($resource1);\nclosedir($resource2);\n?>")).toMatchSnapshot();
  });
});
