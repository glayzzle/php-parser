// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/strlen.phpt
  it("strlen() function", function () {
    expect(parser.parseCode("<?php\n/* returns the length of a given string */\necho \"#### Basic operations and  variations ####\\n\";\n$strings = array( \"Hello, World\",\n          'Hello, World',\n          '!!Hello, World',\n          \"??Hello, World\",\n          \"$@#%^&*!~,.:;?\",\n          \"123\",\n          123,\n          \"-1.2345\",\n          -1.2344,\n          \"\",\n          \" \",\n          \"\\0\",\n          \"\\x000\",\t\t\t\t\t// len = 2\n          \"\\xABC\",\t\t\t\t\t// len = 2\n          \"\\0000\",\t\t\t\t\t// len = 2\n          \"0\",\n          0,\n          \"\\t\", \t\t\t\t\t// len = 1\n          '\\t', \t\t\t\t\t// len = 2\n          TRUE,\n          FALSE,\n          \"Hello, World\\0\",\n          \"Hello\\0World\",\n          'Hello, World\\0',\n          \"Hello, World\\n\",\n          \"Hello, World\\r\",\n          \"Hello, World\\t\",\n          \"Hello, World\\\\\",\n          \"              \",\n          chr(128).chr(234).chr(65).chr(255).chr(256),\n          \"abcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=|?><-;:$\n                   []{}{{{}}}[[[[]][]]]***&&&^^%$###@@!!@#$%&^&**/////|\\\\\\\\\\\\\n                   abcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=|?><-;:$\n                   []{}{{{}}}[[[[]][]]]***&&&^^%$###@@!!@#$%&^&**/////|\\\\\\\\\\\\\n                   abcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+=|?><-;:$\n                   []{}{{{}}}[[[[]][]]]***&&&^^%$###@@!!@#$%&^&**/////|\\\\\\\\\\\\\n                   abcdefghijklmnopqrstuvwxyz0123456789\"\n        );\n/* loop through to find the length of each string */\nfor($i=0; $i<count($strings); $i++) {\n  echo \"String length of '$strings[$i]' is => \";\n  var_dump( strlen($strings[$i]) );\n}\necho \"\\n#### Testing miscellaneous inputs ####\\n\";\necho \"--- Testing objects ---\\n\";\n/* we get \"Recoverable fatal error: saying Object of class could not be converted\n    to string\" by default when an object is passed instead of string:\nThe error can be  avoided by choosing the __toString magix method as follows: */\nclass StringCapable {\n  function __toString() {\n    return \"Hello, world\";\n  }\n}\n$obj_string = new StringCapable;\nvar_dump(strlen(\"$obj_string\"));\necho \"\\n--- Testing arrays ---\\n\";\n$str_arr = array(\"hello\", \"?world\", \"!$%**()%**[][[[&@#~!\", array());\nvar_dump(strlen(\"$str_arr[1]\"));\nvar_dump(strlen(\"$str_arr[2]\"));\necho \"\\n--- Testing a longer and heredoc string ---\\n\";\n$string = <<<EOD\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\n@#$%^&**&^%$#@!~:())))((((&&&**%$###@@@!!!~~~~@###$%^&*\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nEOD;\nvar_dump(strlen($string));\necho \"\\n--- Testing a heredoc null string ---\\n\";\n$str = <<<EOD\nEOD;\nvar_dump(strlen($str));\necho \"\\n--- Testing simple and complex syntax strings ---\\n\";\n$str = 'world';\n/* Simple syntax */\nvar_dump(strlen(\"$str\"));\nvar_dump(strlen(\"$str'S\"));\nvar_dump(strlen(\"$strS\"));\n/* String with curly braces, complex syntax */\nvar_dump(strlen(\"${str}S\"));\nvar_dump(strlen(\"{$str}S\"));\necho \"\\n--- strlen for long float values ---\\n\";\n/* Here two different outputs, which depends on the rounding value\n   before converting to string. Here Precision = 12  */\nvar_dump(strlen(10.55555555555555555555555555));   \t\t// len = 13\nvar_dump(strlen(10.55555555595555555555555555));    \t\t// len = 12\necho \"\\n--- Nested strlen() ---\\n\";\nvar_dump(strlen(strlen(\"Hello\"))); \t\t\t\t// len=1\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
