// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_combine_variation5.phpt
  it("Test array_combine() function : usage variations - associative array with different values(Bug#43424)", function () {
    expect(parser.parseCode("<?php\n/*\n* Testing the functionality of array_combine() by passing various\n* associative arrays having different possible values to $keys argument and\n* associative arrays having different possible values to $values argument.\n*/\necho \"*** Testing array_combine() : assoc array with diff values to both \\$keys and \\$values argument ***\\n\";\n// get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// get a class\nclass classA\n{\npublic function __toString(){\nreturn \"Class A object\";\n}\n}\n// get a heredoc string\n$heredoc = <<<EOT\nHello world\nEOT;\n// different variations of associative array\n$arrays = array (\n       // empty array\n/*1*/  array(),\n       // arrays with integer values\n       array('0' => 0),\n       array(\"1\" => 1),\n       array(\"one\" => 1, 'two' => 2, \"three\" => 3, 4 => 4),\n       // arrays with float values\n/*5*/  array(\"float\" => 2.3333),\n       array(\"f1\" => 1.2, 'f2' => 3.33, 3 => 4.89999922839999, 'f4' => 33333333.333),\n       // arrays with string values\n/*7*/  array(111 => \"\\tHello\", \"red\" => \"col\\tor\", 2 => \"\\v\\fworld\", 3 =>  \"pen\\n\"),\n       array(111 => '\\tHello', \"red\" => 'col\\tor', 2 => '\\v\\fworld', 3 =>  'pen\\n'),\n       array(1 => \"hello\", \"heredoc\" => $heredoc),\n       // array with object, unset variable and resource variable\n/*10*/ array(11 => new classA(), \"unset\" => @$unset_var, \"resource\" => $fp),\n       // array with mixed values\n/*11*/ array(1 => 'hello', 2 => new classA(), 222 => \"fruit\",\n             'resource' => $fp, \"int\" => 133, \"float\" => 444.432,\n             \"unset\" => @$unset_var, \"heredoc\" => $heredoc)\n);\n// loop through each sub-array within $arrays to check the behavior of array_combine()\n$iterator = 1;\nforeach($arrays as $array) {\n  echo \"-- Iteration $iterator --\\n\";\n  var_dump( array_combine($array, $array) );\n  $iterator++;\n}\n// close the file resource used\nfclose($fp);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
