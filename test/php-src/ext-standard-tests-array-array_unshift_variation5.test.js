// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_variation5.phpt
  it("Test array_unshift() function : usage variations - assoc. array with diff values for 'array' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_unshift() by passing different\n * associative arrays having different possible values to $array argument.\n * The $var argument passed is a fixed value\n*/\necho \"*** Testing array_unshift() : associative array with different values ***\\n\";\n// get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// get a class\nclass classA\n{\n  public function __toString() {\n    return \"Class A object\";\n  }\n}\n// get a heredoc string\n$heredoc = <<<EOT\nHello world\nEOT;\n// initializing $var argument\n$var = 10;\n// different variations of associative arrays to be passed to $array argument\n$arrays = array (\n       // empty array\n/*1*/  array(),\n       // arrays with integer values\n       array('0' => 0),\n       array(\"1\" => 1),\n       array(\"one\" => 1, 'two' => 2, \"three\" => 3, 4 => 4),\n       // arrays with float values\n/*5*/  array(\"float\" => 2.3333),\n       array(\"f1\" => 1.2, 'f2' => 3.33, 3 => 4.89999922839999, 'f4' => 33333333.333333),\n       // arrays with string values\n/*7*/  array(111 => \"\\tHello\", \"red\" => \"col\\tor\", 2 => \"\\v\\fworld\", 3 =>  \"pen\\n\"),\n       array(111 => '\\tHello', \"red\" => 'col\\tor', 2 => '\\v\\fworld', 3 =>  'pen\\n'),\n       array(1 => \"hello\", \"heredoc\" => $heredoc),\n       // array with object, unset variable and resource variable\n       array(11 => new classA(), \"unset\" => @$unset_var, \"resource\" => $fp),\n       // array with mixed values\n/*11*/ array(1 => 'hello', 2 => new classA(), 222 => \"fruit\", 'resource' => $fp, \"int\" => 133, \"float\" => 444.432, \"unset\" => @$unset_var, \"heredoc\" => $heredoc)\n);\n// loop through the various elements of $arrays to test array_unshift()\n$iterator = 1;\nforeach($arrays as $array) {\n  echo \"-- Iteration $iterator --\\n\";\n  /* with default argument */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var) );\n  // dump the resulting array\n  var_dump($temp_array);\n  /* with optional arguments */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var, \"hello\", 'world') );\n  // dump the resulting array\n  var_dump($temp_array);\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
