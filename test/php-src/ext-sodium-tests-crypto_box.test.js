// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sodium/tests/crypto_box.phpt
  it("Check for libsodium box", function () {
    expect(parser.parseCode("<?php\n$keypair = sodium_crypto_box_keypair();\nvar_dump(strlen($keypair) === SODIUM_CRYPTO_BOX_KEYPAIRBYTES);\n$sk = sodium_crypto_box_secretkey($keypair);\nvar_dump(strlen($sk) === SODIUM_CRYPTO_BOX_SECRETKEYBYTES);\n$pk = sodium_crypto_box_publickey($keypair);\nvar_dump(strlen($pk) === SODIUM_CRYPTO_BOX_PUBLICKEYBYTES);\nvar_dump($pk !== $sk);\n$pk2 = sodium_crypto_box_publickey_from_secretkey($sk);\nvar_dump($pk === $pk2);\n$pk2 = sodium_crypto_scalarmult_base($sk);\nvar_dump($pk === $pk2);\n$keypair2 = sodium_crypto_box_keypair_from_secretkey_and_publickey($sk, $pk);\nvar_dump($keypair === $keypair2);\n$seed_x = str_repeat('x', SODIUM_CRYPTO_BOX_SEEDBYTES);\n$seed_y = str_repeat('y', SODIUM_CRYPTO_BOX_SEEDBYTES);\n$alice_box_kp = sodium_crypto_box_seed_keypair($seed_x);\n$bob_box_kp = sodium_crypto_box_seed_keypair($seed_y);\n$message_nonce = random_bytes(SODIUM_CRYPTO_BOX_NONCEBYTES);\n$alice_box_secretkey = sodium_crypto_box_secretkey($alice_box_kp);\n$bob_box_publickey = sodium_crypto_box_publickey($bob_box_kp);\n$alice_to_bob_kp = sodium_crypto_box_keypair_from_secretkey_and_publickey(\n    $alice_box_secretkey,\n    $bob_box_publickey\n);\n$msg = \"Here is another message, to be signed using Alice's secret key, and \" .\n  \"to be encrypted using Bob's public key. The keys will always be the same \" .\n  \"since they are derived from a fixed seeds\";\n$ciphertext = sodium_crypto_box(\n    $msg,\n    $message_nonce,\n    $alice_to_bob_kp\n);\ntry {\n  $ciphertext = sodium_crypto_box(\n      $msg,\n      $message_nonce,\n      substr($alice_to_bob_kp, 1)\n  );\n} catch (SodiumException $ex) {\n    echo $ex->getMessage(), PHP_EOL;\n}\nsodium_memzero($alice_box_kp);\nsodium_memzero($bob_box_kp);\n$alice_box_kp = sodium_crypto_box_seed_keypair($seed_x);\n$bob_box_kp = sodium_crypto_box_seed_keypair($seed_y);\n$alice_box_publickey = sodium_crypto_box_publickey($alice_box_kp);\n$bob_box_secretkey = sodium_crypto_box_secretkey($bob_box_kp);\n$bob_to_alice_kp = sodium_crypto_box_keypair_from_secretkey_and_publickey(\n    $bob_box_secretkey,\n    $alice_box_publickey\n);\n$plaintext = sodium_crypto_box_open(\n    $ciphertext,\n    $message_nonce,\n    $bob_to_alice_kp\n);\nvar_dump($msg === $plaintext);\n$alice_kp = sodium_crypto_box_keypair();\n$alice_secretkey = sodium_crypto_box_secretkey($alice_kp);\n$alice_publickey = sodium_crypto_box_publickey($alice_kp);\n$bob_kp = sodium_crypto_box_keypair();\n$bob_secretkey = sodium_crypto_box_secretkey($bob_kp);\n$bob_publickey = sodium_crypto_box_publickey($bob_kp);\n$alice_to_bob_kp = sodium_crypto_box_keypair_from_secretkey_and_publickey\n  ($alice_secretkey, $bob_publickey);\n$bob_to_alice_kp = sodium_crypto_box_keypair_from_secretkey_and_publickey\n  ($bob_secretkey, $alice_publickey);\n$alice_to_bob_message_nonce = random_bytes(SODIUM_CRYPTO_BOX_NONCEBYTES);\n$alice_to_bob_ciphertext = sodium_crypto_box('Hi, this is Alice',\n                                              $alice_to_bob_message_nonce,\n                                              $alice_to_bob_kp);\n$alice_message_decrypted_by_bob = sodium_crypto_box_open($alice_to_bob_ciphertext,\n                                                          $alice_to_bob_message_nonce,\n                                                          $bob_to_alice_kp);\n$bob_to_alice_message_nonce = random_bytes(SODIUM_CRYPTO_BOX_NONCEBYTES);\n$bob_to_alice_ciphertext = sodium_crypto_box('Hi Alice! This is Bob',\n                                              $bob_to_alice_message_nonce,\n                                              $bob_to_alice_kp);\n$bob_message_decrypted_by_alice = sodium_crypto_box_open($bob_to_alice_ciphertext,\n                                                          $bob_to_alice_message_nonce,\n                                                          $alice_to_bob_kp);\nvar_dump($alice_message_decrypted_by_bob);\nvar_dump($bob_message_decrypted_by_alice);\nif (SODIUM_LIBRARY_MAJOR_VERSION > 7 ||\n    (SODIUM_LIBRARY_MAJOR_VERSION == 7 &&\n     SODIUM_LIBRARY_MINOR_VERSION >= 5)) {\n    $anonymous_message_to_alice = sodium_crypto_box_seal('Anonymous message',\n                                                          $alice_publickey);\n    $decrypted_message = sodium_crypto_box_seal_open($anonymous_message_to_alice,\n                                                      $alice_kp);\n} else {\n    $decrypted_message = 'Anonymous message';\n}\nvar_dump($decrypted_message);\n$msg = sodium_hex2bin(\n    '7375f4094f1151640bd853cb13dbc1a0ee9e13b0287a89d34fa2f6732be9de13f88457553d'.\n    '768347116522d6d32c9cb353ef07aa7c83bd129b2bb5db35b28334c935b24f2639405a0604'\n);\n$kp = sodium_hex2bin(\n    '36a6c2b96a650d80bf7e025e0f58f3d636339575defb370801a54213bd54582d'.\n    '5aecbcf7866e7a4d58a6c1317e2b955f54ecbe2fcbbf7d262c10636ed524480c'\n);\nvar_dump(sodium_crypto_box_seal_open($msg, $kp));\n?>")).toMatchSnapshot();
  });
});
