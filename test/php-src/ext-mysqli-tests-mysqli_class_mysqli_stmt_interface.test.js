// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_class_mysqli_stmt_interface.phpt
  it("Interface of the class mysqli_stmt", function () {
    expect(parser.parseCode("<?php\n    require('connect.inc');\n    require('table.inc');\n    $link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket);\n    $stmt = new mysqli_stmt($link);\n    printf(\"Parent class:\\n\");\n    var_dump(get_parent_class($stmt));\n    printf(\"\\nMethods:\\n\");\n    $methods = get_class_methods($stmt);\n    $expected_methods = array(\n        '__construct'       => true,\n        'attr_get'          => true,\n        'attr_set'          => true,\n        'bind_param'        => true,\n        'bind_result'       => true,\n        'close'             => true,\n        'data_seek'         => true,\n        'execute'           => true,\n        'fetch'             => true,\n        'free_result'       => true,\n        'get_warnings'      => true,\n        'num_rows'          => true,\n        'prepare'           => true,\n        'reset'             => true,\n        'result_metadata'   => true,\n        'send_long_data'    => true,\n        'store_result'      => true,\n    );\n    if ($IS_MYSQLND) {\n        $expected_methods['get_result'] = true;\n        $expected_methods['more_results'] = true;\n        $expected_methods['next_result'] = true;\n    }\n    foreach ($methods as $k => $method) {\n    if (isset($expected_methods[$method])) {\n        unset($methods[$k]);\n        unset($expected_methods[$method]);\n    }\n        if ($method == 'mysqli_stmt') {\n            // get_class_method reports different constructor names\n            unset($expected_methods['__construct']);\n            unset($methods[$k]);\n        }\n    }\n    if (!empty($methods)) {\n        printf(\"More methods found than indicated. Dumping list of unexpected methods.\\n\");\n        var_dump($methods);\n    }\n    if (!empty($expected_methods)) {\n        printf(\"Some methods are missing. Dumping list of missing methods.\\n\");\n        var_dump($expected_methods);\n    }\n    if (empty($methods) && empty($expected_methods))\n        printf(\"ok\\n\");\n    printf(\"\\nClass variables:\\n\");\n    $variables = array_keys(get_class_vars(get_class($stmt)));\n    sort($variables);\n    foreach ($variables as $k => $var)\n        printf(\"%s\\n\", $var);\n    printf(\"\\nObject variables:\\n\");\n    $variables = array_keys(get_object_vars($stmt));\n    foreach ($variables as $k => $var)\n        printf(\"%s\\n\", $var);\nprintf(\"\\nMagic, magic properties:\\n\");\ntry {\n    mysqli_stmt_affected_rows($stmt);\n} catch (Error $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\ntry {\n    $stmt->affected_rows;\n} catch (Error $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\nif (!$stmt->prepare(\"INSERT INTO test(id, label) VALUES (100, 'z')\") || !$stmt->execute()) {\n    printf(\"[001] [%d] %s\\n\", $stmt->errno, $stmt->error);\n}\nassert(mysqli_stmt_affected_rows($stmt) === $stmt->affected_rows);\nprintf(\"stmt->affected_rows = '%s'\\n\", $stmt->affected_rows);\nassert(mysqli_stmt_errno($stmt) === $stmt->errno);\nprintf(\"stmt->errno = '%s'\\n\", $stmt->errno);\nassert(mysqli_stmt_error($stmt) === $stmt->error);\nprintf(\"stmt->error = '%s'\\n\", $stmt->error);\nassert(mysqli_stmt_error_list($stmt) === $stmt->error_list);\nvar_dump(\"stmt->error = \", $stmt->error_list);\nassert(mysqli_stmt_field_count($stmt) === $stmt->field_count);\nprintf(\"stmt->field_count = '%s'\\n\", $stmt->field_count);\nassert($stmt->id > 0);\nprintf(\"stmt->id = '%s'\\n\", $stmt->id);\nassert(mysqli_stmt_insert_id($stmt) === $stmt->insert_id);\nprintf(\"stmt->insert_id = '%s'\\n\", $stmt->insert_id);\nassert(mysqli_stmt_num_rows($stmt) === $stmt->num_rows);\nprintf(\"stmt->num_rows = '%s'\\n\", $stmt->num_rows);\nassert(mysqli_stmt_param_count($stmt) === $stmt->param_count);\nprintf(\"stmt->param_count = '%s'\\n\", $stmt->param_count);\nassert(mysqli_stmt_sqlstate($stmt) === $stmt->sqlstate);\nprintf(\"stmt->sqlstate = '%s'\\n\", $stmt->sqlstate);\nprintf(\"\\nAccess to undefined properties:\\n\");\nprintf(\"stmt->unknown = '%s'\\n\", @$stmt->unknown);\n@$stmt->unknown = 13;\nprintf(\"stmt->unknown = '%s'\\n\", @$stmt->unknown);\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
