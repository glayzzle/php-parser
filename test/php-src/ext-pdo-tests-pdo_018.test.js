// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo/tests/pdo_018.phpt
  it("PDO Common: serializing", function () {
    expect(parser.parseCode("<?php\nif (getenv('REDIR_TEST_DIR') === false) putenv('REDIR_TEST_DIR='.__DIR__ . '/../../pdo/tests/');\nrequire_once getenv('REDIR_TEST_DIR') . 'pdo_test.inc';\n$db = PDOTest::factory();\nclass TestBase implements Serializable\n{\n    public    $BasePub = 'Public';\n    protected $BasePro = 'Protected';\n    private   $BasePri = 'Private';\n    function serialize()\n    {\n        $serialized = array();\n        foreach($this as $prop => $val) {\n            $serialized[$prop] = $val;\n        }\n        $serialized = serialize($serialized);\n        echo __METHOD__ . \"() = '$serialized'\\n\";\n        return $serialized;\n    }\n    function unserialize($serialized)\n    {\n        echo __METHOD__ . \"($serialized)\\n\";\n        foreach(unserialize($serialized) as $prop => $val) {\n            $this->$prop = '#'.$val;\n        }\n        return true;\n    }\n}\nclass TestDerived extends TestBase\n{\n    public    $BasePub    = 'DerivedPublic';\n    protected $BasePro    = 'DerivdeProtected';\n    public    $DerivedPub = 'Public';\n    protected $DerivedPro = 'Protected';\n    private   $DerivedPri = 'Private';\n    function serialize()\n    {\n        echo __METHOD__ . \"()\\n\";\n        return TestBase::serialize();\n    }\n    function unserialize($serialized)\n    {\n        echo __METHOD__ . \"()\\n\";\n        return TestBase::unserialize($serialized);\n    }\n}\nclass TestLeaf extends TestDerived\n{\n}\n$db->exec('CREATE TABLE classtypes(id int NOT NULL PRIMARY KEY, name VARCHAR(20) NOT NULL UNIQUE)');\n$db->exec('INSERT INTO classtypes VALUES(0, \\'stdClass\\')');\n$db->exec('INSERT INTO classtypes VALUES(1, \\'TestBase\\')');\n$db->exec('INSERT INTO classtypes VALUES(2, \\'TestDerived\\')');\nswitch ($db->getAttribute(PDO::ATTR_DRIVER_NAME)) {\n  case 'dblib':\n    // environment settings can influence how the table is created if specifics are missing\n    // https://msdn.microsoft.com/en-us/library/ms174979.aspx#Nullability Rules Within a Table Definition\n    $sql = 'CREATE TABLE test(id int NOT NULL PRIMARY KEY, classtype int NULL, val VARCHAR(255) NULL)';\n    break;\n  default:\n    $sql = 'CREATE TABLE test(id int NOT NULL PRIMARY KEY, classtype int, val VARCHAR(255))';\n    break;\n}\n$db->exec($sql);\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\nvar_dump($db->query('SELECT COUNT(*) FROM classtypes')->fetchColumn());\nvar_dump($db->query('SELECT id, name FROM classtypes ORDER by id')->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_UNIQUE));\n$objs = array();\n$objs[0] = new stdClass;\n$objs[1] = new TestBase;\n$objs[2] = new TestDerived;\n$objs[3] = new TestLeaf;\n$stmt = $db->prepare('SELECT id FROM classtypes WHERE name=:cname');\n$stmt->bindParam(':cname', $cname);\n$ctypes = array();\nforeach($objs as $obj)\n{\n    $cname = get_class($obj);\n    $ctype = NULL; /* set default for non stored class name */\n    $stmt->execute();\n    $stmt->bindColumn('id', $ctype);\n    $stmt->fetch(PDO::FETCH_BOUND);\n    $ctypes[$cname] = $ctype;\n}\necho \"===TYPES===\\n\";\nvar_dump($ctypes);\nunset($stmt);\necho \"===INSERT===\\n\";\n$stmt = $db->prepare('INSERT INTO test VALUES(:id, :classtype, :val)');\n$stmt->bindParam(':id', $idx);\n$stmt->bindParam(':classtype', $ctype);\n$stmt->bindParam(':val', $val);\nforeach($objs as $idx => $obj)\n{\n    $ctype = $ctypes[get_class($obj)];\n    if (method_exists($obj, 'serialize'))\n    {\n        $val = $obj->serialize();\n    }\n    else\n    {\n        $val = '';\n    }\n    $stmt->execute();\n}\nunset($stmt);\necho \"===DATA===\\n\";\n$res = $db->query('SELECT test.val FROM test')->fetchAll(PDO::FETCH_COLUMN);\nswitch ($db->getAttribute(PDO::ATTR_DRIVER_NAME)) {\n    case 'dblib':\n        // map whitespace (from early TDS versions) to empty string so the test doesn't diff\n        if ($res[0] === ' ') {\n            $res[0] = '';\n        }\n        break;\n    case 'oci':\n        // map NULL to empty string so the test doesn't diff\n        if ($res[0] === null) {\n            $res[0] = '';\n        }\n        break;\n}\nvar_dump($res);\necho \"===FAILURE===\\n\";\ntry\n{\n    $db->query('SELECT classtypes.name AS name, test.val AS val FROM test LEFT JOIN classtypes ON test.classtype=classtypes.id')->fetchAll(PDO::FETCH_CLASS|PDO::FETCH_CLASSTYPE|PDO::FETCH_SERIALIZE, 'TestLeaf', array());\n}\ncatch (PDOException $e)\n{\n    echo 'Exception:';\n    echo $e->getMessage().\"\\n\";\n}\necho \"===COUNT===\\n\";\nvar_dump($db->query('SELECT COUNT(*) FROM test LEFT JOIN classtypes ON test.classtype=classtypes.id WHERE (classtypes.id IS NULL OR classtypes.id > 0)')->fetchColumn());\necho \"===DATABASE===\\n\";\n$stmt = $db->prepare('SELECT classtypes.name AS name, test.val AS val FROM test LEFT JOIN classtypes ON test.classtype=classtypes.id WHERE (classtypes.id IS NULL OR classtypes.id > 0)');\n$stmt->execute();\nvar_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\necho \"===FETCHCLASS===\\n\";\n$stmt->execute();\nvar_dump($stmt->fetchAll(PDO::FETCH_CLASS|PDO::FETCH_CLASSTYPE|PDO::FETCH_SERIALIZE, 'TestLeaf'));\n?>")).toMatchSnapshot();
  });
});
