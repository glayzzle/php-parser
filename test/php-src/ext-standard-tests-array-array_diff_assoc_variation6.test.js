// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_diff_assoc_variation6.phpt
  it("Test array_diff_assoc() function : usage variations - strict string comparison check", function () {
    expect(parser.parseCode("<?php\n/*\n * Test how array_diff_assoc behaves\n * 1. When comparing an array that has similar elements\n *    but has been created in a different order\n * 2. When doing a strict comparison of string representation\n */\necho \"*** Testing array_diff_assoc() : usage variations ***\\n\";\n$array = array ('zero',\n                1 => 1,\n                'two' => 2.00000000000001);\n$inputs = array (\n//default keys => string values\n/*1*/\tarray('2.00000000000001', '1', 'zero', 'a'),\n//numeric keys => string values\n/*2*/\tarray(2 => '2.00000000000001',\n              1 => '1',\n              0 => 'zero',\n              3 => 'a'),\n//string keys => string values\n/*3*/\tarray('2' => '2.00000000000001',\n              '1' => '1',\n              '0' => 'zero',\n              '3' => 'a') ,\n//default keys => numeric values\n/*4*/\tarray(2, 1, 0),\n//numeric keys => numeric values\n/*5*/\tarray(2 => 2,\n              1 => 1,\n              0 => 0),\n//string keys => numeric values\n/*6*/\tarray('two' => 2,\n              '1' => 1,\n              '0' => 0),\n//default keys => float values\n/*7*/\tarray(2.00000000000001, 1.00, 0.01E-9),\n//numeric keys => float values\n/*8*/\tarray(2 => 2.00000000000001,\n              1 =>  1.00,\n              0 => 0.01E-9),\n//string keys => float values\n/*9*/\tarray ('two' => 2.00000000000001,\n               '1' => 1.00,\n               '0' =>0.01E-9)\n);\n// loop through each element of $inputs to check the behavior of array_diff_assoc\n$iterator = 1;\nforeach($inputs as $input) {\n  echo \"\\n-- Iteration $iterator --\\n\";\n  var_dump(array_diff_assoc($array, $input));\n  var_dump(array_diff_assoc($input, $array));\n  $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
