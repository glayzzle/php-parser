// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/snmp/tests/snmp-object-properties.phpt
  it("OO API: SNMP object properties", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__.'/snmp_include.inc');\n//EXPECTF format is quickprint OFF\nsnmp_set_enum_print(false);\nsnmp_set_quick_print(false);\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\nsnmp_set_oid_output_format(SNMP_OID_OUTPUT_FULL);\necho \"Check working\\n\";\n$session = new SNMP(SNMP::VERSION_1, $hostname, $community, $timeout, $retries);\nvar_dump($session);\n$session->max_oids = 40;\n$session->enum_print = TRUE;\n$session->quick_print = TRUE;\n$session->valueretrieval = SNMP_VALUE_LIBRARY;\n$session->oid_output_format = SNMP_OID_OUTPUT_NUMERIC;\n$session->oid_increasing_check = FALSE;\nvar_dump($session);\n$session->max_oids = \"40\";\n$session->enum_print = \"1\";\n$session->quick_print = \"1\";\n$session->valueretrieval = \"1\";\n$session->oid_output_format = \"3\";\n$session->oid_increasing_check = \"45\";\nvar_dump($session);\nvar_dump(property_exists($session, \"enum_print\"));\nvar_dump(isset($session->enum_print));\nvar_dump(empty($session->enum_print));\n$param=123;\n$session->$param = \"param_value\";\nvar_dump($session);\nvar_dump($session->$param);\nvar_dump(property_exists($session, $param));\necho \"Error handling\\n\";\n$param = 'there is no such parameter';\nvar_dump($session->$param);\nvar_dump(property_exists($session, $param));\ntry {\n    $session->valueretrieval = 67;\n    var_dump($session->valueretrieval);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    $session->oid_output_format = 78;\n    var_dump($session->oid_output_format);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    $session->info = array(\"blah\" => 2);\n    var_dump($session->info);\n} catch (\\Error $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\n$session->max_oids = NULL;\nvar_dump($session->max_oids);\n?>")).toMatchSnapshot();
  });
});
