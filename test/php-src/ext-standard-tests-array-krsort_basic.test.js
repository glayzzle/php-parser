// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/krsort_basic.phpt
  it("Test krsort() function : basic functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing krsort() by providing array of integer/string values to check the basic functionality\n * with following flag values :\n *  1.flag value as default\n *  2.SORT_REGULAR - compare items normally\n *  3.SORT_NUMERIC - compare items numerically\n *  4.SORT_STRING - compare items as strings\n*/\necho \"*** Testing krsort() : basic functionality ***\\n\";\n// an array containing unsorted string values with indices\n$unsorted_strings =   array( \"lemon\" => \"l\", \"orange\" => \"o\", \"banana\" => \"b\" );\n$unsorted_strings = array(\n    \"l\" => \"lemon\", \"o\" => \"orange\",\n    \"O\" => \"Orange\", \"O1\" => \"Orange1\", \"o2\" => \"orange2\", \"O3\" => \"Orange3\", \"o20\" => \"orange20\",\n    \"b\" => \"banana\",\n);\n// an array containing unsorted numeric values with indices\n$unsorted_numerics =  array( 100 => 4, 33 => 3, 555 => 2, 22 => 1 );\necho \"\\n-- Testing krsort() by supplying string array, 'flag' value is default --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying numeric array, 'flag' value is default --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( krsort($temp_array) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying string array, 'flag' = SORT_REGULAR --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array, SORT_REGULAR) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying numeric array, 'flag' = SORT_REGULAR --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( krsort($temp_array, SORT_REGULAR) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying string array, 'flag' = SORT_STRING --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array, SORT_STRING) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying string array (case insensitive), 'flag' = SORT_STRING|SORT_FLAG_CASE --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array, SORT_STRING|SORT_FLAG_CASE) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying string array (natural), 'flag' = SORT_NATURAL --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array, SORT_NATURAL) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying string array (natural, case insensitive), 'flag' = SORT_NATURAL|SORT_FLAG_CASE --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( krsort($temp_array, SORT_NATURAL|SORT_FLAG_CASE) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing krsort() by supplying numeric array, 'flag' = SORT_NUMERIC --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( krsort($temp_array, SORT_NUMERIC) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
