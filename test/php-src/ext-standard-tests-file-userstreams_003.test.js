// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/userstreams_003.phpt
  it("User-space streams: stream_set_option()", function () {
    expect(parser.parseCode("<?php\nclass test_wrapper_base {\n    public $return_value;\n    public $expected_option;\n    public $expected_value;\n    function stream_open($path, $mode, $openedpath) {\n        return true;\n    }\n    function stream_eof() {\n        return false;\n    }\n}\nclass test_wrapper extends test_wrapper_base {\n    function stream_set_option($option, $value, $ptrparam) {\n        echo \"value:\\n\";\n        var_dump($value);\n        echo \"ptrparam:\\n\";\n        var_dump($ptrparam);\n        echo \"\\$option === $option === \" . $this->expected_option . \":\\n\";\n        var_dump($option === $this->expected_option);\n        echo \"\\$value === $value === \" . $this->expected_value. \":\\n\";\n        var_dump($value === $this->expected_value);\n        return $this->return_value;\n    }\n}\nfunction test($name, $fd, $return_value, $func, $args, $expected_option, $expected_value) {\n    echo \"\\n------ $name: -------\\n\";\n    $data = stream_get_meta_data($fd);\n    $data['wrapper_data']->return_value = $return_value;\n    $data['wrapper_data']->expected_option = $expected_option;\n    $data['wrapper_data']->expected_value = $expected_value;\n    var_dump(call_user_func_array($func, $args));\n}\nvar_dump(stream_wrapper_register('test', 'test_wrapper'));\nvar_dump(stream_wrapper_register('test2', 'test_wrapper_base'));\n$fd = fopen(\"test://foo\",\"r\");\n$fd2 = fopen(\"test2://foo\",\"r\");\ntest(\"stream_set_blocking - 1\", $fd, true, \"stream_set_blocking\", array($fd,0), STREAM_OPTION_BLOCKING, 0);\ntest(\"stream_set_blocking - 2\", $fd, false, \"stream_set_blocking\", array($fd,1), STREAM_OPTION_BLOCKING, 1);\ntest(\"stream_set_blocking - 3\", $fd, \"foo\", \"stream_set_blocking\", array($fd,0), STREAM_OPTION_BLOCKING, 0);\ntest(\"stream_set_blocking - 4\", $fd2, true, \"stream_set_blocking\", array($fd2,1), STREAM_OPTION_BLOCKING, 1);\ntest(\"stream_set_write_buffer - 1\", $fd, true, \"stream_set_write_buffer\", array($fd,0), STREAM_OPTION_WRITE_BUFFER, STREAM_BUFFER_NONE);\ntest(\"stream_set_write_buffer - 2\", $fd, true, \"stream_set_write_buffer\", array($fd,4096), STREAM_OPTION_WRITE_BUFFER, STREAM_BUFFER_FULL);\ntest(\"stream_set_write_buffer - 3\", $fd, false, \"stream_set_write_buffer\", array($fd,8192), STREAM_OPTION_WRITE_BUFFER, STREAM_BUFFER_FULL);\ntest(\"stream_set_timeout - 1\", $fd, true, \"stream_set_timeout\", array($fd,10,11), STREAM_OPTION_READ_TIMEOUT, 10);\ntest(\"stream_set_timeout - 2\", $fd, false, \"stream_set_timeout\", array($fd,11,12), STREAM_OPTION_READ_TIMEOUT, 11);\n?>")).toMatchSnapshot();
  });
});
