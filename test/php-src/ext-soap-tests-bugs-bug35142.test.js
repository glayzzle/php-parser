// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/soap/tests/bugs/bug35142.phpt
  it("Bug #35142 (SOAP Client/Server Complex Object Support)", function () {
    expect(parser.parseCode("<?php\nini_set(\"soap.wsdl_cache_enabled\",0);\n$timestamp = \"2005-11-08T11:22:07+03:00\";\n$wsdl = __DIR__.\"/bug35142.wsdl\";\nfunction PostEvents($x) {\n    var_dump($x);\n    exit();\n  return $x;\n}\nclass TestSoapClient extends SoapClient {\n  function __construct($wsdl, $options) {\n    parent::__construct($wsdl, $options);\n    $this->server = new SoapServer($wsdl, $options);\n    $this->server->addFunction('PostEvents');\n  }\n  function __doRequest($request, $location, $action, $version, $one_way = 0): ?string {\n        echo \"$request\\n\";\n    $this->server->handle($request);\n    return $response;\n  }\n}\n$soapClient = new TestSoapClient($wsdl,\n    array('trace' => 1, 'exceptions' => 0,\n        'classmap' => array('logOnEvent' => 'LogOnEvent',\n            'logOffEvent' => 'LogOffEvent',\n            'events' => 'IVREvents')));\n$logOnEvent = new LogOnEvent(34567, $timestamp);\n$logOffEvents[] = new LogOffEvent(34567, $timestamp, \"Smoked\");\n$logOffEvents[] = new LogOffEvent(34568, $timestamp, \"SmokeFree\");\n$ivrEvents = new IVREvents(\"1.0\", 101, 12345, 'IVR', $logOnEvent, $logOffEvents);\n$result = $soapClient->PostEvents($ivrEvents);\nclass LogOffEvent {\n  public $audienceMemberId;\n  public $timestamp;\n  public $smokeStatus;\n  public $callInitiator;\n  function __construct($audienceMemberId, $timestamp, $smokeStatus) {\n    $this->audienceMemberId = $audienceMemberId;\n    $this->timestamp = $timestamp;\n    $this->smokeStatus = $smokeStatus;\n    $this->callInitiator = \"IVR\";\n  }\n}\nclass LogOnEvent {\n  public $audienceMemberId;\n  public $timestamp;\n  function __construct($audienceMemberId, $timestamp) {\n    $this->audienceMemberId = $audienceMemberId;\n    $this->timestamp = $timestamp;\n  }\n}\nclass IVREvents {\n  public $version;\n  public $activityId;\n  public $messageId;\n  public $source;\n  public $logOnEvent;\n  public $logOffEvent;\n  function __construct($version, $activityId, $messageId, $source, $logOnEvent=NULL, $logOffEvent=NULL) {\n    $this->version = $version;\n    $this->activityId = $activityId;\n    $this->messageId = $messageId;\n    $this->source = $source;\n    $this->logOnEvent = $logOnEvent;\n    $this->logOffEvent = $logOffEvent;\n  }\n}\n?>")).toMatchSnapshot();
  });
});
