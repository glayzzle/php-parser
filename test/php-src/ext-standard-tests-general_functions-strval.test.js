// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/strval.phpt
  it("Test strval() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing str_val() with scalar values***\\n\";\n$heredoc_string = <<<EOD\nThis is a multiline heredoc\nstring. Numeric = 1232455.\nEOD;\n/* heredoc string with only numeric values */\n$heredoc_numeric_string = <<<EOD\n12345\n2345\nEOD;\n/* null heredoc string */\n$heredoc_empty_string = <<<EOD\nEOD;\n/* heredoc string with NULL */\n$heredoc_NULL_string = <<<EOD\nNULL\nEOD;\n// different valid  scalar values\n$scalars = array(\n  /* integers */\n  0,\n  1,\n  -1,\n  -2147483648, // max negative integer value\n  -2147483647,\n  2147483647,  // max positive integer value\n  2147483640,\n  0x123B,      // integer as hexadecimal\n  0x12ab,\n  0Xfff,\n  0XFA,\n  /* floats */\n  -0x80000000, // max negative integer as hexadecimal\n  0x7fffffff,  // max positive integer as hexadecimal\n  0x7FFFFFFF,  // max positive integer as hexadecimal\n  0123,        // integer as octal\n  01,       // should be quivalent to octal 1\n  -020000000000, // max negative integer as octal\n  017777777777,  // max positive integer as octal\n  -2147483649, // float value\n  2147483648,  // float value\n  -0x80000001, // float value, beyond max negative int\n  0x800000001, // float value, beyond max positive int\n  020000000001, // float value, beyond max positive int\n  -020000000001, // float value, beyond max negative int\n  0.0,\n  -0.1,\n  10.0000000000000000005,\n  10.5e+5,\n  1e-5,\n  .5e+7,\n  .6e-19,\n  .05E+44,\n  .0034E-30,\n  /* booleans */\n  true,\n  TRUE,\n  FALSE,\n  false,\n  /* strings */\n  \"\",\n  '',\n  \" \",\n  ' ',\n  '0',\n  \"0\",\n  \"testing\",\n  \"0x564\",\n  \"0123\",\n  \"new\\n\",\n  'new\\n',\n  \"@#$$%^&&*()\",\n  \"        \",\n  \"null\",\n  'null',\n  'true',\n  \"true\",\n  /*\"\\0123\",\n  \"\\0x12FF\",*/\n  $heredoc_string,\n  $heredoc_numeric_string,\n  $heredoc_empty_string\n);\n/* loop to check that strval() recognizes different\n   scalar values and returns the string conversion of same */\n$loop_counter = 1;\nforeach ($scalars as $scalar ) {\n   echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n   var_dump( strval($scalar) );\n}\necho \"\\n*** Testing strval() with non_scalar values ***\\n\";\n// get a resource type variable\n$fp = fopen(__FILE__, \"r\");\n$dfp = opendir( __DIR__ );\n// unset variable\n$unset_var = 10;\nunset ($unset_var);\n// non_scalar values, objects, arrays, resources and boolean\nclass foo\n{\n  function __toString() {\n    return \"Object\";\n  }\n}\n$not_scalars = array (\n  new foo, //object\n  $fp,  // resource\n  $dfp,\n  array(),  // arrays\n  array(NULL),\n  array(1,2,3,4),\n  array(\"string\"),\n  NULL,  // nulls\n  null,\n  @$unset_var,  // unset variable\n  @$undefined_var\n);\n/* loop through the $not_scalars to see working of\n   strval() on objects, arrays, boolean and others */\n$loop_counter = 1;\nforeach ($not_scalars as $value ) {\n   echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n   var_dump( strval($value) );\n}\necho \"Done\\n\";\n// close the resources used\nfclose($fp);\nclosedir($dfp);\n?>")).toMatchSnapshot();
  });
});
