// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/bug74669.phpt
  it("Bug #74669: Unserialize ArrayIterator broken", function () {
    expect(parser.parseCode("<?php\nclass Container implements Iterator\n{\n    public $container;\n    public $iterator;\n    public function __construct()\n    {\n        $this->container = new ArrayObject();\n        $this->iterator = $this->container->getIterator();\n    }\n    public function append($element)\n    {\n        $this->container->append($element);\n    }\n    public function current(): mixed\n    {\n        return $this->iterator->current();\n    }\n    public function next(): void\n    {\n        $this->iterator->next();\n    }\n    public function key(): mixed\n    {\n        return $this->iterator->key();\n    }\n    public function valid(): bool\n    {\n        return $this->iterator->valid();\n    }\n    public function rewind(): void\n    {\n        $this->iterator->rewind();\n    }\n}\nclass SelfArray extends ArrayObject\n{\n    public function __construct()\n    {\n        parent::__construct($this);\n    }\n}\n$container = new Container();\n$container->append('test1');\n$container->append('test2');\n$container->valid();\n$serialized = serialize($container);\nunset($container);\n$container = unserialize($serialized);\nforeach ($container as $key => $value) {\n    echo $key . ' => ' . $value . PHP_EOL;\n}\n$arObj = new ArrayObject(['test1', 'test2']);\n$serialized = serialize($container);\nunset($arObj);\n$arObj = unserialize($serialized);\nforeach($arObj as $key => $value) {\n    echo $key . ' => ' . $value . PHP_EOL;\n}\n$payload = 'x:i:33554432;O:8:\"stdClass\":0:{};m:a:0:{}';\n$str = 'C:11:\"ArrayObject\":' . strlen($payload) . ':{' . $payload . '}';\n$ao = unserialize($str);\nvar_dump($ao['foo']);\n$selfArray = new SelfArray();\n$selfArray['foo'] = 'bar';\nvar_dump($selfArray);\n$serialized = serialize($selfArray);\nvar_dump($serialized);\nunset($selfArray);\n$selfArray = unserialize($serialized);\nvar_dump($selfArray);\nvar_dump($selfArray['foo']);\n?>")).toMatchSnapshot();
  });
});
