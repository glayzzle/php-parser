// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gmp/tests/gmp_random_seed.phpt
  it("gmp_random_seed() basic tests", function () {
    expect(parser.parseCode("<?php\n// zero int\nvar_dump(gmp_random_seed(0));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// zero gmp\nvar_dump(gmp_random_seed(gmp_init(0)));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// negative int\nvar_dump(gmp_random_seed(-100));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// negative gmp\nvar_dump(gmp_random_seed(gmp_init(-100)));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// positive int\nvar_dump(gmp_random_seed(100));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// positive gmp\nvar_dump(gmp_random_seed(100));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n$seed = gmp_init(1);\n$seed <<= 512;\n// large negative gmp\nvar_dump(gmp_random_seed($seed * -1));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// large positive gmp\nvar_dump(gmp_random_seed($seed));\nvar_dump(gmp_strval(gmp_random_bits(10)));\nvar_dump(gmp_strval(gmp_random_bits(100)));\nvar_dump(gmp_strval(gmp_random_bits(1000)));\nvar_dump(gmp_strval(gmp_random_range(0, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 10000)));\nvar_dump(gmp_strval(gmp_random_range(-10000, 0)));\n// standard non conversion error\ntry {\n    var_dump(gmp_random_seed('not a number'));\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
