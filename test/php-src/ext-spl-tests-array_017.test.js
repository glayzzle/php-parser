// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/array_017.phpt
  it("SPL: ArrayObject::exchangeArray($this)", function () {
    expect(parser.parseCode("<?php\nclass ArrayIteratorEx extends ArrayIterator\n{\n    public    $pub2 = 1;\n    protected $pro2 = 2;\n    private   $pri2 = 3;\n    function __construct($ar, $flags = 0)\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::__construct($ar, $flags);\n        $this->imp2 = 4;\n    }\n    function dump()\n    {\n        echo __METHOD__ . \"()\\n\";\n        var_dump(array('Flags'=>$this->getFlags()\n                      ,'OVars'=>get_object_vars($this)\n                      ,'$this'=>$this));\n    }\n    function setFlags($flags): void\n    {\n        echo __METHOD__ . \"($flags)\\n\";\n        ArrayIterator::setFlags($flags);\n    }\n}\nclass ArrayObjectEx extends ArrayObject\n{\n    public    $pub1 = 1;\n    protected $pro1 = 2;\n    private   $pri1 = 3;\n    function __construct($ar = array(), $flags = 0)\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::__construct($ar, $flags);\n        $this->imp1 = 4;\n    }\n    function exchange()\n    {\n        echo __METHOD__ . \"()\\n\";\n        $this->exchangeArray($this);\n    }\n    function dump()\n    {\n        echo __METHOD__ . \"()\\n\";\n        var_dump(array('Flags'=>$this->getFlags()\n                      ,'OVars'=>get_object_vars($this)\n                      ,'$this'=>$this));\n    }\n    function show()\n    {\n        echo __METHOD__ . \"()\\n\";\n        foreach($this as $n => $v)\n        {\n            var_dump(array($n => $v));\n        }\n    }\n    function setFlags($flags): void\n    {\n        echo __METHOD__ . \"($flags)\\n\";\n        ArrayObject::setFlags($flags);\n    }\n    function getIterator(): Iterator\n    {\n        echo __METHOD__ . \"()\\n\";\n        $it = new ArrayIteratorEx($this, $this->getFlags());\n        $it->dyn2 = 5;\n        $it->dump();\n        return $it;\n    }\n}\nfunction check($obj, $flags)\n{\n    echo \"===CHECK===\\n\";\n    $obj->setFlags($flags);\n    $obj->dump();\n    $obj->show();\n    echo \"===FOREACH===\\n\";\n    $it = $obj->getIterator();\n    foreach($it as $n => $v)\n    {\n        var_dump(array($n => $v));\n    }\n    echo \"===PROPERTY===\\n\";\n    var_dump($obj->pub1);\n    var_dump(isset($obj->a));\n    $obj->setFlags($flags | 2);\n    var_dump($obj->pub1);\n    var_dump(isset($obj->a));\n    var_dump($it->pub2);\n    var_dump(isset($it->pub1));\n    $it->setFlags($flags | 2);\n    var_dump($it->pub2);\n    var_dump(isset($it->pub1));\n}\n$obj = new ArrayObjectEx(array(0=>1,'a'=>25, 'pub1'=>42), 0);\n$obj->dyn1 = 5;\ncheck($obj, 0);\ncheck($obj, 1);\necho \"#####EXCHANGE#####\\n\";\n$obj->exchange();\ncheck($obj, 0);\ncheck($obj, 1);\n?>")).toMatchSnapshot();
  });
});
