// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/rsort_object2.phpt
  it("Test rsort() function : object functionality - different visibilities", function () {
    expect(parser.parseCode("<?php\n/*\n * Test functionality of rsort() with objects where properties have different visibilities\n */\necho \"*** Testing rsort() : object functionality ***\\n\";\n// class declaration for integer objects\nclass for_integer_rsort\n{\n    public $public_class_value;\n    private $private_class_value;\n    protected $protected_class_value;\n    // initializing object member value\n    function __construct($value1, $value2,$value3){\n        $this->public_class_value = $value1;\n        $this->private_class_value = $value2;\n        $this->protected_class_value = $value3;\n    }\n}\n// class declaration for string objects\nclass for_string_rsort\n{\n    public $public_class_value;\n    private $private_class_value;\n    protected $protected_class_value;\n    // initializing object member value\n    function __construct($value1, $value2,$value3){\n        $this->public_class_value = $value1;\n        $this->private_class_value = $value2;\n        $this->protected_class_value = $value3;\n    }\n    // return string value\n    function __tostring() {\n        return (string)$this->value;\n    }\n}\n// array of integer objects\n$unsorted_int_obj = array(\n  new for_integer_rsort(11,33,30),\n  new for_integer_rsort(66,44,4),\n  new for_integer_rsort(-88,-5,5),\n  new for_integer_rsort(0.001,99.5,0.1)\n);\n// array of string objects\n$unsorted_str_obj = array (\n  new for_string_rsort(\"axx\",\"AXX\",\"ass\"),\n  new for_string_rsort(\"t\",\"eee\",\"abb\"),\n  new for_string_rsort(\"w\",\"W\", \"c\"),\n  new for_string_rsort(\"py\",\"PY\", \"pt\"),\n);\necho \"\\n-- Sort flag = default --\\n\";\n// testing rsort() function by supplying integer object array, flag value is default\n$temp_array = $unsorted_int_obj;\nvar_dump(rsort($temp_array) );\nvar_dump($temp_array);\n// testing rsort() function by supplying string object array, flag value is default\n$temp_array = $unsorted_str_obj;\nvar_dump(rsort($temp_array) );\nvar_dump($temp_array);\necho \"\\n-- Sort flag = SORT_REGULAR --\\n\";\n// testing rsort() function by supplying integer object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_int_obj;\nvar_dump(rsort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\n// testing rsort() function by supplying string object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_str_obj;\nvar_dump(rsort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
