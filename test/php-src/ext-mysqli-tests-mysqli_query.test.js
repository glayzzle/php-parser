// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_query.phpt
  it("mysqli_query()", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require('table.inc');\n    try {\n        mysqli_query($link, '');\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    if (false !== ($tmp = mysqli_query($link, 'THIS IS NOT SQL')))\n        printf(\"[004] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (false !== ($tmp = mysqli_query($link, \"SELECT 'this is sql but with backslash g'\\g\")))\n        printf(\"[005] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    if ((0 === mysqli_errno($link)) || ('' == mysqli_error($link)))\n        printf(\"[006] mysqli_errno()/mysqli_error should return some error\\n\");\n    if (!$res = mysqli_query($link, \"SELECT 'this is sql but with semicolon' AS valid ; \"))\n        printf(\"[007] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    var_dump(mysqli_fetch_assoc($res));\n    mysqli_free_result($res);\n    if (!$res = mysqli_query($link, \"SELECT 'a' AS ''\"))\n        printf(\"[007a] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    var_dump($tmp = mysqli_fetch_assoc($res));\n    var_dump($tmp[\"\"]);\n    mysqli_free_result($res);\n    if (false !== ($res = mysqli_query($link, 'SELECT \"this is sql but with semicolon\" AS valid ; SHOW VARIABLES')))\n        printf(\"[008] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (mysqli_get_server_version($link) > 50000) {\n        // let's try to play with stored procedures\n        mysqli_query($link, 'DROP PROCEDURE IF EXISTS p');\n        if (mysqli_query($link, 'CREATE PROCEDURE p(OUT ver_param VARCHAR(25)) BEGIN SELECT VERSION() INTO ver_param; END;')) {\n            $res = mysqli_query($link, 'CALL p(@version)');\n            $res = mysqli_query($link, 'SELECT @version AS p_version');\n            $tmp = mysqli_fetch_assoc($res);\n            if (!is_array($tmp) || empty($tmp) || !isset($tmp['p_version']) || ('' == $tmp['p_version'])) {\n                printf(\"[008a] Expecting array [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n                var_dump($tmp);\n            }\n            mysqli_free_result($res);\n        } else {\n            printf(\"[009] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        }\n        mysqli_query($link, 'DROP FUNCTION IF EXISTS f');\n        if (mysqli_query($link, 'CREATE FUNCTION f( ver_param VARCHAR(25)) RETURNS VARCHAR(25) DETERMINISTIC RETURN ver_param;')) {\n            $res = mysqli_query($link, 'SELECT f(VERSION()) AS f_version');\n            $tmp = mysqli_fetch_assoc($res);\n            if (!is_array($tmp) || empty($tmp) || !isset($tmp['f_version']) || ('' == $tmp['f_version'])) {\n                printf(\"[009a] Expecting array [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n                var_dump($tmp);\n            }\n            mysqli_free_result($res);\n        } else {\n            printf(\"[010] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        }\n    }\n    if (!is_object($res = mysqli_query($link, \"SELECT id FROM test ORDER BY id\", MYSQLI_USE_RESULT)))\n        printf(\"[011] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_free_result($res);\n    if (!is_object($res = mysqli_query($link, \"SELECT id FROM test ORDER BY id\", MYSQLI_STORE_RESULT)))\n        printf(\"[012] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_free_result($res);\n    try {\n        mysqli_query($link, \"SELECT id FROM test ORDER BY id\", 1234);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    mysqli_close($link);\n    try {\n        mysqli_query($link, \"SELECT id FROM test\");\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
