// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fread_variation3-win32-mb.phpt
  it("Test fread() function : usage variations - read beyond file size, read/write mode", function () {
    expect(parser.parseCode("<?php\n// include the file.inc for common functions for test\ninclude (\"file.inc\");\n/* Function : function check_read(resource $file_handle, int $read_size, int $expect_size)\n   Description : Read data from file of size $read_size and verifies that $expected_size no. of\n                 bytes are read.\n     $file_handle : File Handle\n     $read_size   : No. of bytes to be read.\n     $expect_size : Expected data length\n   Returns: returns the data read\n*/\nfunction check_read($file_handle, $read_size, $expect_size) {\n  // print file pointer position before read\n  var_dump( ftell($file_handle) );\n  var_dump( feof($file_handle) );\n  // read the data of size $read_size\n  echo \"Reading $read_size bytes from file, expecting $expect_size bytes ... \";\n  $data_from_file = fread($file_handle, $read_size);\n  // check if data read is of expected size\n  if ( strlen($data_from_file) == $expect_size)\n    echo \"OK\\n\";\n  else\n    echo \"Error reading file, total number of bytes read = \".strlen($data_from_file).\"\\n\";\n  // file pointer position after read\n  var_dump( ftell($file_handle) );\n  // check if file pointer at eof()\n  var_dump( feof($file_handle) );\n  return $data_from_file;\n}\necho \"*** Testing fread() : usage variations ***\\n\";\n$file_modes = array(\"a+\",\"a+b\",\"a+t\",\n                    \"w+\",\"w+b\",\"w+t\",\n                    \"x+\",\"x+b\",\"x+t\");\n$file_content_types = array(\"numeric\",\"text\",\"text_with_new_line\");\nforeach($file_content_types as $file_content_type) {\n  echo \"\\n-- Testing fread() with file having content of type \". $file_content_type .\" --\\n\";\n  /* open the file using $files_modes and perform fread() on it */\n  foreach($file_modes as $file_mode) {\n    if(!strstr($file_mode,\"x\")){\n       /* create files with $file_content_type */\n       create_files ( __DIR__, 1, $file_content_type, 0755, 1, \"w\", \"私はガラスを食べられますfread_variation\", 3);\n    }\n    $filename = __DIR__.\"/私はガラスを食べられますfread_variation3.tmp\"; // this is name of the file created by create_files()\n    echo \"-- File opened in mode \".$file_mode.\" --\\n\";\n    $file_handle = fopen($filename, $file_mode);\n    if (!$file_handle) {\n       echo \"Error: failed to fopen() file: $filename!\";\n       exit();\n    }\n    if(strstr($file_mode,\"w\") || strstr($file_mode,\"x\") ) {\n      $data_to_be_written=\"\";\n      fill_file($file_handle, $file_content_type, 1024);\n    }\n    rewind($file_handle);\n    // read file by giving size more than its size\n    echo \"-- Reading beyond filesize, expected : 1024 bytes --\\n\";\n    rewind($file_handle);\n    $data_from_file = check_read($file_handle, 1030, ( strstr($file_mode, \"+\") ? 1024 : 1024) );\n    if ( $data_from_file != false)\n      var_dump( md5($data_from_file) );\n    rewind($file_handle);\n    echo \"-- Reading beyond filesize when file pointer pointing to EOF, expected : 0 bytes --\\n\";\n    // try fread when file pointer at end\n    fseek($file_handle, 0, SEEK_END);\n    //reading file when file pointer at end\n    $data_from_file = check_read($file_handle, 10, 0);\n    if ( $data_from_file != false)\n      var_dump( md5($data_from_file) );\n    // now close the file\n    fclose($file_handle);\n    // delete the file created\n    delete_file($filename); // delete file\n  } // end of inner foreach loop\n}// end of outer foreach loop\necho\"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
