// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/formatter_get_set_symbol2.phpt
  it("numfmt_get/set_symbol() icu >= 4.8", function () {
    expect(parser.parseCode("<?php\n/*\n * Get/set symbol.\n */\nfunction ut_main()\n{\n    $longstr = str_repeat(\"blah\", 10);\n    $symbols = array(\n        'DECIMAL_SEPARATOR_SYMBOL' => array( NumberFormatter::DECIMAL_SEPARATOR_SYMBOL, '_._', 12345.123456, NumberFormatter::DECIMAL ),\n        'GROUPING_SEPARATOR_SYMBOL' => array( NumberFormatter::GROUPING_SEPARATOR_SYMBOL, '_,_', 12345.123456, NumberFormatter::DECIMAL ),\n        'PATTERN_SEPARATOR_SYMBOL' => array( NumberFormatter::PATTERN_SEPARATOR_SYMBOL, '_;_', 12345.123456, NumberFormatter::DECIMAL ),\n        'PERCENT_SYMBOL' => array( NumberFormatter::PERCENT_SYMBOL, '_%_', 12345.123456, NumberFormatter::PERCENT ),\n        'ZERO_DIGIT_SYMBOL' => array( NumberFormatter::ZERO_DIGIT_SYMBOL, '_ZD_', 12345.123456, NumberFormatter::DECIMAL ),\n        'DIGIT_SYMBOL' => array( NumberFormatter::DIGIT_SYMBOL, '_DS_', 12345.123456, NumberFormatter::DECIMAL ),\n        'MINUS_SIGN_SYMBOL' => array( NumberFormatter::MINUS_SIGN_SYMBOL, '_-_', -12345.123456, NumberFormatter::DECIMAL ),\n        'PLUS_SIGN_SYMBOL' => array( NumberFormatter::PLUS_SIGN_SYMBOL, '_+_', 12345.123456, NumberFormatter::SCIENTIFIC ),\n        'CURRENCY_SYMBOL' => array( NumberFormatter::CURRENCY_SYMBOL, '_$_', 12345.123456, NumberFormatter::CURRENCY ),\n        'INTL_CURRENCY_SYMBOL' => array( NumberFormatter::INTL_CURRENCY_SYMBOL, '_$_', 12345.123456, NumberFormatter::CURRENCY ),\n        'MONETARY_SEPARATOR_SYMBOL' => array( NumberFormatter::MONETARY_SEPARATOR_SYMBOL, '_MS_', 12345.123456, NumberFormatter::CURRENCY ),\n        'EXPONENTIAL_SYMBOL' => array( NumberFormatter::EXPONENTIAL_SYMBOL, '_E_', 12345.123456, NumberFormatter::SCIENTIFIC ),\n        'PERMILL_SYMBOL' => array( NumberFormatter::PERMILL_SYMBOL, '_PS_', 12345.123456, NumberFormatter::DECIMAL ),\n        'PAD_ESCAPE_SYMBOL' => array( NumberFormatter::PAD_ESCAPE_SYMBOL, '_PE_', 12345.123456, NumberFormatter::DECIMAL ),\n        'INFINITY_SYMBOL' => array( NumberFormatter::INFINITY_SYMBOL, '_IS_', 12345.123456, NumberFormatter::DECIMAL ),\n        'NAN_SYMBOL' => array( NumberFormatter::NAN_SYMBOL, '_N_', 12345.123456, NumberFormatter::DECIMAL ),\n        'SIGNIFICANT_DIGIT_SYMBOL' => array( NumberFormatter::SIGNIFICANT_DIGIT_SYMBOL, '_SD_', 12345.123456, NumberFormatter::DECIMAL ),\n        'MONETARY_GROUPING_SEPARATOR_SYMBOL' => array( NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, '_MG_', 12345.123456, NumberFormatter::CURRENCY ),\n    'MONETARY_GROUPING_SEPARATOR_SYMBOL-2' => array( NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, \"&nbsp;\", 12345.123456, NumberFormatter::CURRENCY ),\n    'MONETARY_GROUPING_SEPARATOR_SYMBOL-3' => array( NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, $longstr, 12345.123456, NumberFormatter::CURRENCY ),\n    );\n    $res_str = '';\n    foreach( $symbols as $symb_name => $data )\n    {\n        list( $symb, $new_val, $number, $attr ) = $data;\n        $fmt = ut_nfmt_create( 'en_US', $attr);\n        $res_str .= \"\\nSymbol '$symb_name'\\n\";\n        // Get original symbol value.\n        $orig_val = ut_nfmt_get_symbol( $fmt, $symb );\n        $res_str .= \"Default symbol: [$orig_val]\\n\";\n        // Set a new symbol value.\n        $res_val = ut_nfmt_set_symbol( $fmt, $symb, $new_val );\n        if( !$res_val )\n            $res_str .= \"set_symbol() error: \" . ut_nfmt_get_error_message( $fmt ) . \"\\n\";\n        // Get the symbol value back.\n        $new_val_check = ut_nfmt_get_symbol( $fmt, $symb );\n        if( !$new_val_check )\n            $res_str .= \"get_symbol() error: \" . ut_nfmt_get_error_message( $fmt ) . \"\\n\";\n        $res_str .= \"New symbol: [$new_val_check]\\n\";\n        // Check if the new value has been set.\n        if( $new_val_check !== $new_val )\n            $res_str .= \"ERROR: New $symb_name symbol value has not been set correctly.\\n\";\n        // Format the number using the new value.\n        $s = ut_nfmt_format( $fmt, $number );\n        $res_str .= \"A number formatted with the new symbol: $s\\n\";\n        // Restore attribute's symbol.\n        ut_nfmt_set_symbol( $fmt, $symb, $orig_val );\n    }\n    $badvals = array(2147483648, -2147483648, -1, 4294901761);\n    foreach($badvals as $badval) {\n        if(ut_nfmt_get_symbol( $fmt, 2147483648 ))  {\n        $res_str .= \"Bad value $badval should return false!\\n\";\n        }\n    }\n    return $res_str;\n}\ninclude_once( 'ut_common.inc' );\nut_run();\n?>")).toMatchSnapshot();
  });
});
