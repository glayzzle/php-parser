// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_ereg_variation4.phpt
  it("Test mb_ereg() function : usage variations - pass different character classes as pattern for multibyte string", function () {
    expect(parser.parseCode("<?php\n/*\n * Test how character classes match a multibyte string\n */\necho \"*** Testing mb_ereg() : usage variations ***\\n\";\nmb_regex_encoding('utf-8');\n//contains japanese characters, ASCII digits and different, UTF-8 encoded digits\n$string_mb = base64_decode('5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII=');\n$character_classes = array ('[[:alnum:]]+', /*1*/\n                            '[[:alpha:]]+',\n                            '[[:ascii:]]+',\n                            '[[:blank:]]+',\n                            '[[:cntrl:]]+',/*5*/\n                            '[[:digit:]]+',\n                            '[[:graph:]]+',\n                            '[[:lower:]]+',\n                            '[[:print:]]+',\n                            '[[:punct:]]+', /*10*/\n                            '[[:space:]]+',\n                            '[[:upper:]]+',\n                            '[[:xdigit:]]+'); /*13*/\n$iterator = 1;\nforeach ($character_classes as $pattern) {\n    if (is_array(@$regs)) {\n        $regs = null;\n    }\n    echo \"\\n-- Iteration $iterator --\\n\";\n    var_dump(mb_ereg($pattern, $string_mb, $regs));\n    if ($regs) {\n        base64_encode_var_dump($regs);\n    }\n    $iterator++;\n}\n/**\n * replicate a var dump of an array but outputted string values are base64 encoded\n *\n * @param array $regs\n */\nfunction base64_encode_var_dump($regs) {\n    if ($regs) {\n        echo \"array(\" . count($regs) . \") {\\n\";\n        foreach ($regs as $key => $value) {\n            echo \"  [$key]=>\\n  \";\n            if (is_string($value)) {\n                var_dump(base64_encode($value));\n            } else {\n                var_dump($value);\n            }\n        }\n        echo \"}\\n\";\n    } else {\n        echo \"NULL\\n\";\n    }\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
