// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/tokenizer/tests/001.phpt
  it("token_name()", function () {
    expect(parser.parseCode("<?php\necho token_name(T_INCLUDE), \"\\n\";\necho token_name(T_INCLUDE_ONCE), \"\\n\";\necho token_name(T_EVAL), \"\\n\";\necho token_name(T_REQUIRE), \"\\n\";\necho token_name(T_REQUIRE_ONCE), \"\\n\";\necho token_name(T_LOGICAL_OR), \"\\n\";\necho token_name(T_LOGICAL_XOR), \"\\n\";\necho token_name(T_LOGICAL_AND), \"\\n\";\necho token_name(T_PRINT), \"\\n\";\necho token_name(T_PLUS_EQUAL), \"\\n\";\necho token_name(T_MINUS_EQUAL), \"\\n\";\necho token_name(T_MUL_EQUAL), \"\\n\";\necho token_name(T_DIV_EQUAL), \"\\n\";\necho token_name(T_CONCAT_EQUAL), \"\\n\";\necho token_name(T_MOD_EQUAL), \"\\n\";\necho token_name(T_AND_EQUAL), \"\\n\";\necho token_name(T_OR_EQUAL), \"\\n\";\necho token_name(T_XOR_EQUAL), \"\\n\";\necho token_name(T_SL_EQUAL), \"\\n\";\necho token_name(T_SR_EQUAL), \"\\n\";\necho token_name(T_BOOLEAN_OR), \"\\n\";\necho token_name(T_BOOLEAN_AND), \"\\n\";\necho token_name(T_IS_EQUAL), \"\\n\";\necho token_name(T_IS_NOT_EQUAL), \"\\n\";\necho token_name(T_IS_IDENTICAL), \"\\n\";\necho token_name(T_IS_NOT_IDENTICAL), \"\\n\";\necho token_name(T_IS_SMALLER_OR_EQUAL), \"\\n\";\necho token_name(T_IS_GREATER_OR_EQUAL), \"\\n\";\necho token_name(T_SL), \"\\n\";\necho token_name(T_SR), \"\\n\";\necho token_name(T_INC), \"\\n\";\necho token_name(T_DEC), \"\\n\";\necho token_name(T_INT_CAST), \"\\n\";\necho token_name(T_DOUBLE_CAST), \"\\n\";\necho token_name(T_STRING_CAST), \"\\n\";\necho token_name(T_ARRAY_CAST), \"\\n\";\necho token_name(T_OBJECT_CAST), \"\\n\";\necho token_name(T_BOOL_CAST), \"\\n\";\necho token_name(T_UNSET_CAST), \"\\n\";\necho token_name(T_NEW), \"\\n\";\necho token_name(T_EXIT), \"\\n\";\necho token_name(T_IF), \"\\n\";\necho token_name(T_ELSEIF), \"\\n\";\necho token_name(T_ELSE), \"\\n\";\necho token_name(T_ENDIF), \"\\n\";\necho token_name(T_LNUMBER), \"\\n\";\necho token_name(T_DNUMBER), \"\\n\";\necho token_name(T_STRING), \"\\n\";\necho token_name(T_STRING_VARNAME), \"\\n\";\necho token_name(T_VARIABLE), \"\\n\";\necho token_name(T_NUM_STRING), \"\\n\";\necho token_name(T_INLINE_HTML), \"\\n\";\necho token_name(T_ENCAPSED_AND_WHITESPACE), \"\\n\";\necho token_name(T_CONSTANT_ENCAPSED_STRING), \"\\n\";\necho token_name(T_ECHO), \"\\n\";\necho token_name(T_DO), \"\\n\";\necho token_name(T_WHILE), \"\\n\";\necho token_name(T_ENDWHILE), \"\\n\";\necho token_name(T_FOR), \"\\n\";\necho token_name(T_ENDFOR), \"\\n\";\necho token_name(T_FOREACH), \"\\n\";\necho token_name(T_ENDFOREACH), \"\\n\";\necho token_name(T_DECLARE), \"\\n\";\necho token_name(T_ENDDECLARE), \"\\n\";\necho token_name(T_AS), \"\\n\";\necho token_name(T_SWITCH), \"\\n\";\necho token_name(T_ENDSWITCH), \"\\n\";\necho token_name(T_CASE), \"\\n\";\necho token_name(T_DEFAULT), \"\\n\";\necho token_name(T_BREAK), \"\\n\";\necho token_name(T_CONTINUE), \"\\n\";\necho token_name(T_FUNCTION), \"\\n\";\necho token_name(T_CONST), \"\\n\";\necho token_name(T_RETURN), \"\\n\";\necho token_name(T_USE), \"\\n\";\necho token_name(T_GLOBAL), \"\\n\";\necho token_name(T_STATIC), \"\\n\";\necho token_name(T_VAR), \"\\n\";\necho token_name(T_UNSET), \"\\n\";\necho token_name(T_ISSET), \"\\n\";\necho token_name(T_EMPTY), \"\\n\";\necho token_name(T_CLASS), \"\\n\";\necho token_name(T_EXTENDS), \"\\n\";\necho token_name(T_INTERFACE), \"\\n\";\necho token_name(T_IMPLEMENTS), \"\\n\";\necho token_name(T_OBJECT_OPERATOR), \"\\n\";\necho token_name(T_DOUBLE_ARROW), \"\\n\";\necho token_name(T_LIST), \"\\n\";\necho token_name(T_ARRAY), \"\\n\";\necho token_name(T_CLASS_C), \"\\n\";\necho token_name(T_FUNC_C), \"\\n\";\necho token_name(T_METHOD_C), \"\\n\";\necho token_name(T_LINE), \"\\n\";\necho token_name(T_FILE), \"\\n\";\necho token_name(T_COMMENT), \"\\n\";\necho token_name(T_DOC_COMMENT), \"\\n\";\necho token_name(T_OPEN_TAG), \"\\n\";\necho token_name(T_OPEN_TAG_WITH_ECHO), \"\\n\";\necho token_name(T_CLOSE_TAG), \"\\n\";\necho token_name(T_WHITESPACE), \"\\n\";\necho token_name(T_START_HEREDOC), \"\\n\";\necho token_name(T_END_HEREDOC), \"\\n\";\necho token_name(T_DOLLAR_OPEN_CURLY_BRACES), \"\\n\";\necho token_name(T_CURLY_OPEN), \"\\n\";\necho token_name(T_PAAMAYIM_NEKUDOTAYIM), \"\\n\";\necho token_name(T_PAAMAYIM_NEKUDOTAYIM), \"\\n\";\necho token_name(T_ABSTRACT), \"\\n\";\necho token_name(T_CATCH), \"\\n\";\necho token_name(T_FINAL), \"\\n\";\necho token_name(T_INSTANCEOF), \"\\n\";\necho token_name(T_PRIVATE), \"\\n\";\necho token_name(T_PROTECTED), \"\\n\";\necho token_name(T_PUBLIC), \"\\n\";\necho token_name(T_THROW), \"\\n\";\necho token_name(T_TRY), \"\\n\";\necho token_name(T_CLONE), \"\\n\";\necho token_name(T_HALT_COMPILER), \"\\n\";\necho token_name(-1), \"\\n\";\necho token_name(0x8000000F), \"\\n\";\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
