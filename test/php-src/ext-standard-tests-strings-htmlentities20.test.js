// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/htmlentities20.phpt
  it("htmlentities() / htmlspecialchars() ENT_DISALLOWED", function () {
    expect(parser.parseCode("<?php\nfunction codepoint_to_utf8($k) {\n    if ($k < 0x80) {\n        $retval = pack('C', $k);\n    } else if ($k < 0x800) {\n        $retval = pack('C2',\n            0xc0 | ($k >> 6),\n            0x80 | ($k & 0x3f));\n    } else if ($k < 0x10000) {\n        $retval = pack('C3',\n            0xe0 | ($k >> 12),\n            0x80 | (($k >> 6) & 0x3f),\n            0x80 | ($k & 0x3f));\n    } else {\n        $retval = pack('C4',\n            0xf0 | ($k >> 18),\n            0x80 | (($k >> 12) & 0x3f),\n            0x80 | (($k >> 6) & 0x3f),\n            0x80 | ($k & 0x3f));\n    }\n    return $retval;\n}\n$tests = array(\n    0x00, //C0\n    0x01,\n    0x09,\n    0x0A,\n    0x0B,\n    0x0C,\n    0x0D,\n    0x0E,\n    0x1F,\n    0x20, //allowed always\n    0x7F, //DEL\n    0x80, //C1\n    0x9F,\n    0xA0, //allowed always\n    0xD7FF, //surrogates\n    0xD800,\n    0xDFFF,\n    0xE000, //allowed always\n    0xFFFE, //nonchar\n    0xFFFF,\n    0xFDCF, //allowed always\n    0xFDD0, //nonchar\n    0xFDEF,\n    0xFDF0, //allowed always\n    0x2FFFE, //nonchar\n    0x2FFFF,\n);\n$tests2 = array_map('codepoint_to_utf8', $tests);\n$subchr = codepoint_to_utf8(0xFFFD);\nfunction test($flag) {\n    global $tests, $tests2;\n    $i = -1;\n    foreach ($tests2 as $test) {\n        $i++;\n        $a = htmlentities($test, $flag | ENT_DISALLOWED, \"UTF-8\");\n        $b = htmlspecialchars($test, $flag | ENT_DISALLOWED, \"UTF-8\");\n        if ($a == \"\" && $b == \"\") { echo sprintf(\"%05X\", $tests[$i]), \": INVALID SEQUENCE\\n\"; continue; }\n        echo sprintf(\"%05X\", $tests[$i]), \": \", bin2hex($a), \" \", bin2hex($b), \"\\n\";\n    }\n}\necho \"*** Testing HTML 4.01 ***\\n\";\ntest(ENT_HTML401);\necho \"\\n*** Testing XHTML 1.0 ***\\n\";\ntest(ENT_XHTML);\necho \"\\n*** Testing HTML 5 ***\\n\";\ntest(ENT_HTML5);\necho \"\\n*** Testing XML 1.0 ***\\n\";\ntest(ENT_XML1);\n?>")).toMatchSnapshot();
  });
});
