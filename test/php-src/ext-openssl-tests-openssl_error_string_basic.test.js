// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/openssl_error_string_basic.phpt
  it("openssl_error_string() tests (OpenSSL < 3.0)", function () {
    expect(parser.parseCode("<?php\n// helper function to check openssl errors\nfunction expect_openssl_errors($name, $expected_error_codes) {\n    $expected_errors = array_fill_keys($expected_error_codes, false);\n    $all_errors = array();\n    while (($error_string = openssl_error_string()) !== false) {\n    if (preg_match(\",.+:([0-9A-F]+):.+,\", $error_string, $m) > 0) {\n            $error_code = $m[1];\n            if (isset($expected_errors[$error_code])) {\n                $expected_errors[$error_code] = true;\n            }\n        $all_errors[$error_code] = $error_string;\n        } else {\n        $all_errors[] = $error_string;\n    }\n    }\n    $fail = false;\n    foreach ($expected_errors as $error_code => $error_code_found) {\n        if (!$error_code_found) {\n            $fail = true;\n            echo \"$name: no error code $error_code\\n\";\n        }\n    }\n    if (!$fail) {\n        echo \"$name: ok\\n\";\n    } else {\n    echo \"$name: uncaught errors\\n\";\n    foreach ($all_errors as $code => $str) {\n        if (!isset($expected_errors[$code]) || !$expected_errors[$code]) {\n            echo \"\\t\", $code, \": \", $str, \"\\n\";\n        }\n    }\n    }\n}\n// helper for debugging errors\nfunction dump_openssl_errors($name) {\n    echo \"\\n$name\\n\";\n    while (($error_string = openssl_error_string()) !== false) {\n        var_dump($error_string);\n    }\n}\n// common output file\n$output_file =  __DIR__ . \"/openssl_error_string_basic_output.tmp\";\n// invalid file for read is something that does not exist in current directory\n$invalid_file_for_read = __DIR__ . \"/invalid_file_for_read_operation.txt\";\n// invalid file for is the test dir as writing file to existing dir should always fail\n$invalid_file_for_write = __DIR__;\n// crt file\n$crt_file = \"file://\" . __DIR__ . \"/cert.crt\";\n// csr file\n$csr_file = \"file://\" . __DIR__ . \"/cert.csr\";\n// public key file\n$public_key_file = \"file://\" .__DIR__ . \"/public.key\";\n// private key file\n$private_key_file = \"file://\" .__DIR__ . \"/private_rsa_1024.key\";\n// private key file with password (password is 'php')\n$private_key_file_with_pass = \"file://\" .__DIR__ . \"/private_rsa_2048_pass_php.key\";\n// ENCRYPTION\n$data = \"test\";\n$method = \"AES-128-ECB\";\n$enc_key = str_repeat('x', 40);\n// error because password is longer then key length and\n// EVP_CIPHER_CTX_set_key_length fails for AES\nopenssl_encrypt($data, $method, $enc_key);\n$enc_error = openssl_error_string();\nvar_dump($enc_error);\n// make sure that error is cleared now\nvar_dump(openssl_error_string());\n// internally OpenSSL ERR won't save more than 15 (16 - 1) errors so lets test it\nfor ($i = 0; $i < 20; $i++) {\n    openssl_encrypt($data, $method, $enc_key);\n}\n$error_queue_size = 0;\nwhile (($enc_error_new = openssl_error_string()) !== false) {\n    if ($enc_error_new !== $enc_error) {\n        echo \"The new encoding error doesn't match the expected one\\n\";\n    }\n    ++$error_queue_size;\n}\nvar_dump($error_queue_size);\necho \"\\n\";\n$is_111 = OPENSSL_VERSION_NUMBER >= 0x10101000;\n$err_pem_no_start_line = $is_111 ? '0909006C': '0906D06C';\n// PKEY\necho \"PKEY errors\\n\";\n// file for pkey (file:///) fails when opennig (BIO_new_file)\n@openssl_pkey_export_to_file(\"file://\" . $invalid_file_for_read, $output_file);\nexpect_openssl_errors('openssl_pkey_export_to_file opening', ['02001002', '2006D080']);\n// file or private pkey is not correct PEM - failing PEM_read_bio_PrivateKey\n@openssl_pkey_export_to_file($csr_file, $output_file);\nexpect_openssl_errors('openssl_pkey_export_to_file pem', [$err_pem_no_start_line]);\n// file to export cannot be written\n@openssl_pkey_export_to_file($private_key_file, $invalid_file_for_write);\nexpect_openssl_errors('openssl_pkey_export_to_file write', ['2006D002']);\n// successful export\n@openssl_pkey_export($private_key_file_with_pass, $out, 'wrong pwd');\nexpect_openssl_errors('openssl_pkey_export', ['06065064', '0906A065']);\n// invalid x509 for getting public key\n@openssl_pkey_get_public($private_key_file);\nexpect_openssl_errors('openssl_pkey_get_public', [$err_pem_no_start_line]);\n// private encrypt with unknown padding\n@openssl_private_encrypt(\"data\", $crypted, $private_key_file, 1000);\nexpect_openssl_errors('openssl_private_encrypt', ['0408F090']);\n// private decrypt with failed padding check\n@openssl_private_decrypt(\"data\", $crypted, $private_key_file);\nexpect_openssl_errors('openssl_private_decrypt', ['04065072']);\n// public encrypt and decrypt with failed padding check and padding\n@openssl_public_encrypt(\"data\", $crypted, $public_key_file, 1000);\n@openssl_public_decrypt(\"data\", $crypted, $public_key_file);\nexpect_openssl_errors('openssl_private_(en|de)crypt padding', [$err_pem_no_start_line, '0408F090', '04067072']);\n// X509\necho \"X509 errors\\n\";\n// file for x509 (file:///) fails when opennig (BIO_new_file)\n@openssl_x509_export_to_file(\"file://\" . $invalid_file_for_read, $output_file);\nexpect_openssl_errors('openssl_x509_export_to_file open', ['02001002']);\n// file or str cert is not correct PEM - failing PEM_read_bio_X509 or PEM_ASN1_read_bio\n@openssl_x509_export_to_file($csr_file, $output_file);\nexpect_openssl_errors('openssl_x509_export_to_file pem', [$err_pem_no_start_line]);\n// file to export cannot be written\n@openssl_x509_export_to_file($crt_file, $invalid_file_for_write);\nexpect_openssl_errors('openssl_x509_export_to_file write', ['2006D002']);\n// checking purpose fails because there is no such purpose 1000\n@openssl_x509_checkpurpose($crt_file, 1000);\nexpect_openssl_errors('openssl_x509_checkpurpose purpose', ['0B086079']);\n// CSR\necho \"CSR errors\\n\";\n// file for csr (file:///) fails when opennig (BIO_new_file)\n@openssl_csr_get_subject(\"file://\" . $invalid_file_for_read);\nexpect_openssl_errors('openssl_csr_get_subject open', ['02001002', '2006D080']);\n// file or str csr is not correct PEM - failing PEM_read_bio_X509_REQ\n@openssl_csr_get_subject($crt_file);\nexpect_openssl_errors('openssl_csr_get_subjec pem', [$err_pem_no_start_line]);\n// other possible causes that are difficult to catch:\n// - ASN1_STRING_to_UTF8 fails in add_assoc_name_entry\n// - invalid php_x509_request field (NULL) would cause error with CONF_get_string\n?>")).toMatchSnapshot();
  });
});
