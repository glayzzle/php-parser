// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/substr.phpt
  it("Testing substr() function", function () {
    expect(parser.parseCode("<?php\n$strings_array = array( \"\", 12345, \"abcdef\", \"123abc\", \"_123abc\");\n$counter = 1;\nforeach ($strings_array as $str) {\n  /* variations with two arguments */\n  /* start values >, < and = 0    */\n  echo (\"\\n--- Iteration \".$counter.\" ---\\n\");\n  echo (\"\\n-- Variations for two arguments --\\n\");\n  var_dump ( substr($str, 1) );\n  var_dump ( substr($str, 0) );\n  var_dump ( substr($str, -2) );\n  /* variations with three arguments */\n  /* start value variations with length values  */\n  echo (\"\\n-- Variations for three arguments --\\n\");\n  var_dump ( substr($str, 1, 3) );\n  var_dump ( substr($str, 1, 0) );\n  var_dump ( substr($str, 1, -3) );\n  var_dump ( substr($str, 0, 3) );\n  var_dump ( substr($str, 0, 0) );\n  var_dump ( substr($str, 0, -3) );\n  var_dump ( substr($str, -2, 3) );\n  var_dump ( substr($str, -2, 0 ) );\n  var_dump ( substr($str, -2, -3) );\n  $counter++;\n}\n/* variation of start and length to point to same element */\necho (\"\\n*** Testing for variations of start and length to point to same element ***\\n\");\nvar_dump (substr(\"abcde\" , 2, -2) );\nvar_dump (substr(\"abcde\" , -3, -2) );\n/* Testing to return empty string when start denotes the position beyond the truncation (set by negative length) */\necho (\"\\n*** Testing for start > truncation  ***\\n\");\nvar_dump (substr(\"abcdef\" , 4, -4) );\n/* String with null character */\necho (\"\\n*** Testing for string with null characters ***\\n\");\nvar_dump (substr(\"abc\\x0xy\\x0z\" ,2) );\n/* String with international characters */\necho (\"\\n*** Testing for string with international characters ***\\n\");\nvar_dump (substr('\\xIñtërnâtiônàlizætiøn',3) );\n/* start <0 && -start > length */\necho \"\\n*** Start before the first char ***\\n\";\nvar_dump (substr(\"abcd\" , -8) );\n/* Omitting length and passing a NULL length */\necho \"\\n*** Omitting length or using NULL length ***\\n\";\nvar_dump (substr(\"abcdef\" , 2) );\nvar_dump (substr(\"abcdef\" , 2, NULL) );\necho\"\\nDone\";\n?>")).toMatchSnapshot();
  });
});
