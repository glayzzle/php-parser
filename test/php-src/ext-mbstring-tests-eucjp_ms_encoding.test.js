// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/eucjp_ms_encoding.phpt
  it("Exhaustive test of EUC-JP-MS (AKA EUC-JP-WIN) text encoding", function () {
    expect(parser.parseCode("<?php\nsrand(555); /* Make results consistent */\ninclude('encoding_tests.inc');\nmb_substitute_character(0x25); // '%'\nreadConversionTable(__DIR__ . '/data/EUC-JP-MS.txt', $toUnicode, $fromUnicode);\nreadConversionTable(__DIR__ . '/data/EUC-JP-MS.IRREVERSIBLE.txt', $toUnicodeIrreversible, $_);\nforeach ($toUnicodeIrreversible as $char => $codepoint) {\n  if (!isset($fromUnicode[$codepoint]))\n    $fromUnicode[$codepoint] = $char;\n}\n// The conversion table has several cases where more than one EUC-JP-WIN code maps to the\n// same Unicode codepoint. Make sure we use the intended reverse mapping for tests:\n$fromUnicode[\"\\x21\\x21\"] = \"\\xAD\\xE4\";\n$fromUnicode[\"\\x21\\x61\"] = \"\\xAD\\xB6\";\n$fromUnicode[\"\\x21\\x62\"] = \"\\xAD\\xB7\";\n$fromUnicode[\"\\x21\\x63\"] = \"\\xAD\\xB8\";\n$fromUnicode[\"\\x21\\x65\"] = \"\\xAD\\xBA\";\n$fromUnicode[\"\\x21\\x68\"] = \"\\xAD\\xBD\";\n$fromUnicode[\"\\x21\\x69\"] = \"\\xAD\\xBE\";\n$fromUnicode[\"\\x22\\x1A\"] = \"\\xA2\\xE5\";\n$fromUnicode[\"\\x22\\x20\"] = \"\\xA2\\xDC\";\n$fromUnicode[\"\\x22\\x29\"] = \"\\xA2\\xC1\";\n$fromUnicode[\"\\x22\\x2A\"] = \"\\xA2\\xC0\";\n$fromUnicode[\"\\x22\\x2B\"] = \"\\xA2\\xE9\";\n$fromUnicode[\"\\x22\\x35\"] = \"\\xA2\\xE8\";\n$fromUnicode[\"\\x22\\x52\"] = \"\\xA2\\xE2\";\n$fromUnicode[\"\\x22\\x61\"] = \"\\xA2\\xE1\";\n$fromUnicode[\"\\x22\\xA5\"] = \"\\xA2\\xDD\";\n$fromUnicode[\"\\x32\\x31\"] = \"\\xAD\\xEA\";\n$fromUnicode[\"\\xFF\\x5E\"] = \"\\xA1\\xC1\";\nfindInvalidChars($toUnicode, $invalid, $truncated, array_fill_keys(range(0xA1,0xFE), 2) + [0x8F => 3]);\ntestAllValidChars($toUnicode, 'eucJP-win', 'UTF-16BE', false);\ntestAllInvalidChars($invalid, $toUnicode, 'eucJP-win', 'UTF-16BE', \"\\x00%\");\ntestTruncatedChars($truncated, 'eucJP-win', 'UTF-16BE', \"\\x00%\");\necho \"Tested eucJP-win -> UTF-16BE\\n\";\nfindInvalidChars($fromUnicode, $invalid, $unused, array_fill_keys(range(0,0xFF), 2));\nconvertAllInvalidChars($invalid, $fromUnicode, 'UTF-16BE', 'eucJP-win', '%');\necho \"Tested UTF-16BE -> eucJP-win\\n\";\n// Test \"long\" illegal character markers\nmb_substitute_character(\"long\");\nconvertInvalidString(\"\\x80\", \"%\", \"eucJP-win\", \"UTF-8\");\nconvertInvalidString(\"\\xFE\\xFF\", \"%\", \"eucJP-win\", \"UTF-8\");\n?>")).toMatchSnapshot();
  });
});
