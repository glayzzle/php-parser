// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/class_object/is_a.phpt
  it("is_a and is_subclass_of behaviour (with and without autoload)", function () {
    expect(parser.parseCode("<?php\ninterface if_a {\n    function f_a();\n}\ninterface if_b extends if_a {\n    function f_b();\n}\nclass base {\n    function _is_a($sub) {\n        echo \"\\n>>> With Defined class\\n\";\n        echo str_pad('is_a( OBJECT:'.get_class($this).', '.$sub.') = ', 60) . (is_a($this, $sub) ? 'yes' : 'no').\"\\n\";\n        echo str_pad('is_a( STRING:'.get_class($this).', '.$sub.') = ', 60). (is_a(get_class($this), $sub) ? 'yes' : 'no').\"\\n\";\n        echo str_pad('is_a( STRING:'.get_class($this).', '.$sub.', true) = ', 60). (is_a(get_class($this), $sub, true) ? 'yes' : 'no').\"\\n\";\n        echo str_pad('is_subclass_of( OBJECT:'.get_class($this).', '.$sub.') = ', 60).  (is_subclass_of($this, $sub) ? 'yes' : 'no').\"\\n\";\n        echo str_pad('is_subclass_of( STRING:'.get_class($this).', '.$sub.') = ', 60). (is_subclass_of(get_class($this), $sub) ? 'yes' : 'no').\"\\n\";\n        echo str_pad('is_subclass_of( STRING:'.get_class($this).', '.$sub.',false) = ', 60). (is_subclass_of(get_class($this), $sub , false) ? 'yes' : 'no').\"\\n\";\n        // with autoload options..\n        echo \">>> With Undefined\\n\";\n        echo  str_pad('is_a( STRING:undefB, '.$sub.',true) = ', 60). (is_a('undefB', $sub, true) ? 'yes' : 'no').\"\\n\";\n        echo  str_pad('is_a( STRING:undefB, '.$sub.') = ', 60). (is_a('undefB', $sub) ? 'yes' : 'no').\"\\n\";\n        echo  str_pad('is_subclass_of( STRING:undefB, '.$sub.',false) = ', 60). (is_subclass_of('undefB', $sub, false) ? 'yes' : 'no').\"\\n\";\n        echo  str_pad('is_subclass_of( STRING:undefB, '.$sub.') = ', 60). (is_subclass_of('undefB', $sub) ? 'yes' : 'no').\"\\n\";\n    }\n    function test() {\n        echo $this->_is_a('base');\n        echo $this->_is_a('derived_a');\n        echo $this->_is_a('if_a');\n        echo $this->_is_a('undefA');\n        echo \"\\n\";\n    }\n}\nclass derived_a extends base implements if_a {\n    function f_a() {}\n}\nclass derived_b extends base implements if_a, if_b {\n    function f_a() {}\n    function f_b() {}\n}\nclass derived_c extends derived_a implements if_b {\n    function f_b() {}\n}\nclass derived_d extends derived_c {\n}\n$t = new base();\n$t->test();\n$t = new derived_a();\n$t->test();\nspl_autoload_register(function ($name) {\n    echo \">>>> In autoload: \";\n    var_dump($name);\n});\necho \"NOW WITH AUTOLOAD\\n\\n\";\n$t = new base();\n$t->test();\n$t = new derived_a();\n$t->test();\n$t = new derived_b();\n$t->test();\n?>")).toMatchSnapshot();
  });
});
