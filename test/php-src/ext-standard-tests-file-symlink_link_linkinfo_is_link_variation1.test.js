// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/symlink_link_linkinfo_is_link_variation1.phpt
  it("Test symlink(), linkinfo(), link() and is_link() functions : usage variations - link name stored in an array/object", function () {
    expect(parser.parseCode("<?php\n/* Variation 1 : Creating links across directories where linkname is stored as an object and array member */\n// creating temp directory which will contain temp file and links created\n$file_path = __DIR__;\n$dirname = \"$file_path/symlink_link_linkinfo_is_link_variation1/test/home\";\nmkdir($dirname, 0777, true);\n// creating temp file; links are created to this file later on\n$filename = \"$file_path/symlink_link_linkinfo_is_link_variation1/symlink_link_linkinfo_is_link_variation1.tmp\";\n$fp = fopen($filename, \"w\");\nfclose($fp);\necho \"*** Testing symlink(), link(), linkinfo() and is_link() with linknames stored as members in an object ***\\n\";\nclass object_temp {\n  var $linkname;\n  function __construct($link) {\n    $this->linkname = $link;\n  }\n}\n$obj = new object_temp(\"$dirname/symlink_link_linkinfo_is_link_link.tmp\");\n/* Testing on soft links */\necho \"\\n-- Working with soft links --\\n\";\n// creating soft link\nvar_dump( symlink($filename, $obj->linkname) );\n// check if the link exists\n$linkinfo = linkinfo($obj->linkname);\nvar_dump( is_int($linkinfo) && $linkinfo !== -1 );\n// check if link is soft link\nvar_dump( is_link($obj->linkname) );\n// delete the link created\nunlink($obj->linkname);\n// clear the cache\nclearstatcache();\n/* Testing on hard links */\necho \"\\n-- Working with hard links --\\n\";\n// creating hard link\nvar_dump( link($filename, $obj->linkname) );\n// check if the link exists\n$linkinfo = linkinfo($obj->linkname);\nvar_dump( is_int($linkinfo) && $linkinfo !== -1 );\n// check if link is soft link; expected: false as the link is a hardlink\nvar_dump( is_link($obj->linkname) );\n// delete the link created\nunlink($obj->linkname);\n// clear the cache\nclearstatcache();\necho \"\\n*** Testing symlink(), link(), linkinfo() and is_link() with linknames stored as members of an array ***\\n\";\n$link_arr = array(\"$dirname/symlink_link_linkinfo_is_link_link.tmp\");\n/* Testing on soft links */\necho \"\\n-- Working with soft links --\\n\";\n// creating soft link\nvar_dump( symlink($filename, $link_arr[0]) );\n// check if the link exist\n$linkinfo = linkinfo($link_arr[0]);\nvar_dump( is_int($linkinfo) && $linkinfo !== -1 );\n// check if link is soft link\nvar_dump( is_link($link_arr[0]) );\n// delete the link created\nunlink($link_arr[0]);\n// clear the cache\nclearstatcache();\n/* Testing on hard links */\necho \"\\n-- Working with hard links --\\n\";\n// creating hard link\nvar_dump( link($filename, $link_arr[0]) );\n// check if the link exist\n$linkinfo = linkinfo($link_arr[0]);\nvar_dump( is_int($linkinfo) && $linkinfo !== -1 );\n// check if link is soft link; expected: false as this is a hardlink\nvar_dump( is_link($link_arr[0]) );\n// delete the links created\nunlink($link_arr[0]);\n// clear the cache\nclearstatcache();\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
