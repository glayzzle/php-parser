// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_prepare_native_clear_error.phpt
  it("MySQL PDO->prepare(), native PS, clear line after error", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n    try {\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec(sprintf('CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        // We need to run the emulated version first. Native version will cause a fatal error\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 1);\n        if (1 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn on emulated prepared statements\\n\");\n        // INSERT a single row\n        $db->exec(\"INSERT INTO test(id, label) VALUES (1, 'row1')\");\n        $stmt = $db->prepare('SELECT unknown_column FROM test WHERE id > :placeholder ORDER BY id ASC');\n        $stmt->execute(array(':placeholder' => 0));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[003] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        $stmt = $db->prepare('SELECT id, label FROM test WHERE id > :placeholder ORDER BY id ASC');\n        $stmt->execute(array(':placeholder' => 0));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[004] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // Native PS\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[005] Unable to turn off emulated prepared statements\\n\");\n        $stmt = $db->prepare('SELECT unknown_column FROM test WHERE id > :placeholder ORDER BY id ASC');\n        $stmt->execute(array(':placeholder' => 0));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[006] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        $stmt = $db->prepare('SELECT id, label FROM test WHERE id > :placeholder ORDER BY id ASC');\n        $stmt->execute(array(':placeholder' => 0));\n        if ('00000' !== $stmt->errorCode())\n            printf(\"[007] Execute has failed, %s %s\\n\",\n                var_export($stmt->errorCode(), true),\n                var_export($stmt->errorInfo(), true));\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
