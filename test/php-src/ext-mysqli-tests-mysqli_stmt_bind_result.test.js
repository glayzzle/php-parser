// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_result.phpt
  it("mysqli_stmt_bind_result()", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require('table.inc');\n    $stmt = mysqli_stmt_init($link);\n    if (!mysqli_stmt_prepare($stmt, \"SELECT id, label FROM test ORDER BY id LIMIT 1\"))\n        printf(\"[002a] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    mysqli_stmt_close($stmt);\n    $stmt = mysqli_stmt_init($link);\n    $id = null;\n    $label = null;\n    $foo = null;\n    try {\n        mysqli_stmt_bind_result($stmt, $id);\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    if (!mysqli_stmt_prepare($stmt, \"SELECT id, label FROM test ORDER BY id LIMIT 1\"))\n        printf(\"[004] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    try {\n        mysqli_stmt_bind_result($stmt, $id);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . PHP_EOL;\n    }\n    if (true !== ($tmp = mysqli_stmt_bind_result($stmt, $id, $label)))\n        printf(\"[006] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    try {\n        mysqli_stmt_bind_result($stmt, $id, $label, $foo);\n    } catch (\\ArgumentCountError $e) {\n        echo $e->getMessage() . PHP_EOL;\n    }\n    if (!mysqli_stmt_execute($stmt))\n        printf(\"[008] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    while (mysqli_stmt_fetch($stmt)) {\n        var_dump($id);\n        var_dump($label);\n    }\n    mysqli_stmt_close($stmt);\n    function func_mysqli_stmt_bind_result($link, $engine, $bind_type, $sql_type, $bind_value, $offset, $type_hint = null) {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_query($link, sprintf(\"CREATE TABLE test(id INT, label %s, PRIMARY KEY(id)) ENGINE = %s\", $sql_type, $engine))) {\n            // don't bail - column type might not be supported by the server, ignore this\n            return false;\n        }\n        if (!$stmt = mysqli_stmt_init($link)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 1, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 2, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        $id = null;\n        if (!mysqli_stmt_bind_param($stmt, \"i\" . $bind_type, $id, $bind_value)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 3, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        for ($id = 1; $id < 4; $id++) {\n            if (!mysqli_stmt_execute($stmt)) {\n                printf(\"[%04d] [%d] %s\\n\", $offset + 3 + $id, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n                mysqli_stmt_close($stmt);\n                return false;\n            }\n        }\n        mysqli_stmt_close($stmt);\n        $stmt = mysqli_stmt_init($link);\n        if (!mysqli_stmt_prepare($stmt, \"SELECT id, label FROM test\")) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 7, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 8, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        $result = mysqli_stmt_result_metadata($stmt);\n        $bind_res = null;\n        if (!mysqli_stmt_bind_result($stmt, $id, $bind_res)) {\n            printf(\"[%04d] [%d] %s\\n\", $offset + 9, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        $num = 0;\n        $fields = mysqli_fetch_fields($result);\n        while (mysqli_stmt_fetch($stmt)) {\n            if (!gettype($bind_res)==\"unicode\") {\n                if ($bind_res !== $bind_value && (!$type_hint || ($type_hint !== gettype($bind_res)))) {\n                    printf(\"[%04d] [%d] Expecting %s/'%s' [type hint = %s], got %s/'%s'\\n\",\n                        $offset + 10, $num,\n                        gettype($bind_value), $bind_value, $type_hint,\n                        gettype($bind_res), $bind_res);\n                        mysqli_stmt_close($stmt);\n                        return false;\n                }\n            }\n            $num++;\n        }\n        if ($num != 3) {\n            printf(\"[%04d] [%d] %s, expecting 3 results, got only %d results\\n\",\n                $offset + 11, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt), $num);\n            mysqli_stmt_close($stmt);\n            return false;\n        }\n        mysqli_stmt_close($stmt);\n        return true;\n    }\n    function func_mysqli_stmt_bind_make_string($len) {\n        $ret = '';\n        for ($i = 0; $i < $len; $i++)\n            $ret .= chr(mt_rand(65, 90));\n        return $ret;\n    }\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"TINYINT\", -11, 20);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"TINYINT\", NULL, 40);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"TINYINT UNSIGNED\", 1, 60);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"TINYINT UNSIGNED\", NULL, 80);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BOOL\", 1, 100);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BOOL\", NULL, 120);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BOOLEAN\", 0, 140);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BOOLEAN\", NULL, 160);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"SMALLINT\", -32768, 180);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"SMALLINT\", 32767, 200);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"SMALLINT\", NULL, 220);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"SMALLINT UNSIGNED\", 65535, 240);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"SMALLINT UNSIGNED\", NULL, 260);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"MEDIUMINT\", -8388608, 280, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"MEDIUMINT\", 8388607, 300, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"MEDIUMINT\", NULL, 320);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"MEDIUMINT UNSIGNED\", 16777215, 340, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"MEDIUMINT UNSIGNED\", NULL, 360);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER\", (defined(\"PHP_INT_MAX\")) ? max(-1 * PHP_INT_MAX + 1, -2147483648) : 1, 380);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER\", -2147483647, 400, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER\", (defined(\"PHP_INT_MAX\")) ? min(2147483647, PHP_INT_MAX) : 1, 420);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER\", NULL, 440);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER UNSIGNED\", (defined(\"PHP_INT_MAX\")) ? min(4294967295, 2147483647) : 1, 460);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER UNSIGNED\", 4294967295, 480, (defined(\"PHP_INT_MAX\") && (4294967295 > PHP_INT_MAX)) ? \"string\" : null);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"INTEGER UNSIGNED\", NULL, 500);\n    /* test is broken too: we bind \"integer\" but value is a float\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT\", -9223372036854775808, 520);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT UNSIGNED\", 18446744073709551615, 560);\n    */\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT\", NULL, 540);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT UNSIGNED\", NULL, 580);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT\", -1, 1780);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT UNSIGNED\", 1, 1800);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT\", -1 * PHP_INT_MAX + 1, 1820);\n    func_mysqli_stmt_bind_result($link, $engine, \"i\", \"BIGINT UNSIGNED\", PHP_INT_MAX, 1840);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BIGINT UNSIGNED\", \"18446744073709551615\", 1860);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BIGINT\", \"-9223372036854775808\", 1880);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"FLOAT\", -9223372036854775808 - 1.1, 600);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"FLOAT\", NULL, 620);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"FLOAT UNSIGNED\", 18446744073709551615 + 1.1, 640);\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"FLOAT UNSIGNED \", NULL, 660);\n    // Yes, we need the temporary variable. The PHP casting will fouls us otherwise.\n    $tmp = strval('-99999999.99');\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DOUBLE(10,2)\", $tmp, 680, \"string\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DOUBLE(10,2)\", NULL, 700);\n    $tmp = strval('99999999.99');\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DOUBLE(10,2) UNSIGNED\", $tmp , 720, \"string\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DOUBLE(10,2) UNSIGNED\", NULL, 740);\n    $tmp = strval('-99999999.99');\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DECIMAL(10,2)\", $tmp, 760, \"string\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DECIMAL(10,2)\", NULL, 780);\n    $tmp = strval('99999999.99');\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DECIMAL(10,2)\", $tmp, 800, \"string\");\n    func_mysqli_stmt_bind_result($link, $engine, \"d\", \"DECIMAL(10,2)\", NULL, 820);\n    // don't care about date() strict TZ warnings...\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATE\", @date('Y-m-d'), 840);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATE NOT NULL\", @date('Y-m-d'), 860);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATE\", NULL, 880);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATETIME\", @date('Y-m-d H:i:s'), 900);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATETIME NOT NULL\", @date('Y-m-d H:i:s'), 920);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"DATETIME\", NULL, 940);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TIMESTAMP\", @date('Y-m-d H:i:s'), 960);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TIME\", @date('H:i:s'), 980);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TIME NOT NULL\", @date('H:i:s'), 1000);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TIME\", NULL, 1020);\n    $tmp = intval(@date('Y'));\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"YEAR\", $tmp, 1040, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"YEAR NOT NULL\", $tmp, 1060, \"integer\");\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"YEAR\", NULL, 1080);\n    $string255 = func_mysqli_stmt_bind_make_string(255);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"CHAR(1)\", \"a\", 1110, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"CHAR(255)\", $string255, 1120, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"CHAR(1) NOT NULL\", \"a\", 1140, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"CHAR(1)\", NULL, 1160);\n    $string65k = func_mysqli_stmt_bind_make_string(65535);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARCHAR(1)\", \"a\", 1180, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARCHAR(255)\", $string255, 1200, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARCHAR(65635)\", $string65k, 1220, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARCHAR(1) NOT NULL\", \"a\", 1240, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARCHAR(1)\", NULL, 1260);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BINARY(1)\", \"a\", 1280);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BINARY(1)\", chr(0), 1300);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BINARY(1) NOT NULL\", \"b\", 1320);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"BINARY(1)\", NULL, 1340);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARBINARY(1)\", \"a\", 1360);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARBINARY(1)\", chr(0), 1380);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARBINARY(1) NOT NULL\", \"b\", 1400);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"VARBINARY(1)\", NULL, 1420);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYBLOB\", \"a\", 1440);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYBLOB\", chr(0), 1460);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYBLOB NOT NULL\", \"b\", 1480);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYBLOB\", NULL, 1500);\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYTEXT\", \"a\", 1520, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYTEXT NOT NULL\", \"a\", 1540, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TINYTEXT\", NULL, 1560, 'string');\n    // Note: you cannot insert any blob values this way. But you can check the API at least partly this way\n    // Extra BLOB tests are in mysqli_stmt_send_long()\n    func_mysqli_stmt_bind_result($link, $engine, \"b\", \"BLOB\", \"\", 1580);\n    func_mysqli_stmt_bind_result($link, $engine, \"b\", \"TEXT\", \"\", 1600, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"b\", \"MEDIUMBLOB\", \"\", 1620);\n    func_mysqli_stmt_bind_result($link, $engine, \"b\", \"MEDIUMTEXT\", \"\", 1640, 'string');\n    /* Is this one related? http://bugs.php.net/bug.php?id=35759 */\n    if (($IS_MYSQLND) || (!$IS_MYSQLND && (ini_get('memory_limit') > 4294967296))) {\n        /* NOTE: the MySQL Client Library - not mysqlnd - will allocate\n        a hugge max_length(type) = 4GB bind buffer */\n        func_mysqli_stmt_bind_result($link, $engine, \"b\", \"LONGBLOB\", \"\", 1660);\n        func_mysqli_stmt_bind_result($link, $engine, \"b\", \"LONGTEXT\", \"\", 1680, 'string');\n    }\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"ENUM('a', 'b')\", \"a\", 1700, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"ENUM('a', 'b')\", NULL, 1720, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"SET('a', 'b')\", \"a\", 1740, 'string');\n    func_mysqli_stmt_bind_result($link, $engine, \"s\", \"SET('a', 'b')\", NULL, 1760, 'string');\n    if (mysqli_get_server_version($link) >= 50600)\n        func_mysqli_stmt_bind_result($link, $engine, \"s\", \"TIME\", \"13:31:34.123456\", 1770, \"13:31:34\");\n    $stmt = mysqli_stmt_init($link);\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (1000, 'z')\"))\n        printf(\"[3001] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = null;\n    try {\n        mysqli_stmt_bind_result($stmt, $id);\n    } catch (\\ArgumentCountError $e) {\n        $e->getMessage() . \\PHP_EOL;\n    }\n    mysqli_stmt_close($stmt);\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
