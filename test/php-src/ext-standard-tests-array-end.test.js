// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/end.phpt
  it("Test end() function", function () {
    expect(parser.parseCode("<?php\n$arrays = array (\n  array( 0 ),\n  range(1, 100 ),\n  range('a', 'z', 2 ),\n  array(\"a\" => \"A\", 2 => \"B\", \"C\" => 3, 4 => 4, \"one\" => 1, \"\" => NULL ),\n  array(1, array(1, 2 => 3 ), \"one\" => 1, \"5\" => 5 ),\n  array(-1, -2, -3, -4, \"-0.005\" => \"neg0.005\", 2.0 => \"float2\", \"neg.9\" => -.9 ),\n  array(1.0005, 2.000000, -3.000000, -4.9999999 ),\n  array(true, false),\n  array(\"PHP\", \"Web2.0\", \"SOA\"),\n  array(1, array() ),\n  array(1, 2, \"\" ),\n  array(\" \"),\n  array(2147483647, 2147483648, -2147483647, -2147483648 ),\n  array(0x7FFFFFFF, -0x80000000, 017777777777, -020000000000 ),\n  array(-.6700000E+3, -4.10003E+3, 1e-5, -1E+5, 000002.00 )\n);\n/* loop through $arrays to print the last element of each sub-array */\necho \"*** Testing end() on different arrays ***\\n\";\n$counter = 1;\nforeach ($arrays as $sub_array){\n  echo \"-- Iteration $counter --\\n\";\n  var_dump( end($sub_array) );\n  /* ensure that internal pointer is moved to last element */\n  var_dump( current($sub_array) );\n  $counter++;\n}\n/* checking for end() on sub-arrays */\necho \"\\n*** Testing end() with sub-arrays ***\\n\";\n$test_array = array(1, array(1 => \"one\", \"two\" => 2, \"\" => \"f\") );\nvar_dump( end($test_array) );\nvar_dump( end($test_array[1]) );\n/* checking working of end() when array elements are deleted */\necho \"\\n*** Testing end() when array elements are deleted ***\\n\";\n$array_test = array(\"a\", \"b\", \"d\", 7, \"u\" => \"U\", -4, \"-.008\" => \"neg.008\");\n// remove first element from array\necho \"\\n-- Remove first element from array --\\n\";\nunset($array_test[0]);\nvar_dump( end($array_test) );\n// remove last element from array, rewind and check end()\necho \"\\n-- Remove last element from array --\\n\";\nunset($array_test['-.008']);\nvar_dump( end($array_test) );\nreset( $array_test );\nvar_dump( end($array_test) );\n// remove any element  !first, !last, rewind and check end()\necho \"\\n-- Remove any element from array apart from first and last element --\\n\";\nunset($array_test[7]);\nvar_dump( end($array_test) );\nvar_dump( reset($array_test) );\nvar_dump( end($array_test) );\n/* Checking on OBJECTS type */\necho \"\\n*** Testing end() on objects ***\\n\";\nclass foo\n{\n  function __toString() {\n    return \"Object\";\n  }\n}\nclass foo1\n{\n  function __toString() {\n    return \"Object1\";\n  }\n}\n$object1 = new foo(); //new object created\n$object2 = new foo1();\n$array_object = array();\n$array_object[0] = &$object1;\n$array_object[1] = &$object2;\nvar_dump( end($array_object) );\nvar_dump($array_object);\n/* Checking on RESOURCE type */\necho \"\\n*** Testing end() on resource type ***\\n\";\n//file type resource\n$file_handle = fopen(__FILE__, \"r\");\n//directory type resource\n$dir_handle = opendir( __DIR__ );\n//store resources in array\n$resources = array($file_handle, $dir_handle);\nvar_dump( end($resources) );\nvar_dump( current($resources) );\necho \"Done\\n\";\n/* cleaning resource handles */\nfclose( $file_handle );  //file resource handle deleted\nclosedir( $dir_handle );  //dir resource handle deleted\n?>")).toMatchSnapshot();
  });
});
