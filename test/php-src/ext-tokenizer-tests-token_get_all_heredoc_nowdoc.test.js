// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/tokenizer/tests/token_get_all_heredoc_nowdoc.phpt
  it("Flexible heredoc and nowdoc testing with token_get_all", function () {
    expect(() => parser.parseCode("<?php\nfunction test(string $code, int $flags)\n{\n    try {\n        $tokens = token_get_all($code, $flags);\n        foreach ($tokens as $token) {\n            if (is_array($token)) {\n                echo \"Line {$token[2]}: \", token_name($token[0]), \" ('{$token[1]}')\\n\";\n            }\n        }\n    } catch (ParseError $e) {\n        echo \"Parse error: {$e->getMessage()} on line {$e->getLine()}\\n\";\n    }\n}\n$tests = [];\n$tests[1] = <<<'OUTER_END'\n<?php <<<INNER_END\nINNER_END;\nOUTER_END;\n$tests[2] = <<<'OUTER_END'\n<?php <<<INNER_END\n  INNER_END;\nOUTER_END;\n$tests[3] = <<<'OUTER_END'\n<?php <<<'INNER_END'\nINNER_END;\nOUTER_END;\n$tests[4] = <<<'OUTER_END'\n<?php <<<'INNER_END'\n  INNER_END;\nOUTER_END;\n$tests[5] = <<<'OUTER_END'\n  <?php <<<INNER_END\n  a\n  OUTER_END;\n$tests[6] = <<<'OUTER_END'\n<?php <<<INNER_END\nab\nOUTER_END;\n$tests[7] = <<<'OUTER_END'\n<?php <<<INNER_END\na\nINNER_END;\nOUTER_END;\n$tests[8] = <<<CODE\n<?php\n \\t<<<'DOC'\n \\tXXX\n \\tDOC;\nCODE;\n$tests[9] = <<<'OUTER_END'\n<?php <<<INNER_END\nab\nINNER_END;\nOUTER_END;\n$tests[10] = <<<'OUTER_END'\n<?php <<<INNER_END\n  ab\n  INNER_END;\nOUTER_END;\n$tests[11] = <<<'OUTER_END'\n<?php <<<INNER_END\nabc\n   INNER_END;\nOUTER_END;\n$tests[12] = <<<'OUTER_END'\n<?php <<<INNER_END\n   INNER_END;\nOUTER_END;\n$tests[13] = <<<'OUTER_END'\n<?php <<<'INNER_END'\nab\nINNER_END;\nOUTER_END;\n$tests[14] = <<<'OUTER_END'\n<?php <<<'INNER_END'\n  ab\n  INNER_END;\nOUTER_END;\n$tests[15] = <<<'OUTER_END'\n<?php <<<'INNER_END'\nabc\n   INNER_END;\nOUTER_END;\n$tests[16] = <<<'OUTER_END'\n<?php <<<'INNER_END'\n   INNER_END;\nOUTER_END;\n$tests[17] = <<<OUTER_END\n<?php <<<INNER_END\nab\nab\n\\t\nOUTER_END;\n$tests[18] = <<<OUTER_END\n<?php <<<'INNER_END'\nab\nab\n\\t\nOUTER_END;\necho \"Without TOKEN_PARSE:\\n\";\nforeach ($tests as $i => $test) {\n    echo \"\\nTest case $i\\n\\n\";\n    test($test, 0);\n}\necho \"\\nWith TOKEN_PARSE:\\n\";\nforeach ($tests as $i => $test) {\n    echo \"\\nTest case $i\\n\\n\";\n    test($test, TOKEN_PARSE);\n}\n?>")).toThrowErrorMatchingSnapshot();
  });
});
