// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/arrayObject_magicMethods1.phpt
  it("SPL: ArrayObject: ensure a wrapped object's magic methods for property access are not invoked when manipulating the ArrayObject's elements using [].", function () {
    expect(parser.parseCode("<?php\nclass UsesMagic {\n    public $a = 1;\n    public $b = 2;\n    public $c = 3;\n    private $priv = 'secret';\n    function __get($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __set($name, $value) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __isset($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __unset($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n}\n$obj = new UsesMagic;\n$ao = new ArrayObject($obj);\necho \"\\n--> Write existent, non-existent and dynamic:\\n\";\n$ao['a'] = 'changed';\n$ao['dynamic'] = 'new';\n$ao['dynamic'] = 'new.changed';\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> Read existent, non-existent and dynamic:\\n\";\nvar_dump($ao['a']);\nvar_dump($ao['nonexistent']);\nvar_dump($ao['dynamic']);\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> isset existent, non-existent and dynamic:\\n\";\nvar_dump(isset($ao['a']));\nvar_dump(isset($ao['nonexistent']));\nvar_dump(isset($ao['dynamic']));\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> Unset existent, non-existent and dynamic:\\n\";\nunset($ao['a']);\nunset($ao['nonexistent']);\nunset($ao['dynamic']);\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\n?>")).toMatchSnapshot();
  });
});
