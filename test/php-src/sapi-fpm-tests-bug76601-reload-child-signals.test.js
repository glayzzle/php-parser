// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // sapi/fpm/tests/bug76601-reload-child-signals.phpt
  it("FPM: bug76601 children should not ignore signals during concurrent reloads", function () {
    expect(parser.parseCode("<?php\nrequire_once \"tester.inc\";\n$cfg = <<<EOT\n[global]\nerror_log = {{FILE:LOG}}\npid = {{FILE:PID}}\n; some value twice greater than tester->getLogLines() timeout\nprocess_control_timeout=10\n[unconfined]\nlisten = {{ADDR}}\n; spawn children immediately after reload\npm = static\npm.max_children = 10\nEOT;\n$code = <<<EOT\n<?php\n/* empty */\nEOT;\n/*\n * If a child miss SIGQUIT then reload process should stuck\n * for at least process_control_timeout that is set greater\n * than timeout in log reading functions.\n *\n * Alternative way is to set log_level=debug and filter result of\n * $tester->getLogLines(2000) for lines containing SIGKILL\n *\n *     [22-Oct-2019 03:28:19.532703] DEBUG: pid 21315, fpm_pctl_kill_all(), line 161: [pool unconfined] sending signal 9 SIGKILL to child 21337\n *     [22-Oct-2019 03:28:19.533471] DEBUG: pid 21315, fpm_children_bury(), line 259: [pool unconfined] child 21337 exited on signal 9 (SIGKILL) after 1.003055 seconds from start\n *\n * but it has less probability of failure detection. Additionally it requires more\n * $tester->expectLogNotice() around last reload due to presence of debug messages.\n */\n$tester = new FPM\\Tester($cfg, $code);\n$tester->start();\n$tester->expectLogStartNotices();\n/* Vary interval between concurrent reload requests\n    since performance of test instance is not known in advance */\n$max_interval = 25000;\n$step = 1000;\n$pid = $tester->getPid();\nfor ($interval = 0; $interval < $max_interval; $interval += $step) {\n    exec(\"kill -USR2 $pid\", $out, $killExitCode);\n    if ($killExitCode) {\n        echo \"ERROR: master process is dead\\n\";\n        break;\n    }\n    usleep($interval);\n}\necho \"Reached interval $interval us with $step us steps\\n\";\n$tester->expectLogNotice('Reloading in progress ...');\n/* Consume mix of 'Reloading in progress ...' and 'reloading: .*' */\n$skipped = $tester->getLogLines(2000);\n$tester->signal('USR2');\n$tester->expectLogNotice('Reloading in progress ...');\n/* When a child ignores SIGQUIT, the following expectation fails due to timeout. */\nif (!$tester->expectLogNotice('reloading: .*')) {\n    /* for troubleshooting */\n    echo \"Skipped messages\\n\";\n    echo implode('', $skipped);\n}\n$tester->expectLogNotice('using inherited socket fd=\\d+, \"127.0.0.1:\\d+\"');\n$tester->expectLogStartNotices();\n$tester->terminate();\n$tester->expectLogTerminatingNotices();\n$tester->close();\n?>\nDone")).toMatchSnapshot();
  });
});
