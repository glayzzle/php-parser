// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/collator_compare_variant2.phpt
  it("compare()", function () {
    expect(parser.parseCode("<?php\n/*\n * Compare various string pairs using various locales.\n */\n/*\n * Converts comparison result to a character.\n */\nfunction cmp_to_char( $comp_res )\n{\n    switch( $comp_res )\n    {\n    case 0:            // UCOL_EQUAL\n        return '=';\n    case 1:            // UCOL_GREATER\n        return '>';\n    case -1:           // UCOL_LESS\n        return '<';\n    default:\n        return '?';\n    }\n}\n/*\n * Compare string pairs in the given array\n * using specified locale.\n */\nfunction compare_pairs( $locale, $test_array )\n{\n    $res_str = '';\n    $coll = ut_coll_create( $locale );\n    foreach( $test_array as $test_strings )\n    {\n        list( $str1, $str2 ) = $test_strings;\n        // Compare strings.\n        $res_val = cmp_to_char( ut_coll_compare( $coll, $str1, $str2 ) );\n        // Concatenate result strings.\n        $res_str .= dump( $str1 ) .\n                    ' ' . $res_val . ' ' .\n                    dump( $str2 ) . \"\\n\";\n    }\n    return $res_str;\n}\nfunction ut_main()\n{\n    $res_str = '';\n    // Compare strings using en_US locale.\n    $test_params = array(\n        array( 'abc', 'abc' ),\n        array( 'Abc', 'abc' ),\n        array( 'a'  , 'abc' ),\n        array( 'a'  , ''    ),\n        array( ''  , ''     ),\n        array( 'a'  , 'b'   ),\n        array( 'ab'  , 'b'  ),\n        array( 'ab'  , 'a'  ),\n        array( 123  , 'abc' ),\n        array( 'ac' , ''    ),\n        array( '.'  , '.'   ),\n        // Try to compare long strings.\n        array( 'abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcde',\n               'abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdea'),\n    );\n    $res_str .= compare_pairs( 'en_US', $test_params );\n    // Compare strings using ru_RU locale.\n    $test_params = array(\n        array( 'а',   'б' ),\n        array( 'а',   'аа' ),\n        array( 'аб', 'ба' ),\n        array( 'а',   ',' ),\n        array( 'а',   'b' ),\n        array( 'а',   'bb' ),\n        array( 'а',   'ab' ),\n        array( 'а',   '' )\n    );\n    $res_str .= compare_pairs( 'ru_RU', $test_params );\n    // Compare strings using lt_LT locale.\n    $test_params = array(\n        array( 'y', 'k' )\n    );\n    $res_str .= compare_pairs( 'lt_LT', $test_params );\n    return $res_str;\n}\ninclude_once( 'ut_common.inc' );\nut_run();\n?>")).toMatchSnapshot();
  });
});
