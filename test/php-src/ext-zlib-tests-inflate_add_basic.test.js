// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/zlib/tests/inflate_add_basic.phpt
  it("Test incremental inflate_add() functionality", function () {
    expect(parser.parseCode("<?php\nfunction inflateStream($mode, $flushSize) {\n    $buffer = \"\";\n    $inflated = null;\n    $resource = inflate_init($mode);\n    while (true) {\n        $dataToInflate = yield $inflated;\n        if (isset($dataToInflate)) {\n            $buffer .= $dataToInflate;\n            if (strlen($buffer) >= $flushSize) {\n                $inflated = inflate_add($resource, $buffer);\n                $buffer = \"\";\n            } else {\n                $inflated = null;\n            }\n        } else {\n            $inflated = inflate_add($resource, $buffer, ZLIB_FINISH);\n        }\n    }\n}\n$modes = [\n    'ZLIB_ENCODING_RAW'     => ZLIB_ENCODING_RAW,\n    'ZLIB_ENCODING_GZIP'    => ZLIB_ENCODING_GZIP,\n    'ZLIB_ENCODING_DEFLATE' => ZLIB_ENCODING_DEFLATE,\n];\n$flushSizes = [1, 4, 32768];\n$flushTypes = [\n    'ZLIB_SYNC_FLUSH' => ZLIB_SYNC_FLUSH,\n    'ZLIB_PARTIAL_FLUSH' => ZLIB_PARTIAL_FLUSH,\n    'ZLIB_FULL_FLUSH' => ZLIB_FULL_FLUSH,\n    'ZLIB_NO_FLUSH' => ZLIB_NO_FLUSH,\n    'ZLIB_BLOCK' => ZLIB_BLOCK,\n];\n$uncompressed = \"\";\nfor ($i=0;$i<(32768*2);$i++) {\n    $uncompressed .= chr(rand(48,125));\n}\nforeach ($modes as $modeKey => $mode) {\n    $compressed = zlib_encode($uncompressed, $mode);\n    $compressedLen = strlen($compressed);\n    foreach ($flushSizes as $flushSize) {\n        foreach ($flushTypes as $flushTypeKey => $flushType) {\n            $inflated = \"\";\n            $stream = inflateStream($mode, $flushSize, $flushType);\n            for ($i=0;$i<$compressedLen;$i++) {\n                $inflated .= $stream->send($compressed[$i]);\n            }\n            $inflated .= $stream->send(null);\n            if ($inflated !== $uncompressed) {\n                echo \"Error: {$modeKey} | {$flushSize} | {$flushTypeKey}\\n\";\n            }\n        }\n    }\n}\n?>\n===DONE===")).toMatchSnapshot();
  });
});
