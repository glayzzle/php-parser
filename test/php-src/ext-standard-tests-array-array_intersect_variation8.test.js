// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_intersect_variation8.phpt
  it("Test array_intersect() function : usage variations - assoc array with diff values for 'arr2' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_intersect() by passing different\n * associative arrays having different possible values to $arr2 argument.\n * The $arr1 argument is a fixed array.\n*/\necho \"*** Testing array_intersect() : assoc array with diff values to \\$arr2 argument ***\\n\";\n// get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// get a class\nclass classA\n{\n  public function __toString(){\n    return \"Class A object\";\n  }\n}\n// get a heredoc string\n$heredoc = <<<EOT\nHello world\nEOT;\n// different variations of associative arrays to be passed to $arr2 argument\n$arrays = array (\n       // empty array\n/*1*/  array(),\n       // arrays with integer values\n       array('0' => 0),\n       array(\"1\" => 1),\n       array(\"one\" => 1, 'two' => 2, \"three\" => 3, 4 => 4),\n       // arrays with float values\n/*5*/  array(\"float\" => 2.3333),\n       array(\"f1\" => 1.2, 'f2' => 3.33, 3 => 4.89999922839999, 'f4' => 33333333.333333),\n       // arrays with string values\n/*7*/  array(111 => \"\\tHello\", \"red\" => \"col\\tor\", 2 => \"\\v\\fworld\", 3 =>  \"pen\\n\"),\n       array(111 => '\\tHello', \"red\" => 'col\\tor', 2 => '\\v\\fworld', 3 =>  'pen\\n'),\n       array(1 => \"hello\", \"heredoc\" => $heredoc),\n       // array with object, unset variable and resource variable\n/*10*/ array(11 => new classA(), \"unset\" => @$unset_var, \"resource\" => $fp),\n       // array with mixed values\n/*11*/ array(1 => 'hello', 2 => new classA(), 222 => \"fruit\",\n             'resource' => $fp, \"int\" => 133, \"float\" => 444.432,\n             \"unset\" => @$unset_var, \"heredoc\" => $heredoc)\n);\n// array to be passsed to $arr1 argument\n$arr1 = array(1, 2, 1.2, 2.3333, \"col\\tor\", '\\v\\fworld', $fp,\n              \"Hello world\", $heredoc, new classA(), 444.432, \"fruit\");\n// loop through each sub-array within $arrays to check the behavior of array_intersect()\n$iterator = 1;\nforeach($arrays as $arr2) {\n  echo \"-- Iterator $iterator --\\n\";\n  // Calling array_intersect() with default arguments\n  var_dump( array_intersect($arr1, $arr2) );\n  // Calling array_intersect() with more arguments.\n  // additional argument passed is the same as $arr1 argument\n  var_dump( array_intersect($arr1, $arr2, $arr1) );\n  $iterator++;\n}\n// close the file resource used\nfclose($fp);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
