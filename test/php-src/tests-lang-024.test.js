// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/024.phpt
  it("Looped regression test (may take a while)", function () {
    expect(parser.parseCode("<?php\nfor ($jdk=0; $jdk<50; $jdk++) {\n?><html>\n<head>\n<?php /* the point of this file is to intensively test various aspects of the parser.\n    * right now, each test focuses in one aspect only (e.g. variable aliasing, arithmetic operator,\n    * various control structures), while trying to combine code from other parts of the parser as well.\n    */\n?>\n*** Testing assignments and variable aliasing: ***\n<?php\n  /* This test tests assignments to variables using other variables as variable-names */\n  $a = \"b\";\n  $$a = \"test\";\n  $$$a = \"blah\";\n  ${$$$a}[\"associative arrays work too\"] = \"this is nifty\";\n?>\nThis should read \"blah\": <?php echo \"$test\\n\"; ?>\nThis should read \"this is nifty\": <?php echo $blah[$test=\"associative arrays work too\"].\"\\n\"; ?>\n*************************************************\n*** Testing integer operators ***\n<?php\n  /* test just about any operator possible on $i and $j (ints) */\n  $i = 5;\n  $j = 3;\n?>\nCorrect result - 8:  <?php echo $i+$j; ?>\nCorrect result - 8:  <?php echo $i+$j; ?>\nCorrect result - 2:  <?php echo $i-$j; ?>\nCorrect result - -2:  <?php echo $j-$i; ?>\nCorrect result - 15:  <?php echo $i*$j; ?>\nCorrect result - 15:  <?php echo $j*$i; ?>\nCorrect result - 2:  <?php echo $i%$j; ?>\nCorrect result - 3:  <?php echo $j%$i; ?>\n*********************************\n*** Testing real operators ***\n<?php\n  /* test just about any operator possible on $i and $j (floats) */\n  $i = 5.0;\n  $j = 3.0;\n?>\nCorrect result - 8:  <?php echo $i+$j; ?>\nCorrect result - 8:  <?php echo $i+$j; ?>\nCorrect result - 2:  <?php echo $i-$j; ?>\nCorrect result - -2:  <?php echo $j-$i; ?>\nCorrect result - 15:  <?php echo $i*$j; ?>\nCorrect result - 15:  <?php echo $j*$i; ?>\nCorrect result - 2:  <?php echo $i%$j; ?>\nCorrect result - 3:  <?php echo $j%$i; ?>\n*********************************\n*** Testing if/elseif/else control ***\n<?php\n/* sick if/elseif/else test by Andi :) */\n$a = 5;\nif ($a == \"4\") {\n    echo \"This \".\" does \".\"  not \".\" work\\n\";\n} elseif ($a == \"5\") {\n    echo \"This \".\" works\\n\";\n    $a = 6;\n    if (\"andi\" == ($test = \"andi\")) {\n        echo \"this_still_works\\n\";\n    } elseif (1) {\n        echo \"should_not_print\\n\";\n    } else {\n            echo \"should_not_print\\n\";\n    }\n        if (44 == 43) {\n        echo \"should_not_print\\n\";\n    } else {\n        echo \"should_print\\n\";\n    }\n} elseif ($a == 6) {\n    echo \"this \".\"broken\\n\";\n    if (0) {\n        echo \"this_should_not_print\\n\";\n    } else {\n        echo \"TestingDanglingElse_This_Should_not_print\\n\";\n    }\n} else {\n    echo \"This \".\"does \".\" not\".\" work\\n\";\n}\n?>\n*** Seriously nested if's test ***\n** spelling correction by kluzz **\n<?php\n/* yet another sick if/elseif/else test by Zeev */\n$i=$j=0;\necho \"Only two lines of text should follow:\\n\";\nif (0) { /* this code is not supposed to be executed */\n  echo \"hmm, this shouldn't be displayed #1\\n\";\n  $j++;\n  if (1) {\n    $i += $j;\n    if (0) {\n      $j = ++$i;\n      if (1) {\n        $j *= $i;\n        echo \"damn, this shouldn't be displayed\\n\";\n      } else {\n        $j /= $i;\n        ++$j;\n        echo \"this shouldn't be displayed either\\n\";\n      }\n    } elseif (1) {\n      $i++; $j++;\n      echo \"this isn't supposed to be displayed\\n\";\n    }\n  } elseif (0) {\n    $i++;\n    echo \"this definitely shouldn't be displayed\\n\";\n  } else {\n    --$j;\n    echo \"and this too shouldn't be displayed\\n\";\n    while ($j>0) {\n      $j--;\n    }\n  }\n} elseif (2-2) {  /* as long as 2-2==0, this isn't supposed to be executed either */\n  $i = ++$j;\n  echo \"hmm, this shouldn't be displayed #2\\n\";\n  if (1) {\n    $j = ++$i;\n    if (0) {\n      $j = $i*2+$j*($i++);\n      if (1) {\n        $i++;\n        echo \"damn, this shouldn't be displayed\\n\";\n      } else {\n        $j++;\n        echo \"this shouldn't be displayed either\\n\";\n      }\n    } else if (1) {\n      ++$j;\n      echo \"this isn't supposed to be displayed\\n\";\n    }\n  } elseif (0) {\n    $j++;\n    echo \"this definitely shouldn't be displayed\\n\";\n  } else {\n    $i++;\n    echo \"and this too shouldn't be displayed\\n\";\n  }\n} else {\n  $j=$i++;  /* this should set $i to 1, but shouldn't change $j (it's assigned $i's previous values, zero) */\n  echo \"this should be displayed. should be:  \\$i=1, \\$j=0.  is:  \\$i=$i, \\$j=$j\\n\";\n  if (1) {\n    $j += ++$i;  /* ++$i --> $i==2,  $j += 2 --> $j==2 */\n    if (0) {\n      $j += 40;\n      if (1) {\n        $i += 50;\n        echo \"damn, this shouldn't be displayed\\n\";\n      } else {\n        $j += 20;\n        echo \"this shouldn't be displayed either\\n\";\n      }\n    } else if (1) {\n      $j *= $i;  /* $j *= 2  --> $j == 4 */\n      echo \"this is supposed to be displayed. should be:  \\$i=2, \\$j=4.  is:  \\$i=$i, \\$j=$j\\n\";\n      echo \"3 loop iterations should follow:\\n\";\n      while ($i<=$j) {\n        echo $i++.\" $j\\n\";\n      }\n    }\n  } elseif (0) {\n    echo \"this definitely shouldn't be displayed\\n\";\n  } else {\n    echo \"and this too shouldn't be displayed\\n\";\n  }\n  echo \"**********************************\\n\";\n}\n?>\n*** C-style else-if's ***\n<?php\n  /* looks like without we even tried, C-style else-if structure works fine! */\n  if ($a=0) {\n    echo \"This shouldn't be displayed\\n\";\n  } else if ($a++) {\n    echo \"This shouldn't be displayed either\\n\";\n  } else if (--$a) {\n    echo \"No, this neither\\n\";\n  } else if (++$a) {\n    echo \"This should be displayed\\n\";\n  } else {\n    echo \"This shouldn't be displayed at all\\n\";\n  }\n?>\n*************************\n*** WHILE tests ***\n<?php\n$i=0;\n$j=20;\nwhile ($i<(2*$j)) {\n  if ($i>$j) {\n    echo \"$i is greater than $j\\n\";\n  } else if ($i==$j) {\n    echo \"$i equals $j\\n\";\n  } else {\n    echo \"$i is smaller than $j\\n\";\n  }\n  $i++;\n}\n?>\n*******************\n*** Nested WHILEs ***\n<?php\n$arr_len=3;\n$i=0;\nwhile ($i<$arr_len) {\n  $j=0;\n  while ($j<$arr_len) {\n    $k=0;\n    while ($k<$arr_len) {\n      ${\"test$i$j\"}[$k] = $i+$j+$k;\n      $k++;\n    }\n    $j++;\n  }\n  $i++;\n}\necho \"Each array variable should be equal to the sum of its indices:\\n\";\n$i=0;\nwhile ($i<$arr_len) {\n  $j=0;\n  while ($j<$arr_len) {\n    $k=0;\n    while ($k<$arr_len) {\n      echo \"\\${test$i$j}[$k] = \".${\"test$i$j\"}[$k].\"\\n\";\n      $k++;\n    }\n    $j++;\n  }\n  $i++;\n}\n?>\n*********************\n*** hash test... ***\n<?php\n/*\n$i=0;\nwhile ($i<10000) {\n  $arr[$i]=$i;\n  $i++;\n}\n$i=0;\nwhile ($i<10000) {\n  echo $arr[$i++].\"\\n\";\n}\n*/\necho \"commented out...\";\n?>\n**************************\n*** Hash resizing test ***\n<?php\n$i = 10;\n$a = \"b\";\nwhile ($i > 0) {\n    $a = $a . \"a\";\n    echo \"$a\\n\";\n    $resize[$a] = $i;\n    $i--;\n}\n$i = 10;\n$a = \"b\";\nwhile ($i > 0) {\n    $a = $a . \"a\";\n    echo \"$a\\n\";\n    echo $resize[$a].\"\\n\";\n    $i--;\n}\n?>\n**************************\n*** break/continue test ***\n<?php\n$i=0;\necho \"\\$i should go from 0 to 2\\n\";\nwhile ($i<5) {\n  if ($i>2) {\n    break;\n  }\n  $j=0;\n  echo \"\\$j should go from 3 to 4, and \\$q should go from 3 to 4\\n\";\n  while ($j<5) {\n    if ($j<=2) {\n      $j++;\n      continue;\n    }\n    echo \"  \\$j=$j\\n\";\n    for ($q=0; $q<=10; $q++) {\n      if ($q<3) {\n        continue;\n      }\n      if ($q>4) {\n        break;\n      }\n      echo \"    \\$q=$q\\n\";\n    }\n    $j++;\n  }\n  $j=0;\n  echo \"\\$j should go from 0 to 2\\n\";\n  while ($j<5) {\n    if ($j>2) {\n      $k=0;\n      echo \"\\$k should go from 0 to 2\\n\";\n      while ($k<5) {\n        if ($k>2) {\n          break 2;\n        }\n        echo \"    \\$k=$k\\n\";\n        $k++;\n      }\n    }\n    echo \"  \\$j=$j\\n\";\n    $j++;\n  }\n  echo \"\\$i=$i\\n\";\n  $i++;\n}\n?>\n***********************\n*** Nested file include test ***\n<?php include(\"023-2.inc\"); ?>\n********************************\n<?php\n{\n  echo \"Tests completed.\\n\";  # testing some PHP style comment...\n}\n} ?>")).toMatchSnapshot();
  });
});
