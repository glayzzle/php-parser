// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_field_seek.phpt
  it("mysqli_field_seek()", function () {
    expect(parser.parseCode("<?php\n    function mysqli_field_seek_flags($flags) {\n        $ret = '';\n        if ($flags & MYSQLI_NOT_NULL_FLAG)\n            $ret .= 'MYSQLI_NOT_NULL_FLAG ';\n        if ($flags & MYSQLI_PRI_KEY_FLAG)\n            $ret .= 'MYSQLI_PRI_KEY_FLAG ';\n        if ($flags & MYSQLI_UNIQUE_KEY_FLAG)\n            $ret .= 'MYSQLI_UNIQUE_KEY_FLAG ';\n        if ($flags & MYSQLI_MULTIPLE_KEY_FLAG)\n            $ret .= 'MYSQLI_MULTIPLE_KEY_FLAG ';\n        if ($flags & MYSQLI_BLOB_FLAG)\n            $ret .= 'MYSQLI_BLOB_FLAG ';\n        if ($flags & MYSQLI_UNSIGNED_FLAG)\n            $ret .= 'MYSQLI_UNSIGNED_FLAG ';\n        if ($flags & MYSQLI_ZEROFILL_FLAG)\n            $ret .= 'MYSQLI_ZEROFILL_FLAG ';\n        if ($flags & MYSQLI_AUTO_INCREMENT_FLAG)\n            $ret .= 'MYSQLI_AUTO_INCREMENT_FLAG ';\n        if ($flags & MYSQLI_TIMESTAMP_FLAG)\n            $ret .= 'MYSQLI_TIMESTAMP_FLAG ';\n        if ($flags & MYSQLI_SET_FLAG)\n            $ret .= 'MYSQLI_SET_FLAG ';\n        if ($flags & MYSQLI_NUM_FLAG)\n            $ret .= 'MYSQLI_NUM_FLAG ';\n        if ($flags & MYSQLI_PART_KEY_FLAG)\n            $ret .= 'MYSQLI_PART_KEY_FLAG ';\n        if ($flags & MYSQLI_GROUP_FLAG)\n            $ret .= 'MYSQLI_GROUP_FLAG ';\n        return $ret;\n    }\n    require_once(\"connect.inc\");\n    require('table.inc');\n    // Make sure that client, connection and result charsets are all the\n    // same. Not sure whether this is strictly necessary.\n    if (!mysqli_set_charset($link, 'utf8'))\n        printf(\"[%d] %s\\n\", mysqli_errno($link), mysqli_errno($link));\n    $charsetInfo = mysqli_get_charset($link);\n    if (!$res = mysqli_query($link, \"SELECT id, label FROM test ORDER BY id LIMIT 1\", MYSQLI_USE_RESULT)) {\n        printf(\"[003] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    }\n    try {\n        var_dump(mysqli_field_seek($res, -1));\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    var_dump(mysqli_fetch_field($res));\n    var_dump(mysqli_field_seek($res, 0));\n    var_dump(mysqli_fetch_field($res));\n    var_dump(mysqli_field_seek($res, 1));\n    $field = mysqli_fetch_field($res);\n    var_dump($field);\n    /* label column, result set charset */\n    if ($field->charsetnr != $charsetInfo->number) {\n        printf(\"[004] Expecting charset %s/%d got %d\\n\",\n            $charsetInfo->charset, $charsetInfo->number, $field->charsetnr);\n    }\n    if ($field->length != $charsetInfo->max_length) {\n        printf(\"[005] Expecting length %d got %d\\n\",\n            $charsetInfo->max_length, $field->max_length);\n    }\n    var_dump(mysqli_field_tell($res));\n    try {\n        var_dump(mysqli_field_seek($res, 2));\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    var_dump(mysqli_fetch_field($res));\n    mysqli_free_result($res);\n    if (!$res = mysqli_query($link, \"SELECT NULL as _null\", MYSQLI_STORE_RESULT)) {\n        printf(\"[005] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    }\n    var_dump(mysqli_field_seek($res, 0));\n    var_dump(mysqli_fetch_field($res));\n    mysqli_free_result($res);\n    try {\n        mysqli_field_seek($res, 0);\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
