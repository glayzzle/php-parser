// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_fetch_non_select.phpt
  it("MySQL PDOStatement->execute()/fetch(), Non-SELECT", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db);\n    try {\n        // Emulated PS first\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 1);\n        if (1 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn on emulated prepared statements\\n\");\n        if (!is_object($stmt = $db->query('DESCRIBE test id')))\n            printf(\"[003] Emulated PS, DESCRIBE failed, %s\\n\", var_export($db->errorInfo(), true));\n        $describe = array();\n        $valid = false;\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $describe[] = $row;\n            foreach ($row as $column => $value)\n            if (isset($row['field']) && ($row['field'] == 'id'))\n                $valid = true;\n        }\n        if (empty($describe))\n            printf(\"[004] Emulated PS, DESCRIBE returned no results\\n\");\n        else if (!$valid)\n            printf(\"[005] Emulated PS, DESCRIBE, returned data seems wrong, dumping %s\\n\",\n                var_export($describe, true));\n        if (!is_object($stmt = $db->query('SHOW ENGINES')))\n            printf(\"[006] Emulated PS, SHOW failed, %s\\n\", var_export($db->errorInfo(), true));\n        $show = array();\n        $valid = false;\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $show[] = $row;\n            foreach ($row as $column => $value)\n                // MyISAM engine should be part of _every_ MySQL today\n                if ($value == 'MyISAM')\n                    $valid = true;\n        }\n        if (empty($show))\n            printf(\"[007] Emulated PS, SHOW returned no results\\n\");\n        else if (!$valid)\n            printf(\"[008] Emulated PS, SHOW data seems wrong, dumping %s\\n\",\n                var_export($show, true));\n        if (!is_object($stmt = $db->query(\"EXPLAIN SELECT id FROM test\")))\n            printf(\"[009] Emulated PS, EXPLAIN returned no results\\n\");\n        $explain = array();\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC))\n            $explain[] = $row;\n        if (empty($explain))\n            printf(\"[010] Emulated PS, EXPLAIN returned no results\\n\");\n        // And now native PS\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[011] Unable to turn off emulated prepared statements\\n\");\n        $native_support = 'no';\n        if ($db->exec(\"PREPARE mystmt FROM 'DESCRIBE test id'\")) {\n            $native_support = 'yes';\n            $db->exec('DEALLOCATE PREPARE mystmt');\n        }\n        if (!is_object($stmt = $db->query('DESCRIBE test id')))\n            printf(\"[012] Native PS (native support: %s), DESCRIBE failed, %s\\n\",\n                $native_support,\n                var_export($db->errorInfo(), true));\n        $describe_native = array();\n        $valid = false;\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $describe_native[] = $row;\n            foreach ($row as $column => $value)\n            if (isset($row['field']) && ($row['field'] == 'id'))\n                $valid = true;\n        }\n        if (empty($describe_native))\n            printf(\"[013] Native PS (native support: %s), DESCRIBE returned no results\\n\",\n                $native_support);\n        else if (!$valid)\n            printf(\"[014] Native PS (native support: %s), DESCRIBE, returned data seems wrong, dumping %s\\n\",\n                $native_support,\n                var_export($describe_native, true));\n        if ($describe != $describe_native)\n            printf(\"[015] Emulated and native PS (native support: %s) results of DESCRIBE differ: %s vs. %s\\n\",\n                $native_support,\n                var_export($describe, true),\n                var_export($describe_native, true));\n        $native_support = 'no';\n        if ($db->exec(\"PREPARE mystmt FROM 'SHOW ENGINES'\")) {\n            $native_support = 'yes';\n            $db->exec('DEALLOCATE PREPARE mystmt');\n        }\n        if (!is_object($stmt = $db->query('SHOW ENGINES')))\n            printf(\"[016] Native PS (native support: %s), SHOW failed, %s\\n\",\n                $native_support,\n                var_export($db->errorInfo(), true));\n        $show_native = array();\n        $valid = false;\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $show_native[] = $row;\n            foreach ($row as $column => $value)\n                // MyISAM engine should be part of _every_ MySQL today\n                if ($value == 'MyISAM')\n                    $valid = true;\n        }\n        if (empty($show_native))\n            printf(\"[017] Native PS (native support: %s), SHOW returned no results\\n\",\n                $native_support);\n        else if (!$valid)\n            printf(\"[018] Native PS (native support: %s), SHOW data seems wrong, dumping %s\\n\",\n                var_export($show_native, true));\n        if ($show != $show_native)\n            printf(\"Native PS (native support: %s) and emulated PS returned different data for SHOW: %s vs. %s\\n\",\n                $native_support,\n                var_export($show, true),\n                var_export($show_native, true));\n        $native_support = 'no';\n        if ($db->exec(\"PREPARE mystmt FROM 'EXPLAIN SELECT id FROM test'\")) {\n            $native_support = 'yes';\n            $db->exec('DEALLOCATE PREPARE mystmt');\n        }\n        if (!is_object($stmt = $db->query(\"EXPLAIN SELECT id FROM test\")))\n            printf(\"[012] Native PS (native support: %s), EXPLAIN failed, %s\\n\",\n                $native_support,\n                var_export($db->errorInfo(), true));\n        $explain_native = array();\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC))\n            $explain_native[] = $row;\n        if (empty($explain_native))\n            printf(\"[013] Native PS (native support: %s), EXPLAIN returned no results\\n\",\n                $native_support);\n        if ($explain != $explain_native)\n            printf(\"Native PS (native support: %s) and emulated PS returned different data for EXPLAIN: %s vs. %s\\n\",\n                $native_support,\n                var_export($explain, true),\n                var_export($explain_native, true));\n        $stmt->execute();\n        $explain_native = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        if ($explain != $explain_native)\n            printf(\"Native PS (native support: %s) and emulated PS returned different data for EXPLAIN: %s vs. %s\\n\",\n                $native_support,\n                var_export($explain, true),\n                var_export($explain_native, true));\n        $stmt->execute();\n        $stmt->execute();\n        // libmysql needs this - otherwise we get a 2015 error\n        if (!MYSQLPDOTest::isPDOMySQLnd())\n            $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\\n\";\n?>")).toMatchSnapshot();
  });
});
