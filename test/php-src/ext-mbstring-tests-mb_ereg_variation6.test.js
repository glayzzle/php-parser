// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_ereg_variation6.phpt
  it("Test mb_ereg() function : usage variations - match special characters", function () {
    expect(parser.parseCode("<?php\n/*\n * Test how mb_ereg() matches special characters for $pattern\n */\necho \"*** Testing mb_ereg() : usage variations ***\\n\";\nif(mb_regex_encoding('utf-8') == true) {\n    echo \"Regex encoding set to utf-8\\n\";\n} else {\n    echo \"Could not set regex encoding to utf-8\\n\";\n}\n$regex_char = array ('\\w+' => '\\w+',\n                     '\\W+' => '\\W+',\n                     '\\s+' => '\\s+',\n                     '\\S+' => '\\S+',\n                     '\\d+' => '\\d+',\n                     '\\D+' => '\\D+',\n                     '\\b' =>  '\\b',\n                     '\\B' =>  '\\B');\n$string_ascii = 'This is an English string. 0123456789.';\n$string_mb = base64_decode('5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZ44CCMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII=');\nforeach ($regex_char as $displayChar => $char) {\n    echo \"\\n--** Pattern is: $displayChar **--\\n\";\n    if (@$regs_ascii || @$regs_mb) {\n        $regs_ascii = null;\n        $regs_mb = null;\n    }\n    echo \"-- ASCII String: --\\n\";\n    var_dump(mb_ereg($char, $string_ascii, $regs_ascii));\n    base64_encode_var_dump($regs_ascii);\n    echo \"-- Multibyte String: --\\n\";\n    var_dump(mb_ereg($char, $string_mb, $regs_mb));\n    base64_encode_var_dump($regs_mb);\n}\n/**\n * replicate a var dump of an array but outputted string values are base64 encoded\n *\n * @param array $regs\n */\nfunction base64_encode_var_dump($regs) {\n    if ($regs) {\n        echo \"array(\" . count($regs) . \") {\\n\";\n        foreach ($regs as $key => $value) {\n            echo \"  [$key]=>\\n  \";\n            if (is_string($value)) {\n                var_dump(base64_encode($value));\n            } else {\n                var_dump($value);\n            }\n        }\n        echo \"}\\n\";\n    } else {\n        echo \"NULL\\n\";\n    }\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
