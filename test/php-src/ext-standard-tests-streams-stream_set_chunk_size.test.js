// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/streams/stream_set_chunk_size.phpt
  it("stream_set_chunk_size basic tests", function () {
    expect(parser.parseCode("<?php\nclass test_wrapper {\n    function stream_open($path, $mode, $openedpath) {\n        return true;\n    }\n    function stream_eof() {\n        return false;\n    }\n    function stream_read($count) {\n        echo \"read with size: \", $count, \"\\n\";\n        return str_repeat('a', $count);\n    }\n    function stream_write($data) {\n        echo \"write with size: \", strlen($data), \"\\n\";\n        return strlen($data);\n    }\n    function stream_set_option($option, $arg1, $arg2) {\n        echo \"option: \", $option, \", \", $arg1, \", \", $arg2, \"\\n\";\n        return false;\n    }\n}\nvar_dump(stream_wrapper_register('test', 'test_wrapper'));\n$f = fopen(\"test://foo\",\"r\");\n/* when the chunk size is 1, the read buffer is skipped, but the\n * the writes are made in chunks of size 1 (business as usual)\n * This should probably be revisited */\necho \"should return previous chunk size (8192)\\n\";\nvar_dump(stream_set_chunk_size($f, 1));\necho \"should be read without buffer (\\$count == 10000)\\n\";\nvar_dump(strlen(fread($f, 10000)));\necho \"should have no effect on writes\\n\";\nvar_dump(fwrite($f, str_repeat('b', 3)));\necho \"should return previous chunk size (1)\\n\";\nvar_dump(stream_set_chunk_size($f, 100));\necho \"should elicit one read of size 100 (chunk size)\\n\";\nvar_dump(strlen(fread($f, 250)));\necho \"should elicit one read of size 100 (chunk size)\\n\";\nvar_dump(strlen(fread($f, 50)));\necho \"should elicit no read because there is sufficient cached data\\n\";\nvar_dump(strlen(fread($f, 50)));\necho \"should have no effect on writes\\n\";\nvar_dump(strlen(fwrite($f, str_repeat('b', 250))));\necho \"\\nerror conditions\\n\";\ntry {\n    stream_set_chunk_size($f, 0);\n} catch (ValueError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\ntry {\n    stream_set_chunk_size($f, -1);\n} catch (ValueError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
