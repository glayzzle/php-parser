// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fopencookie.phpt
  it("fopencookie detected and working (or cast mechanism works)", function () {
    expect(parser.parseCode("<?php\n/* This test verifies that the casting mechanism is working correctly.\n * On systems with fopencookie, a FILE* is created around the user\n * stream and that is passed back to the ZE to include.\n * On systems without fopencookie, the stream is fed into a temporary\n * file, and that temporary file is passed back to the ZE.\n * The important thing here is really fopencookie; the glibc people\n * changed the binary interface, so if haven't detected it correctly,\n * you can expect this test to segfault.\n *\n * FIXME: the test really needs something to fseek(3) on the FILE*\n * used internally for this test to be really effective.\n */\nclass userstream {\n    public $position = 0;\n    public $data = \"If you can read this, it worked\";\n    function stream_open($path, $mode, $options, &$opened_path)\n    {\n        return true;\n    }\n    function stream_read($count)\n    {\n        $ret = substr($this->data, $this->position, $count);\n        $this->position += strlen($ret);\n        return $ret;\n    }\n    function stream_tell()\n    {\n        return $this->position;\n    }\n    function stream_eof()\n    {\n        return $this->position >= strlen($this->data);\n    }\n    function stream_seek($offset, $whence)\n    {\n        switch($whence) {\n            case SEEK_SET:\n                if ($offset < strlen($this->data) && $offset >= 0) {\n                    $this->position = $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            case SEEK_CUR:\n                if ($offset >= 0) {\n                    $this->position += $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            case SEEK_END:\n                if (strlen($this->data) + $offset >= 0) {\n                    $this->position = strlen($this->data) + $offset;\n                    return true;\n                } else {\n                    return false;\n                }\n                break;\n            default:\n                return false;\n        }\n    }\n    function stream_stat() {\n        return array('size' => strlen($this->data));\n    }\n    function stream_set_option($option, $arg1, $arg2) {\n        return false;\n    }\n}\nstream_wrapper_register(\"cookietest\", \"userstream\");\ninclude(\"cookietest://foo\");\n?>")).toMatchSnapshot();
  });
});
