// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/bug54384.phpt
  it("Bug #54384: Several SPL classes crash when the parent constructor is not called", function () {
    expect(parser.parseCode("<?php\nfunction test($f) {\n    try {\n        $f();\n        echo \"ran normally (unexpected)\\n\\n\";\n    } catch (\\Error $e) {\n        echo \"Error (expected)\\n\";\n    }\n}\necho \"IteratorIterator... \";\nclass IteratorIteratorTest extends IteratorIterator {\n    function __construct(){}\n}\ntest( function() {\n    $o = new IteratorIteratorTest;\n    $o->rewind();\n} );\necho \"FilterIterator... \";\nclass FilterIteratorTest extends FilterIterator {\n    function __construct(){}\n    function accept(): bool {}\n}\ntest( function() {\n    $o = new FilterIteratorTest;\n    $o->rewind();\n} );\necho \"RecursiveFilterIterator... \";\nclass RecursiveFilterIteratorTest extends RecursiveFilterIterator {\n    function __construct(){}\n    function accept(): bool {}\n}\ntest( function() {\n$o = new RecursiveFilterIteratorTest;\n$o->hasChildren();\n} );\necho \"ParentIterator... \";\nclass ParentIteratorTest extends ParentIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new ParentIteratorTest;\n$o->accept();\n} );\necho \"LimitIterator... \";\nclass LimitIteratorTest extends LimitIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new LimitIteratorTest;\n$o->rewind();\n} );\necho \"CachingIterator... \";\nclass CachingIteratorTest extends CachingIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new CachingIteratorTest;\n$o->rewind();\n} );\necho \"RecursiveCachingIterator... \";\nclass RecursiveCachingIteratorTest extends RecursiveCachingIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new RecursiveCachingIteratorTest;\n$o->rewind();\n} );\necho \"NoRewindIterator... \";\nclass NoRewindIteratorTest extends NoRewindIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new NoRewindIteratorTest;\n$o->valid();\n} );\necho \"RegexIterator... \";\nclass RegexIteratorTest extends RegexIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new RegexIteratorTest;\n$o->rewind();\n} );\necho \"RecursiveRegexIterator... \";\nclass RecursiveRegexIteratorTest extends RecursiveRegexIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new RecursiveRegexIteratorTest;\n$o->hasChildren();\n} );\necho \"GlobIterator... \";\nclass GlobIteratorTest extends GlobIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new GlobIteratorTest;\n$o->count();\n} );\necho \"SplFileObject... \";\nclass SplFileObjectTest extends SplFileObject {\n    function __construct(){}\n}\ntest ( function() {\n$o = new SplFileObjectTest;\n$o->rewind();\n} );\necho \"SplTempFileObject... \";\nclass SplTempFileObjectTest extends SplTempFileObject {\n    function __construct(){}\n}\ntest ( function() {\n$o = new SplTempFileObjectTest;\n$o->rewind();\n} );\necho \"AppendIterator... \";\nclass AppendIteratorTest extends AppendIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new AppendIteratorTest;\nforeach ($o as $a) {\necho $a,\"\\n\";\n}\n} );\necho \"InfiniteIterator... \";\nclass InfiniteIteratorTest extends InfiniteIterator {\n    function __construct(){}\n}\ntest ( function() {\n$o = new InfiniteIteratorTest;\nforeach ($o as $a) {\necho $a,\"\\n\";\n}\n} );\n?>")).toMatchSnapshot();
  });
});
