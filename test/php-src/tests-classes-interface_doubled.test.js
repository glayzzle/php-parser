// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/classes/interface_doubled.phpt
  it("ZE2 An interface extends base interfaces", function () {
    expect(parser.parseCode("<?php\ninterface if_a {\n    function f_a();\n}\ninterface if_b {\n    function f_b();\n}\ninterface if_c extends if_a, if_b {\n    function f_c();\n}\ninterface if_d extends if_a, if_b {\n    function f_d();\n}\ninterface if_e {\n    function f_d();\n}\ninterface if_f extends /*if_e,*/ if_a, if_b, if_c, if_d /*, if_e*/ {\n}\nclass base {\n    function test($class) {\n        echo \"is_a(\" . get_class($this) . \", $class) \". (($this instanceof $class) ? \"yes\\n\" : \"no\\n\");\n    }\n}\necho \"class_a\\n\";\nclass class_a extends base implements if_a {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_a();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_b\\n\";\nclass class_b extends base implements if_a, if_b {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_b();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_c\\n\";\nclass class_c extends base implements if_c {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_c();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_d\\n\";\nclass class_d extends base implements if_d{\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_d();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_e\\n\";\nclass class_e extends base implements if_a, if_b, if_c, if_d {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_e();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_f\\n\";\nclass class_f extends base implements if_e {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_f();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\necho \"class_g\\n\";\nclass class_g extends base implements if_f {\n    function f_a() {}\n    function f_b() {}\n    function f_c() {}\n    function f_d() {}\n    function f_e() {}\n}\n$t = new class_g();\necho $t->test('if_a');\necho $t->test('if_b');\necho $t->test('if_c');\necho $t->test('if_d');\necho $t->test('if_e');\n?>")).toMatchSnapshot();
  });
});
