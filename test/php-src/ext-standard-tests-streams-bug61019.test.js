// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/streams/bug61019.phpt
  it("Bug #61019 (Out of memory on command stream_get_contents)", function () {
    expect(parser.parseCode("<?php\necho \"Test\\n\";\n$descriptorspec = array(\n    0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n    1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n    2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n);\n$process=proc_open(\"echo testtext\",$descriptorspec,$pipes);\nif(is_resource($process))\n{\n    stream_set_blocking($pipes[0],false);\n    stream_set_blocking($pipes[1],false);\n    stream_set_blocking($pipes[2],false);\n    stream_set_write_buffer($pipes[0],0);\n    stream_set_read_buffer($pipes[1],0);\n    stream_set_read_buffer($pipes[2],0);\n    $stdin_stream=\"\";\n    $stderr_stream=\"\";\n    echo \"External command executed\\n\";\n    do\n    {\n        $process_state=proc_get_status($process);\n        $tmp_stdin=stream_get_contents($pipes[1]);\n        if($tmp_stdin)\n        {\n            $stdin_stream=$stdin_stream.$tmp_stdin;\n        }\n        $tmp_stderr=stream_get_contents($pipes[2]);\n        if($tmp_stderr)\n        {\n            $stderr_stream=$stderr_stream.$tmp_stderr;\n        }\n    } while($process_state['running']);\n    echo \"External command exit: \".$process_state['exitcode'].\"\\n\";\n    //read outstanding data\n    $tmp_stdin=stream_get_contents($pipes[1]);\n    if($tmp_stdin)\n    {\n        $stdin_stream=$stdin_stream.$tmp_stdin;\n    }\n    $tmp_stderr=stream_get_contents($pipes[2]);\n    if($tmp_stderr)\n    {\n        $stderr_stream=$stderr_stream.$tmp_stderr;\n    }\n    fclose ($pipes[0]);\n    fclose ($pipes[1]);\n    fclose ($pipes[2]);\n    proc_close($process);\n    echo \"STDOUT: \".$stdin_stream.\"\\n\";\n    echo \"STDERR: \".$stderr_stream.\"\\n\";\n}\nelse\n{\n    echo \"Can't start external command\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
