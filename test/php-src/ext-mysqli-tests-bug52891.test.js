// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/bug52891.phpt
  it("Bug #52891 (Wrong data inserted with mysqli/mysqlnd when using bind_param,value > LONG_MAX)", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)) {\n        printf(\"[001] Connect failed, [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n    }\n    if (!$link->query(\"DROP TABLE IF EXISTS tuint\") ||\n        !$link->query(\"DROP TABLE IF EXISTS tsint\")) {\n        printf(\"[002] [%d] %s\\n\", $link->errno, $link->error);\n    }\n    if (!$link->query(\"CREATE TABLE tuint(a BIGINT UNSIGNED) ENGINE=\" . $engine) ||\n        !$link->query(\"CREATE TABLE tsint(a BIGINT) ENGINE=\" . $engine)) {\n        printf(\"[003] [%d] %s\\n\", $link->errno, $link->error);\n    }\n    if (!$stmt1 = $link->prepare(\"INSERT INTO tuint VALUES(?)\"))\n        printf(\"[004] [%d] %s\\n\", $link->errno, $link->error);\n    if (!$stmt2 = $link->prepare(\"INSERT INTO tsint VALUES(?)\"))\n        printf(\"[005] [%d] %s\\n\", $link->errno, $link->error);\n    $param = 42;\n    if (!$stmt1->bind_param(\"i\", $param))\n        printf(\"[006] [%d] %s\\n\", $stmt1->errno, $stmt1->error);\n    if (!$stmt2->bind_param(\"i\", $param))\n        printf(\"[007] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    /* first insert normal value to force initial send of types */\n    if (!$stmt1->execute())\n        printf(\"[008] [%d] %s\\n\", $stmt1->errno, $stmt1->error);\n    if\t(!$stmt2->execute())\n        printf(\"[009] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    /* now try values that don't fit in long, on 32bit, new types should be sent or 0 will be inserted */\n    $param = -4294967297;\n    if (!$stmt2->execute())\n        printf(\"[010] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    /* again normal value */\n    $param = 43;\n    if (!$stmt1->execute())\n        printf(\"[011] [%d] %s\\n\", $stmt1->errno, $stmt1->error);\n    if\t(!$stmt2->execute())\n        printf(\"[012] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    /* again conversion */\n    $param = -4294967295;\n    if (!$stmt2->execute())\n        printf(\"[013] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    $param = 4294967295;\n    if (!$stmt1->execute())\n        printf(\"[014] [%d] %s\\n\", $stmt1->errno, $stmt1->error);\n    if\t(!$stmt2->execute())\n        printf(\"[015] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    $param = 4294967297;\n    if (!$stmt1->execute())\n        printf(\"[016] [%d] %s\\n\", $stmt1->errno, $stmt1->error);\n    if\t(!$stmt2->execute())\n        printf(\"[017] [%d] %s\\n\", $stmt2->errno, $stmt2->error);\n    $result = $link->query(\"SELECT * FROM tsint ORDER BY a ASC\");\n    $result2 = $link->query(\"SELECT * FROM tuint ORDER BY a ASC\");\n    echo \"tsint:\\n\";\n    while ($row = $result->fetch_assoc()) {\n        var_dump($row);\n    }\n    echo \"tuint:\\n\";\n    while ($row = $result2->fetch_assoc()) {\n        var_dump($row);\n    }\n    echo \"done\";\n?>")).toMatchSnapshot();
  });
});
