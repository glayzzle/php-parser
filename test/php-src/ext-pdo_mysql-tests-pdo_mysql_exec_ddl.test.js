// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_exec_ddl.phpt
  it("MySQL PDO->exec(), affected rows", function () {
    expect(parser.parseCode("<?php\n    function exec_and_count($offset, &$db, $sql, $exp, $suppress_warning = false) {\n        try {\n            if ($suppress_warning)\n                $ret = @$db->exec($sql);\n            else\n                $ret = $db->exec($sql);\n            if ($ret !== $exp) {\n                printf(\"[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s\\n\",\n                    $offset, $exp, gettype($exp), $ret, gettype($ret), $sql,\n                    $db->errorCode(), implode(' ', $db->errorInfo()));\n                return false;\n            }\n        } catch (PDOException $e) {\n            printf(\"[%03d] '%s' has failed, [%s] %s\\n\",\n                $offset, $sql, $db->errorCode(), implode(' ', $db->errorInfo()));\n            return false;\n        }\n        return true;\n    }\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    /* affected rows related */\n    try {\n        @$db->exec('DROP DATABASE IF EXISTS pdo_exec_ddl');\n        @$db->exec('DROP DATABASE IF EXISTS pdo_exec_ddl2');\n        if (1 === @$db->exec('CREATE DATABASE pdo_exec_ddl')) {\n            // yippie - we can create databases etc.\n            exec_and_count(3, $db, 'ALTER DATABASE pdo_exec_ddl CHARACTER SET latin1', 1);\n        }\n        exec_and_count(4, $db, 'DROP TABLE IF EXISTS pdo_exec_ddl', 0);\n        exec_and_count(5, $db, 'DROP TABLE IF EXISTS pdo_exec_ddl2', 0);\n        if (0 === $db->exec('CREATE TABLE pdo_exec_ddl(id INT, col1 CHAR(2))')) {\n            exec_and_count(5, $db, 'CREATE INDEX idx1 ON pdo_exec_ddl(id)', 0);\n            exec_and_count(6, $db, 'DROP INDEX idx1 ON pdo_exec_ddl', 0);\n            exec_and_count(7, $db, 'ALTER TABLE pdo_exec_ddl DROP id', 0);\n            exec_and_count(8, $db, 'ALTER TABLE pdo_exec_ddl ADD id INT', 0);\n            exec_and_count(9, $db, 'ALTER TABLE pdo_exec_ddl ALTER id SET DEFAULT 1', 0);\n            exec_and_count(10, $db, 'RENAME TABLE pdo_exec_ddl TO pdo_exec_ddl2', 0);\n        }\n        /*\n        11.1.2. ALTER LOGFILE GROUP Syntax\n        11.1.3. ALTER SERVER Syntax\n        11.1.5. ALTER TABLESPACE Syntax\n        11.1.8. CREATE LOGFILE GROUP Syntax\n        11.1.9. CREATE SERVER Syntax\n        11.1.11. CREATE TABLESPACE Syntax\n        11.1.14. DROP LOGFILE GROUP Syntax\n        11.1.15. DROP SERVER Syntax\n        11.1.17. DROP TABLESPACE Syntax\n        */\n    } catch (PDOException $e) {\n        printf(\"[001] %s, [%s] %s\\n\",\n            $e->getMessage(),\n            $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";")).toMatchSnapshot();
  });
});
