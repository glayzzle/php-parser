// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/readlink_realpath_variation1.phpt
  it("Test readlink() and realpath() functions: usage variation - linkname/filename stored in object(Bug #42038)", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing readlink() and realpath() : usage variations ***\\n\";\n$name_prefix = __DIR__;\n$filename = \"$name_prefix/readlink_realpath_variation1/home/tests/link/readlink_realpath_variation1.tmp\";\nmkdir(\"$name_prefix/readlink_realpath_variation1/home/tests/link/\", 0777, true);\necho \"\\n*** Testing readlink() and realpath() with linkname stored inside a object ***\\n\";\n// create a temp file\n$file_handle = fopen($filename, \"w\");\nfclose($file_handle);\n// creating object with members as linkname\nclass object_temp {\n  public $linkname;\n  function __construct($link) {\n    $this->linkname = $link;\n  }\n}\n$obj1 = new object_temp(\"$name_prefix/readlink_realpath_variation1/../././readlink_realpath_variation1/home/readlink_realpath_variation1_link.tmp\");\n$obj2 = new object_temp(\"$name_prefix/readlink_realpath_variation1/home/../..///readlink_realpath_variation1_link.tmp\");\necho \"\\n-- Testing readlink() and realpath() with softlink, linkname stored inside an object --\\n\";\n// creating the links\nvar_dump( symlink($filename, $obj1->linkname) );\nvar_dump( readlink($obj1->linkname) );\nvar_dump( realpath($obj1->linkname) );\nvar_dump( symlink($filename, $obj2->linkname) );\nvar_dump( readlink($obj2->linkname) );\nvar_dump( realpath($obj2->linkname) );\n// deleting the link\nunlink($obj1->linkname);\nunlink($obj2->linkname);\necho \"\\n-- Testing readlink() and realpath() with hardlink, linkname stored inside an object --\\n\";\n// creating hard links\nvar_dump( link($filename, $obj1->linkname) );\nvar_dump( readlink($obj1->linkname) );   // invalid because readlink doesn't work with hardlink\nvar_dump( realpath($obj1->linkname) );\nvar_dump( link($filename, $obj2->linkname) );\nvar_dump( readlink($obj2->linkname) );   // invalid because readlink doesn't work with hardlink\nvar_dump( realpath($obj2->linkname) );\n// delete the links\nunlink($obj1->linkname);\nunlink($obj2->linkname);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
