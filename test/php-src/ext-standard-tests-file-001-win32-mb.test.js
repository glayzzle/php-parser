// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/001-win32-mb.phpt
  it("File type functions", function () {
    expect(parser.parseCode("<?php\nchdir(__DIR__);\n$fname = 'test_私はガラスを食べられます.file';\n@unlink($fname);\nif (file_exists($fname)) {\n    echo \"$fname exists\\n\";\n} else {\n    echo \"$fname does not exist\\n\";\n}\nfclose (fopen($fname, 'w'));\nchmod ($fname, 0744);\nif (file_exists($fname)) {\n    echo \"$fname exists\\n\";\n} else {\n    echo \"$fname does not exist\\n\";\n}\nif (is_link($fname)) {\n    echo \"$fname is a symlink\\n\";\n} else {\n    echo \"$fname is not a symlink\\n\";\n}\nif (file_exists($fname)) {\n    echo \"$fname exists\\n\";\n} else {\n    echo \"$fname does not exist\\n\";\n}\n$s = stat ($fname);\n$ls = lstat ($fname);\nfor ($i = 0; $i <= 12; $i++) {\n    if ($ls[$i] != $s[$i]) {\n        echo \"$fname lstat and stat differ at element $i\\n\";\n    }\n}\necho \"$fname is \" . filetype($fname) . \"\\n\";\nprintf (\"$fname permissions are 0%o\\n\", 0777 & fileperms($fname));\necho \"$fname size is \" . filesize($fname) . \"\\n\";\nif (is_writeable($fname)) {\n    echo \"$fname is writeable\\n\";\n} else {\n    echo \"$fname is not writeable\\n\";\n}\nif (is_readable($fname)) {\n    echo \"$fname is readable\\n\";\n} else {\n    echo \"$fname is not readable\\n\";\n}\nif (is_file($fname)) {\n    echo \"$fname is a regular file\\n\";\n} else {\n    echo \"$fname is not a regular file\\n\";\n}\nif (is_dir('../file')) {\n    echo \"../file is a directory\\n\";\n} else {\n    echo \"../file is not a directory\\n\";\n}\nif (is_dir($fname)) {\n    echo \"$fname is a directory\\n\";\n} else {\n    echo \"$fname is not a directory\\n\";\n}\nunlink($fname);\nif (file_exists($fname)) {\n    echo \"$fname exists (cached)\\n\";\n} else {\n    echo \"$fname does not exist\\n\";\n}\nclearstatcache();\nif (file_exists($fname)) {\n    echo \"$fname exists\\n\";\n} else {\n    echo \"$fname does not exist\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
