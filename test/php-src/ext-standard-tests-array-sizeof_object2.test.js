// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/sizeof_object2.phpt
  it("Test sizeof() function : object functionality - objects without Countable interface", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing sizeof() : object functionality ***\\n\";\necho \"--- Testing sizeof() with objects which doesn't implement Countable interface ---\\n\";\n// class without member\nclass test\n{\n  // no members\n}\n// class with only members and with out member functions\nclass test1\n{\n  public $member1;\n  var $var1;\n  private $member2;\n  protected $member3;\n  // no member functions\n}\n// class with only member functions\nclass test2\n{\n  // no data members\n  public function display()\n  {\n    echo \" Class Name : test2\\n\";\n  }\n}\n// child class which inherits parent test2\nclass child_test2 extends test2\n{\n  public $child_member1;\n  private $child_member2;\n}\n// abstract class\nabstract class abstract_class\n{\n  public $member1;\n  private $member2;\n  abstract protected function display();\n}\n// implement abstract 'abstract_class' class\nclass concrete_class extends abstract_class\n{\n  protected function display()\n  {\n    echo \" class name is : concrete_class \\n \";\n  }\n}\n$objects = array (\n  /* 1  */  new test(),\n            new test1(),\n            new test2(),\n            new child_test2(),\n  /* 5  */  new concrete_class()\n);\n$counter = 1;\nfor($i = 0; $i < count($objects); $i++)\n{\n  echo \"-- Iteration $counter --\\n\";\n  $var = $objects[$i];\n  echo \"Default Mode: \";\n  try {\n    var_dump( sizeof($var) );\n  } catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n  }\n  echo \"COUNT_NORMAL Mode: \";\n  try {\n    var_dump( sizeof($var, COUNT_NORMAL) );\n  } catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n  }\n  echo \"COUNT_RECURSIVE Mode: \";\n  try {\n    var_dump( sizeof($var, COUNT_RECURSIVE) );\n  } catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n  }\n  $counter++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
