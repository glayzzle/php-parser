// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/opcache/tests/jit/bug80861.phpt
  it("Bug #80839: PHP problem with JIT", function () {
    expect(parser.parseCode("<?php\ndeclare(strict_types=1);\n// --------------------------------------------------------------------\nclass Node\n{\n    public $column = null;\n    public $left = null;\n    public $right = null;\n    public $up = null;\n    public $down = null;\n    public static function joinLR(Node $a, Node $b): void\n    {\n        $a->right = $b;\n        $b->left = $a;\n    }\n    public static function joinDU(Node $a, Node $b): void\n    {\n        $a->up = $b;\n        $b->down = $a;\n    }\n}\n// --------------------------------------------------------------------\nclass Column extends Node\n{\n    public function __construct()\n    {\n        $this->column = $this;\n        $this->up = $this;\n        $this->down = $this;\n    }\n}\n// --------------------------------------------------------------------\nclass Matrix\n{\n    public $head = null;\n    public function __construct()\n    {\n        $this->head = new Node();\n        Node::joinLR($this->head, $this->head);\n    }\n    // $from is array[][] of bool\n    public static function fromArray(array $from): Matrix\n    {\n        $m = new Matrix();\n        $rowCount = count($from);\n        if ($rowCount == 0) {\n            return $m;\n        }\n        $columnCount = count($from[0]);\n        if ($columnCount == 0) {\n            return $m;\n        }\n        // we generate 2D double linked circular list of nodes from the input 2D bool array\n        // might be not relevant for the bug\n        $c = new Column();\n        Node::joinLR($m->head, $c);\n        for ($j = 1; $j < $columnCount; $j++) {\n            $nextCol = new Column();\n            Node::joinLR($c, $nextCol);\n            $c = $c->right;\n        }\n        Node::joinLR($c, $m->head);\n        $c = $m->head->right;\n        error_log(\"These are the array bounds: $rowCount * $columnCount\");\n        for ($j = 0; $j < $columnCount; $j++) {\n            $prev = $c;\n            for ($i = 0; $i < $rowCount; $i++) {\n                // next line generates the warnings despite $i and $j is within bounds\n                if ($from[$i][$j]) {\n                    $node = new Node();\n                    $node->column = $c;\n                    Node::joinDU($node, $prev);\n                    Node::joinLR($node, $node);\n                    $prev = $node;\n                    // ... code to generate $m excluded\n                }\n            }\n            Node::joinDU($c, $prev);\n            $c = $c->right;\n        }\n        return $m;\n    }\n}\n// --------------------------------------------------------------------\n// simple driver code - fills up a 2D bool matrix and calls the static matrix constructing function above\nfor ($y = 0; $y < 10; $y++) {\n    for ($x = 0; $x < 10; $x++) {\n        $a[$y][$x] = true;\n    }\n}\n$m = Matrix::fromArray($a);")).toMatchSnapshot();
  });
});
