// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_fetch_field_types.phpt
  it("mysqli_fetch_field() - data types/field->type", function () {
    expect(parser.parseCode("<?php\n    require('table.inc');\n    function mysqli_field_datatypes($link, $sql_type, $php_value, $php_type, $datatypes, $default_charset=\"latin1\") {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[001] %s, [%d] %s\\n\", $sql_type,\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        $create = sprintf(\"CREATE TABLE test(id %s) DEFAULT CHARSET %s\", $sql_type, $default_charset);\n        if (!mysqli_query($link, $create)) {\n            printf(\"[002] '%s' - '%s', [%d] %s\\n\", $sql_type, $create,\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (is_string($php_value))\n            $sql = sprintf(\"INSERT INTO test(id) VALUES ('%s')\", $php_value);\n        else\n            $sql = sprintf(\"INSERT INTO test(id) VALUES (%s)\", $php_value);\n        if (!mysqli_query($link, $sql)) {\n            printf(\"[003] '%s' - '%s' - '%s', [%d] %s\\n\", $sql_type, $create, $sql,\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!$res = mysqli_query($link, 'SELECT id FROM test')) {\n            printf(\"[004] %s, [%d] %s\\n\", $sql_type,\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!is_object($field = mysqli_fetch_field($res))) {\n            printf(\"[004] %s, expecting object got %s, [%d] %s\\n\", $sql_type,\n                gettype($field),\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if ($field->type != $php_type) {\n            $code_name = 'unknown';\n            foreach ($datatypes as $k => $v) {\n                if ($k == $field->type) {\n                    $code_name = (is_array($v)) ? $v[0] : $v;\n                    break;\n                }\n            }\n            printf(\"[006] Expecting %d for %s got code %d for %s\\n\",\n                $php_type, $sql_type, $field->type, $code_name);\n            return false;\n        }\n        return true;\n    }\n    $datatypes = array(\n        MYSQLI_TYPE_TINY => array('TINYINT', 5),\n        MYSQLI_TYPE_SHORT => array('SMALLINT', 10),\n        MYSQLI_TYPE_LONG => 'MYSQLI_TYPE_LONG - TODO add testing',\n        MYSQLI_TYPE_FLOAT => array('FLOAT', '1.3'),\n        MYSQLI_TYPE_DOUBLE => array('DOUBLE', '1.4'),\n        MYSQLI_TYPE_TIMESTAMP => array('TIMESTAMP', '2007-08-20 18:34:00'),\n        MYSQLI_TYPE_LONGLONG => array('BIGINT', 100),\n        MYSQLI_TYPE_INT24\t=> array('MEDIUMINT', 10),\n        MYSQLI_TYPE_DATE => array('DATE', '2007-08-20'),\n        MYSQLI_TYPE_TIME => array('TIME', '18:41:38'),\n        MYSQLI_TYPE_DATETIME => array('DATETIME', '2007-08-20 18:42:01'),\n        MYSQLI_TYPE_YEAR => array('YEAR', '2007'),\n        MYSQLI_TYPE_ENUM => array('ENUM(\"everything\", \"is\", \"just\", \"wonderful\")', 'is'),\n        // MYSQLI_TYPE_SET\t=> array('SET(\"I\", \"smash\", \"the\")', 'I,smash,the'), - string\n        // MYSQLI_TYPE_TINY_BLOB => array(\"TINYBLOB\", \"I got a tiny blog\"), - blob\n        // MYSQLI_TYPE_MEDIUM_BLOB => array(\"MEDIUMBLOB\", \"No blob for masses\"), - blob\n        // MYSQLI_TYPE_LONG_BLOB => array(\"LONGBLOB\", \"Small is beautiful?\"), - blob\n        MYSQLI_TYPE_BLOB => array(\"LONGBLOB\", 'MySQL does not report proper type. Use Length to distinct BLOB types'),\n        MYSQLI_TYPE_BLOB => array(\"MEDIUMBLOB\", 'MySQL does not report proper type. Use Length to distinct BLOB types'),\n        MYSQLI_TYPE_BLOB => array(\"TINYBLOB\", 'MySQL does not report proper type. Use Length to distinct BLOB types'),\n        MYSQLI_TYPE_BLOB => array(\"BLOB\", 'silly'),\n        MYSQLI_TYPE_VAR_STRING => array(\"VARCHAR(32768)\", 'varchar'),\n        MYSQLI_TYPE_STRING => 'MYSQLI_TYPE_STRING - TODO add testing',\n        MYSQLI_TYPE_STRING => array('CHAR(1)', 'a'),\n        MYSQLI_TYPE_STRING => array(\"SET('I', 'smash', 'the')\", 'smash'),\n        MYSQLI_TYPE_NULL => 'MYSQLI_TYPE_NULL - TODO add testing',\n        MYSQLI_TYPE_NEWDATE => 'MYSQLI_TYPE_NEWDATE - TODO add testing',\n        MYSQLI_TYPE_INTERVAL => 'MYSQLI_TYPE_INTERVAL - TODO add testing',\n        MYSQLI_TYPE_GEOMETRY => 'MYSQLI_TYPE_GEOMETRY - TODO add testing',\n    );\n    $datatypes[MYSQLI_TYPE_NEWDECIMAL] = array('DECIMAL', '1.1');\n    $datatypes[MYSQLI_TYPE_BIT] = array('BIT', 0);\n    foreach ($datatypes as $php_type => $datatype) {\n        if (is_array($datatype))\n            mysqli_field_datatypes($link, $datatype[0], $datatype[1], $php_type, $datatypes);\n    }\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
