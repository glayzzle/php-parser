// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/magic_methods_inheritance_rules.phpt
  it("Magic Methods inheritance rules", function () {
    expect(parser.parseCode("<?php\nclass ValidMagicMethods {\n    public function __call(string $name, array $arguments): mixed {}\n    public static function __callStatic(string $name, array $arguments): mixed {}\n    public function __clone(): void {}\n    public function __debugInfo(): ?array {}\n    public function __get(string $name): mixed {}\n    public function __invoke(mixed $arguments): mixed {}\n    public function __isset(string $name): bool {}\n    public function __serialize(): array {}\n    public function __set(string $name, mixed $value): void {}\n    public static function __set_state(array $properties): object {}\n    public function __sleep(): array {}\n    public function __toString(): string {}\n    public function __unserialize(array $data): void {}\n    public function __unset(string $name): void {}\n    public function __wakeup(): void {}\n}\nclass NarrowedReturnType extends ValidMagicMethods {\n    public function __call(string $name, array $arguments): string|float|null {}\n    public static function __callStatic(string $name, array $arguments): ?array {}\n    public function __debugInfo(): array {}\n    public function __get(string $name): int|string {}\n    public function __invoke(mixed $arguments): object {}\n}\nclass WidenedArgumentType extends NarrowedReturnType {\n    public function __call(string|array $name, array|string $arguments): string|float|null {}\n    public static function __callStatic(string|object $name, array|object $arguments): ?array {}\n    public function __get(string|array $name): int|string {}\n    public function __isset(string|bool $name): bool {}\n    public function __set(string|bool|float $name, mixed $value): void {}\n    public static function __set_state(string|array $properties): object {}\n    public function __unserialize(array|string $data): void {}\n    public function __unset(string|array $name): void {}\n}\necho 'No problems!';\n?>")).toMatchSnapshot();
  });
});
