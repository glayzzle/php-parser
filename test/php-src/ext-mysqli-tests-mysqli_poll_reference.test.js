// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_poll_reference.phpt
  it("mysqli_poll() & references", function () {
    expect(parser.parseCode("<?php\n    require_once('connect.inc');\n    function get_connection() {\n        global $host, $user, $passwd, $db, $port, $socket;\n        if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n            printf(\"[001] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n        return $link;\n    }\n    $mysqli1 = get_connection();\n    $mysqli2 = get_connection();\n    var_dump(mysqli_query($mysqli1, \"SELECT SLEEP(0.10)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    var_dump(mysqli_query($mysqli2, \"SELECT SLEEP(0.20)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    $processed = $loops = 0;\n    do {\n        $loops++;\n        if ($loops > 10) {\n            printf(\"[002] The queries should have finished already\\n\");\n            break;\n        }\n        // WARNING: All arrays point to the same object - this will give bogus results!\n        // The behaviour is in line with stream_select(). Be warned, be careful.\n        $links = $errors = $reject = array($mysqli1, $mysqli2);\n        if (0 == ($ready = mysqli_poll($links, $errors, $reject, 0, 50000))) {\n            continue;\n        }\n        foreach ($links as $link) {\n            if ($res = mysqli_reap_async_query($link)) {\n                mysqli_free_result($res);\n            }\n            $processed++;\n        }\n    } while ($processed < 2);\n    mysqli_close($mysqli1);\n    mysqli_close($mysqli2);\n    $mysqli1 = get_connection();\n    $mysqli2 = get_connection();\n    var_dump(mysqli_query($mysqli1, \"SELECT SLEEP(0.10)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    var_dump(mysqli_query($mysqli2, \"SELECT SLEEP(0.20)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    $processed = $loops = 0;\n    do {\n        $loops++;\n        if ($loops > 10) {\n            printf(\"[003] The queries should have finished already\\n\");\n            break;\n        }\n        // WARNING: All arrays point to the same object - this will give bogus results!\n        $links = $errors = array($mysqli1, $mysqli2);\n        $reject = array($mysqli1, $mysqli2);\n        if (0 == ($ready = mysqli_poll($links, $errors, $reject, 0, 50000))) {\n            continue;\n        }\n        foreach ($links as $link) {\n            if ($res = mysqli_reap_async_query($link)) {\n                mysqli_free_result($res);\n            }\n            $processed++;\n        }\n    } while ($processed < 2);\n    mysqli_close($mysqli1);\n    mysqli_close($mysqli2);\n    $mysqli1 = get_connection();\n    $mysqli2 = get_connection();\n    var_dump(mysqli_query($mysqli1, \"SELECT SLEEP(0.10)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    var_dump(mysqli_query($mysqli2, \"SELECT SLEEP(0.20)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    $processed = $loops = 0;\n    do {\n        $loops++;\n        if ($loops > 10) {\n            printf(\"[004] The queries should have finished already\\n\");\n            break;\n        }\n        // WARNING: All arrays point to the same object - this will give bogus results!\n        $links = array($mysqli1, $mysqli2);\n        $errors = $reject = array($mysqli1, $mysqli2);\n        if (0 == ($ready = mysqli_poll($links, $errors, $reject, 0, 50000))) {\n            continue;\n        }\n        foreach ($links as $link) {\n            if ($res = mysqli_reap_async_query($link)) {\n                mysqli_free_result($res);\n            }\n            $processed++;\n        }\n    } while ($processed < 2);\n    mysqli_close($mysqli1);\n    mysqli_close($mysqli2);\n    // This is bogus code and bogus usage - OK to throw no errors!\n    $mysqli1 = get_connection();\n    $mysqli2 = get_connection();\n    var_dump(mysqli_query($mysqli1, \"SELECT SLEEP(0.10)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    $thread_id = mysqli_thread_id($mysqli2);\n    printf(\"Connection %d should be rejected...\\n\", $thread_id);\n    $processed = $loops = 0;\n    do {\n        $loops++;\n        if ($loops > 10) {\n            printf(\"[005] The queries should have finished already\\n\");\n            break;\n        }\n        $links = $errors = $reject = array($mysqli1, $mysqli2);\n        if (0 == ($ready = mysqli_poll($links, $errors, $reject, 0, 50000))) {\n            continue;\n        }\n        // WARNING: Due to the reference issue none of these should ever fire!\n        foreach ($reject as $link) {\n            printf(\"Connection %d was rejected...\\n\", mysqli_thread_id($link));\n            if (mysqli_thread_id($link) != $thread_id) {\n                printf(\"[006] Connector %d should have been rejected. But also %d has been rejected.\",\n                  $thread_id, mysqli_thread_id($link));\n            }\n            $processed++;\n        }\n        foreach ($errors as $link) {\n            printf(\"Connection %d has an error...\\n\", mysqli_thread_id($link));\n            $processed++;\n        }\n        foreach ($links as $link) {\n            if ($res = mysqli_reap_async_query($link)) {\n                mysqli_free_result($res);\n                $processed++;\n            }\n        }\n    } while ($processed < 2);\n    mysqli_close($mysqli1);\n    mysqli_close($mysqli2);\n    $mysqli1 = get_connection();\n    $mysqli2 = get_connection();\n    var_dump(mysqli_query($mysqli1, \"SELECT SLEEP(0.10)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    var_dump(mysqli_query($mysqli2, \"SELECT SLEEP(0.20)\", MYSQLI_ASYNC | MYSQLI_USE_RESULT));\n    $processed = $loops = 0;\n    $all = array($mysqli1, $mysqli2);\n    do {\n        $loops++;\n        if ($loops > 10) {\n            printf(\"[006] The queries should have finished already\\n\");\n            break;\n        }\n        $links = $errors = $reject = $all;\n        ob_start();\n        if (0 == ($ready = mysqli_poll($links, $errors, $reject, 0, 50000))) {\n            $tmp = ob_get_contents();\n            ob_end_clean();\n            if ($tmp != '') {\n                printf(\"Expected error:\\n%s\\n\", $tmp);\n                break;\n            }\n            continue;\n        }\n        foreach ($links as $link) {\n            if ($res = mysqli_reap_async_query($link)) {\n                mysqli_free_result($res);\n            }\n            $processed++;\n        }\n    } while ($processed < 2);\n    $ready = mysqli_poll($links, $errors, $reject, 0, 50000);\n    mysqli_close($mysqli1);\n    mysqli_close($mysqli2);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
