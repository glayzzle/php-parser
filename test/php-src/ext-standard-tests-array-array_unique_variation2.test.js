// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unique_variation2.phpt
  it("Test array_unique() function : usage variations - different arrays for 'input' argument", function () {
    expect(parser.parseCode("<?php\n/*\n* Passing different arrays to $input argument and testing whether\n* array_unique() behaves in an expected way.\n*/\necho \"*** Testing array_unique() : Passing different arrays to \\$input argument ***\\n\";\n/* Different heredoc strings passed as argument to arrays */\n// heredoc with blank line\n$blank_line = <<<EOT\nEOT;\n// heredoc with multiline string\n$multiline_string = <<<EOT\nhello world\nThe quick brown fox jumped over;\nthe lazy dog\nThis is a double quoted string\nEOT;\n// heredoc with different whitespaces\n$diff_whitespaces = <<<EOT\nhello\\r world\\t\n1111\\t\\t != 2222\\v\\v\nheredoc\\ndouble quoted string. with\\vdifferent\\fwhite\\vspaces\nEOT;\n// heredoc with quoted strings and numeric values\n$numeric_string = <<<EOT\n11 < 12. 123 >22\n'single quoted string'\n\"double quoted string\"\n2222 != 1111.\\t 0000 = 0000\\n\nEOT;\n// arrays passed to $input argument\n$inputs = array (\n/*1*/  array(1, 2, 2, 1), // with default keys and numeric values\n       array(1.1, 2.2, 1.1), // with default keys & float values\n       array(false, true, false), // with default keys and boolean values\n       array(), // empty array\n/*5*/  array(NULL, null), // with NULL\n       array(\"a\\v\\f\", \"aaaa\\r\", \"b\", \"aaaa\\r\", \"\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}\"),  // with double quoted strings\n       array('a\\v\\f', 'aaaa\\r', 'b', 'aaaa\\r', '\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}'),  // with single quoted strings\n       array(\"h1\" => $blank_line, \"h2\" => $multiline_string, \"h3\" => $diff_whitespaces, $blank_line),  // with heredocs\n       // associative arrays\n/*9*/  array(1 => \"one\", 2 => \"two\", 2 => \"two\"),  // explicit numeric keys, string values\n       array(\"one\" => 1, \"two\" => 2, \"1\" => 1 ),  // string keys & numeric values\n       array( 1 => 10, 2 => 20, 4 => 40, 5 => 10),  // explicit numeric keys and numeric values\n       array( \"one\" => \"ten\", \"two\" => \"twenty\", \"10\" => \"ten\"),  // string key/value\n       array(\"one\" => 1, 2 => \"two\", 4 => \"four\"),  //mixed\n       // associative array, containing null/empty/boolean values as key/value\n/*14*/ array(NULL => \"NULL\", null => \"null\", \"NULL\" => NULL, \"null\" => null),\n       array(true => \"true\", false => \"false\", \"false\" => false, \"true\" => true),\n       array(\"\" => \"emptyd\", '' => 'emptys', \"emptyd\" => \"\", 'emptys' => ''),\n       array(1 => '', 2 => \"\", 3 => NULL, 4 => null, 5 => false, 6 => true),\n/*18*/ array('' => 1, \"\" => 2, NULL => 3, null => 4, false => 5, true => 6),\n);\n// loop through each sub-array of $inputs to check the behavior of array_unique()\n$iterator = 1;\nforeach($inputs as $input) {\n  echo \"-- Iteration $iterator --\\n\";\n  var_dump( array_unique($input, SORT_STRING) );\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
