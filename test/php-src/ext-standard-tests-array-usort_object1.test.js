// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/usort_object1.phpt
  it("Test usort() function : object functionality - different number of properties", function () {
    expect(parser.parseCode("<?php\n/*\n * Pass an array of objects which have a different number of properties\n * to test behaviour of usort()\n */\necho \"*** Testing usort() : object functionality ***\\n\";\nfunction simple_cmp($value1, $value2)\n{\n    if($value1 == $value2) {\n        return 0;\n    }\n    else if($value1 > $value2) {\n        return 1;\n    }\n    else\n    return -1;\n}\n// comparison function for SimpleClass2 objects which has more than one member\nfunction multiple_cmp($value1, $value2)\n{\n    if($value1->getValue() == $value2->getValue())\n    return 0;\n    else if($value1->getValue() > $value2->getValue())\n    return 1;\n    else\n    return -1;\n}\n// Simple class with single property\nclass SimpleClass1\n{\n    private $int_value;\n    public function __construct($value) {\n        $this->int_value = $value;\n    }\n}\n// Simple class with more than one property\nclass SimpleClass2\n{\n    private $int_value;\n    protected $float_value;\n    public $string_value;\n    public function __construct($int, $float, $str) {\n        $this->int_value = $int;\n        $this->float_value = $float;\n        $this->string_value = $str;\n    }\n    public function getValue() {\n        return $this->int_value;\n    }\n}\n// array of SimpleClass objects with only one property\n$array_arg = array(\n0 => new SimpleClass1(10),\n1 => new SimpleClass1(1),\n2 => new SimpleClass1(100),\n3 => new SimpleClass1(50)\n);\nvar_dump( usort($array_arg, 'simple_cmp') );\nvar_dump($array_arg);\n// array of SimpleClass objects having more than one properties\n$array_arg = array(\n0 => new SimpleClass2(2, 3.4, \"mango\"),\n1 => new SimpleClass2(10, 1.2, \"apple\"),\n2 => new SimpleClass2(5, 2.5, \"orange\"),\n);\nvar_dump( usort($array_arg, 'multiple_cmp') );\nvar_dump($array_arg);\n?>")).toMatchSnapshot();
  });
});
