// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/tempnam_variation3-win32.phpt
  it("Test tempnam() function: usage variations - obscure prefixes", function () {
    expect(parser.parseCode("<?php\n/* Passing invalid/non-existing args for $prefix */\necho \"*** Testing tempnam() with obscure prefixes ***\\n\";\n$file_path = __DIR__.\"/tempnamVar3\";\nif (!mkdir($file_path)) {\n    echo \"Failed, cannot create temp dir $filepath\\n\";\n    exit(1);\n}\n$file_path = realpath($file_path);\n/* An array of prefixes */\n$names_arr = array(\n    /* Valid args (casting)*/\n    -1,\n    TRUE,\n    FALSE,\n    \"\",\n    \" \",\n    \"\\0\",\n    /* Invalid args */\n    array(),\n    /* Valid args*/\n    /* prefix with path separator of a non existing directory*/\n    \"/no/such/file/dir\",\n    \"php/php\"\n);\n$res_arr = array(\n    /* Invalid args */\n    true,\n    true,\n    true,\n    true,\n    true,\n    true,\n    false,\n    /* prefix with path separator of a non existing directory*/\n    true,\n    true\n);\nfor( $i=0; $i<count($names_arr); $i++ ) {\n    echo \"-- Iteration $i --\\n\";\n    try {\n        $file_name = tempnam($file_path, $names_arr[$i]);\n    } catch (Error $e) {\n        echo $e->getMessage(), \"\\n\";\n        continue;\n    }\n    /* creating the files in existing dir */\n    if (file_exists($file_name) && !$res_arr[$i]) {\n        echo \"Failed\\n\";\n    }\n    if ($res_arr[$i]) {\n        $file_dir = dirname($file_name);\n        if (realpath($file_dir) == $file_path || realpath($file_dir . \"\\\\\") == $file_path) {\n            echo \"OK\\n\";\n        } else {\n            echo \"Failed, not created in the correct directory \" . realpath($file_dir) . ' vs ' . $file_path .\"\\n\";\n        }\n        if (!is_writable($file_name)) {\n            printf(\"%o\\n\", fileperms($file_name) );\n        }\n    } else {\n        echo \"OK\\n\";\n    }\n    @unlink($file_name);\n}\nrmdir($file_path);\n?>")).toMatchSnapshot();
  });
});
