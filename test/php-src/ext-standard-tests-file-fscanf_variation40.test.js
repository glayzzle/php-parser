// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fscanf_variation40.phpt
  it("Test fscanf() function: usage variations - unsigned formats with float values", function () {
    expect(parser.parseCode("<?php\n/* Test fscanf() to scan float values using different unsigned format types */\n$file_path = __DIR__;\necho \"*** Test fscanf(): different unsigned format types with float values ***\\n\";\n// create a file\n$filename = \"$file_path/fscanf_variation40.tmp\";\n$file_handle = fopen($filename, \"w\");\nif($file_handle == false)\n  exit(\"Error:failed to open file $filename\");\n// array of float type values\n$float_values = array (\n  -2147483649,\n  2147483648,\n  -0x80000001, // float value, beyond max negative int\n  0x800000001, // float value, beyond max positive int\n  020000000001, // float value, beyond max positive int\n  -020000000001, // float value, beyond max negative int\n  0.0,\n  -0.1,\n  1.0,\n  1e5,\n  -1e6,\n  1E8,\n  -1E9,\n  10.0000000000000000005,\n  10.5e+5\n);\n$unsigned_formats = array( \"%u\", \"%hu\", \"%lu\", \"%Lu\", \" %u\", \"%u \", \"% u\", \"\\t%u\", \"\\n%u\", \"%4u\", \"%30u\", \"%[0-9]\", \"%*u\");\n$counter = 1;\n// writing to the file\nforeach($float_values as $value) {\n  @fprintf($file_handle, $value);\n  @fprintf($file_handle, \"\\n\");\n}\n// closing the file\nfclose($file_handle);\n// opening the file for reading\n$file_handle = fopen($filename, \"r\");\nif($file_handle == false) {\n  exit(\"Error:failed to open file $filename\");\n}\n$counter = 1;\n// reading the values from file using different unsigned formats\nforeach($unsigned_formats as $unsigned_format) {\n  // rewind the file so that for every foreach iteration the file pointer starts from bof\n  rewind($file_handle);\n  echo \"\\n-- iteration $counter --\\n\";\n  while( !feof($file_handle) ) {\n    try {\n      var_dump(fscanf($file_handle,$unsigned_format));\n    } catch (ValueError $exception) {\n      echo $exception->getMessage() . \"\\n\";\n    }\n  }\n  $counter++;\n}\necho \"\\n*** Done ***\";\n?>")).toMatchSnapshot();
  });
});
