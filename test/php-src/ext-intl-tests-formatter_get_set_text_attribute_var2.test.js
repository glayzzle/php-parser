// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/formatter_get_set_text_attribute_var2.phpt
  it("numfmt_get/set_text_attribute() ICU >= 56.1", function () {
    expect(parser.parseCode("<?php\n/*\n * Get/set text attribute.\n */\nfunction ut_main()\n{\n    // Array with data for testing\n    $long_str = str_repeat('blah', 100);\n    $attributes = array(\n        'POSITIVE_PREFIX' => array( NumberFormatter::POSITIVE_PREFIX, '_+_', 12345.1234 ),\n        'POSITIVE_SUFFIX' => array( NumberFormatter::POSITIVE_SUFFIX, '_+_', 12345.1234 ),\n        'NEGATIVE_PREFIX' => array( NumberFormatter::NEGATIVE_PREFIX, '_-_', -12345.1234 ),\n        'NEGATIVE_SUFFIX' => array( NumberFormatter::NEGATIVE_SUFFIX, '_-_', -12345.1234 ),\n        'PADDING_CHARACTER' => array( NumberFormatter::PADDING_CHARACTER, '^', 12345.1234 ),\n    'POSITIVE_PREFIX-2' => array( NumberFormatter::POSITIVE_PREFIX, $long_str, 12345.1234 ),\n//        'CURRENCY_CODE' => array( NumberFormatter::CURRENCY_CODE, '_C_', 12345.1234 )\n//        'DEFAULT_RULESET' => array( NumberFormatter::DEFAULT_RULESET, '_DR_', 12345.1234 ),\n//        'PUBLIC_RULESETS' => array( NumberFormatter::PUBLIC_RULESETS, '_PR_', 12345.1234 )\n    );\n    $res_str = '';\n    $fmt = ut_nfmt_create( \"en_US\", NumberFormatter::DECIMAL );\n    foreach( $attributes as $attr_name => $data )\n    {\n        list( $attr, $new_val, $test_number ) = $data;\n        $res_str .= \"\\nAttribute $attr_name\\n\";\n        if( $attr == NumberFormatter::PADDING_CHARACTER )\n           ut_nfmt_set_attribute( $fmt, NumberFormatter::FORMAT_WIDTH, 21 );\n        // Get default attribute's value\n        $def_val = ut_nfmt_get_text_attribute( $fmt, $attr );\n        if( $def_val === false )\n            $res_str .= \"get_text_attribute() error: \" . ut_nfmt_get_error_message( $fmt ) . \"\\n\";\n        $res_str .= \"Default value: [$def_val]\\n\";\n        $res_str .=  \"Formatting number with default value: \" . ut_nfmt_format( $fmt, $test_number ) . \"\\n\";\n        // Set new attribute's value and see if it works out.\n        $res_val = ut_nfmt_set_text_attribute( $fmt, $attr, $new_val );\n        if( !$res_val )\n            $res_str .= \"set_text_attribute() error: \" . ut_nfmt_get_error_message( $fmt ) . \"\\n\";\n        // Get attribute value back.\n        $new_val_check = ut_nfmt_get_text_attribute( $fmt, $attr );\n        $res_str .=  \"New value: [$new_val_check]\\n\";\n        $res_str .=  \"Formatting number with new value: \" . ut_nfmt_format( $fmt, $test_number ) . \"\\n\";\n        // Check if the new value has been set.\n        if( $new_val !== $new_val_check )\n            $res_str .= \"ERROR: New $attr_name symbol value has not been set correctly.\\n\";\n        // Restore attribute's value to default\n        ut_nfmt_set_text_attribute( $fmt, $attr, $def_val );\n        if( $attr == NumberFormatter::PADDING_CHARACTER )\n           ut_nfmt_set_attribute( $fmt, NumberFormatter::FORMAT_WIDTH, 0 );\n    }\n    //\n    $fmt = ut_nfmt_create( \"uk_UA\", NumberFormatter::CURRENCY );\n    $res_str .= sprintf( \"\\nCurrency ISO-code for locale 'uk_UA' is: %s\\n\",\n                           ut_nfmt_get_text_attribute( $fmt, NumberFormatter::CURRENCY_CODE ) );\n    return $res_str;\n}\ninclude_once( 'ut_common.inc' );\nut_run();\n?>")).toMatchSnapshot();
  });
});
