// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_variation3.phpt
  it("Test array_unshift() function : usage variations - different array values for 'array' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the behavior of array_unshift() by passing different types of arrays\n * to $array argument to which the $var arguments will be prepended\n*/\necho \"*** Testing array_unshift() : different arrays for \\$array argument ***\\n\";\n// initialize $var argument\n$var = 10;\n// different arrays to be passed to $array argument\n$arrays = array (\n/*1*/  array(1, 2), // array with default keys and numeric values\n       array(1.1, 2.2), // array with default keys & float values\n       array( array(2), array(1)), // sub arrays\n       array(false,true), // array with default keys and boolean values\n       array(), // empty array\n       array(NULL), // array with NULL\n       array(\"a\",\"aaaa\",\"b\",\"bbbb\",\"c\",\"ccccc\"),\n       // associative arrays\n/*8*/  array(1 => \"one\", 2 => \"two\", 3 => \"three\"),  // explicit numeric keys, string values\n       array(\"one\" => 1, \"two\" => 2, \"three\" => 3 ),  // string keys & numeric values\n       array( 1 => 10, 2 => 20, 4 => 40, 3 => 30),  // explicit numeric keys and numeric values\n       array( \"one\" => \"ten\", \"two\" => \"twenty\", \"three\" => \"thirty\"),  // string key/value\n       array(\"one\" => 1, 2 => \"two\", 4 => \"four\"),  //mixed\n       // associative array, containing null/empty/boolean values as key/value\n/*13*/ array(NULL => \"NULL\", null => \"null\", \"NULL\" => NULL, \"null\" => null),\n       array(true => \"true\", false => \"false\", \"false\" => false, \"true\" => true),\n       array(\"\" => \"emptyd\", '' => 'emptys', \"emptyd\" => \"\", 'emptys' => ''),\n       array(1 => '', 2 => \"\", 3 => NULL, 4 => null, 5 => false, 6 => true),\n       array('' => 1, \"\" => 2, NULL => 3, null => 4, false => 5, true => 6),\n       // array with repetitive keys\n/*18*/ array(\"One\" => 1, \"two\" => 2, \"One\" => 10, \"two\" => 20, \"three\" => 3)\n);\n// loop through the various elements of $arrays to test array_unshift()\n$iterator = 1;\nforeach($arrays as $array) {\n  echo \"-- Iteration $iterator --\\n\";\n  /* with default argument */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var) );\n  // dump the resulting array\n  var_dump($temp_array);\n  /* with optional arguments */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var, \"hello\", 'world') );\n  // dump the resulting array\n  var_dump($temp_array);\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
