// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/bug_mysql_49406.phpt
  it("MySQL Bug #49406 (Binding params doesn't work when selecting a date inside a CASE-WHEN, http://bugs.mysql.com/bug.php?id=49406)", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    if (!($link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)))\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    $query = \"SELECT CASE  WHEN 0 THEN CAST('2009-12-03' AS DATE)  ELSE CAST('2009-12-03' AS DATE) END\";\n    if (!$res = $link->query($query))\n        printf(\"[002] [%d] %s\\n\", $link->errno, $link->error);\n    if (!$row = $res->fetch_row())\n        printf(\"[003] No result, [%d] %s\\n\", $link->errno, $link->error);\n    $res->free();\n    if ($row[0] != '2009-12-03') {\n        printf(\"[004] Expecting '2009-12-03' got '%s'\\n\", $row[0]);\n    }\n    if (!$stmt = $link->prepare($query))\n        printf(\"[005] [%d] %s\\n\", $link->errno, $link->error);\n    if (!$stmt->execute() || !$stmt->store_result())\n        printf(\"[006] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    $datatypes = array(\n        MYSQLI_TYPE_TINY => \"TINY\",\n        MYSQLI_TYPE_SHORT => \"SHORT\",\n        MYSQLI_TYPE_LONG => \"LONG\",\n        MYSQLI_TYPE_FLOAT => \"FLOAT\",\n        MYSQLI_TYPE_DOUBLE => \"DOUBLE\",\n        MYSQLI_TYPE_TIMESTAMP => \"TIMESTAMP\",\n        MYSQLI_TYPE_LONGLONG => \"LONGLONG\",\n        MYSQLI_TYPE_INT24 => \"INT24\",\n        MYSQLI_TYPE_DATE => \"DATE\",\n        MYSQLI_TYPE_TIME => \"TIME\",\n        MYSQLI_TYPE_DATETIME => \"DATETIME\",\n        MYSQLI_TYPE_YEAR => \"YEAR\",\n        MYSQLI_TYPE_ENUM => \"ENUM\",\n        MYSQLI_TYPE_SET\t=> \"SET\",\n        MYSQLI_TYPE_TINY_BLOB => \"TINYBLOB\",\n        MYSQLI_TYPE_MEDIUM_BLOB => \"MEDIUMBLOB\",\n        MYSQLI_TYPE_LONG_BLOB => \"LONGBLOB\",\n        MYSQLI_TYPE_BLOB => \"BLOB\",\n        MYSQLI_TYPE_VAR_STRING => \"VAR_STRING\",\n        MYSQLI_TYPE_STRING => \"STRING\",\n        MYSQLI_TYPE_NULL => \"NULL\",\n        MYSQLI_TYPE_NEWDATE => \"NEWDATE\",\n        MYSQLI_TYPE_INTERVAL => \"INTERVAL\",\n        MYSQLI_TYPE_GEOMETRY => \"GEOMETRY\",\n    );\n    $meta_res = $stmt->result_metadata();\n    for ($field_idx = 0; $field_idx < $meta_res->field_count; $field_idx++) {\n        $field = $meta_res->fetch_field();\n        printf(\"Field        : %d\\n\", $field_idx);\n        printf(\"Name         : %s\\n\", $field->name);\n        printf(\"Orgname      : %s\\n\", $field->orgname);\n        printf(\"Table        : %s\\n\", $field->table);\n        printf(\"Orgtable     : %s\\n\", $field->orgtable);\n        printf(\"Maxlength    : %d\\n\", $field->max_length);\n        printf(\"Length       : %d\\n\", $field->length);\n        printf(\"Charsetnr    : %d\\n\", $field->charsetnr);\n        printf(\"Flags        : %d\\n\", $field->flags);\n        printf(\"Type         : %d (%s)\\n\", $field->type, (isset($datatypes[$field->type])) ? $datatypes[$field->type] : 'unknown');\n        printf(\"Decimals     : %d\\n\", $field->decimals);\n    }\n    $row_stmt = null;\n    if (!$stmt->bind_result($row_stmt) || !$stmt->fetch())\n        printf(\"[007] [%d] %s\\n\", $stmt->errno, $stmt->error);\n    if ($row[0] != $row_stmt) {\n        printf(\"[008] PS and non-PS results differ, dumping data\\n\");\n        var_dump($row[0]);\n        var_dump($row_stmt);\n    }\n    $stmt->close();\n    $link->close();\n    echo \"done\";\n?>")).toMatchSnapshot();
  });
});
