// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_pgsql/tests/large_objects.phpt
  it("PDO PgSQL Large Objects", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);\n$db->exec('CREATE TABLE test (blobid integer not null primary key, bloboid OID)');\n$db->beginTransaction();\n$oid = $db->pgsqlLOBCreate();\ntry {\n$stm = $db->pgsqlLOBOpen($oid, 'w+b');\nfwrite($stm, \"Hello dude\\n\");\n$stmt = $db->prepare(\"INSERT INTO test (blobid, bloboid) values (?, ?)\");\n$stmt->bindValue(1, 1);\n/* bind as LOB; the oid from the pgsql stream will be inserted instead\n * of the stream contents. Binding other streams will attempt to bind\n * as bytea, and will most likely lead to an error.\n * You can also just bind the $oid in as a string. */\n$stmt->bindParam(2, $stm, PDO::PARAM_LOB);\n$stmt->execute();\n$stm = null;\n/* Pull it out */\n$stmt = $db->prepare(\"SELECT * from test\");\n$stmt->bindColumn('bloboid', $lob, PDO::PARAM_LOB);\n$stmt->execute();\necho \"Fetching:\\n\";\nwhile (($row = $stmt->fetch(PDO::FETCH_ASSOC))) {\n    var_dump($row['blobid']);\n    var_dump(stream_get_contents($lob));\n}\necho \"Fetched!\\n\";\n/* Try again, with late bind */\n$stmt = $db->prepare(\"SELECT * from test\");\n$stmt->execute();\n$stmt->bindColumn('bloboid', $lob, PDO::PARAM_LOB);\necho \"Fetching late bind:\\n\";\nwhile (($row = $stmt->fetch(PDO::FETCH_ASSOC))) {\n    var_dump($row['blobid']);\n    var_dump(is_int($row['bloboid']));\n}\necho \"Fetched!\\n\";\n/* Try again, with NO  bind */\n$stmt = $db->prepare(\"SELECT * from test\");\n$stmt->execute();\n$stmt->bindColumn('bloboid', $lob, PDO::PARAM_LOB);\necho \"Fetching NO bind:\\n\";\nwhile (($row = $stmt->fetch(PDO::FETCH_ASSOC))) {\n    var_dump($row['blobid']);\n    var_dump(is_int($row['bloboid']));\n}\necho \"Fetched!\\n\";\n} catch (Exception $e) {\n    /* catch exceptions so that we can guarantee to clean\n     * up the LOB */\n    echo \"Exception! at line \", $e->getLine(), \"\\n\";\n    var_dump($e->getMessage());\n}\n/* Now to remove the large object from the database, so it doesn't\n * linger and clutter up the storage */\n$db->pgsqlLOBUnlink($oid);\n?>")).toMatchSnapshot();
  });
});
