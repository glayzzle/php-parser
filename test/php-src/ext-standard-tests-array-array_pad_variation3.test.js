// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_pad_variation3.phpt
  it("Test array_pad() function : usage variations - possible values for 'pad_value' argument", function () {
    expect(parser.parseCode("<?php\n/*\n* Testing array_pad() function for expected behavior by passing\n* different possible values for $pad_value argument.\n* $input and $pad_size arguments take fixed value.\n*/\necho \"*** Testing array_pad() : possible values for \\$pad_value argument ***\\n\";\n// Initialise $input and $pad_size argument\n$input = array(1, 2);\n$pad_size = 4;\n//get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a class\nclass classA\n{\n  public function __toString() {\n    return \"Class A object\";\n  }\n}\n// heredoc string\n$heredoc = <<<EOT\nhello world\nEOT;\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// get a reference variable\n$value = \"hello\";\n$reference = &$value;\n// different values to be passed to $pad_value argument\n$pad_values = array(\n       // int data\n/*1*/  0,\n       1,\n       12345,\n       -2345,\n       // float data\n/*5*/  10.5,\n       -10.5,\n       12.3456789000e10,\n       12.3456789000E-10,\n      .5,\n       // array data\n/*10*/ array(),\n       array(0),\n       array(1),\n       array(1, 2),\n       array('color' => 'red', 'item' => 'pen'),\n       // null data\n/*15*/ NULL,\n       null,\n       // boolean data\n/*17*/ true,\n       false,\n       TRUE,\n       FALSE,\n       // empty data\n/*21*/ \"\",\n       '',\n       // string data\n/*23*/ \"string\",\n       'string',\n       $heredoc,\n       // strings with different white spaces\n/*26*/ \"\\v\\fHello\\t world!! \\rstring\\n\",\n       '\\v\\fHello\\t world!! \\rstring\\n',\n       // object data\n/*28*/ new classA(),\n       // undefined data\n/*29*/ @$undefined_var,\n       // unset data\n/*30*/ @$unset_var,\n       // resource variable\n/*31*/ $fp,\n       // reference variable\n/*32*/ $reference\n);\n// loop through each element of $pad_values to check the behavior of array_pad()\n$iterator = 1;\nforeach($pad_values as $pad_value) {\n  echo \"-- Iteration $iterator --\\n\";\n  var_dump( array_pad($input, $pad_size, $pad_value) );  // positive 'pad_size'\n  var_dump( array_pad($input, -$pad_size, $pad_value) );  // negative 'pad_size'\n  $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
