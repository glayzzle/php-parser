// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_numeric.phpt
  it("Test is_numeric() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing is_numeric() with valid numeric values ***\\n\";\n// different valid numeric  values\n$numerics = array(\n  0,\n  1,\n  -1,\n  -0,\n  +0,\n  0.0,\n  -0.0,\n  +0.0,\n  1.0,\n  -1.0,\n  +1.0,\n  .5,\n  -.5,\n  +.5,\n  -.5e-2,\n  .5e-2,\n  +.5e-2,\n  +.5E+2,\n  0.70000000,\n  +0.70000000,\n  -0.70000000,\n  1234567890123456,\n  -1234567890123456,\n  984847472827282718178,\n  -984847472827282718178,\n  123.56e30,\n  123.56E30,\n  426.45e-30,\n  5657.3E-40,\n  3486.36e+40,\n  3486.36E+90,\n  -3486.36E+10,\n  -3486.36e+80,\n  -426.45e-50,\n  -426.45E-99,\n  1e2,\n  -1e2,\n  -1e-2,\n  +1e2,\n  +1e+2,\n  +1e-2,\n  +1e+2,\n  2245555555555555.444,\n  1.444444444444444444,\n  0xff,\t// hexa decimal numbers\n  0xFF,\n  //0x1111111111111111111111,\n  -0x1111111,\n  +0x6698319,\n  01000000000000000000000,\n  0123,\n  0345,\n  -0200001,\n  -0200001.7,\n  0200001.7,\n  +0200001,\n  +0200001.7,\n  +0200001.7,\n  2.00000000000000000000001, // a float value with more precision points\n  \"1\",\t// numeric in the form of string\n  \"-1\",\n  \"1e2\",\n  \" 1\",\n  \"1 \",\n  \"2974394749328742328432\",\n  \"-1e-2\",\n  '1',\n  '-1',\n  '1e2',\n  ' 1',\n  '1 ',\n  '2974394749328742328432',\n  '-1e-2',\n  \"0123\",\n  '0123',\n  \"-0123\",\n  \"+0123\",\n  '-0123',\n  '+0123'\n);\n/* loop to check that is_numeric() recognizes different\n   numeric values, expected output: bool(true) */\n$loop_counter = 1;\nforeach ($numerics as $num ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_numeric($num) );\n}\necho \"\\n*** Testing is_numeric() on non numeric types ***\\n\";\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\n$dfp = opendir ( __DIR__ );\n// unset variable\n$unset_var = 10.5;\nunset ($unset_var);\n// other types in a array\n$not_numerics = array(\n  \"0x80001\",\n  \"-0x80001\",\n  \"+0x80001\",\n  \"-0x80001.5\",\n  \"0x80001.5\",\n  new stdclass, // object\n  $fp,  // resource\n  $dfp,\n  array(),\n  array(\"string\"),\n  \"\",\n  \"- 1\",\n  \"1.2.4\",\n  \"1e7.6\",\n  \"3FF\",\n  \"20 test\",\n  \"3.6test\",\n  \"1,000\",\n  \"NULL\",\n  \"true\",\n  true,\n  NULL,\n  null,\n  TRUE,\n  FALSE,\n  false,\n  @$unset_var, // unset variable\n  @$undefined_var\n);\n/* loop through the $not_numerics to see working of\n   is_numeric() on non numeric values, expected output: bool(false) */\n$loop_counter = 1;\nforeach ($not_numerics as $type ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_numeric($type) );\n}\necho \"Done\\n\";\n// close the resources used\nfclose($fp);\nclosedir($dfp);\n?>")).toMatchSnapshot();
  });
});
