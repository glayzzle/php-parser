// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_blobs.phpt
  it("MySQL Prepared Statements and BLOBs", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $blobs = array(\n        'TINYBLOB'\t\t=> 255,\n        'TINYTEXT'\t\t=> 255,\n        'BLOB'\t\t\t\t=> 32767,\n        'TEXT'\t\t\t\t=> 32767,\n        'MEDIUMBLOB'\t=> 100000,\n        'MEDIUMTEXT'\t=> 100000,\n        'LONGBLOB'\t\t=> 100000,\n        'LONGTEXT'\t\t=> 100000,\n    );\n    function test_blob($db, $offset, $sql_type, $test_len) {\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec(sprintf('CREATE TABLE test(id INT, label %s) ENGINE=%s', $sql_type, PDO_MYSQL_TEST_ENGINE));\n        $value = str_repeat('a', $test_len);\n        $stmt = $db->prepare('INSERT INTO test(id, label) VALUES (?, ?)');\n        $stmt->bindValue(1, 1);\n        $stmt->bindValue(2, $value);\n        if (!$stmt->execute()) {\n            printf(\"[%03d + 1] %d %s\\n\",\n                $offset, $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n            return false;\n        }\n        $stmt = $db->query('SELECT id, label FROM test');\n        $id = $label = NULL;\n        $stmt->bindColumn(1, $id, PDO::PARAM_INT);\n        $stmt->bindColumn(2, $label, PDO::PARAM_LOB);\n        if (!$stmt->fetch(PDO::FETCH_BOUND)) {\n            printf(\"[%03d + 2] %d %s\\n\",\n                $offset, $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n            return false;\n        }\n        if (!is_resource($label)) {\n            printf(\"[%03d + 3] Returned value is not a stream resource\\n\", $offset);\n            return false;\n        }\n        $contents = stream_get_contents($label);\n        if ($contents !== $value) {\n            printf(\"[%03d + 3] Returned value seems to be wrong (%d vs. %d characters). Check manually\\n\",\n                $offset, strlen($contents), strlen($value));\n            return false;\n        }\n        if (1 != $id) {\n            printf(\"[%03d + 3] Returned id column value seems wrong, expecting 1 got %s.\\n\",\n                $offset, var_export($id, true));\n            return false;\n        }\n        $stmt = $db->query('SELECT id, label FROM test');\n        $ret = $stmt->fetch(PDO::FETCH_ASSOC);\n        if ($ret['label'] !== $value) {\n            printf(\"[%03d + 3] Returned value seems to be wrong (%d vs. %d characters). Check manually\\n\",\n                $offset, strlen($ret['label']), strlen($value));\n            return false;\n        }\n        if (1 != $ret['id']) {\n            printf(\"[%03d + 3] Returned id column value seems wrong, expecting 1 got %s.\\n\",\n                $offset, var_export($ret['id'], true));\n            return false;\n        }\n        return true;\n    }\n    $offset = 0;\n    foreach ($blobs as $sql_type => $test_len) {\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n        test_blob($db, ++$offset, $sql_type, $test_len);\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n        test_blob($db, ++$offset, $sql_type, $test_len);\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
