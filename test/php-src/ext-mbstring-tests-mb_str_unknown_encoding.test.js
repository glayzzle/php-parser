// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_str_unknown_encoding.phpt
  it("mb_str*() - unknown encoding", function () {
    expect(parser.parseCode("<?php\ntry {\n    mb_chr(1, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_convert_case('coudenys', MB_CASE_UPPER, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_convert_encoding('coudenys', 'UTF-8', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_convert_kana('coudenys', 'KV', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_decode_numericentity('coudenys', [], 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_ord('coudenys', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strcut('coudenys', 0, 4, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strimwidth('coudenys', 0, 4, '', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_stripos('coudenys', 'cou', 0, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_stristr('coudenys', 'cou', false, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strlen('coudenys', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strpos('coudenys', 'cou', 0, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strrchr('coudenys', 'cou', false, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strrichr('coudenys', 'cou', false, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strripos('coudenys', 'cou', 0, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strrpos('coudenys', 'cou', 0, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strstr('coudenys', 'cou', false, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strtolower('coudenys', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strtoupper('coudenys', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_strwidth('coudenys', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_substr('coudenys', 0, null, 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    mb_substr_count('coudenys', 'c', 'UTF-0');\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\n?>")).toMatchSnapshot();
  });
});
