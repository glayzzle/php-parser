// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_limits.phpt
  it("Bind limits", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    function bind_many($offset, $link, $num_params, $rows, $eval = true) {\n        $drop = \"DROP TABLE IF EXISTS test\";\n        $create = \"CREATE TABLE test(id INT AUTO_INCREMENT PRIMARY KEY, \";\n        $insert = \"INSERT INTO test\";\n        $columns = \"\";\n        $values = \"\";\n        $stmt_params = \"\";\n        $params = array();\n        for ($i = 0; $i < $num_params; $i++) {\n            $create \t\t.= \"col\" . $i . \" INT, \";\n            $columns \t\t.= \"col\" . $i . \", \";\n            $values \t\t.= \"?, \";\n            $stmt_params \t.= '$params[' . $i . '], ';\n            for ($j = 0; $j < $rows; $j++)\n              $params[($j * $rows) + $i] = $i;\n        }\n        $create = substr($create, 0, -2) . \")\";\n        $stmt_types = str_repeat(\"i\", $num_params * $rows);\n        $stmt_params = substr(str_repeat($stmt_params, $rows), 0, -2);\n        $values = substr($values, 0, -2);\n        $insert .= \"(\" . substr($columns, 0, -2) . \") VALUES \";\n        $insert .= substr(str_repeat(\"(\" . $values . \"), \", $rows), 0, -2);\n        $stmt_bind_param = 'return mysqli_stmt_bind_param($stmt, \"' . $stmt_types . '\", ' . $stmt_params . ');';\n        printf(\"Testing %d columns with %d rows...\\n\", $num_params, $rows);\n        if (!$link->query($drop) || !$link->query($create)) {\n            printf(\"[%03d + 01] [%d] %s\\n\", $offset, $link->errno, $link->error);\n            return false;\n        }\n        printf(\"... table created\\n\");\n        if (!$stmt = $link->prepare($insert)) {\n            printf(\"[%03d + 02] [%d] %s\\n\", $offset, $link->errno, $link->error);\n            return false;\n        }\n        if ($stmt->param_count != $num_params * $rows) {\n              printf(\"[%03d + 03] Parameter count should be %d but got %d\\n\", $offset, $num_params * $rows, $stmt->param_count);\n            return false;\n        }\n        printf(\"... statement with %d parameters prepared\\n\", $stmt->param_count);\n        if ($eval) {\n            if (!eval($stmt_bind_param)) {\n                printf(\"[%03d + 03] [%d] %s\\n\", $offset, $stmt->errno, $stmt->error);\n                return false;\n            }\n        } else {\n            $param_ref = array($stmt_types);\n            for ($i = 0; $i < $rows; $i++)\n                for ($j = 0; $j < $num_params; $j++)\n                    $param_ref[] = &$params[($i * $rows) + $j];\n            if (!call_user_func_array(array($stmt, 'bind_param'), $param_ref)) {\n                printf(\"[%03d + 03] [%d] %s\\n\", $offset, $stmt->errno, $stmt->error);\n                return false;\n            }\n        }\n        if ($stmt->param_count != $num_params * $rows) {\n             printf(\"[%03d + 03] Parameter count should be %d but got %d\\n\", $offset, $num_params * $rows, $stmt->param_count);\n            return false;\n        }\n        if (!$stmt->execute()) {\n            printf(\"[%03d + 04] [%d] %s\\n\", $offset, $stmt->errno, $stmt->error);\n            return false;\n        }\n        printf(\"Statement done\\n\");\n        $stmt->close();\n        if (!($res = $link->query(\"SELECT * FROM test\"))) {\n            printf(\"[%03d + 05] [%d] %s\\n\", $offset, $link->errno, $link->error);\n            return false;\n        }\n        $row = $res->fetch_row();\n        $res->close();\n        for ($i = 0; $i < $num_params; $i++) {\n            if ($row[$i + 1] != $i) {\n                printf(\"[%03d + 06] [%d] %s\\n\", $offset, $link->errno, $link->error);\n            }\n        }\n        return true;\n    }\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)) {\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    }\n    var_dump(bind_many(10, $link, 273, 240, true));\n    var_dump(bind_many(20, $link, 273, 240, false));\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
