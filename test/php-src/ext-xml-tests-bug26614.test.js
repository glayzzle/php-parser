// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/xml/tests/bug26614.phpt
  it("Bug #26614 (CDATA sections skipped on line count)", function () {
    expect(parser.parseCode("<?php\n/*\nthis test works fine with Expat but fails with libxml\nwhich we now use as default\nfurther investigation has shown that not only line count\nis skippet on CDATA sections but that libxml does also\nshow different column numbers and byte positions depending\non context and in opposition to what one would expect to\nsee and what good old Expat reported just fine ...\n*/\n$xmls = array();\n// Case 1: CDATA Sections\n$xmls[\"CDATA\"] ='<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n<data>\n<![CDATA[\nmulti\nline\nCDATA\nblock\n]]>\n</data>';\n// Case 2: replace some characters so that we get comments instead\n$xmls[\"Comment\"] ='<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n<data>\n<!-- ATA[\nmulti\nline\nCDATA\nblock\n-->\n</data>';\n// Case 3: replace even more characters so that only textual data is left\n$xmls[\"Text\"] ='<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n<data>\n-!-- ATA[\nmulti\nline\nCDATA\nblock\n---\n</data>';\nfunction startElement($parser, $name, $attrs) {\n    printf(\"<$name> at line %d, col %d (byte %d)\\n\",\n               xml_get_current_line_number($parser),\n               xml_get_current_column_number($parser),\n               xml_get_current_byte_index($parser));\n}\nfunction endElement($parser, $name) {\n    printf(\"</$name> at line %d, col %d (byte %d)\\n\",\n               xml_get_current_line_number($parser),\n               xml_get_current_column_number($parser),\n               xml_get_current_byte_index($parser));\n}\nfunction characterData($parser, $data) {\n  // dummy\n}\nforeach ($xmls as $desc => $xml) {\n  echo \"$desc\\n\";\n    $xml_parser = xml_parser_create();\n    xml_set_element_handler($xml_parser, \"startElement\", \"endElement\");\n    xml_set_character_data_handler($xml_parser, \"characterData\");\n    if (!xml_parse($xml_parser, $xml, true))\n        echo \"Error: \".xml_error_string(xml_get_error_code($xml_parser)).\"\\n\";\n    xml_parser_free($xml_parser);\n}\n?>")).toMatchSnapshot();
  });
});
