// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_param_many_columns.phpt
  it("mysqli_stmt_bind_param() - Binding with very high number of columns", function () {
    expect(parser.parseCode("<?php\n    /*\n    The way we test the INSERT and data types overlaps with\n    the mysqli_stmt_bind_result test in large parts. There is only\n    one difference. This test uses mysqli_query()/mysqli_fetch_assoc() to\n    fetch the inserted values. This way we test\n    mysqli_query()/mysqli_fetch_assoc() for all possible data types\n    in this file and we test mysqli_stmt_bind_result() in the other\n    test -- therefore the \"duplicate\" makes some sense to me.\n    */\n    require_once(\"connect.inc\");\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)) {\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n        exit(1);\n    }\n    $cols = 2500;\n    list($old_max_allowed_packet) = $link->query(\"SELECT @@max_allowed_packet\")->fetch_row();\n    if (!$link->query(\"SET GLOBAL max_allowed_packet=(2<<29)\")) {\n        if (1227 == mysqli_errno($link)) {\n            /* [1227] Access denied; you need the SUPER privilege for this operation */\n            $cols = 10;\n        } else {\n            $cols = 10;\n            printf(\"[002] Failed to set max_allowed_packet the test table: [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        }\n    }\n    mysqli_close($link);\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket)) {\n        printf(\"Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n        exit(1);\n    }\n    if (!mysqli_query($link, 'DROP TABLE IF EXISTS test')) {\n        printf(\"Failed to drop old test table: [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        exit(1);\n    }\n    $str = array();\n    for ($i = 1; $i <= $cols; $i++) {\n        $str[] =\"a$i BLOB\";\n    }\n    $link->query(\"CREATE TABLE test(\" . implode(\" , \", $str) . \") ENGINE=MyISAM\");\n    if (mysqli_errno($link)) {\n        printf(\"Failed to create the test table: [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        die(\"\");\n    }\n    $stmt = $link->prepare(\"INSERT INTO test VALUES(\".str_repeat(\"?, \", $cols-1) . \"?)\");\n    var_dump($stmt->id);\n    $s = str_repeat(\"a\", 2 << 12);\n    $eval_str=\"\\$stmt->bind_param(\\\"\".str_repeat(\"s\",$cols).\"\\\", \";\n    for ($i = 1; $i < $cols; $i++) {\n        $eval_str.=\"\\$s,\";\n    }\n    $eval_str.=\"\\$s\";\n    $eval_str.=\");\";\n    eval($eval_str);\n    printf(\"executing\\n\");\n    if (!$stmt->execute()) {\n        printf(\"failed\");\n        printf(\"Failed to execute: [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    } else {\n        var_dump(true);\n    }\n    mysqli_stmt_close($stmt);\n    if (!$link->query(\"SET GLOBAL max_allowed_packet=$old_max_allowed_packet\")) {\n        if (1227 != mysqli_errno($link))\n            printf(\"Failed to set max_allowed_packet the test table: [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    }\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
