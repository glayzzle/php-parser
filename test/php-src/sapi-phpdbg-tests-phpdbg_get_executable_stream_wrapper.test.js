// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // sapi/phpdbg/tests/phpdbg_get_executable_stream_wrapper.phpt
  it("Getting executable lines from custom wrappers", function () {
    expect(parser.parseCode("<?php\n/**\n * This example demonstrates how phpdbg_get_executable() behaves differently\n * when passed the 'files' option vs without, in the face of some mild abuse\n * of stream wrappers.\n */\n/**\n * First, we define a stream wrapper that simply maps to a real file on disk.\n */\nfinal class StreamWrapper\n{\n    public function stream_open(\n        string $path,\n        string $mode,\n        int $options = 0,\n        string &$openedPath = null\n    ) : bool {\n        if ($mode[0] !== 'r') {\n            return false;\n        }\n        list($scheme, $path) = explode('://', $path, 2);\n        $stream = \\fopen($path, $mode);\n        if ($stream === false) {\n            return false;\n        }\n        $this->stream = $stream;\n        /**\n         * The $openedPath reference variable is assigned, indicating the\n         * *actual* path that was opened. This affects the behaviour of\n         * constants like __FILE__.\n         */\n        $openedPath = \\realpath($path);\n        return true;\n    }\n    public function stream_read(int $count) : string { return \\fread($this->stream, $count); }\n    public function stream_close() : bool { return \\fclose($this->stream); }\n    public function stream_eof() : bool { return \\feof($this->stream); }\n    public function stream_stat() { return \\fstat($this->stream); }\n    public function stream_set_option($option, $arg1, $arg2) { return false; }\n    private $stream = false;\n}\nstream_wrapper_register('wrapper', StreamWrapper::class);\n/**\n * Next, we include a PHP file that contains executable lines, via the stream\n * wrapper.\n */\n$filename = __DIR__ . DIRECTORY_SEPARATOR . 'phpdbg_get_executable_stream_wrapper.inc';\nrequire 'wrapper://' . $filename;\n/**\n * If we call phpdbg_get_executable() and pass no options, the realpath of the\n * included file is present in the array, but indicates no executable lines.\n */\n$x = phpdbg_get_executable();\n// We expect [5 => 0], but got an empty array ...\nvar_dump($x[$filename]);\n?>\n")).toMatchSnapshot();
  });
});
