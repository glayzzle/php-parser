// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/explode1.phpt
  it("Test explode() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing explode() for basic operations ***\\n\";\n$delimiters = array (\n  \"\",  // len=0\n  NULL,\n  \"abcd\",  // string\n  0,  // zero\n  \"0\",\n  TRUE,  // boolean value\n  FALSE,\n  -1,  // negative integer\n  -11.23,  // double\n  4,  // positive integer\n  \"%\",\n);\n$string = \"1234NULL23abcd00000TRUEFALSE-11.234444true-11.24%PHP%ZEND\";\n/* loop prints an array of strings, each of which is a substring of $string\n   formed by splitting it on boundaries formed by the string $delimiter.\n */\n$counter = 1;\nforeach($delimiters as $delimiter) {\n    echo \"-- Iteration $counter --\\n\";\n    try {\n        var_dump( explode($delimiter, $string, -1) );\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \"\\n\";\n    }\n    try {\n        var_dump( explode($delimiter, $string, 0) );\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \"\\n\";\n    }\n    try {\n        var_dump( explode($delimiter, $string, 1) );\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \"\\n\";\n    }\n    try {\n        var_dump( explode($delimiter, $string, 2) );\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \"\\n\";\n    }\n    $counter++;\n}\necho \"\\n*** Testing explode() with miscellaneous input arguments ***\\n\";\necho \"\\n-- Passing positive values of Limit to explode() --\\n\";\n/* LIMIT=2 */\nvar_dump( explode(\"::\", \"mon::tues::wed::thurs::fri::sat::sun\", 2) );\n/* checking for LIMIT =0,1 */\necho \"\\n-- Passing limit values 0 and 1 to explode() --\\n\";\nvar_dump( explode(\":\", \"Name:Phone:Address:City:State\", 0) );\nvar_dump( explode(\":\", \"Name:Phone:Address:City:State\", 1) );\n/* to check the maximum limit of string that can be given with limit<=0,\n   default size is 50 but increases dynamically */\necho \"\\n*** Testing explode() for maximum limit of string with Limit = -1 ***\\n\";\nvar_dump( explode(\":\", \"1:2:3:4:5:6:7:7:5:6:7:3:4:5:2:8:9:0:5:5:5:5:5:5:5:5:5:5:5:5:55:5:5:5%:%:%:%:5:5:5:%:%:5:5:5:5:5%:%:%:55:1:1\", -1) );\necho \"\\n*** Testing explode() with string variations as input argument ***\\n\";\n/* String with escape characters */\necho \"\\n-- Testing string with escape characters --\\n\";\nvar_dump( explode(\"\\t\\n\", \"1234\\t\\n5678\\n\\t9100\") );\nvar_dump( explode(\"\\r\", \"1234\\rabcd\\r5678\\rrstu\") );\n/* String with embedded NULL */\necho \"\\n-- Testing string with embedded NULL --\\n\";\nvar_dump( explode(\"\\x00\", \"abcd\\x0n1234\\x0005678\\x0000efgh\\xijkl\") );\nvar_dump( explode(\"\\0\", \"abcd\\0efgh\\0ijkl\\x00mnop\\x000qrst\\00uvwx\\000yz\") );\n/* Checking OBJECTS type */\necho \"\\n*** Testing explode() with objects ***\\n\";\nclass string1 {\n  public function __toString() {\n    return \"Object\";\n  }\n}\n$obj = new string1;\nvar_dump( explode(\"b\", $obj) );\n?>")).toMatchSnapshot();
  });
});
