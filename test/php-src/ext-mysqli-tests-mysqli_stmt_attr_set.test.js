// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_attr_set.phpt
  it("mysqli_stmt_attr_set() - mysqlnd does not check for invalid codes", function () {
    expect(parser.parseCode("<?php\nrequire_once(\"connect.inc\");\n    require('table.inc');\n    $valid_attr = array(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH);\n    $valid_attr[] = MYSQLI_STMT_ATTR_CURSOR_TYPE;\n    $valid_attr[] =\tMYSQLI_CURSOR_TYPE_NO_CURSOR;\n    $valid_attr[] =\tMYSQLI_CURSOR_TYPE_READ_ONLY;\n    $valid_attr[] =\tMYSQLI_CURSOR_TYPE_FOR_UPDATE;\n    $valid_attr[] =\tMYSQLI_CURSOR_TYPE_SCROLLABLE;\n    $valid_attr[] = MYSQLI_STMT_ATTR_PREFETCH_ROWS;\n    $stmt = mysqli_stmt_init($link);\n    try {\n        mysqli_stmt_attr_set($stmt, 0, 0);\n    } catch (\\Throwable $e) {\n        echo get_class($e) . ': ' . $e->getMessage() . PHP_EOL;\n    }\n    $stmt->prepare(\"SELECT * FROM test\");\n    // Invalid Attribute (2nd argument)\n    try {\n        mysqli_stmt_attr_set($stmt, -1, 0);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    // Invalid mode for MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH\n    try {\n        $stmt->attr_set(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH, -1);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    $stmt->close();\n    //\n    // MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH\n    //\n    // expecting max_length not to be set and be 0 in all cases\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT label FROM test\");\n    $stmt->execute();\n    $stmt->store_result();\n    $res = $stmt->result_metadata();\n    $fields = $res->fetch_fields();\n    $max_lengths = array();\n    foreach ($fields as $k => $meta) {\n        $max_lengths[$meta->name] = $meta->max_length;\n        if ($meta->max_length !== 0)\n            printf(\"[007] max_length should be not set (= 0), got %s for field %s\\n\", $meta->max_length, $meta->name);\n    }\n    $res->close();\n    $stmt->close();\n    // MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH is no longer supported, expect no change in behavior.\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT label FROM test\");\n    var_dump($stmt->attr_set(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH, 1));\n    $res = $stmt->attr_get(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH);\n    if ($res !== 1)\n        printf(\"[007.1] max_length should be 1, got %s\\n\", $res);\n    $stmt->execute();\n    $stmt->store_result();\n    $res = $stmt->result_metadata();\n    $fields = $res->fetch_fields();\n    $max_lengths = array();\n    foreach ($fields as $k => $meta) {\n        $max_lengths[$meta->name] = $meta->max_length;\n        if ($meta->max_length !== 0)\n            printf(\"[008] max_length should be not set (= 0), got %s for field %s\\n\", $meta->max_length, $meta->name);\n    }\n    $res->close();\n    $stmt->close();\n    // expecting max_length not to be set\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT label FROM test\");\n    $stmt->attr_set(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH, 0);\n    $res = $stmt->attr_get(MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH);\n    if ($res !== 0)\n        printf(\"[008.1] max_length should be 0, got %s\\n\", $res);\n    $stmt->execute();\n    $stmt->store_result();\n    $res = $stmt->result_metadata();\n    $fields = $res->fetch_fields();\n    $max_lengths = array();\n    foreach ($fields as $k => $meta) {\n        $max_lengths[$meta->name] = $meta->max_length;\n        if ($meta->max_length !== 0)\n            printf(\"[009] max_length should not be set (= 0), got %s for field %s\\n\", $meta->max_length, $meta->name);\n    }\n    $res->close();\n    $stmt->close();\n    //\n    // Cursors\n    //\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    // Invalid cursor type\n    try {\n        $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, -1);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    if (false !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_FOR_UPDATE)))\n        printf(\"[011] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (false !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_SCROLLABLE)))\n        printf(\"[012] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_NO_CURSOR)))\n        printf(\"[013] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_READ_ONLY)))\n        printf(\"[014] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->close();\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    $stmt->execute();\n    $id = $label = NULL;\n    $stmt->bind_result($id, $label);\n    $results = array();\n    while ($stmt->fetch())\n        $results[$id] = $label;\n    $stmt->close();\n    if (empty($results))\n        printf(\"[015] Results should not be empty, subsequent tests will probably fail!\\n\");\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_NO_CURSOR)))\n        printf(\"[016] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->execute();\n    $id = $label = NULL;\n    $stmt->bind_result($id, $label);\n    $results2 = array();\n    while ($stmt->fetch())\n        $results2[$id] = $label;\n    $stmt->close();\n    if ($results != $results2) {\n        printf(\"[017] Results should not differ. Dumping both result sets.\\n\");\n        var_dump($results);\n        var_dump($results2);\n    }\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_READ_ONLY)))\n        printf(\"[018] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->execute();\n    $id = $label = NULL;\n    $stmt->bind_result($id, $label);\n    $results2 = array();\n    while ($stmt->fetch())\n        $results2[$id] = $label;\n    $stmt->close();\n    if ($results != $results2) {\n        printf(\"[019] Results should not differ. Dumping both result sets.\\n\");\n        var_dump($results);\n        var_dump($results2);\n    }\n    //\n    // MYSQLI_STMT_ATTR_PREFETCH_ROWS\n    //\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    // Invalid prefetch value\n    try {\n        $stmt->attr_set(MYSQLI_STMT_ATTR_PREFETCH_ROWS, 0);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_PREFETCH_ROWS, 1)))\n        printf(\"[020] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->execute();\n    $id = $label = NULL;\n    $stmt->bind_result($id, $label);\n    $results = array();\n    while ($stmt->fetch())\n        $results[$id] = $label;\n    $stmt->close();\n    if (empty($results))\n        printf(\"[021] Results should not be empty, subsequent tests will probably fail!\\n\");\n    /* prefetch is not supported\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT label FROM test\");\n    if (false !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_PREFETCH_ROWS, -1)))\n        printf(\"[022] Expecting boolean/false, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->close();\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT label FROM test\");\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_PREFETCH_ROWS, PHP_INT_MAX)))\n            printf(\"[023] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->close();\n    $stmt = mysqli_stmt_init($link);\n    $stmt->prepare(\"SELECT id, label FROM test\");\n    if (true !== ($tmp = $stmt->attr_set(MYSQLI_STMT_ATTR_PREFETCH_ROWS, 2)))\n        printf(\"[024] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    $stmt->execute();\n    $id = $label = NULL;\n    $stmt->bind_result($id, $label);\n    $results2 = array();\n    while ($stmt->fetch())\n        $results2[$id] = $label;\n    $stmt->close();\n    if ($results != $results2) {\n        printf(\"[025] Results should not differ. Dumping both result sets.\\n\");\n        var_dump($results);\n        var_dump($results2);\n    }\n    */\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
