// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/opcache/tests/compact_literals.phpt
  it("Test with compact literals", function () {
    expect(parser.parseCode("<?php\necho \"array key hash\" . \":\" . PHP_EOL;\n$array = array(\n    \"1\" => \"one\",\n    \"2\" => \"two\",\n    \"one\" => 1,\n    \"two\" => 2,\n);\nunset($array[\"one\"]);\nunset($array[\"2\"]);\nprint_r($array);\necho \"function define\" . \":\" . PHP_EOL;\nif (!function_exists(\"dummy\")) {\n    function dummy() {\n        var_dump(__FUNCTION__);\n    }\n}\ndummy();\n$dummy = function () { var_dump(\"lambda\" . \"dummy\"); };\n$dummy();\nif (!class_exists(\"A\")) {\n    class A {\n        public static $name = \"A\";\n        public static function say($n = \"name\") {\n            var_dump(static::$name);\n        }\n    }\n}\nclass B extends A {\n    public static $name = \"B\";\n}\nif (!class_exists(\"C\")) {\n    class C extends B {\n        public static $name = \"C\";\n    }\n}\nA::say();\nB::Say();\nA::say();\nB::say();\nC::say();\nfunction get_eol_define() {\n    define(\"MY_EOL\", PHP_EOL);\n}\nget_eol_define();\ndefine(\"EOL\", MY_EOL);\necho \"constants define\" . \":\" . EOL;\necho \"define \" . \"TEST\" . EOL;\ndefine(\"TEST\", \"TEST\");\nclass E {\n    public static $E=\"EP\";\n    const E=\"E\";\n    const TEST=\"NULL\";\n}\nclass F {\n    const F=\"F\";\n    public static $E=\"FEP\";\n    const E=\"FE\";\n    const TEST=\"FALSE\";\n    public static $F = \"FP\";\n}\nvar_dump(TEST);   \t//\"TEST\"\nvar_dump(E::E); \t//\"E\"\nvar_dump(F::E); \t//\"FE\"\nvar_dump(F::F); \t//\"F\"\nvar_dump(E::TEST);  //\"NULL\"\nvar_dump(F::TEST);  //\"FALSE\"\nvar_dump(E::$E);\t//\"EP\"\nvar_dumP(F::$F);    //\"FP\"\nvar_dumP(F::$E);    //\"FEP\"\necho \"propertes and methods\" . EOL;\nclass CH {\n    const H = \"H\";\n    public function h() {\n        var_dump(self::H);\n    }\n}\nclass CI {\n    const H = \"I\";\n    public function h() {\n        var_dump(self::H);\n    }\n}\nfunction change(&$obj) {\n    $obj = new CH;\n}\nfunction geti() {\n    return new CI;\n}\n$h = new CH;\necho \"-->H\" . PHP_EOL;\n$h->H();\nvar_dump($h::H);\nvar_dump(CH::H);\n$h->H();\nvar_dump($h::H);\nvar_dump(CH::H);\necho \"-->I\" . PHP_EOL;\n$h = new CI;\n$h->H();\nvar_dump($h::H);\nvar_dump(CI::H);\n$h->H();\nvar_dump($h::H);\nvar_dump(CI::H);\necho \"-->H\" . PHP_EOL;\nchange($h);\n$h->H();\nvar_dump($h::H);\nvar_dump(CH::H);\n$h->H();\nvar_dump($h::H);\nvar_dump(CH::H);\necho \"-->I\" . PHP_EOL;\n$h = geti();\n$h->H();\nvar_dump($h::H);\nvar_dump(CI::H);\n$h->H();\nvar_dump($h::H);\nvar_dump(CI::H);\n?>")).toMatchSnapshot();
  });
});
