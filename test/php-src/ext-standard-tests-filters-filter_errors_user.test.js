// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/filters/filter_errors_user.phpt
  it("Filter errors: user filter", function () {
    expect(parser.parseCode("<?php\nrequire 'filter_errors.inc';\nclass test_filter0 extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing): int {\n        return PSFS_ERR_FATAL;\n    }\n}\nclass test_filter1 extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing): int {\n        $bucket = stream_bucket_make_writeable($in);\n        return PSFS_ERR_FATAL;\n    }\n}\nclass test_filter2 extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing): int {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n        return PSFS_ERR_FATAL;\n    }\n}\nclass test_filter3 extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing): int {\n        if (!$closing) {\n            $bucket = stream_bucket_new($this->stream, \"42\");\n            stream_bucket_append($out, $bucket);\n        }\n        return PSFS_ERR_FATAL;\n    }\n}\nclass test_filter4 extends php_user_filter {\n    function filter($in, $out, &$consumed, $closing): int {\n        if (!$closing) {\n            $bucket = stream_bucket_new($this->stream, \"42\");\n        }\n        return PSFS_ERR_FATAL;\n    }\n}\nfor($i = 0; $i < 5; ++$i) {\n    echo \"test_filter$i\\n\";\n    var_dump(stream_filter_register(\"test_filter$i\", \"test_filter$i\"));\n    filter_errors_test(\"test_filter$i\", \"42\");\n}\necho \"test append / read / remove\\n\";\nfor($i = 0; $i < 5; ++$i) {\n    echo \"test_filter$i\\n\";\n    $stream = fopen('php://memory', 'wb+');\n    fwrite($stream, \"42\");\n    fseek($stream, 0, SEEK_SET);\n    $f = stream_filter_append($stream, \"test_filter$i\");\n    stream_get_contents($stream);\n    stream_filter_remove($f);\n}\necho \"test append all / read / remove all\\n\";\n$stream = fopen('php://memory', 'wb+');\nfwrite($stream, \"42\");\nfseek($stream, 0, SEEK_SET);\n$filters = array();\nfor($i = 0; $i < 5; ++$i) {\n    echo \"test_filter$i\\n\";\n    $filters[] = stream_filter_append($stream, \"test_filter$i\");\n}\nstream_get_contents($stream);\nforeach($filters as $filter) {\n    stream_filter_remove($filter);\n}\necho \"test append all / read / close\\n\";\n$stream = fopen('php://memory', 'wb+');\nfwrite($stream, \"42\");\nfseek($stream, 0, SEEK_SET);\n$filters = array();\nfor($i = 0; $i < 5; ++$i) {\n    echo \"test_filter$i\\n\";\n    $filters[] = stream_filter_append($stream, \"test_filter$i\");\n}\nstream_get_contents($stream);\nfclose($stream);\n?>")).toMatchSnapshot();
  });
});
