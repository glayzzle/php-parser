// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_local_infile_directory_denied.phpt
  it("PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY vs access denied", function () {
    expect(parser.parseCode("<?php\n\tfunction exec_and_count($offset, &$db, $sql, $exp) {\n\t\ttry {\n\t\t\t$ret = $db->exec($sql);\n\t\t\tif ($ret !== $exp) {\n\t\t\t\tprintf(\"[%03d] Expecting '%s'/%s got '%s'/%s when running '%s', [%s] %s\\n\",\n\t\t\t\t\t$offset, $exp, gettype($exp), $ret, gettype($ret), $sql,\n\t\t\t\t\t$db->errorCode(), implode(' ', $db->errorInfo()));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (PDOException $e) {\n\t\t\tprintf(\"[%03d] '%s' has failed, [%s] %s\\n\",\n\t\t\t\t$offset, $sql, $db->errorCode(), implode(' ', $db->errorInfo()));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\trequire_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n\tputenv('PDOTEST_ATTR='.serialize([\n\t\tPDO::MYSQL_ATTR_LOCAL_INFILE=>false,\n\t\tPDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY=>__DIR__.\"/foo/bar\"\n\t\t]));\n\t$db = MySQLPDOTest::factory();\n\tMySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n\ttry {\n\t\texec_and_count(1, $db, 'DROP TABLE IF EXISTS test', 0);\n\t\texec_and_count(2, $db, sprintf('CREATE TABLE test(id INT NOT NULL PRIMARY KEY, col1 CHAR(10)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE), 0);\n\t\t$filepath = str_replace('\\\\', '/', __DIR__.'/foo/foo.data');\n\t\t$sql = sprintf(\"LOAD DATA LOCAL INFILE %s INTO TABLE test FIELDS TERMINATED BY ';' LINES TERMINATED  BY '\\n'\", $db->quote($filepath));\n\t\tif (exec_and_count(3, $db, $sql, false)) {\n\t\t\t$stmt = $db->query('SELECT id, col1 FROM test ORDER BY id ASC');\n\t\t\t$expected = array();\n\t\t\t$ret = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\t\t\tif ($ret != $expected) {\n\t\t\t\tprintf(\"Results seem wrong, check manually\\n\");\n\t\t\t\techo \"------ EXPECTED OUTPUT ------\\n\";\n\t\t\t\tvar_dump($expected);\n\t\t\t\techo \"------ ACTUAL OUTPUT ------\\n\";\n\t\t\t\tvar_dump($ret);\n\t\t\t}\n\t\t}\n\t} catch (PDOException $e) {\n\t\tprintf(\"[001] %s, [%s] %s\\n\",\n\t\t\t$e->getMessage(),\n\t\t\t$db->errorCode(), implode(' ', $db->errorInfo()));\n\t}\n\tprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
