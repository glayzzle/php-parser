// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/type_declarations/union_types/incdec_prop.phpt
  it("Increment/decrement a typed property with int|float type", function () {
    expect(parser.parseCode("<?php\nclass Test {\n    public int|float $prop;\n    public int|bool $prop2;\n}\n/* Incrementing a int|float property past int min/max is legal */\n$test = new Test;\n$test->prop = PHP_INT_MAX;\n$x = $test->prop++;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MAX;\n$x = ++$test->prop;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MIN;\n$x = $test->prop--;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MIN;\n$x = --$test->prop;\nvar_dump(is_double($test->prop));\n$test = new Test;\n$test->prop = PHP_INT_MAX;\n$r =& $test->prop;\n$x = $test->prop++;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MAX;\n$x = ++$test->prop;\n$r =& $test->prop;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MIN;\n$x = $test->prop--;\n$r =& $test->prop;\nvar_dump(is_double($test->prop));\n$test->prop = PHP_INT_MIN;\n$x = --$test->prop;\n$r =& $test->prop;\nvar_dump(is_double($test->prop));\n/* Incrementing a non-int|float property past int min/max is an error,\n * even if the result of the overflow (a float) would technically be allowed\n * under a type coercion. */\ntry {\n    $test->prop2 = PHP_INT_MAX;\n    $x = $test->prop2++;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MAX;\n    $x = ++$test->prop2;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MIN;\n    $x = $test->prop2--;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MIN;\n    $x = --$test->prop2;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MAX;\n    $r =& $test->prop2;\n    $x = $test->prop2++;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MAX;\n    $r =& $test->prop2;\n    $x = ++$test->prop2;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MIN;\n    $r =& $test->prop2;\n    $x = $test->prop2--;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->prop2 = PHP_INT_MIN;\n    $r =& $test->prop2;\n    $x = --$test->prop2;\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
