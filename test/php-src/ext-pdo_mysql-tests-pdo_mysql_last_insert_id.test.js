// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_last_insert_id.phpt
  it("MySQL PDO->lastInsertId()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    try {\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[001] No query has been run, lastInsertId() should return '0'/string got '%s'/%s\\n\",\n                var_export($tmp, true), gettype($tmp));\n        if ('0' !== ($tmp = $db->lastInsertId('sequence_name')))\n            printf(\"[002] MySQL does not support sequences, expecting '0'/string got '%s'/%s\\n\",\n                var_export($tmp, true), gettype($tmp));\n        $db->exec('DROP TABLE IF EXISTS test');\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[003] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        $db->exec(sprintf('CREATE TABLE test(id INT, col1 CHAR(10)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[004] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        $stmt = $db->query('SELECT id FROM test LIMIT 1');\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[005] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        // no auto increment column\n        $db->exec(\"INSERT INTO test(id, col1) VALUES (100, 'a')\");\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[006] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        $db->exec('ALTER TABLE test MODIFY id INT AUTO_INCREMENT PRIMARY KEY');\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[006] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        // duplicate key\n        @$db->exec(\"INSERT INTO test(id, col1) VALUES (100, 'a')\");\n        if ('0' !== ($tmp = $db->lastInsertId()))\n            printf(\"[007] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        $db->exec(\"INSERT INTO test(id, col1) VALUES (101, 'b')\");\n        if ('101' !== ($tmp = $db->lastInsertId()))\n            printf(\"[008] Expecting '0'/string got '%s'/%s\", var_export($tmp, true), gettype($tmp));\n        $db->exec('ALTER TABLE test MODIFY col1 CHAR(10) UNIQUE');\n        // replace = delete + insert -> new auto increment value\n        $db->exec(\"REPLACE INTO test(col1) VALUES ('b')\");\n        $next_id = (int)$db->lastInsertId();\n        if ($next_id <= 101)\n            printf(\"[009] Expecting at least 102, got %d\\n\",$next_id);\n        $stmt = $db->query('SELECT LAST_INSERT_ID() as _last_id');\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        $last_id = $row['_last_id'];\n        if ($next_id != $last_id) {\n            printf(\"[010] LAST_INSERT_ID() = %d and lastInserId() = %d differ\\n\",\n                $last_id, $next_id);\n        }\n        $db->exec(\"INSERT INTO test(col1) VALUES ('c'), ('d'), ('e')\");\n        $next_id = (int)$db->lastInsertId();\n        if ($next_id <= $last_id)\n            printf(\"[011] Expecting at least %d, got %d\\n\", $last_id + 1, $next_id);\n        // warnings are unhandy, lets go for exceptions for a second\n        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        try {\n            $ignore_exception = true;\n            $db->exec('LOCK TABLE test WRITE');\n            $ignore_exception = false;\n            if (MySQLPDOTest::getServerVersion($db) >= 50000) {\n                $stmt = $db->query('SELECT @@auto_increment_increment AS inc');\n                $row = $stmt->fetch(PDO::FETCH_ASSOC);\n                $inc = $row['inc'];\n            } else {\n                $inc = 1;\n            }\n            $stmt = $db->query('SELECT LAST_INSERT_ID() as _last_id');\n            $row = $stmt->fetch(PDO::FETCH_ASSOC);\n            $last_id = $row['_last_id'];\n            $db->exec(\"INSERT INTO test(col1) VALUES ('z')\");\n            $next_id = (int)$db->lastInsertId();\n            if ($next_id < ($last_id + $inc))\n                printf(\"[012] Expecting at least %d, got %d\\n\", $last_id + $inc, $next_id);\n        } catch (PDOException $e) {\n            if (!$ignore_exception)\n                printf(\"[014] %s, [%s} %s\\n\", $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n        }\n        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\n        @$db->exec('UNLOCK TABLE test');\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
