// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo/tests/pdo_011.phpt
  it("PDO Common: PDO::FETCH_FUNC and statement overloading", function () {
    expect(parser.parseCode("<?php\nif (getenv('REDIR_TEST_DIR') === false) putenv('REDIR_TEST_DIR='.__DIR__ . '/../../pdo/tests/');\nrequire_once getenv('REDIR_TEST_DIR') . 'pdo_test.inc';\n$db = PDOTest::factory();\n$db->exec('CREATE TABLE test(id int NOT NULL PRIMARY KEY, val VARCHAR(10), grp VARCHAR(10))');\n$db->exec('INSERT INTO test VALUES(1, \\'A\\', \\'Group1\\')');\n$db->exec('INSERT INTO test VALUES(2, \\'B\\', \\'Group1\\')');\n$db->exec('INSERT INTO test VALUES(3, \\'C\\', \\'Group2\\')');\n$db->exec('INSERT INTO test VALUES(4, \\'D\\', \\'Group2\\')');\nclass DerivedStatement extends PDOStatement\n{\n    private function __construct($name, $db)\n    {\n        $this->name = $name;\n        echo __METHOD__ . \"($name)\\n\";\n    }\n    function reTrieve($id, $val) {\n        echo __METHOD__ . \"($id,$val)\\n\";\n        return array($id=>$val);\n    }\n}\n$select1 = $db->prepare('SELECT grp, id FROM test');\n$select2 = $db->prepare('SELECT id, val FROM test');\n$derived = $db->prepare('SELECT id, val FROM test', array(PDO::ATTR_STATEMENT_CLASS=>array('DerivedStatement', array('Overloaded', $db))));\nclass Test1\n{\n    public function __construct($id, $val)\n    {\n        echo __METHOD__ . \"($id,$val)\\n\";\n        $this->id = $id;\n        $this->val = $val;\n    }\n    static public function factory($id, $val)\n    {\n        echo __METHOD__ . \"($id,$val)\\n\";\n        return new self($id, $val);\n    }\n}\nfunction test($id,$val='N/A')\n{\n    echo __METHOD__ . \"($id,$val)\\n\";\n    return array($id=>$val);\n}\n$f = new Test1(0,0);\n$select1->execute();\nvar_dump($select1->fetchAll(PDO::FETCH_FUNC|PDO::FETCH_GROUP, 'test'));\n$select2->execute();\nvar_dump($select2->fetchAll(PDO::FETCH_FUNC, 'test'));\n$select2->execute();\nvar_dump($select2->fetchAll(PDO::FETCH_FUNC, array('Test1','factory')));\n$select2->execute();\nvar_dump($select2->fetchAll(PDO::FETCH_FUNC, array($f, 'factory')));\nvar_dump(get_class($derived));\n$derived->execute();\nvar_dump($derived->fetchAll(PDO::FETCH_FUNC, array($derived, 'retrieve')));\n$derived->execute();\nvar_dump($derived->fetchAll(PDO::FETCH_FUNC, array($derived, 'reTrieve')));\n$derived->execute();\nvar_dump($derived->fetchAll(PDO::FETCH_FUNC, array($derived, 'RETRIEVE')));\n?>")).toMatchSnapshot();
  });
});
