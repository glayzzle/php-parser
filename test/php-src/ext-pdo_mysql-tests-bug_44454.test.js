// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/bug_44454.phpt
  it("Bug #44454 (Unexpected exception thrown in foreach() statement)", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/config.inc';\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\nfunction bug_44454($db) {\n    try {\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec('CREATE TABLE test(a INT, b INT, UNIQUE KEY idx_ab (a, b))');\n        $db->exec('INSERT INTO test(a, b) VALUES (1, 1)');\n        $stmt = $db->query('SELECT a, b FROM test');\n        printf(\"... SELECT has returned %d row...\\n\", $stmt->rowCount());\n        while ($row = $stmt->fetch()) {\n            try {\n                printf(\"... INSERT should fail...\\n\");\n                $db->exec('INSERT INTO test(a, b) VALUES (1, 1)');\n            } catch (Exception $e) {\n                printf(\"... STMT - %s\\n\", var_export($stmt->errorCode(), true));\n                printf(\"... PDO  - %s\\n\", var_export($db->errorInfo(), true));\n            }\n        }\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec('CREATE TABLE test(a INT, b INT, UNIQUE KEY idx_ab (a, b))');\n        $db->exec('INSERT INTO test(a, b) VALUES (1, 1)');\n    } catch (Exception $e) {\n        printf(\"... While error %s\\n\", $e->getMessage()); ;\n    }\n    $stmt = $db->query('SELECT a, b FROM test');\n    printf(\"... SELECT has returned %d row...\\n\", $stmt->rowCount());\n    foreach ($stmt as $row) {\n        try {\n            printf(\"... INSERT should fail...\\n\");\n            $db->exec('INSERT INTO test(a, b) VALUES (1, 1)');\n        } catch (Exception $e) {\n            printf(\"... STMT - %s\\n\", var_export($stmt->errorCode(), true));\n            printf(\"... PDO  - %s\\n\", var_export($db->errorInfo(), true));\n        }\n    }\n}\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\nprint \"Native Prepared Statements\\n\";\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\nbug_44454($db);\nprint \"\\nEmulated Prepared Statements\\n\";\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\nbug_44454($db);\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
