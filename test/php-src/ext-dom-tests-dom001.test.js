// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/dom/tests/dom001.phpt
  it("Test 1: Accessing single node", function () {
    expect(parser.parseCode("<?php\nrequire_once(\"dom_test.inc\");\necho \"Test 1: accessing single nodes from php\\n\";\n$dom = new domDocument;\n$dom->loadxml($xmlstr);\nif(!$dom) {\n  echo \"Error while parsing the document\\n\";\n  exit;\n}\n// children() of of document would result in a memleak\n//$children = $dom->children();\n//print_node_list($children);\necho \"--------- root\\n\";\n$rootnode = $dom->documentElement;\nprint_node($rootnode);\necho \"--------- children of root\\n\";\n$children = $rootnode->childNodes;\nprint_node_list($children);\n// The last node should be identical with the last entry in the children array\necho \"--------- last\\n\";\n$last = $rootnode->lastChild;\nprint_node($last);\n// The parent of this last node is the root again\necho \"--------- parent\\n\";\n$parent = $last->parentNode;\nprint_node($parent);\n// The children of this parent are the same children as one above\necho \"--------- children of parent\\n\";\n$children = $parent->childNodes;\nprint_node_list($children);\necho \"--------- creating a new attribute\\n\";\n//This is worthless\n//$attr = $dom->createAttribute(\"src\", \"picture.gif\");\n//print_r($attr);\n//$rootnode->set_attributeNode($attr);\n$attr = $rootnode->setAttribute(\"src\", \"picture.gif\");\n$attr = $rootnode->getAttribute(\"src\");\nprint_r($attr);\nprint \"\\n\";\necho \"--------- Get Attribute Node\\n\";\n$attr = $rootnode->getAttributeNode(\"src\");\nprint_node($attr);\necho \"--------- Remove Attribute Node\\n\";\n$attr = $rootnode->removeAttribute(\"src\");\nprint \"Removed \" . $attr . \" attributes.\\n\";\necho \"--------- attributes of rootnode\\n\";\n$attrs = $rootnode->attributes;\nprint_node_list($attrs);\necho \"--------- children of an attribute\\n\";\n$children = $attrs->item(0)->childNodes;\nprint_node_list($children);\necho \"--------- Add child to root\\n\";\n$myelement = new domElement(\"Silly\", \"Symphony\");\n$newchild = $rootnode->appendChild($myelement);\nprint_node($newchild);\nprint $dom->saveXML();\nprint \"\\n\";\necho \"--------- Find element by tagname\\n\";\necho \"    Using dom\\n\";\n$children = $dom->getElementsByTagname(\"Silly\");\nprint_node_list($children);\necho \"    Using elem\\n\";\n$children = $rootnode->getElementsByTagName(\"Silly\");\nprint_node_list($children);\necho \"--------- Unlink Node\\n\";\nprint_node($children->item(0));\n$rootnode->removeChild($children->item(0));\nprint_node_list($rootnode->childNodes);\nprint $dom->savexml();\necho \"--------- Find element by id\\n\";\nprint (\"Not implemented\\n\");\necho \"--------- Check various node_name return values\\n\";\nprint (\"Not needed\\n\");\n?>")).toMatchSnapshot();
  });
});
