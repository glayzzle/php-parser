// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/strripos_variation2.phpt
  it("Test strripos() function : usage variations - single quoted strings for 'haystack' & 'needle' arguments", function () {
    expect(parser.parseCode("<?php\n/* Test strripos() function by passing single quoted strings to 'haystack' & 'needle' arguments */\necho \"*** Testing strripos() function: with single quoted strings ***\\n\";\n$haystack = 'Hello,\\t\\n\\0\\n  $&!#%()*<=>?@hello123456he \\x234 \\101 ';\n$needles = array(\n          //regular strings\n/*1*/\t  'l',\n          'L',\n          'HELLO',\n          'hEllo',\n          //escape characters\n/*5*/\t  '\\t',\n          '\\T',\n          '     ',\n          '\\n',\n          '\\N',\n          '\n        ',  //new line\n          //nulls\n/*11*/\t  '\\0',\n          //boolean false\n/*14*/\t  FALSE,\n          false,\n          //empty string\n/*16*/\t  '',\n          //special chars\n/*17*/\t  ' ',\n          '$',\n          ' $',\n          '&',\n          '!#',\n          '()',\n          '<=>',\n          '>',\n          '=>',\n          '?',\n          '@',\n          '@hEllo',\n/*29*/\t  '12345', \t//decimal numeric string\n          '\\x23',\t//hexadecimal numeric string\n          '#',  \t//respective ASCII char of \\x23\n          '\\101',  \t//octal numeric string\n          'A', \t\t// respective ASCII char for \\101\n          '456HEE', //numerics + chars\n          42, \t\t//needle as int(ASCII value of '*')\n          $haystack  //haystack as needle\n);\n/* loop through to get the position of the needle in haystack string */\n$count = 1;\nforeach ($needles as $needle) {\n  echo \"-- Iteration $count --\\n\";\n  var_dump( strripos($haystack, $needle) );\n  var_dump( strripos($haystack, $needle, 1) );\n  var_dump( strripos($haystack, $needle, 20) );\n  var_dump( strripos($haystack, $needle, -1) );\n  $count++;\n}\n?>")).toMatchSnapshot();
  });
});
