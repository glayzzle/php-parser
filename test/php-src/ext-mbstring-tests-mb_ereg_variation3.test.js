// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_ereg_variation3.phpt
  it("Test mb_ereg() function : usage variations - pass different character classes to see they match correctly", function () {
    expect(parser.parseCode("<?php\n/*\n * test that mb_ereg can match correctly when passed different character classes.\n */\necho \"*** Testing mb_ereg() : variation ***\\n\";\nmb_regex_encoding('utf-8'); // have to set otherwise won't match $mb properly\n$mb = base64_decode('5pel5pys6Kqe');\n$character_classes = array ('aB1'    => '[[:alnum:]]+', /*1*/\n                            'aBcD'   => '[[:alpha:]]+',\n                            'ab/='   => '[[:ascii:]]+',\n                            \" \\t\"    => '[[:blank:]]+',\n                            '234'    => '[[:digit:]]+', /*5*/\n                            \"$mb\"    => '[[:graph:]]+',\n                            'fjds'   => '[[:lower:]]+',\n                            \"$mb\\t\"  => '[[:print:]]+',\n                            '.!\"*@'  => '[[:punct:]]+',\n                            \"\\t\"     => '[[:space:]]+', /*10*/\n                            'IDSJV'  => '[[:upper:]]+',\n                            '3b5D'   => '[[:xdigit:]]+'); /*12*/\n$iterator = 1;\nforeach($character_classes as $string => $pattern) {\n    if (is_array(@$regs)) {\n        $regs = null;\n    }\n    // make sure any multibyte output is in base 64\n    echo \"\\n-- Iteration $iterator --\\n\";\n    var_dump(mb_ereg($pattern, $string, $regs));\n    base64_encode_var_dump($regs);\n    $iterator++;\n}\n/**\n * replicate a var dump of an array but outputted string values are base64 encoded\n *\n * @param array $regs\n */\nfunction base64_encode_var_dump($regs) {\n    if ($regs) {\n        echo \"array(\" . count($regs) . \") {\\n\";\n        foreach ($regs as $key => $value) {\n            echo \"  [$key]=>\\n  \";\n            if (is_string($value)) {\n                var_dump(base64_encode($value));\n            } else {\n                var_dump($value);\n            }\n        }\n        echo \"}\\n\";\n    } else {\n        echo \"NULL\\n\";\n    }\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
