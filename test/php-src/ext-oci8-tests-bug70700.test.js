// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/bug70700.phpt
  it("Tests for LOBs with multibyte strings, reading them out in chunks\n(Doc Bug #70700)", function () {
    expect(parser.parseCode("<?php\nrequire(__DIR__.'/connect.inc');\n$stmt = oci_parse($c, 'DROP TABLE oci8_bug70700');\n@oci_execute($stmt);\noci_free_statement($stmt);\n$stmt = oci_parse($c, 'CREATE TABLE oci8_bug70700 (id NUMBER, data CLOB)');\noci_execute($stmt);\noci_free_statement($stmt);\n$id = null;\n$insert = oci_parse($c, 'INSERT INTO oci8_bug70700 (id, data) VALUES (:id, :data)');\noci_bind_by_name($insert, ':id', $id);\n$select = oci_parse($c, \"SELECT data FROM oci8_bug70700 WHERE id = :id\");\noci_bind_by_name($select, ':id', $id);\necho PHP_EOL, 'Test 1: j', PHP_EOL;\n$string1 = 'abc' . str_repeat('j', 1000000) . 'xyz';\n$id = 1;\n$desc = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($insert, ':data', $desc, -1, OCI_B_CLOB);\n$desc->writeTemporary($string1, OCI_TEMP_CLOB);\noci_execute($insert);\n$desc->save($string1);\noci_commit($c);\n$desc->close();\noci_bind_by_name($select, ':id', $id);\noci_execute($select);\n$row = oci_fetch_array($select, OCI_ASSOC);\n$lob = $row['DATA'];\n$fh = fopen('php://temp', 'rw');\nwhile (! $lob->eof()) {\n    $data = $lob->read(8192);             // read($characters), not read($bytes)\n    fwrite($fh, $data, strlen($data));    // fwrite(a, b, $bytes)\n}\n$lob->free();\nrewind($fh);\n$stream1a = stream_get_contents($fh);\nfclose($fh);\n$start1a = mb_substr($stream1a, 0, 10);\n$ending1a = mb_substr($stream1a, -10);\necho 'size of string1 is ', strlen($string1), ' bytes, ', mb_strlen($string1), ' chars.', PHP_EOL;\necho 'size of stream1a is ', strlen($stream1a), ' bytes, ', mb_strlen($stream1a), ' chars.', PHP_EOL;\necho 'beg of stream1a is ', $start1a, PHP_EOL;\necho 'end of stream1a is ', $ending1a, PHP_EOL;\necho PHP_EOL, 'Test 2: £', PHP_EOL;\n$string2 = 'abc' . str_repeat('£', 4094) . 'xyz';\n$id = 2;\n$desc = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($insert, ':data', $desc, -1, OCI_B_CLOB);\n$desc->writeTemporary($string2, OCI_TEMP_CLOB);\noci_execute($insert);\n$desc->save($string2);\noci_commit($c);\n$desc->close();\noci_bind_by_name($select, ':id', $id);\noci_execute($select);\n$row = oci_fetch_array($select, OCI_ASSOC);\n$lob = $row['DATA'];\n$fh = fopen('php://temp', 'rw');\nwhile (! $lob->eof()) {\n    $data = $lob->read(8192);             // read($characters), not read($bytes)\n    fwrite($fh, $data, strlen($data));    // fwrite(a, b, $bytes)\n}\n$lob->free();\nrewind($fh);\n$stream2a = stream_get_contents($fh);\nfclose($fh);\n$start2a = mb_substr($stream2a, 0, 10);\n$ending2a = mb_substr($stream2a, -10);\necho 'size of string2 is ', strlen($string2), ' bytes, ', mb_strlen($string2), ' chars.', PHP_EOL;\necho 'size of stream2a is ', strlen($stream2a), ' bytes, ', mb_strlen($stream2a), ' chars.', PHP_EOL;\necho 'beg of stream2a is ', $start2a, PHP_EOL;\necho 'end of stream2a is ', $ending2a, PHP_EOL;\necho PHP_EOL, 'Test 3: Җ', PHP_EOL;\n$string3 = 'abc' . str_repeat('Җ', 4094) . 'xyz';\n$id = 3;\n$desc = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($insert, ':data', $desc, -1, OCI_B_CLOB);\n$desc->writeTemporary($string3, OCI_TEMP_CLOB);\noci_execute($insert);\n$desc->save($string3);\noci_commit($c);\n$desc->close();\noci_bind_by_name($select, ':id', $id);\noci_execute($select);\n$row = oci_fetch_array($select, OCI_ASSOC);\n$lob = $row['DATA'];\n$fh = fopen('php://temp', 'rw');\nwhile (! $lob->eof()) {\n    $data = $lob->read(8192);             // read($characters), not read($bytes)\n    fwrite($fh, $data, strlen($data));    // fwrite(a, b, $bytes)\n}\n$lob->free();\nrewind($fh);\n$stream3a = stream_get_contents($fh);\nfclose($fh);\n$start3a = mb_substr($stream3a, 0, 10);\n$ending3a = mb_substr($stream3a, -10);\necho 'size of string3 is ', strlen($string3), ' bytes, ', mb_strlen($string3), ' chars.', PHP_EOL;\necho 'size of stream3a is ', strlen($stream3a), ' bytes, ', mb_strlen($stream3a), ' chars.', PHP_EOL;\necho 'beg of stream3a is ', $start3a, PHP_EOL;\necho 'end of stream3a is ', $ending3a, PHP_EOL;\necho PHP_EOL, 'Test 4: の', PHP_EOL;\n$string4 = 'abc' . str_repeat('の', 2729) . 'xyz';\n$id = 4;\n$desc = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($insert, ':data', $desc, -1, OCI_B_CLOB);\n$desc->writeTemporary($string4, OCI_TEMP_CLOB);\noci_execute($insert);\n$desc->save($string4);\noci_commit($c);\n$desc->close();\noci_bind_by_name($select, ':id', $id);\noci_execute($select);\n$row = oci_fetch_array($select, OCI_ASSOC);\n$lob = $row['DATA'];\n$fh = fopen('php://temp', 'rw');\nwhile (! $lob->eof()) {\n    $data = $lob->read(8192);             // read($characters), not read($bytes)\n    fwrite($fh, $data, strlen($data));    // fwrite(a, b, $bytes)\n}\n$lob->free();\nrewind($fh);\n$stream4a = stream_get_contents($fh);\nfclose($fh);\n$start4a = mb_substr($stream4a, 0, 10);\n$ending4a = mb_substr($stream4a, -10);\necho 'size of string4 is ', strlen($string4), ' bytes, ', mb_strlen($string4), ' chars.', PHP_EOL;\necho 'size of stream4a is ', strlen($stream4a), ' bytes, ', mb_strlen($stream4a), ' chars.', PHP_EOL;\necho 'beg of stream4a is ', $start4a, PHP_EOL;\necho 'end of stream4a is ', $ending4a, PHP_EOL;\n?>")).toMatchSnapshot();
  });
});
