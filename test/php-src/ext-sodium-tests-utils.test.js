// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sodium/tests/utils.phpt
  it("Check for libsodium utils", function () {
    expect(parser.parseCode("<?php\n$a = 'test';\nsodium_memzero($a);\nif ($a !== 'test') {\n  var_dump($a);\n} else {\n  echo $a;\n}\necho \"\\n\";\n$b = 'string';\n$c = 'string';\nvar_dump(!sodium_memcmp($b, $c));\nvar_dump(!sodium_memcmp($b, 'String'));\n$v = \"\\xFF\\xFF\\x80\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";\n$v .= \"\\x08\";\nsodium_increment($v);\nvar_dump(bin2hex($v));\n$w = \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFA\\xFB\";\n$w .= \"\\xFC\";\nsodium_add($v, $w);\nvar_dump(bin2hex($v));\nif (SODIUM_LIBRARY_MAJOR_VERSION > 7 ||\n    (SODIUM_LIBRARY_MAJOR_VERSION == 7 &&\n     SODIUM_LIBRARY_MINOR_VERSION >= 6)) {\n    $v_1 = \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\";\n    $v_2 = \"\".\"\\x02\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\";\n    $v_1 .= '';\n    var_dump(sodium_compare($v_1, $v_2));\n    sodium_increment($v_1);\n    var_dump(sodium_compare($v_1, $v_2));\n    sodium_increment($v_1);\n    var_dump(sodium_compare($v_1, $v_2));\n} else {\n    // Dummy test results for libsodium < 1.0.4\n    var_dump(-1, 0, 1);\n}\n$str = 'stdClass';\nsodium_memzero($str);\n$obj = (object)array('foo' => 'bar');\nvar_dump($obj);\n$str = 'xyz';\n$str_padded = sodium_pad($str, 16);\nvar_dump(bin2hex($str_padded));\n$str_unpadded = sodium_unpad($str_padded, 16);\nvar_dump($str_unpadded == $str);\nif (defined('SODIUM_BASE64_VARIANT_ORIGINAL')) {\n    for ($i = 0; $i < 100; $i++) {\n        $bin = $i == 0 ? '' : random_bytes($i);\n        $b64 = base64_encode($bin);\n        $b64_ = sodium_bin2base64($bin, SODIUM_BASE64_VARIANT_ORIGINAL);\n        if ($b64 !== $b64_) {\n            echo \"frombin[$b64] != frombin_[$b64_]\\n\";\n        }\n        $bin_ = sodium_base642bin($b64, SODIUM_BASE64_VARIANT_ORIGINAL);\n        if ($bin !== $bin_) {\n            echo \"frombase64([$b64]) != frombase64_[$b64]\\n\";\n        }\n        $bin_ = sodium_base642bin(\" $b64\\n\", SODIUM_BASE64_VARIANT_ORIGINAL, \" \\n\");\n        if ($bin !== $bin_) {\n            echo \"frombase64([$b64]) != frombase64_([ $b64\\\\n])\\n\";\n        }\n    }\n    try {\n        var_dump(sodium_base642bin('O1R', SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING));\n    } catch (Exception $e) {\n        var_dump('base64(\"O1R\") case passed');\n    }\n    try {\n        var_dump(sodium_base642bin('O1', SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING));\n    } catch (Exception $e) {\n        var_dump('base64(\"O1\") case passed');\n    }\n    try {\n        var_dump(sodium_base642bin('O', SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING));\n    } catch (Exception $e) {\n        var_dump('base64(\"O\") case passed');\n    }\n    var_dump(sodium_base642bin('YWJjZA', SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING));\n} else {\n    var_dump('base64(\"O1R\") case passed');\n    var_dump('base64(\"O1\") case passed');\n    var_dump('base64(\"O\") case passed');\n    var_dump('abcd');\n}\nfunction sodium_foo()\n{\n    throw new SodiumException('test');\n}\ntry {\n    sodium_foo();\n} catch (SodiumException $ex) {\n    var_dump($ex->getMessage());\n}\n?>")).toMatchSnapshot();
  });
});
