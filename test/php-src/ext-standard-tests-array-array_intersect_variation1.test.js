// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_intersect_variation1.phpt
  it("Test array_intersect() function : usage variations - unexpected values for 'array1' argument", function () {
    expect(parser.parseCode("<?php\n/*\n* Testing array_intersect() function by passing values to $array1 argument other than arrays\n* and see that function emits proper warning messages wherever expected.\n* The $array2 argument is a fixed array.\n*/\necho \"*** Testing array_intersect() : Passing non-array values to \\$array1 argument ***\\n\";\n// array to be passsed to $array2 as default argument\n$array2 = array(1, 2);\n// array to be passed to optional argument\n$arr3 = array(1, 2, \"one\" => 1, \"two\" => 2);\n// get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a class\nclass classA\n{\n  public function __toString() {\n    return \"Class A object\";\n  }\n}\n// heredoc string\n$heredoc = <<<EOT\nhello world\nEOT;\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// unexpected values to be passed to $array1 argument\n$arrays = array(\n       // int data\n/*1*/  0,\n       1,\n       12345,\n       -2345,\n       // float data\n/*5*/  10.5,\n       -10.5,\n       12.3456789000e10,\n       12.3456789000E-10,\n       .5,\n       // null data\n/*10*/ NULL,\n       null,\n       // boolean data\n/*12*/ true,\n       false,\n       TRUE,\n       FALSE,\n       // empty data\n/*16*/ \"\",\n       '',\n       // string data\n/*18*/ \"string\",\n       'string',\n       $heredoc,\n       // object data\n/*21*/ new classA(),\n       // undefined data\n/*22*/ @$undefined_var,\n       // unset data\n/*23*/ @$unset_var,\n       // resource variable\n/*24*/ $fp\n);\n// loop through each sub-array within $arrays to check the behavior of array_intersect()\n$iterator = 1;\nforeach($arrays as $unexpected_value) {\n    echo \"\\n-- Iterator $iterator --\";\n    // Calling array_intersect() with default arguments\n    try {\n        var_dump( array_intersect($unexpected_value,$array2) );\n    } catch (TypeError $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    // Calling array_intersect() with more arguments\n    try {\n        var_dump( array_intersect($unexpected_value, $array2, $arr3) );\n    } catch (TypeError $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    $iterator++;\n}\n// close the file resource used\nfclose($fp);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
