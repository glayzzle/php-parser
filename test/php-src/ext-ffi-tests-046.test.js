// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/ffi/tests/046.phpt
  it("FFI 046: FFI::CType reflection API", function () {
    expect(parser.parseCode("<?php\n$x = FFI::type(\"uint8_t\");\nvar_dump($x->getKind() === $x::TYPE_UINT8);\nvar_dump($x->getSize());\nvar_dump($x->getAlignment());\n$x = FFI::type(\"enum __attribute__((packed)) {a2, b2}\");\nvar_dump($x->getKind() === $x::TYPE_ENUM);\nvar_dump($x->getEnumKind() === $x::TYPE_UINT8);\n$x = FFI::type(\"char[5]\");\nvar_dump($x->getKind() === $x::TYPE_ARRAY);\nvar_dump($x->getSize());\nvar_dump($x->getArrayElementType()->getKind() === $x::TYPE_CHAR);\nvar_dump($x->getArrayLength());\n$x = FFI::type(\"void*\");\nvar_dump($x->getKind() === $x::TYPE_POINTER);\nvar_dump($x->getPointerType()->getKind() === $x::TYPE_VOID);\n$x = FFI::type(\"struct {double x; double y;}\");\nvar_dump($x->getKind() === $x::TYPE_STRUCT);\nvar_dump(($x->getAttributes() & $x::ATTR_UNION) != 0);\nvar_dump($x->getStructFieldNames());\nvar_dump($x->getStructFieldOffset(\"x\"));\nvar_dump($x->getStructFieldOffset(\"y\"));\nvar_dump($x->getStructFieldType(\"x\")->getKind() == $x::TYPE_DOUBLE);\nvar_dump($x->getStructFieldType(\"y\")->getKind() == $x::TYPE_DOUBLE);\n$x = FFI::type(\"union {double x; double y;}\");\nvar_dump($x->getKind() === $x::TYPE_STRUCT);\nvar_dump(($x->getAttributes() & $x::ATTR_UNION) != 0);\nvar_dump($x->getStructFieldNames());\nvar_dump($x->getStructFieldOffset(\"x\"));\nvar_dump($x->getStructFieldOffset(\"y\"));\nvar_dump($x->getStructFieldType(\"x\")->getKind() == $x::TYPE_DOUBLE);\nvar_dump($x->getStructFieldType(\"y\")->getKind() == $x::TYPE_DOUBLE);\n$x = FFI::type(\"void (*)(double,int32_t)\");\nvar_dump($x->getKind() === $x::TYPE_POINTER);\nvar_dump($x->getPointerType()->getKind() === $x::TYPE_FUNC);\nvar_dump($x->getPointerType()->getFuncReturnType()->getKind() === $x::TYPE_VOID);\nvar_dump($x->getPointerType()->getFuncParameterCount());\nvar_dump($x->getPointerType()->getFuncParameterType(0)->getKind() === $x::TYPE_DOUBLE);\nvar_dump($x->getPointerType()->getFuncParameterType(1)->getKind() === $x::TYPE_SINT32);\n?>")).toMatchSnapshot();
  });
});
