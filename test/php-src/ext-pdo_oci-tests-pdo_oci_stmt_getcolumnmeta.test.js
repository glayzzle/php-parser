// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_oci/tests/pdo_oci_stmt_getcolumnmeta.phpt
  it("PDO_OCI: PDOStatement->getColumnMeta", function () {
    expect(parser.parseCode("<?php\necho \"Preparations before the test\\n\";\nrequire(__DIR__ . '/../../pdo/tests/pdo_test.inc');\ntry {\n    $db = PDOTest::factory();\n    $db->exec(<<<SQL\nBEGIN\n   EXECUTE IMMEDIATE 'DROP TABLE test';\nEXCEPTION\n   WHEN OTHERS THEN\n      IF SQLCODE != -942 THEN\n     RAISE;\n      END IF;\nEND;\nSQL\n);\n    $db->exec(\"CREATE TABLE test(id INT)\");\n    $db->beginTransaction();\n    $stmt = $db->prepare('SELECT id FROM test ORDER BY id ASC');\n    echo \"Test 1. calling function with invalid parameters\\n\";\n    // execute() has not been called yet\n    // NOTE: no warning\n    $tmp = $stmt->getColumnMeta(0);\n    printf(\" 1.1 Expecting false got %s\\n\", var_export($tmp, true));\n    echo(\" 1.2 \");\n    $stmt->execute();\n    // PDOStatement::getColumnMeta() expects exactly 1 argument, 0 given in\n    try {\n        $tmp = $stmt->getColumnMeta();\n    } catch (ArgumentCountError $e) {\n        if (false !== $tmp) {\n            printf(\"[1.2] Expecting false got %s\\n\", var_export($tmp, true));\n        }\n        echo $e->getMessage(), \"\\n\";\n    }\n    // invalid offset\n    echo \" 1.3 \";\n    try {\n        $tmp = $stmt->getColumnMeta(-1);\n    } catch (ValueError $e) {\n        if (false !== $tmp) {\n            printf(\"[1.3] Expecting false got %s\\n\", var_export($tmp, true));\n        }\n        echo $e->getMessage(), \"\\n\";\n    }\n    // PDOStatement::getColumnMeta(): Argument #1 must be of type int, array given in\n    echo \" 1.4 \";\n    try {\n        $tmp = $stmt->getColumnMeta(array());\n    } catch (TypeError $e) {\n        if (false !== $tmp)\n            printf(\"[1.4] Expecting false got %s\\n\", var_export($tmp, true));\n        echo $e->getMessage(), \"\\n\";\n    }\n    // PDOStatement::getColumnMeta() expects exactly 1 argument, 2 given in\n    echo \" 1.5 \";\n    try {\n        $tmp = $stmt->getColumnMeta(1, 1);\n    } catch (ArgumentCountError $e) {\n        if (false !== $tmp)\n            printf(\"[1.5] Expecting false got %s\\n\", var_export($tmp, true));\n        echo $e->getMessage(), \"\\n\";\n    }\n    // invalid offset\n    $tmp = $stmt->getColumnMeta(1);\n    printf(\" 1.6 Expecting false because of invalid offset got %s\\n\", var_export($tmp, true));\n    echo \"Test 2. testing return values\\n\";\n    echo \"Test 2.1 testing array returned\\n\";\n    $stmt = $db->prepare('SELECT id FROM test ORDER BY id ASC');\n    $stmt->execute();\n    $native = $stmt->getColumnMeta(0);\n    if (count($native) == 0) {\n        printf(\"[008] Meta data seems wrong, %s / %s\\n\",\n            var_export($native, true), var_export($emulated, true));\n    }\n    function test_return($meta, $offset, $native_type, $pdo_type){\n        if (empty($meta)) {\n            printf(\"[%03d + 2] getColumnMeta() failed, %d - %s\\n\", $offset,\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n            return false;\n        }\n        $elements = array('flags', 'scale', 'name', 'len', 'precision', 'pdo_type');\n        foreach ($elements as $k => $element)\n            if (!isset($meta[$element])) {\n                printf(\"[%03d + 3] Element %s missing, %s\\n\", $offset,\n                    $element, var_export($meta, true));\n                return false;\n            }\n        if (!is_null($native_type)) {\n            if (!isset($meta['native_type'])) {\n                printf(\"[%03d + 4] Element native_type missing, %s\\n\", $offset,\n                    var_export($meta, true));\n                return false;\n            }\n            if (!is_array($native_type))\n                $native_type = array($native_type);\n            $found = false;\n            foreach ($native_type as $k => $type) {\n                if ($meta['native_type'] == $type) {\n                    $found = true;\n                    break;\n                }\n            }\n            if (!$found) {\n                printf(\"[%03d + 5] Expecting native type %s, %s\\n\", $offset,\n                    var_export($native_type, true), var_export($meta, true));\n                return false;\n            }\n        }\n        if (!is_null($pdo_type) && ($meta['pdo_type'] != $pdo_type)) {\n            printf(\"[%03d + 6] Expecting PDO type %s got %s (%s)\\n\", $offset,\n                $pdo_type, var_export($meta, true), var_export($meta['native_type']));\n            return false;\n        }\n        return true;\n    }\n    function test_meta(&$db, $offset, $sql_type, $value, $native_type, $pdo_type) {\n        $db->exec(<<<SQL\nBEGIN\n   EXECUTE IMMEDIATE 'DROP TABLE test';\nEXCEPTION\n   WHEN OTHERS THEN\n      IF SQLCODE != -942 THEN\n         RAISE;\n      END IF;\nEND;\nSQL\n);\n        $sql = sprintf('CREATE TABLE test(id INT, label %s)', $sql_type);\n        $stmt = $db->prepare($sql);\n        $stmt->execute();\n        if (!$db->exec(sprintf(\"INSERT INTO test(id, label) VALUES (1, '%s')\", $value))) {\n            printf(\"[%03d] + 1] Insert failed, %d - %s\\n\", $offset,\n                $db->errorCode(), var_export($db->errorInfo(), true));\n            return false;\n        }\n        $stmt = $db->prepare('SELECT id, label FROM test');\n        $stmt->execute();\n        $meta = $stmt->getColumnMeta(1);\n        return test_return($meta, $offset, $native_type, $pdo_type);\n    }\n    echo \"Test 2.2 testing numeric columns\\n\";\n    test_meta($db, 20, 'NUMBER'         , 0                    , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 30, 'NUMBER'         , 256                  , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 40, 'INT'            , 256                  , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 50, 'INTEGER'        , 256                  , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 60, 'NUMBER'         , 256.01               , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 70, 'NUMBER'         , -8388608             , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 80, 'NUMBER'         , 2147483648           , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 90, 'NUMBER'         , 4294967295           , 'NUMBER', PDO::PARAM_STR);\n    test_meta($db, 100, 'DEC'             , 1.01               , 'NUMBER'       , PDO::PARAM_STR);\n    test_meta($db, 110, 'DECIMAL'         , 1.01               , 'NUMBER'       , PDO::PARAM_STR);\n    test_meta($db, 120, 'FLOAT'           , 1.01               , 'FLOAT'        , PDO::PARAM_STR);\n    test_meta($db, 130, 'DOUBLE PRECISION', 1.01               , 'FLOAT'        , PDO::PARAM_STR);\n    test_meta($db, 140, 'BINARY_FLOAT'    , 1.01               , 'BINARY_FLOAT' , PDO::PARAM_STR);\n    test_meta($db, 150, 'BINARY_DOUBLE'   , 1.01               , 'BINARY_DOUBLE', PDO::PARAM_STR);\n    echo \"Test 2.3 testing temporal columns\\n\";\n    $db->exec(\"alter session set nls_date_format='YYYY-MM-DD'\");\n    test_meta($db, 160, 'DATE'           , '2008-04-23'        , 'DATE', PDO::PARAM_STR);\n    echo \"Test 2.4 testing string columns\\n\";\n    test_meta($db, 170, 'CHAR(1)'       , 'a'                  , 'CHAR'     , PDO::PARAM_STR);\n    test_meta($db, 180, 'CHAR(10)'      , '0123456789'         , 'CHAR'     , PDO::PARAM_STR);\n    test_meta($db, 190, 'CHAR(255)'     , str_repeat('z', 255) , 'CHAR'     , PDO::PARAM_STR);\n    test_meta($db, 200, 'VARCHAR(1)'    , 'a'                  , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 210, 'VARCHAR(10)'   , '0123456789'         , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 220, 'VARCHAR(255)'  , str_repeat('z', 255) , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 230, 'VARCHAR2(1)'   , 'a'                  , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 240, 'VARCHAR2(10)'  , '0123456789'         , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 250, 'VARCHAR2(255)' , str_repeat('z', 255) , 'VARCHAR2' , PDO::PARAM_STR);\n    test_meta($db, 260, 'NCHAR(1)'      , 'a'                  , 'NCHAR'    , PDO::PARAM_STR);\n    test_meta($db, 270, 'NCHAR(10)'     , '0123456789'         , 'NCHAR'    , PDO::PARAM_STR);\n    test_meta($db, 280, 'NCHAR(255)'    , str_repeat('z', 255) , 'NCHAR'    , PDO::PARAM_STR);\n    test_meta($db, 290, 'NVARCHAR2(1)'  , 'a'                  , 'NVARCHAR2', PDO::PARAM_STR);\n    test_meta($db, 300, 'NVARCHAR2(10)' , '0123456789'         , 'NVARCHAR2', PDO::PARAM_STR);\n    test_meta($db, 310, 'NVARCHAR2(255)', str_repeat('z', 255) , 'NVARCHAR2', PDO::PARAM_STR);\n    echo \"Test 2.5 testing lobs columns\\n\";\n    test_meta($db, 320, 'CLOB'          , str_repeat('b', 255) , 'CLOB'    , PDO::PARAM_LOB);\n    test_meta($db, 330, 'BLOB'          , str_repeat('b', 256) , 'BLOB'    , PDO::PARAM_LOB);\n    test_meta($db, 340, 'NCLOB'         , str_repeat('b', 255) , 'NCLOB'   , PDO::PARAM_LOB);\n    test_meta($db, 350, 'LONG'          , str_repeat('b', 256) , 'LONG'    , PDO::PARAM_STR);\n    test_meta($db, 360, 'LONG RAW'      , str_repeat('b', 256) , 'LONG RAW', PDO::PARAM_STR);\n    test_meta($db, 370, 'RAW(256)'      , str_repeat('b', 256) , 'RAW'     , PDO::PARAM_STR);\n    $db->exec(<<<SQL\nBEGIN\n   EXECUTE IMMEDIATE 'DROP TABLE test';\nEXCEPTION\n   WHEN OTHERS THEN\n      IF SQLCODE != -942 THEN\n         RAISE;\n      END IF;\nEND;\nSQL\n);\n    echo \"Test 2.6 testing function return\\n\";\n    $stmt = $db->query('SELECT count(*) FROM dual');\n    $meta = $stmt->getColumnMeta(0);\n    test_return($meta, 380, 'NUMBER', PDO::PARAM_STR);\n    $stmt = $db->query(\"SELECT TO_DATE('2008-04-23') FROM dual\");\n    $meta = $stmt->getColumnMeta(0);\n    test_return($meta, 390, 'DATE', PDO::PARAM_STR);\n    $stmt = $db->query(\"SELECT TO_CHAR(542) FROM dual\");\n    $meta = $stmt->getColumnMeta(0);\n    test_return($meta, 400, 'VARCHAR2', PDO::PARAM_STR);\n    echo \"Test 2.7 testing flags returned\\n\";\n    $sql = sprintf('CREATE TABLE test(id INT NOT NULL, label INT NULL)');\n    $stmt = $db->prepare($sql);\n    $stmt->execute();\n    $db->exec('INSERT INTO test(id, label) VALUES (1, 1)');\n    $stmt = $db->query('SELECT id, label FROM test');\n    $meta = $stmt->getColumnMeta(0);\n    // verify the flags array contains a not_null flag and not nullable flags\n    if (!isset($meta['flags'])) {\n        printf(\"[1001] No flags contained in metadata %s\\n\", var_export($meta, true));\n    } else {\n        $flags = $meta['flags'];\n        $found = false;\n        foreach ($flags as $k => $flag) {\n            if ($flag == 'not_null')\n                $found = true;\n            if ($flag == 'nullable')\n                printf(\"[1003] Flags seem wrong %s\\n\", var_export($meta, true));\n        }\n        if (!$found)\n            printf(\"[1002] Flags seem wrong %s\\n\", var_export($meta, true));\n    }\n    $meta = $stmt->getColumnMeta(1);\n    // verify the flags array contains a nullable flag and not not_null flags\n    if (!isset($meta['flags'])) {\n        printf(\"[1003] No flags contained in metadata %s\\n\", var_export($meta, true));\n    } else {\n        $flags = $meta['flags'];\n        $found = false;\n        foreach ($flags as $k => $flag) {\n            if ($flag == 'not_null')\n                printf(\"[1004] Flags seem wrong %s\\n\", var_export($meta, true));\n            if ($flag == 'nullable')\n                $found = true;\n        }\n        if (!$found)\n            printf(\"[1005] Flags seem wrong %s\\n\", var_export($meta, true));\n    }\n} catch (PDOException $e) {\n    // we should never get here, we use warnings, but never trust a system...\n    printf(\"[001] %s, [%s} %s\\n\",\n        $e->getMessage(), $db->errorInfo(), implode(' ', $db->errorInfo()));\n}\n$db->exec(<<<SQL\nBEGIN\n   EXECUTE IMMEDIATE 'DROP TABLE test';\nEXCEPTION\n   WHEN OTHERS THEN\n      IF SQLCODE != -942 THEN\n         RAISE;\n      END IF;\nEND;\nSQL\n);\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
