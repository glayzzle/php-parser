// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/crypt_sha512.phpt
  it("crypt() SHA-512", function () {
    expect(parser.parseCode("<?php\n$tests = array(\n    1 => array(\n        '$6$saltstring',\n        'Hello world!',\n        '$6$saltstring$svn8UoSVapNtMuq1ukKS4tPQd8iKwSMHWjl/O817G3uBnIFNjnQJuesI68u4OTLiBFdcbYEdFCoEOfaS35inz1'\n    ),\n    2 => array(\n        '$6$rounds=10000$saltstringsaltstring',\n        'Hello world!',\n        '$6$rounds=10000$saltstringsaltst$OW1/O6BYHV6BcXZu8QVeXbDWra3Oeqh0sbHbbMCVNSnCM/UrjmM0Dp8vOuZeHBy/YTBmSK6H9qs/y3RnOaw5v.'\n    ),\n    3 => array(\n        '$6$rounds=5000$toolongsaltstring',\n        'This is just a test',\n        '$6$rounds=5000$toolongsaltstrin$lQ8jolhgVRVhY4b5pZKaysCLi0QBxGoNeKQzQ3glMhwllF7oGDZxUhx1yxdYcz/e1JSbq3y6JMxxl8audkUEm0'\n    ),\n    4 => array(\n        '$6$rounds=1400$anotherlongsaltstring',\n        'a very much longer text to encrypt.  This one even stretches over morethan one line.',\n        '$6$rounds=1400$anotherlongsalts$POfYwTEok97VWcjxIiSOjiykti.o/pQs.wPvMxQ6Fm7I6IoYN3CmLs66x9t0oSwbtEW7o7UmJEiDwGqd8p4ur1'\n    ),\n    5 => array(\n        '$6$rounds=77777$short',\n        'we have a short salt string but not a short password',\n        '$6$rounds=77777$short$WuQyW2YR.hBNpjjRhpYD/ifIw05xdfeEyQoMxIXbkvr0gge1a1x3yRULJ5CCaUeOxFmtlcGZelFl5CxtgfiAc0'\n    ),\n    6 => array(\n        '$6$rounds=123456$asaltof16chars..',\n        'a short string',\n        '$6$rounds=123456$asaltof16chars..$BtCwjqMJGx5hrJhZywWvt0RLE8uZ4oPwcelCjmw2kSYu.Ec6ycULevoBK25fs2xXgMNrCzIMVcgEJAstJeonj1'\n    ),\n    7 => array(\n        '$6$$bar$',\n        'foo',\n        '$6$$QMXjqd7rHQZPQ1yHsXkQqC1FBzDiVfTHXL.LaeDAeVV.IzMaV9VU4MQ8kPuZa2SOP1A0RPm772EaFYjpEJtdu.'\n    ),\n    8 => array(\n        '$6$rounds=10$roundstoolow',\n        'the number of rounds is too low',\n        '*0'\n    ),\n    8 => array(\n        '$6$rounds=1000000000$roundstoohigh',\n        'the number of rounds is too high',\n        '*0'\n    ),\n);\nforeach ($tests as $iter => $t) {\n    $res = crypt($t[1], $t[0]);\n    if ($res != $t[2]) echo \"Iteration $iter failed.\nExpected: <$t[2]>\nGot       <$res>\\n\";\n}\necho \"Passes.\";\n?>")).toMatchSnapshot();
  });
});
