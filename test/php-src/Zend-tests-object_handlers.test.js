// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/object_handlers.phpt
  it("Magic object handlers segfaults and memory errors", function () {
    expect(parser.parseCode("<?php\nfunction f($x) {\n    return $x;\n}\nclass foo implements ArrayAccess {\n    function __get($property) {\n        $GLOBALS[\"y\"] = $property;\n    }\n    function __set($property, $value) {\n        $GLOBALS[\"y\"] = $property;\n    }\n    function __call($func, $args) {\n        $GLOBALS[\"y\"] = $func;\n    }\n    static function __callStatic($func, $args) {\n        $GLOBALS[\"y\"] = $func;\n    }\n    function offsetGet($index): mixed {\n        $GLOBALS[\"y\"] = $index;\n        return null;\n    }\n    function offsetSet($index, $newval): void {\n        $GLOBALS[\"y\"] = $index;\n    }\n    function offsetExists($index): bool {\n        $GLOBALS[\"y\"] = $index;\n        return true;\n    }\n    function offsetUnset($index): void {\n        $GLOBALS[\"y\"] = $index;\n    }\n}\n$x = new foo();\n$y = null;\n// IS_CONST\n$z = $x->const_get;\necho $y,\"\\n\";\n$x->const_set = 1;\necho $y,\"\\n\";\n$x->const_call();\necho $y,\"\\n\";\nfoo::const_callstatic();\necho $y,\"\\n\";\n$z = $x[\"const_dim_get\"];\necho $y,\"\\n\";\n$x[\"const_dim_set\"] = 1;\necho $y,\"\\n\";\nisset($x[\"const_dim_isset\"]);\necho $y,\"\\n\";\nunset($x[\"const_dim_unset\"]);\necho $y,\"\\n\";\n// IS_CONST + conversion\n$z = $x->{1};\necho $y,\"\\n\";\n$x->{2} = 1;\necho $y,\"\\n\";\n// IS_TMP_VAR\n$c = \"tmp\";\n$z = $x->{$c.\"_get\"};\necho $y,\"\\n\";\n$x->{$c.\"_set\"} = 1;\necho $y,\"\\n\";\n$x->{$c.\"_call\"}();\necho $y,\"\\n\";\n$z = $x[$c.\"_dim_get\"];\necho $y,\"\\n\";\n$x[$c.\"_dim_set\"] = 1;\necho $y,\"\\n\";\nisset($x[$c.\"_dim_isset\"]);\necho $y,\"\\n\";\nunset($x[$c.\"_dim_unset\"]);\necho $y,\"\\n\";\n// IS_TMP_VAR + conversion\n$c = 0;\n$z = $x->{$c+3};\necho $y,\"\\n\";\n$x->{$c+4} = 1;\necho $y,\"\\n\";\n// IS_CV\n$c = \"cv_get\";\n$z = $x->{$c};\necho $y,\"\\n\";\n$c = \"cv_set\";\n$x->{$c} = 1;\necho $y,\"\\n\";\n$c = \"cv_call\";\n$x->{$c}();\necho $y,\"\\n\";\n$c = \"cv_dim_get\";\n$z = $x[$c];\necho $y,\"\\n\";\n$c = \"cv_dim_set\";\n$x[$c] = 1;\necho $y,\"\\n\";\n$c = \"cv_dim_isset\";\nisset($x[$c]);\necho $y,\"\\n\";\n$c = \"cv_dim_unset\";\nunset($x[$c]);\necho $y,\"\\n\";\n// IS_CV + conversion\n$c = 5;\n$z = $x->{$c};\necho $y,\"\\n\";\n$c = 6;\n$x->{$c} = 1;\necho $y,\"\\n\";\n// IS_VAR\n$z = $x->{f(\"var_get\")};\necho $y,\"\\n\";\n$x->{f(\"var_set\")} = 1;\necho $y,\"\\n\";\n$x->{f(\"var_call\")}();\necho $y,\"\\n\";\n$z = $x[f(\"var_dim_get\")];\necho $y,\"\\n\";\n$x[f(\"var_dim_set\")] = 1;\necho $y,\"\\n\";\nisset($x[f(\"var_dim_isset\")]);\necho $y,\"\\n\";\nunset($x[f(\"var_dim_unset\")]);\necho $y,\"\\n\";\n// IS_VAR + conversion\n$z = $x->{f(7)};\necho $y,\"\\n\";\n$x->{f(8)} = 1;\necho $y,\"\\n\";\n?>")).toMatchSnapshot();
  });
});
