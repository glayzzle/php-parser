// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/xml/tests/xml001.phpt
  it("XML parser test, function callbacks", function () {
    expect(parser.parseCode("<?php\nchdir(__DIR__);\n$xml_parser = xml_parser_create();\nxml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, 1);\nxml_set_element_handler($xml_parser, \"startElement\", \"endElement\");\nxml_set_character_data_handler($xml_parser, \"characterData\");\nxml_set_processing_instruction_handler($xml_parser, \"PIHandler\");\nxml_set_default_handler($xml_parser, \"defaultHandler\");\nxml_set_external_entity_ref_handler($xml_parser, \"externalEntityRefHandler\");\nif (!($fp = @fopen(\"xmltest.xml\", \"r\"))) {\n    die(\"could not open XML input\");\n}\nwhile ($data = fread($fp, 4096)) {\n    if (!xml_parse($xml_parser, $data, feof($fp))) {\n        die(sprintf(\"XML error: %s at line %d\\n\",\n        xml_error_string(xml_get_error_code($xml_parser)),\n        xml_get_current_line_number($xml_parser)));\n    }\n}\nprint \"parse complete\\n\";\nxml_parser_free($xml_parser);\nfunction startElement($parser, $name, $attribs)\n{\n    print '{'.$name;\n    if (sizeof($attribs)) {\n        foreach ($attribs as $k => $v) {\n            print \" $k=\\\"$v\\\"\";\n        }\n    }\n    print '}';\n}\nfunction endElement($parser, $name)\n{\n    print '{/'.$name.'}';\n}\nfunction characterData($parser, $data)\n{\n    print '{CDATA['.$data.']}';\n}\nfunction PIHandler($parser, $target, $data)\n{\n    print '{PI['.$target.','.$data.']}';\n}\nfunction defaultHandler($parser, $data)\n{\n    if (substr($data, 0, 1) == \"&\" && substr($data, -1, 1) == \";\") {\n        print '{ENTREF['.$data.']}';\n    } else {\n        print '{?['.$data.']}';\n    }\n}\nfunction externalEntityRefHandler($parser, $openEntityNames, $base, $systemId, $publicId)\n{\n    print '{EXTENTREF['.$openEntityNames.','.$base.','.$systemId.','.$publicId.\"]}\\n\";\n    return true;\n}\n?>")).toMatchSnapshot();
  });
});
