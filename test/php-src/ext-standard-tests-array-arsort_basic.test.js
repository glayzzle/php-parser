// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/arsort_basic.phpt
  it("Test arsort() function : basic functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing arsort() by providing integer/string arrays to check the basic functionality\n * with following flag values.\n *  flag value as default\n *  SORT_REGULAR - compare items normally\n *  SORT_NUMERIC - compare items numerically\n *  SORT_STRING - compare items as strings\n*/\necho \"*** Testing arsort() : basic functionality ***\\n\";\n// an array containing unsorted string values with indices\n$unsorted_strings = array(\n    \"l\" => \"lemon\", \"o\" => \"orange\",\n    \"O\" => \"Orange\", \"O1\" => \"Orange1\", \"o2\" => \"orange2\", \"O3\" => \"Orange3\", \"o20\" => \"orange20\",\n    \"b\" => \"banana\",\n);\n// an array containing unsorted numeric values with indices\n$unsorted_numerics =  array( 1 => 100, 2 => 33, 3 => 555, 4 => 22 );\necho \"\\n-- Testing arsort() by supplying string array, 'flag' value is default --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying numeric array, 'flag' value is default --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( arsort($temp_array) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying string array, 'flag' = SORT_REGULAR --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array, SORT_REGULAR) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying numeric array, 'flag' = SORT_REGULAR --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( arsort($temp_array, SORT_REGULAR) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying string array, 'flag' = SORT_STRING --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array, SORT_STRING) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying string array (case insensitive), 'flag' = SORT_STRING|SORT_FLAG_CASE --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array, SORT_STRING|SORT_FLAG_CASE) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying string array (natural), 'flag' = SORT_NATURAL --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array, SORT_NATURAL) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying string array (natural, case insensitive), 'flag' = SORT_NATURAL|SORT_FLAG_CASE --\\n\";\n$temp_array = $unsorted_strings;\nvar_dump( arsort($temp_array, SORT_NATURAL|SORT_FLAG_CASE) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"\\n-- Testing arsort() by supplying numeric array, 'flag' = SORT_NUMERIC --\\n\";\n$temp_array = $unsorted_numerics;\nvar_dump( arsort($temp_array, SORT_NUMERIC) ); // expecting : bool(true)\nvar_dump( $temp_array);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
