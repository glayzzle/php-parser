// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/drcp_scope2.phpt
  it("DRCP: oci_new_connect() and oci_connect with scope end when oci8.old_oci_close_semantics OFF", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__.\"/drcp_functions.inc\";\nrequire __DIR__.\"/details.inc\";\n// Scope considered here is the  functional scope\n// Test will open a connection within a function (function 1).\n// Update a table\n// Open another connection from function 2.\n// When the scope ends the txn is rolled back and hence the updated value\n// will not be  reflected for oci_connect and oci_new_connect.\n// Create the table\n$c = oci_new_connect($user,$password,$dbase);\n@drcp_drop_table($c);\ndrcp_create_table($c);\n// OCI_NEW_CONNECT\n$conn_type = 1;\necho \"This is with a OCI_NEW_CONNECT\\n\";\nfunction1($user,$password,$dbase,$conn_type);\n// Should return the OLD value\nfunction2($user,$password,$dbase,$conn_type);\n// OCI_CONNECT\n$conn_type = 2;\necho \"\\n\\nThis is with a OCI_CONNECT\\n\";\nfunction1($user,$password,$dbase,$conn_type);\n// Should return the OLD value\nfunction2($user,$password,$dbase,$conn_type);\n//This is the first scope for the script\nfunction function1($user,$password,$dbase,$conn_type)\n{\n    switch($conn_type)\n    {\n    case 1:\n        var_dump($conn1 = oci_new_connect($user,$password,$dbase));\n        break;\n    case 2:\n        var_dump($conn1 = oci_connect($user,$password,$dbase));\n        break;\n    }\n    drcp_update_table($conn1);\n}\n// This is the second scope\nfunction function2($user,$password,$dbase,$conn_type)\n{\n    switch($conn_type)\n    {\n    case 1:\n        var_dump($conn1 = oci_new_connect($user,$password,$dbase));\n        break;\n    case 2:\n        var_dump($conn1 = oci_connect($user,$password,$dbase));\n        break;\n    }\n    drcp_select_value($conn1);\n}\ndrcp_drop_table($c);\noci_close($c);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
