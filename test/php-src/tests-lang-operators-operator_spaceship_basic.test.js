// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/operators/operator_spaceship_basic.phpt
  it("Test <=> operator : different types", function () {
    expect(parser.parseCode("<?php\n$valid_true = array(1, \"1\", \"true\", 1.0, array(1));\n$valid_false = array(0, \"\", 0.0, array(), NULL);\n$int1 = 679;\n$int2 = -67835;\n$valid_int1 = array(\"678\", \"678abc\", \" 678\", \"678  \", 678.0, 6.789E2, \"+678\", +678);\n$valid_int2 = array(\"-67836\", \" -67836\", \"-67836  \", -67835.0001, -6.78351E4);\n$invalid_int1 = array(679, \"679\");\n$invalid_int2 = array(-67835, \"-67835\", \"-67836abc\");\n$float1 = 57385.45835;\n$float2 = -67345.76567;\n$valid_float1 = array(\"57385.45834\",  \"57385.45834aaa\", \"  57385.45834\", 5.738545834e4);\n$valid_float2 = array(\"-67345.76568\", \"  -67345.76568\", -6.734576568E4);\n$invalid_float1 = array(57385.45835, 5.738545835e4);\n$invalid_float2 = array(-67345.76567, -6.734576567E4, \"-67345.76568aaa\");\n$toCompare = array(\n// boolean test will result in both sides being converted to boolean so !0 = true and true is not > true for example\n// also note that a string of \"0\" is converted to false but a string of \"0.0\" is converted to true\n// false cannot be tested as 0 can never be > 0 or 1\n  true, $valid_false, $valid_true,\n  $int1, $valid_int1, $invalid_int1,\n  $int2, $valid_int2, $invalid_int2,\n  $float1, $valid_float1, $invalid_float1,\n  $float2, $valid_float2, $invalid_float2\n);\n$failed = false;\nfor ($i = 0; $i < count($toCompare); $i +=3) {\n   $typeToTest = $toCompare[$i];\n   $valid_compares = $toCompare[$i + 1];\n   $invalid_compares = $toCompare[$i + 2];\n   foreach($valid_compares as $compareVal) {\n      if (($typeToTest <=> $compareVal) === 1) {\n         // do nothing\n      }\n      else {\n         echo \"FAILED: ('$typeToTest' <=> '$compareVal') !== 1\\n\";\n         $failed = true;\n      }\n      if (($compareVal <=> $typeToTest) === -1) {\n         // do nothing\n      }\n      else {\n         echo \"FAILED: ('$compareVal' <=> '$typeToTest') !== -1\\n\";\n         $failed = true;\n      }\n      if (($compareVal <=> $compareVal) === 0) {\n         // do nothing\n      }\n      else {\n         echo \"FAILED: ('$compareVal' <=> '$compareVal') !== 0\\n\";\n         $failed = true;\n      }\n   }\n   foreach($invalid_compares as $compareVal) {\n      if (($typeToTest <=> $compareVal) === 1) {\n         echo \"FAILED: ('$typeToTest' <=> '$compareVal') === 1\\n\";\n         $failed = true;\n      }\n      if (($compareVal <=> $typeToTest) === -1) {\n         echo \"FAILED: ('$compareVal' <=> '$typeToTest') === -1\\n\";\n         $failed = true;\n      }\n      if (($compareVal <=> $compareVal) !== 0) {\n         echo \"FAILED: ('$compareVal' <=> '$compareVal') !== 0\\n\";\n         $failed = true;\n      }\n   }\n   if (($typeToTest <=> $typeToTest) === 0) {\n      // do nothing\n   }\n   else {\n      echo \"FAILED: ('$typeToTest' <=> '$typeToTest') !== 0\\n\";\n      $failed = true;\n   }\n}\nif ($failed == false) {\n   echo \"Test Passed\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
