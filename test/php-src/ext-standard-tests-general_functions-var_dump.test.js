// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/var_dump.phpt
  it("Test var_dump() function", function () {
    expect(parser.parseCode("<?php\nfunction check_vardump( $variables ) {\n  $counter = 1;\n  foreach( $variables as $variable ) {\n    echo \"-- Iteration $counter --\\n\";\n    var_dump($variable);\n    $counter++;\n  }\n}\necho \"\\n*** Testing var_dump() on integer variables ***\\n\";\n$integers = array (\n  0,  // zero as argument\n  000000123,  //octal value of 83\n  123000000,\n  -00000123,  //octal value of 83\n  -12300000,\n  range(1,10),  // positive values\n  range(-1,-10),  // negative values\n  +2147483647,  // max positive integer\n  +2147483648,  // max positive integer + 1\n  -2147483648,  // min range of integer\n  -2147483647,  // min range of integer + 1\n  0x7FFFFFFF,  // max positive hexadecimal integer\n  -0x80000000,  // min range of hexadecimal integer\n  017777777777,  // max posotive octal integer\n  -020000000000  // min range of octal integer\n);\n/* calling check_vardump() to display contents of integer variables\n   using var_dump() */\ncheck_vardump($integers);\necho \"\\n*** Testing var_dump() on float variables ***\\n\";\n$floats = array (\n  -0.0,\n  +0.0,\n  1.234,\n  -1.234,\n  -2.000000,\n  000002.00,\n  -.5,\n  .567,\n  -.6700000e-3,\n  -.6700000E+3,\n  .6700000E+3,\n  .6700000e+3,\n  -4.10003e-3,\n  -4.10003E+3,\n  4.100003e-3,\n  4.100003E+3,\n  1e5,\n  -1e5,\n  1e-5,\n  -1e-5,\n  1e+5,\n  -1e+5,\n  1E5,\n  -1E5,\n  1E+5,\n  -1E+5,\n  1E-5,\n  -1E-5,\n  -0x80000001,  // float value, beyond max negative int\n  0x80000001,  // float value, beyond max positive int\n  020000000001,  // float value, beyond max positive int\n  -020000000001  // float value, beyond max negative int\n);\n/* calling check_vardump() to display contents of float variables\n   using var_dump() */\ncheck_vardump($floats);\necho \"\\n*** Testing var_dump() on string variables ***\\n\";\n$strings = array (\n  \"\",\n  '',\n  \" \",\n  ' ',\n  \"0\",\n  \"\\0\",\n  '\\0',\n  \"\\t\",\n  '\\t',\n  \"PHP\",\n  'PHP',\n  \"abcd\\x0n1234\\x0005678\\x0000efgh\\xijkl\",  // strings with hexadecimal NULL\n  \"abcd\\0efgh\\0ijkl\\x00mnop\\x000qrst\\00uvwx\\0000yz\",  // strings with octal NULL\n  \"1234\\t\\n5678\\n\\t9100\\\"abcda\"  // strings with escape characters\n);\n/* calling check_vardump() to display contents of strings\n   using var_dump() */\ncheck_vardump($strings);\necho \"\\n*** Testing var_dump() on boolean variables ***\\n\";\n$booleans = array (\n  TRUE,\n  FALSE,\n  true,\n  false\n);\n/* calling check_vardump() to display boolean variables\n   using var_dump() */\ncheck_vardump($booleans);\necho \"\\n*** Testing var_dump() on array variables ***\\n\";\n$arrays = array (\n  array(),\n  array(NULL),\n  array(null),\n  array(true),\n  array(\"\"),\n  array(''),\n  array(array(), array()),\n  array(array(1, 2), array('a', 'b')),\n  array(1 => 'One'),\n  array(\"test\" => \"is_array\"),\n  array(0),\n  array(-1),\n  array(10.5, 5.6),\n  array(\"string\", \"test\"),\n  array('string', 'test'),\n);\n/* calling check_vardump() to display contents of an array\n   using var_dump() */\ncheck_vardump($arrays);\necho \"\\n*** Testing var_dump() on object variables ***\\n\";\nclass object_class\n{\n  var       $value;\n  public    $public_var1 = 10;\n  private   $private_var1 = 20;\n  private   $private_var2;\n  protected $protected_var1 = \"string_1\";\n  protected $protected_var2;\n  function __construct() {\n    $this->value = 50;\n    $this->public_var2 = 11;\n    $this->private_var2 = 21;\n    $this->protected_var2 = \"string_2\";\n  }\n  public function foo1() {\n    echo \"foo1() is called\\n\";\n  }\n  protected function foo2() {\n    echo \"foo2() is called\\n\";\n  }\n  private function foo3() {\n    echo \"foo3() is called\\n\";\n  }\n}\n/* class with no member */\nclass no_member_class {\n // no members\n}\n/* class with member as object of other class */\nclass contains_object_class\n{\n   var       $p = 30;\n   var       $class_object1;\n   public    $class_object2;\n   private   $class_object3;\n   protected $class_object4;\n   var       $no_member_class_object;\n   public function func() {\n     echo \"func() is called \\n\";\n   }\n   function __construct() {\n     $this->class_object1 = new object_class();\n     $this->class_object2 = new object_class();\n     $this->class_object3 = $this->class_object1;\n     $this->class_object4 = $this->class_object2;\n     $this->no_member_class_object = new no_member_class();\n     $this->class_object5 = $this;   //recursive reference\n   }\n}\n/* objects of different classes */\n$obj = new contains_object_class;\n$temp_class_obj = new object_class();\n/* object which is unset */\n$unset_obj = new object_class();\nunset($unset_obj);\n$objects = array (\n  new object_class,\n  new no_member_class,\n  new contains_object_class,\n  $obj,\n  $obj->class_object1,\n  $obj->class_object2,\n  $obj->no_member_class_object,\n  $temp_class_obj,\n  @$unset_obj\n);\n/* calling check_vardump() to display contents of the objects\n   using var_dump() */\ncheck_vardump($objects);\necho \"\\n** Testing var_dump() on objects having circular reference **\\n\";\n$recursion_obj1 = new object_class();\n$recursion_obj2 = new object_class();\n$recursion_obj1->obj = &$recursion_obj2;  //circular reference\n$recursion_obj2->obj = &$recursion_obj1;  //circular reference\nvar_dump($recursion_obj2);\necho \"\\n*** Testing var_dump() on resources ***\\n\";\n/* file type resource */\n$file_handle = fopen(__FILE__, \"r\");\n/* directory type resource */\n$dir_handle = opendir( __DIR__ );\n$resources = array (\n  $file_handle,\n  $dir_handle\n);\n/* calling check_vardump() to display the resource content type\n   using var_dump() */\ncheck_vardump($resources);\necho \"\\n*** Testing var_dump() on different combinations of scalar\n    and non-scalar variables ***\\n\";\n/* a variable which is unset */\n$unset_var = 10.5;\nunset($unset_var);\n/* unset file type resource */\nunset($file_handle);\n$variations = array (\n  array( 123, -1.2345, \"a\" ),\n  array( \"d\", array(1, 3, 5), true, null),\n  array( new no_member_class, array(), false, 0 ),\n  array( -0.00, \"Where am I?\", array(7,8,9), TRUE, 'A', 987654321 ),\n  array( @$unset_var, 2.E+10, 100-20.9, 000004.599998 ),  //unusual data\n  array( \"array(1,2,3,4)1.0000002TRUE\", @$file_handle, 111333.00+45e5, '/00\\7')\n);\n/* calling check_vardump() to display combinations of scalar and\n   non-scalar variables using var_dump() */\ncheck_vardump($variations);\necho \"\\n*** Testing var_dump() on miscellaneous input arguments ***\\n\";\n$misc_values = array (\n  @$unset_var,\n  NULL,  // NULL argument\n  @$undef_variable,  //undefined variable\n  null\n);\n/* calling check_vardump() to display miscellaneous data using var_dump() */\ncheck_vardump($misc_values);\necho \"\\n*** Testing var_dump() on multiple arguments ***\\n\";\nvar_dump( $integers, $floats, $strings, $arrays, $booleans, $resources,\n          $objects, $misc_values, $variations );\n/* closing resource handle used */\nclosedir($dir_handle);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
