// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/grapheme2.phpt
  it("grapheme()", function () {
    expect(parser.parseCode("<?php\n/*\n * Test grapheme functions (procedural only)\n */\nfunction ut_main()\n{\n    $res_str = '';\n    $char_a_diaeresis = \"\\xC3\\xA4\";\t// 'LATIN SMALL LETTER A WITH DIAERESIS' (U+00E4)\n    $char_a_ring = \"\\xC3\\xA5\";\t\t// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5)\n    $char_o_diaeresis = \"\\xC3\\xB6\";    // 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6)\n    $char_O_diaeresis = \"\\xC3\\x96\";    // 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6)\n    $char_angstrom_sign = \"\\xE2\\x84\\xAB\"; // 'ANGSTROM SIGN' (U+212B)\n    $char_A_ring = \"\\xC3\\x85\";\t// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n    $char_ohm_sign = \"\\xE2\\x84\\xA6\";\t// 'OHM SIGN' (U+2126)\n    $char_omega = \"\\xCE\\xA9\";  // 'GREEK CAPITAL LETTER OMEGA' (U+03A9)\n    $char_combining_ring_above = \"\\xCC\\x8A\";  // 'COMBINING RING ABOVE' (U+030A)\n    $char_fi_ligature = \"\\xEF\\xAC\\x81\";  // 'LATIN SMALL LIGATURE FI' (U+FB01)\n    $char_long_s_dot = \"\\xE1\\xBA\\x9B\";\t// 'LATIN SMALL LETTER LONG S WITH DOT ABOVE' (U+1E9B)\n    // the word 'hindi' using Devanagari characters:\n    $hindi = \"\\xe0\\xa4\\xb9\\xe0\\xa4\\xbf\\xe0\\xa4\\xa8\\xe0\\xa5\\x8d\\xe0\\xa4\\xa6\\xe0\\xa5\\x80\";\n    $char_a_ring_nfd = \"a\\xCC\\x8A\";\n    $char_A_ring_nfd = \"A\\xCC\\x8A\";\n    $char_o_diaeresis_nfd = \"o\\xCC\\x88\";\n    $char_O_diaeresis_nfd = \"O\\xCC\\x88\";\n    $char_diaeresis = \"\\xCC\\x88\";\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_strlen($string) {}' . \"\\n\\n\";\n    $res_str .= \"\\\"hindi\\\" in devanagari strlen \" . grapheme_strlen($hindi) . \"\\n\";\n    $res_str .= \"\\\"ab\\\" + \\\"hindi\\\" + \\\"cde\\\" strlen \" . grapheme_strlen('ab' . $hindi . 'cde') . \"\\n\";\n    $res_str .= \"\\\"\\\" strlen \" . grapheme_strlen(\"\") . \"\\n\";\n    $res_str .= \"char_a_ring_nfd strlen \" . grapheme_strlen($char_a_ring_nfd) . \"\\n\";\n    $res_str .= \"char_a_ring_nfd + \\\"bc\\\" strlen \" . grapheme_strlen($char_a_ring_nfd . 'bc') . \"\\n\";\n    $res_str .= \"\\\"abc\\\" strlen \" . grapheme_strlen('abc') . \"\\n\";\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_strpos($haystack, $needle, $offset = 0) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"o\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 1 ),\n        array( \"abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"a\", \"false\" ),\n        array( \"abc\", \"d\", \"false\" ),\n        array( \"abc\", \"c\", 2 ),\n        array( \"abc\", \"b\", 1 ),\n        array( \"abc\", \"a\", 0 ),\n        array( \"abc\", \"a\", 0, 0 ),\n        array( \"abc\", \"a\", 1, \"false\" ),\n        array( \"abc\", \"a\", -1, \"false\" ),\n        array( \"ababc\", \"a\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", 2, 6 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", -1, 6 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", -5, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 2, 3 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, -4, 3 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"opq\", \"op\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"opq\", \"opq\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"abc\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\", 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\", 1 ),\n        array( \"abc\", $char_a_ring_nfd . \"bc\", \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"abcdefg\", \"false\" ),\n        array( \"abc\", \"defghijklmnopq\", \"false\" ),\n        array( \"abc\", \"ab\", 0 ),\n        array( \"abc\", \"bc\", 1 ),\n        array( \"abc\", \"abc\", 0 ),\n        array( \"abc\", \"abcd\", \"false\" ),\n        array( \"abc\", \"ab\", 0, 0 ),\n        array( \"abc\", \"abc\", 0, 0 ),\n        array( \"abc\", \"abc\", 1, \"false\" ),\n        array( \"ababc\", \"ab\", 1, 2 ),\n        array( \"ababc\", \"abc\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\" . $char_a_ring_nfd . \"bc\", \"o\" . $char_a_ring_nfd . \"bc\", 2, 6 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\" . $char_a_ring_nfd . \"bc\", \"o\" . $char_a_ring_nfd . \"bc\", -8, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_a_ring_nfd . \"bc\" . $char_a_ring_nfd . \"def\", $char_a_ring_nfd . \"bc\" . $char_a_ring_nfd, 2, 3 ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_strpos\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_strpos($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" from $test[2]\";\n            $result = grapheme_strpos($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= $result;\n        }\n        $res_str .= \" == \" . $test[count($test)-1] . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_stripos($haystack, $needle, $offset = 0) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", \"o\", 2, 6 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Oo\", \"o\", -6, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_A_ring_nfd . \"bc\", $char_a_ring_nfd, 2, 3 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", \"o\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"O\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_O_diaeresis_nfd, $char_o_diaeresis_nfd, 4 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_O_diaeresis_nfd, $char_o_diaeresis_nfd, -1, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_A_ring_nfd, 2 ),\n        array( \"a\" . $char_A_ring_nfd . \"bc\", $char_a_ring_nfd, 1 ),\n        array( \"Abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"A\", \"false\" ),\n        array( \"abc\", \"D\", \"false\" ),\n        array( \"abC\", \"c\", 2 ),\n        array( \"abc\", \"B\", 1 ),\n        array( \"Abc\", \"a\", 0 ),\n        array( \"abc\", \"A\", 0, 0 ),\n        array( \"Abc\", \"a\", 1, \"false\" ),\n        array( \"ababc\", \"A\", 1, 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", \"oP\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", \"opQ\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"abc\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"bC\" . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"Bc\", $char_A_ring_nfd . \"bc\", 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"BC\", $char_a_ring_nfd . \"bc\", 1 ),\n        array( \"abc\", $char_a_ring_nfd . \"BC\", \"false\" ),\n        array( $char_a_ring_nfd . \"BC\", \"aBCdefg\", \"false\" ),\n        array( \"aBC\", \"Defghijklmnopq\", \"false\" ),\n        array( \"abC\", \"Ab\", 0 ),\n        array( \"aBC\", \"bc\", 1 ),\n        array( \"abC\", \"Abc\", 0 ),\n        array( \"abC\", \"aBcd\", \"false\" ),\n        array( \"ABc\", \"ab\", 0, 0 ),\n        array( \"aBc\", \"abC\", 0, 0 ),\n        array( \"abc\", \"aBc\", 1, \"false\" ),\n        array( \"ABabc\", \"AB\", 1, 2 ),\n        array( \"ABabc\", \"AB\", -4, 2 ),\n        array( \"abaBc\", \"aBc\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\" . $char_A_ring_nfd . \"bC\", \"O\" . $char_a_ring_nfd . \"bC\", 2, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_A_ring_nfd . \"bC\" . $char_a_ring_nfd . \"def\", $char_a_ring_nfd . \"Bc\" . $char_a_ring_nfd, 2, 3 ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_stripos\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_stripos($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" from $test[2]\";\n            $result = grapheme_stripos($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= $result;\n        }\n        $res_str .= \" == \" . $test[count($test)-1] . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_strrpos($haystack, $needle, $offset = 0) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"o\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 1 ),\n        array( \"abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"a\", \"false\" ),\n        array( \"abc\", \"d\", \"false\" ),\n        array( \"abc\", \"c\", 2 ),\n        array( \"abc\", \"b\", 1 ),\n        array( \"abc\", \"a\", 0 ),\n        array( \"abc\", \"a\", 0, 0 ),\n        array( \"abc\", \"a\", 1, \"false\" ),\n        array( \"ababc\", \"a\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", 2, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, 2, 3 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"opq\", \"op\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"opq\", \"opq\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"abc\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\", 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\", 1 ),\n        array( \"abc\", $char_a_ring_nfd . \"bc\", \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"abcdefg\", \"false\" ),\n        array( \"abc\", \"defghijklmnopq\", \"false\" ),\n        array( \"abc\", \"ab\", 0 ),\n        array( \"abc\", \"bc\", 1 ),\n        array( \"abc\", \"abc\", 0 ),\n        array( \"abc\", \"abcd\", \"false\" ),\n        array( \"abc\", \"ab\", 0, 0 ),\n        array( \"abc\", \"abc\", 0, 0 ),\n        array( \"abc\", \"abc\", 1, \"false\" ),\n        array( \"ababc\", \"ab\", 1, 2 ),\n        array( \"ababc\", \"abc\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\" . $char_a_ring_nfd . \"bc\", \"o\" . $char_a_ring_nfd . \"bc\", 2, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_a_ring_nfd . \"bc\" . $char_a_ring_nfd . \"def\", $char_a_ring_nfd . \"bc\" . $char_a_ring_nfd, 2, 3 ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_strrpos\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_strrpos($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" from $test[2]\";\n            $result = grapheme_strrpos($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= $result;\n        }\n        $res_str .= \" == \" . $test[count($test)-1] .  check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_strripos($haystack, $needle, $offset = 0) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", \"o\", 2, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_A_ring_nfd . \"bc\", $char_a_ring_nfd, 2, 3 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", \"o\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"O\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_O_diaeresis_nfd, $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_A_ring_nfd, 2 ),\n        array( \"a\" . $char_A_ring_nfd . \"bc\", $char_a_ring_nfd, 1 ),\n        array( \"Abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"A\", \"false\" ),\n        array( \"abc\", \"D\", \"false\" ),\n        array( \"abC\", \"c\", 2 ),\n        array( \"abc\", \"B\", 1 ),\n        array( \"Abc\", \"a\", 0 ),\n        array( \"abc\", \"A\", 0, 0 ),\n        array( \"Abc\", \"a\", 1, \"false\" ),\n        array( \"ababc\", \"A\", 1, 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", \"oP\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", \"opQ\", 5 ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"abc\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"bC\" . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd . \"bc\" . $char_o_diaeresis_nfd, 4 ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"Bc\", $char_A_ring_nfd . \"bc\", 2 ),\n        array( \"a\" . $char_a_ring_nfd . \"BC\", $char_a_ring_nfd . \"bc\", 1 ),\n        array( \"abc\", $char_a_ring_nfd . \"BC\", \"false\" ),\n        array( $char_a_ring_nfd . \"BC\", \"aBCdefg\", \"false\" ),\n        array( \"aBC\", \"Defghijklmnopq\", \"false\" ),\n        array( \"abC\", \"Ab\", 0 ),\n        array( \"aBC\", \"bc\", 1 ),\n        array( \"abC\", \"Abc\", 0 ),\n        array( \"abC\", \"aBcd\", \"false\" ),\n        array( \"ABc\", \"ab\", 0, 0 ),\n        array( \"aBc\", \"abC\", 0, 0 ),\n        array( \"abc\", \"aBc\", 1, \"false\" ),\n        array( \"ABabc\", \"AB\", 1, 2 ),\n        array( \"abaBc\", \"aBc\", 1, 2 ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\" . $char_A_ring_nfd . \"bC\", \"O\" . $char_a_ring_nfd . \"bC\", 2, 6 ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_A_ring_nfd . \"bC\" . $char_a_ring_nfd . \"def\", $char_a_ring_nfd . \"Bc\" . $char_a_ring_nfd, 2, 3 ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_strripos\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_strripos($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" from $test[2]\";\n            $result = grapheme_strripos($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= $result;\n        }\n        $res_str .= \" == \" . $test[count($test)-1] . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_substr($string, $start, $length = -1) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"abc\", 3, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, 5, \"\" ),\n        array( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", 2, $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\" ),\n        array( $char_o_diaeresis_nfd . $char_a_ring_nfd . \"a\" . $char_A_ring_nfd . \"bc\", 2, \"a\" . $char_A_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", 5, \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, 5, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_O_diaeresis_nfd, 4, $char_O_diaeresis_nfd ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", 2, $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_A_ring_nfd . \"bc\", 1, $char_A_ring_nfd . \"bc\" ),\n        array( \"Abc\", -5, \"Abc\" ),\n        array( $char_a_ring_nfd . \"bc\", 3, \"\" ),\n        array( \"abc\", 4, \"\" ),\n        array( \"abC\", 2, \"C\" ),\n        array( \"abc\", 1, \"bc\" ),\n        array( \"Abc\", 1, 1, \"b\" ),\n        array( \"abc\", 0, 2, \"ab\" ),\n        array( \"Abc\", -4, 1, \"A\" ),\n        array( \"ababc\", 1, 2, \"ba\" ),\n        array( \"ababc\", 0, 10, \"ababc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, 10 , \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 5, \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 5, -1, \"Op\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 5, -2, \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 5, -3, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 5, -4, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -1, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Op\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -2, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -3, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -4, \"a\" . $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -5, \"a\" . $char_a_ring_nfd . \"b\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -6, \"a\" . $char_a_ring_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -7, \"a\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -8, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", 0, -9, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -7, $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -6, \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -5, \"c\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -4, $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -3, \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -2, \"pq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -1, \"q\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -999, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 8, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 7, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Op\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 6, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 5, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 4, \"a\" . $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 3, \"a\" . $char_a_ring_nfd . \"b\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 2, \"a\" . $char_a_ring_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 1, \"a\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, 0, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -999, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -1, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Op\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -2, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -3, \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -4, \"a\" . $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -5, \"a\" . $char_a_ring_nfd . \"b\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -6, \"a\" . $char_a_ring_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -7, \"a\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -8, \"\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"Opq\", -8, -9, \"\" ),\n    );\n    foreach( $tests as $test ) {\n        try {\n            $arg0 = urlencode($test[0]);\n            $res_str .= \"substring of \\\"$arg0\\\" from \\\"$test[1]\\\" - grapheme_substr\";\n            if ( 3 == count( $test ) ) {\n                $result = grapheme_substr($test[0], $test[1]);\n            }\n            else {\n                $res_str .= \" with length $test[2]\";\n                $result = grapheme_substr($test[0], $test[1], $test[2]);\n            }\n            $res_str .= \" = \";\n            if ( $result === false ) {\n                $res_str .= 'false';\n            }\n            else {\n                $res_str .= urlencode($result);\n            }\n            $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]) . \"\\n\";\n        } catch (ValueError $exception) {\n             $res_str .= \": \" . $exception->getMessage() . \"\\n\";\n        }\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_strstr($haystack, $needle, $before_needle = FALSE) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"o\", \"o\", \"o\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"o\", \"false\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd, $char_o_diaeresis_nfd ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, $char_a_ring_nfd . \"bc\"),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, $char_a_ring_nfd . \"bc\"),\n        array( \"abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"a\", \"false\" ),\n        array( \"abc\", \"d\", \"false\" ),\n        array( \"abc\", \"c\", \"c\" ),\n        array( \"abc\", \"b\", \"bc\" ),\n        array( \"abc\", \"a\", \"abc\" ),\n        array( \"abc\", \"ab\", \"abc\" ),\n        array( \"abc\", \"abc\", \"abc\" ),\n        array( \"abc\", \"bc\", \"bc\" ),\n        array( \"abc\", \"a\", FALSE, \"abc\" ),\n        array( \"abc\", \"a\", TRUE, \"\" ),\n        array( \"abc\", \"b\", TRUE, \"a\" ),\n        array( \"abc\", \"c\", TRUE, \"ab\" ),\n        array( \"ababc\", \"bab\", TRUE, \"a\" ),\n        array( \"ababc\", \"abc\", TRUE, \"ab\" ),\n        array( \"ababc\", \"abc\", FALSE, \"abc\" ),\n        array( \"ab\" . $char_a_ring_nfd . \"c\", \"d\", \"false\" ),\n        array( \"bc\" . $char_a_ring_nfd . \"a\", \"a\", \"a\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", \"b\", \"bc\" ),\n        array( $char_a_ring_nfd . \"bc\", \"a\", \"false\" ),\n        array( $char_a_ring_nfd . \"abc\", \"ab\", \"abc\" ),\n        array( \"abc\" . $char_a_ring_nfd, \"abc\", \"abc\" . $char_a_ring_nfd),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, FALSE, $char_a_ring_nfd . \"bc\"),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", \"a\", TRUE, \"\" ),\n        array( $char_a_ring_nfd . \"abc\", \"b\", TRUE, $char_a_ring_nfd . \"a\" ),\n        array( \"ab\" . $char_a_ring_nfd . \"c\", \"c\", TRUE, \"ab\" . $char_a_ring_nfd ),\n        array( \"aba\" . $char_a_ring_nfd . \"bc\", \"ba\" . $char_a_ring_nfd . \"b\", TRUE, \"a\" ),\n        array( \"ababc\" . $char_a_ring_nfd, \"abc\" . $char_a_ring_nfd, TRUE, \"ab\" ),\n        array( \"abab\" . $char_a_ring_nfd . \"c\", \"ab\" . $char_a_ring_nfd . \"c\", FALSE, \"ab\" . $char_a_ring_nfd . \"c\" ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_strstr\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_strstr($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" before flag is \" . ( $test[2] ? \"TRUE\" : \"FALSE\" );\n            $result = grapheme_strstr($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= urlencode($result);\n        }\n        $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_stristr($haystack, $needle, $before_needle = FALSE) {}' . \"\\n\\n\";\n    $tests = array(\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd, $char_o_diaeresis_nfd ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", \"o\", \"O\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd, \"o\", \"false\" ),\n        array( $char_o_diaeresis_nfd . \"a\" . $char_a_ring_nfd . \"bc\", $char_a_ring_nfd, $char_a_ring_nfd . \"bc\"),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_A_ring_nfd, $char_a_ring_nfd . \"bc\"),\n        array( \"abc\", $char_a_ring_nfd, \"false\" ),\n        array( $char_a_ring_nfd . \"bc\", \"A\", \"false\" ),\n        array( \"abc\", \"d\", \"false\" ),\n        array( \"abc\", \"C\", \"c\" ),\n        array( \"aBc\", \"b\", \"Bc\" ),\n        array( \"abc\", \"A\", \"abc\" ),\n        array( \"abC\", \"ab\", \"abC\" ),\n        array( \"abc\", \"aBc\", \"abc\" ),\n        array( \"abC\", \"bc\", \"bC\" ),\n        array( \"abc\", \"A\", FALSE, \"abc\" ),\n        array( \"abc\", \"a\", TRUE, \"\" ),\n        array( \"aBc\", \"b\", TRUE, \"a\" ),\n        array( \"abc\", \"C\", TRUE, \"ab\" ),\n        array( \"aBabc\", \"bab\", TRUE, \"a\" ),\n        array( \"ababc\", \"aBc\", TRUE, \"ab\" ),\n        array( \"ababc\", \"abC\", FALSE, \"abc\" ),\n        array( \"ab\" . $char_a_ring_nfd . \"c\", \"d\", \"false\" ),\n        array( \"bc\" . $char_a_ring_nfd . \"A\", \"a\", \"A\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", \"B\", \"bc\" ),\n        array( $char_A_ring_nfd . \"bc\", \"a\", \"false\" ),\n        array( $char_a_ring_nfd . \"abc\", \"Ab\", \"abc\" ),\n        array( \"abc\" . $char_A_ring_nfd, \"abc\", \"abc\" . $char_A_ring_nfd),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", $char_A_ring_nfd . \"bc\", $char_a_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_A_ring_nfd . \"bc\", $char_a_ring_nfd, FALSE, $char_A_ring_nfd . \"bc\" ),\n        array( \"a\" . $char_a_ring_nfd . \"bc\", \"A\", TRUE, \"\" ),\n        array( $char_a_ring_nfd . \"aBc\", \"b\", TRUE, $char_a_ring_nfd . \"a\" ),\n        array( \"ab\" . $char_a_ring_nfd . \"c\", \"C\", TRUE, \"ab\" . $char_a_ring_nfd ),\n        array( \"aba\" . $char_A_ring_nfd . \"bc\", \"ba\" . $char_a_ring_nfd . \"b\", TRUE, \"a\" ),\n        array( \"ababc\" . $char_a_ring_nfd, \"aBc\" . $char_A_ring_nfd, TRUE, \"ab\" ),\n        array( \"abAB\" . $char_A_ring_nfd . \"c\", \"ab\" . $char_a_ring_nfd . \"c\", FALSE, \"AB\" . $char_A_ring_nfd . \"c\" ),\n    );\n    foreach( $tests as $test ) {\n        $arg1 = urlencode($test[1]);\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"find \\\"$arg1\\\" in \\\"$arg0\\\" - grapheme_stristr\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_stristr($test[0], $test[1]);\n        }\n        else {\n            $res_str .= \" before flag is \" . ( $test[2] ? \"TRUE\" : \"FALSE\" );\n            $result = grapheme_stristr($test[0], $test[1], $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= urlencode($result);\n        }\n        $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_extract($haystack, $size, $extract_type = GRAPHEME_EXTR_COUNT, $start = 0[, $next])' . \"\\n\\n\";\n    $tests = array(\n        // haystack, count, [[offset], [next]], result\n        array( \"abc\", 3, \"abc\" ),\n        array( \"abc\", 2, \"ab\" ),\n        array( \"abc\", 1, \"a\" ),\n        array( \"abc\", 0, \"\" ),\n        array( \"abc\", 1, 0, \"a\" ),\n        array( \"abc\", 1, 1, \"b\" ),\n        array( \"abc\", 1, 2, \"c\" ),\n        array( \"abc\", 0, 2, \"\" ),\n        array( \"abc\", 3, 0, 3, \"abc\" ),\n        array( \"abc\", 2, 0, 2, \"ab\" ),\n        array( \"abc\", 1, 0, 1, \"a\" ),\n        array( \"abc\", 0, 0, 0, \"\" ),\n        array( \"abc\", 1, 0, 1, \"a\" ),\n        array( \"abc\", 1, 1, 2, \"b\" ),\n        array( \"abc\", 1, 2, 3, \"c\" ),\n        array( \"abc\", 1, -2, 2, \"b\" ),\n        array( \"abc\", 0, 2, 2, \"\" ),\n        array( \"http://news.bbc.co.uk/2/hi/middle_east/7831588.stm\", 48, 48 , 50 , \"tm\" ),\n        array( $char_a_ring_nfd . \"bc\", 3, $char_a_ring_nfd . \"bc\" ),\n        array( $char_a_ring_nfd . \"bc\", 2, $char_a_ring_nfd . \"b\" ),\n        array( $char_a_ring_nfd . \"bc\", 1, $char_a_ring_nfd . \"\" ),\n        array( $char_a_ring_nfd . \"bc\", 3, 0, 5, $char_a_ring_nfd . \"bc\" ),\n        array( $char_a_ring_nfd . \"bc\", 2, 0, 4, $char_a_ring_nfd . \"b\" ),\n        array( $char_a_ring_nfd . \"bc\", 1, 0, 3, $char_a_ring_nfd . \"\" ),\n        array( $char_a_ring_nfd . \"bcde\", 2, 3, 5, \"bc\" ),\n        array( $char_a_ring_nfd . \"bcde\", 2, -4, 5, \"bc\" ),\n        array( $char_a_ring_nfd . \"bcde\", 2, 4, 6, \"cd\" ),\n        array( $char_a_ring_nfd . \"bcde\", 2, -7, 4, $char_a_ring_nfd . \"b\" ),\n        array( $char_a_ring_nfd . \"bcde\" . $char_a_ring_nfd . \"f\", 4, 5, 11, \"de\" . $char_a_ring_nfd . \"f\" ),\n        array( $char_a_ring_nfd . \"bcde\" . $char_a_ring_nfd . \"f\", 4, -6, 11, \"de\" . $char_a_ring_nfd . \"f\" ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, $char_a_ring_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 1, $char_a_ring_nfd . \"\" ),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 1, 0, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 1, 2, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 1, 3, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 1, 4, $char_diaeresis),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 0, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 2, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 3, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 4, $char_diaeresis . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 7, $char_diaeresis . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 8, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 10, $char_diaeresis),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 11, \"false\"),\n    );\n    $next = -1;\n    foreach( $tests as $test ) {\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"extract from \\\"$arg0\\\" \\\"$test[1]\\\" graphemes - grapheme_extract\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_extract($test[0], $test[1]);\n        }\n        elseif ( 4 == count ( $test ) ) {\n            $res_str .= \" starting at byte position $test[2]\";\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_COUNT, $test[2]);\n        }\n        else {\n            $res_str .= \" starting at byte position $test[2] with \\$next\";\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_COUNT, $test[2], $next);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= urlencode($result);\n        }\n        $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]);\n        if ( 5 == count ( $test ) ) {\n            $res_str .= \" \\$next=$next == $test[3] \";\n            if ( $next != $test[3] ) {\n                $res_str .= \"***FAILED***\";\n            }\n        }\n        $res_str .= \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_extract($haystack, $size, $extract_type = GRAPHEME_EXTR_MAXBYTES, $start = 0)' . \"\\n\\n\";\n    $tests = array(\n        array( \"abc\", 3, \"abc\" ),\n        array( \"abc\", 2, \"ab\" ),\n        array( \"abc\", 1, \"a\" ),\n        array( \"abc\", 0, \"\" ),\n        array( $char_a_ring_nfd . \"bc\", 5, $char_a_ring_nfd . \"bc\" ),\n        array( $char_a_ring_nfd . \"bc\", 4, $char_a_ring_nfd . \"b\" ),\n        array( $char_a_ring_nfd . \"bc\", 1, \"\" ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 9, $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 10, $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 11, $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 6, $char_a_ring_nfd . $char_o_diaeresis_nfd ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 3, $char_a_ring_nfd . \"\" ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 4, $char_a_ring_nfd . \"\" ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 5, $char_a_ring_nfd . \"\" ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 6, $char_a_ring_nfd . $char_o_diaeresis_nfd  ),\n        array( $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\", 7, $char_a_ring_nfd . $char_o_diaeresis_nfd . \"c\" ),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, 0, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, 2, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, 3, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, 4, $char_diaeresis),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 6, 0, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 6, 2, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 6, 3, $char_o_diaeresis_nfd . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 5, 4, $char_diaeresis . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 5, 7, $char_diaeresis . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 3, 8, $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 10, $char_diaeresis),\n        array( $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, 2, 11, \"false\"),\n    );\n    foreach( $tests as $test ) {\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"extract from \\\"$arg0\\\" \\\"$test[1]\\\" graphemes - grapheme_extract GRAPHEME_EXTR_MAXBYTES\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_MAXBYTES);\n        }\n        else {\n            $res_str .= \" starting at byte position $test[2]\";\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_MAXBYTES, $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= urlencode($result);\n        }\n        $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    $res_str .= \"\\n\" . 'function grapheme_extract($haystack, $size, $extract_type = GRAPHEME_EXTR_MAXCHARS, $start = 0)' . \"\\n\\n\";\n    $tests = array(\n        array( \"abc\", 3, \"abc\" ),\n        array( \"abc\", 2, \"ab\" ),\n        array( \"abc\", 1, \"a\" ),\n        array( \"abc\", 0, \"\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 0, \"\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 1, \"a\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 2, \"ab\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 3, \"abc\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 4, \"abc\" ),\n        array( \"abc\" . $char_o_diaeresis_nfd, 5, \"abc\" . $char_o_diaeresis_nfd),\n        array( \"abc\" . $char_o_diaeresis_nfd, 6, \"abc\" . $char_o_diaeresis_nfd),\n        array( $char_o_diaeresis_nfd . \"abc\", 0, \"\" ),\n        array( $char_o_diaeresis_nfd . \"abc\", 1, \"\" ),\n        array( $char_o_diaeresis_nfd . \"abc\", 2, $char_o_diaeresis_nfd ),\n        array( $char_o_diaeresis_nfd . \"abc\", 3, $char_o_diaeresis_nfd . \"a\" ),\n        array( $char_o_diaeresis_nfd . \"abc\", 4, $char_o_diaeresis_nfd . \"ab\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 5, $char_o_diaeresis_nfd . \"abc\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 6, $char_o_diaeresis_nfd . \"abc\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 7, $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"x\" ),\n        array( \"abc\", 3, 0, \"abc\" ),\n        array( \"abc\", 2, 1, \"bc\" ),\n        array( \"abc\", 1, 2, \"c\" ),\n        array( \"abc\", 0, 3, \"false\" ),\n        array( \"abc\", 1, 3, \"false\" ),\n        array( \"abc\", 1, 999, \"false\" ),\n        array( $char_o_diaeresis_nfd . \"abc\", 1, 6, \"false\" ),\n        array( $char_o_diaeresis_nfd . \"abc\", 1, 999, \"false\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 0, $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"x\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 1, $char_diaeresis . \"abc\" . $char_a_ring_nfd . \"xy\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 2, \"abc\" . $char_a_ring_nfd . \"xyz\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 3, \"abc\" . $char_a_ring_nfd . \"xyz\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 4, \"bc\" . $char_a_ring_nfd . \"xyz\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 5, \"c\" . $char_a_ring_nfd . \"xyz\" ),\n        array( $char_o_diaeresis_nfd . \"abc\" . $char_a_ring_nfd . \"xyz\", 8, 6, $char_a_ring_nfd . \"xyz\" ),\n    );\n    foreach( $tests as $test ) {\n        $arg0 = urlencode($test[0]);\n        $res_str .= \"extract from \\\"$arg0\\\" \\\"$test[1]\\\" graphemes - grapheme_extract GRAPHEME_EXTR_MAXCHARS\";\n        if ( 3 == count( $test ) ) {\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_MAXCHARS);\n        }\n        else {\n            $res_str .= \" starting at byte position $test[2]\";\n            $result = grapheme_extract($test[0], $test[1], GRAPHEME_EXTR_MAXCHARS, $test[2]);\n        }\n        $res_str .= \" = \";\n        if ( $result === false ) {\n            $res_str .= 'false';\n        }\n        else {\n            $res_str .= urlencode($result);\n        }\n        $res_str .= \" == \" . urlencode($test[count($test)-1]) . check_result($result, $test[count($test)-1]) . \"\\n\";\n    }\n    //=====================================================================================\n    return $res_str;\n}\necho ut_main();\nfunction check_result($result, $expected) {\n    if ( $result === false ) {\n            $result = 'false';\n    }\n    if ( strcmp($result, $expected) != 0 ) {\n        return \" **FAILED** \";\n    }\n    return \"\";\n}\n?>")).toMatchSnapshot();
  });
});
