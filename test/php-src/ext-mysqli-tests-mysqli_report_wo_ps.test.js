// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_report_wo_ps.phpt
  it("mysqli_report(), MySQL < 5.6", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    $tmp    = NULL;\n    $link   = NULL;\n    if (true !== ($tmp = mysqli_report(-1)))\n        printf(\"[002] Expecting boolean/true even for invalid flags, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = mysqli_report(MYSQLI_REPORT_ERROR)))\n        printf(\"[003] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = mysqli_report(MYSQLI_REPORT_STRICT)))\n        printf(\"[004] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = mysqli_report(MYSQLI_REPORT_INDEX)))\n        printf(\"[005] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = mysqli_report(MYSQLI_REPORT_ALL)))\n        printf(\"[007] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (true !== ($tmp = mysqli_report(MYSQLI_REPORT_OFF)))\n        printf(\"[008] Expecting boolean/true, got %s/%s\\n\", gettype($tmp), $tmp);\n    require('table.inc');\n    /*\n    Internal macro MYSQL_REPORT_ERROR\n    */\n    mysqli_report(MYSQLI_REPORT_ERROR);\n    mysqli_multi_query($link, \"BAR; FOO;\");\n    mysqli_query($link, \"FOO\");\n    mysqli_change_user($link, \"0123456789-10-456789-20-456789-30-456789-40-456789-50-456789-60-456789-70-456789-80-456789-90-456789\", \"password\", $db);\n    try {\n        mysqli_kill($link, -1);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    // mysqli_ping() cannot be tested, because one would need to cause an error inside the C function to test it\n    mysqli_real_query($link, \"FOO\");\n    if (@mysqli_select_db($link, \"Oh lord, let this be an unknown database name\"))\n        printf(\"[009] select_db should have failed\\n\");\n    // mysqli_store_result() and mysqli_use_result() cannot be tested, because one would need to cause an error inside the C function to test it\n    // Check that none of the above would have caused any error messages if MYSQL_REPORT_ERROR would\n    // not have been set. If that would be the case, the test would be broken.\n    mysqli_report(MYSQLI_REPORT_OFF);\n    mysqli_multi_query($link, \"BAR; FOO;\");\n    mysqli_query($link, \"FOO\");\n    mysqli_change_user($link, \"This might work if you accept anonymous users in your setup\", \"password\", $db);\n    try {\n        mysqli_kill($link, -1);\n    } catch (\\ValueError $e) {\n        echo $e->getMessage() . \\PHP_EOL;\n    }\n    mysqli_real_query($link, \"FOO\");\n    mysqli_select_db($link, \"Oh lord, let this be an unknown database name\");\n    mysqli_report(MYSQLI_REPORT_OFF);\n    mysqli_report(MYSQLI_REPORT_STRICT);\n    try {\n        if ($link = my_mysqli_connect($host, $user . 'unknown_really', $passwd . 'non_empty', $db, $port, $socket))\n            printf(\"[010] Can connect to the server using host=%s, user=%s, passwd=***non_empty, dbname=%s, port=%s, socket=%s\\n\",\n                $host, $user . 'unknown_really', $db, $port, $socket);\n        mysqli_close($link);\n    } catch (mysqli_sql_exception $e) {\n        printf(\"[011] %s\\n\", $e->getMessage());\n    }\n    try {\n        if (!$link = mysqli_init())\n            printf(\"[012] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n        if ($link = my_mysqli_real_connect($link, $host, $user . 'unknown_really', $passwd . 'non_empty', $db, $port, $socket))\n            printf(\"[013] Can connect to the server using host=%s, user=%s, passwd=***non_empty, dbname=%s, port=%s, socket=%s\\n\",\n                $host, $user . 'unknown_really', $db, $port, $socket);\n        mysqli_close($link);\n    } catch (mysqli_sql_exception $e) {\n        printf(\"[014] %s\\n\", $e->getMessage());\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
