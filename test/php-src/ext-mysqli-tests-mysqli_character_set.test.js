// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_character_set.phpt
  it("Fetching results from tables of different charsets.", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    $tmp\t= NULL;\n    $link\t= NULL;\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    if (!$res = mysqli_query($link, 'SELECT version() AS server_version'))\n        printf(\"[002] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    $tmp = mysqli_fetch_assoc($res);\n    mysqli_free_result($res);\n    $version = explode('.', $tmp['server_version']);\n    if (empty($version))\n        printf(\"[003] Cannot determine server version, need MySQL Server 4.1+ for the test!\\n\");\n    if ($version[0] <= 4 && $version[1] < 1)\n        printf(\"[004] Need MySQL Server 4.1+ for the test!\\n\");\n    if (!$res = mysqli_query($link, \"SHOW CHARACTER SET\"))\n        printf(\"[005] Cannot get list of available character sets, [%d] %s\\n\",\n            mysqli_errno($link), mysqli_error($link));\n    $charsets = array();\n    while ($row = mysqli_fetch_assoc($res))\n        $charsets[] = $row;\n    mysqli_free_result($res);\n    foreach ($charsets as $charset) {\n        $k = $charset['Charset'];\n        /* The server currently 17.07.2007 can't handle data sent in ucs2 */\n        /* The server currently 16.08.2010 can't handle data sent in utf16 and utf32 */\n        /* The server currently 02.09.2011 can't handle data sent in utf16le */\n        /* As of MySQL 8.0.28, `SHOW CHARACTER SET` contains utf8mb3, but that is not yet supported by mysqlnd */\n        if ($charset['Charset'] == 'ucs2' || $charset['Charset'] == 'utf16' || $charset['Charset'] == 'utf32' || 'utf16le' == $charset['Charset'] || 'utf8mb3' == $charset['Charset']) {\n            continue;\n        }\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\"))\n            printf(\"[006 + %s] [%d] %s\\n\", $k, mysqli_errno($link), mysqli_error($link));\n        $sql = sprintf(\"CREATE TABLE test(id INT, label CHAR(1)) CHARACTER SET '%s' \", $charset['Charset']);\n        if (!mysqli_query($link, $sql)) {\n            printf(\"[007 + %s] %s [%d] %s\\n\", $k, $sql, mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        if (!mysqli_set_charset($link, $charset['Charset'])) {\n            printf(\"[008 + %s] [%d] %s\\n\", $k, mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        for ($i = 1; $i <= 3; $i++) {\n            if (!mysqli_query($link, sprintf(\"INSERT INTO test (id, label) VALUES (%d, '%s')\",\n                                $i, mysqli_real_escape_string($link, chr(ord(\"a\") + $i)))))\n            {\n                var_dump($charset['Charset']);\n                printf(\"[009 + %s] [%d] %s\\n\", $k, mysqli_errno($link), mysqli_error($link));\n                continue;\n            }\n        }\n        if (!$res = mysqli_query($link, \"SELECT id, label FROM test\"))\n            printf(\"[010 + %s] [%d] %s\\n\", $k, mysqli_errno($link), mysqli_error($link));\n        for ($i = 1; $i <= 3; $i++) {\n            if (!$tmp = mysqli_fetch_assoc($res))\n                printf(\"[011 + %s] [%d] %s\\n\", $k, mysqli_errno($link), mysqli_error($link));\n            if ($tmp['id'] != $i)\n                printf(\"[012 + %s] Expecting %d, got %s, [%d] %s\\n\", $k,\n                        $i, $tmp['id'],\n                        mysqli_errno($link), mysqli_error($link));\n            if ($tmp['label'] != chr(ord(\"a\") + $i))\n                printf(\"[013 + %s] Expecting %d, got %s, [%d] %s\\n\", $k,\n                    chr(ord(\"a\") + $i), $tmp['label'],\n                    mysqli_errno($link), mysqli_error($link));\n        }\n        mysqli_free_result($res);\n    }\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
