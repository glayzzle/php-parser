// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/sha1_file.phpt
  it("Test sha1_file() function with ASCII output and raw binary output. Based on ext/standard/tests/strings/md5_file.phpt", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing sha1_file() : basic functionality ***\\n\";\n/* Creating an empty file */\nif (($handle = fopen( \"EmptyFileSHA1.txt\", \"w+\")) == FALSE)\nreturn false;\n/* Creating a data file */\nif (($handle2 = fopen( \"DataFileSHA1.txt\", \"w+\")) == FALSE)\nreturn false;\n/* Writing into file */\n$filename = \"DataFileSHA1.txt\";\n$content = \"Add this to the file\\n\";\nif (is_writable($filename)) {\n  if (fwrite($handle2, $content) === FALSE) {\n    echo \"Cannot write to file ($filename)\";\n    exit;\n  }\n}\n// close the files\nfclose($handle);\nfclose($handle2);\n/* Testing error conditions */\necho \"\\n*** Testing for error conditions ***\\n\";\necho \"\\n-- No filename --\\n\";\ntry {\n    var_dump( sha1_file(\"\") );\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\necho \"\\n-- invalid filename --\\n\";\nvar_dump( sha1_file(\"rewncwYcn89q\") );\necho \"\\n-- Scalar value as filename --\\n\";\nvar_dump( sha1_file(12) );\necho \"\\n-- NULL as filename --\\n\";\ntry {\n    var_dump( sha1_file(NULL) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\necho \"\\n-- Hexadecimal Output for Empty file as Argument --\\n\";\nvar_dump( sha1_file(\"EmptyFileSHA1.txt\") );\necho \"\\n-- Raw Binary Output for Empty file as Argument --\\n\";\nvar_dump( bin2hex(sha1_file(\"EmptyFileSHA1.txt\", true)));\necho \"\\n-- Hexadecimal Output for a valid file with some contents --\\n\";\nvar_dump( sha1_file(\"DataFileSHA1.txt\") );\necho \"\\n-- Raw Binary Output for a valid file with some contents --\\n\";\nvar_dump ( bin2hex(sha1_file(\"DataFileSHA1.txt\", true)));\n// remove temp files\nunlink(\"DataFileSHA1.txt\");\nunlink(\"EmptyFileSHA1.txt\");\n?>")).toMatchSnapshot();
  });
});
