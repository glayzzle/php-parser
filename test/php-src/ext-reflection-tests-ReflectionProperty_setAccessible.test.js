// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionProperty_setAccessible.phpt
  it("Test that ReflectionProperty::setAccessible() has no effects", function () {
    expect(parser.parseCode("<?php\nclass A {\n    protected $protected = 'a';\n    protected static $protectedStatic = 'b';\n    private $private = 'c';\n    private static $privateStatic = 'd';\n}\nclass B extends A {}\n$a               = new A;\n$protected       = new ReflectionProperty($a, 'protected');\n$protectedStatic = new ReflectionProperty('A', 'protectedStatic');\n$private         = new ReflectionProperty($a, 'private');\n$privateStatic   = new ReflectionProperty('A', 'privateStatic');\nvar_dump($protected->getValue($a));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($a));\nvar_dump($privateStatic->getValue());\n$protected->setValue($a, 'e');\n$protectedStatic->setValue('f');\n$private->setValue($a, 'g');\n$privateStatic->setValue('h');\nvar_dump($protected->getValue($a));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($a));\nvar_dump($privateStatic->getValue());\n$protected->setAccessible(FALSE);\n$protectedStatic->setAccessible(FALSE);\n$private->setAccessible(FALSE);\n$privateStatic->setAccessible(FALSE);\nvar_dump($protected->getValue($a));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($a));\nvar_dump($privateStatic->getValue());\n$protected->setValue($a, 'i');\n$protectedStatic->setValue('j');\n$private->setValue($a, 'k');\n$privateStatic->setValue('l');\nvar_dump($protected->getValue($a));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($a));\nvar_dump($privateStatic->getValue());\n$a               = new A;\n$b               = new B;\n$protected       = new ReflectionProperty($b, 'protected');\n$protectedStatic = new ReflectionProperty('B', 'protectedStatic');\n$private         = new ReflectionProperty($a, 'private');\nvar_dump($protected->getValue($b));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($b));\n$protected->setValue($b, 'e');\n$protectedStatic->setValue('f');\n$private->setValue($b, 'g');\nvar_dump($protected->getValue($b));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($b));\n$protected->setAccessible(FALSE);\n$protectedStatic->setAccessible(FALSE);\n$private->setAccessible(FALSE);\nvar_dump($protected->getValue($b));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($b));\n$protected->setValue($b, 'h');\n$protectedStatic->setValue('i');\n$private->setValue($b, 'j');\nvar_dump($protected->getValue($b));\nvar_dump($protectedStatic->getValue());\nvar_dump($private->getValue($b));\n?>")).toMatchSnapshot();
  });
});
