// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_slice.phpt
  it("Testing array_slice() function", function () {
    expect(parser.parseCode("<?php\n$var_array = array(\n                   array(),\n                   array(1,2,3,4,5,6,7,8,9),\n                   array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"),\n                   array(6, \"six\", 7, \"seven\", 8, \"eight\", 9, \"nine\"),\n                   array( \"a\" => \"aaa\", \"A\" => \"AAA\", \"c\" => \"ccc\", \"d\" => \"ddd\", \"e\" => \"eee\"),\n                   array(\"1\" => \"one\", \"2\" => \"two\", \"3\" => \"three\", \"4\" => \"four\", \"5\" => \"five\"),\n                   array(1 => \"one\", 2 => \"two\", 3 => 7, 4 => \"four\", 5 => \"five\"),\n                   array(\"f\" => \"fff\", \"1\" => \"one\", 4 => 6, \"\" => \"blank\", 2 => \"float\", \"F\" => \"FFF\",\n                         \"blank\" => \"\", 3 => 3.7, 5 => 7, 6 => 8.6, '5' => \"Five\"),\n                   array(12, \"name\", 'age', '45'),\n                   array( array(\"oNe\", \"tWo\", 4), array(10, 20, 30, 40, 50), array())\n                 );\n$num = 4;\n$str = \"john\";\n$counter = 1;\nforeach ($var_array as $sub_array)\n{\n  /* variations with two arguments */\n  /* offset values >, < and = 0    */\n  echo\"\\n*** Iteration \".$counter.\" ***\\n\";\n  echo\"\\n*** Variation with first two Arguments ***\\n\";\n  var_dump ( array_slice($sub_array, 1) );\n  var_dump ( array_slice($sub_array, 0) );\n  var_dump ( array_slice($sub_array, -2) );\n  /* variations with three arguments */\n  /* offset value variations with length values  */\n  echo\"\\n*** Variation with first three Arguments ***\\n\";\n  var_dump ( array_slice($sub_array, 1, 3) );\n  var_dump ( array_slice($sub_array, 1, 0) );\n  var_dump ( array_slice($sub_array, 1, -3) );\n  var_dump ( array_slice($sub_array, 0, 3) );\n  var_dump ( array_slice($sub_array, 0, 0) );\n  var_dump ( array_slice($sub_array, 0, -3) );\n  var_dump ( array_slice($sub_array, -2, 3) );\n  var_dump ( array_slice($sub_array, -2, 0 ) );\n  var_dump ( array_slice($sub_array, -2, -3) );\n  /* variations with four arguments */\n  /* offset value, length value and preserve_key values variation */\n  echo\"\\n*** Variation with first two arguments with preserve_key value TRUE ***\\n\";\n  var_dump ( array_slice($sub_array, 1, 3, true) );\n  var_dump ( array_slice($sub_array, 1, 0, true) );\n  var_dump ( array_slice($sub_array, 1, -3, true) );\n  var_dump ( array_slice($sub_array, 0, 3, true) );\n  var_dump ( array_slice($sub_array, 0, 0, true) );\n  var_dump ( array_slice($sub_array, 0, -3, true) );\n  var_dump ( array_slice($sub_array, -2, 3, true) );\n  var_dump ( array_slice($sub_array, -2, 0, true) );\n  var_dump ( array_slice($sub_array, -2, -3, true) );\n  $counter++;\n}\n  /* variation of offset and length to point to same element */\n  echo\"\\n*** Typical Variation of offset and length  Arguments ***\\n\";\n  var_dump (array_slice($var_array[2], 1, -3, true) );\n  var_dump (array_slice($var_array[2], 1, -3, false) );\n  var_dump (array_slice($var_array[2], -3, -2, true) );\n  var_dump (array_slice($var_array[2], -3, -2, false) );\n?>")).toMatchSnapshot();
  });
});
