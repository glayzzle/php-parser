// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/arrayObject_magicMethods6.phpt
  it("SPL: ArrayObject: ensure the magic methods for property access of a subclass of ArrayObject are not invoked when manipulating its elements using -> ArrayObject::ARRAY_AS_PROPS.", function () {
    expect(parser.parseCode("<?php\nclass C {\n    public $a = 1;\n    public $b = 2;\n    public $c = 3;\n    private $priv = 'secret';\n}\nclass UsesMagic extends ArrayObject {\n    public $b = \"This should never appear in storage\";\n    function __get($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __set($name, $value) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __isset($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n    function __unset($name) {\n        $args = func_get_args();\n        echo \"In \" . __METHOD__ . \"(\" . implode($args, ',') . \")\\n\";\n    }\n}\n$obj = new C;\n$ao = new UsesMagic($obj, ArrayObject::ARRAY_AS_PROPS);\necho \"\\n--> Write existent, non-existent and dynamic:\\n\";\n$ao->a = 'changed';\n$ao->dynamic = 'new';\n$ao->dynamic = 'new.changed';\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> Read existent, non-existent and dynamic:\\n\";\nvar_dump($ao->a);\nvar_dump($ao->nonexistent);\nvar_dump($ao->dynamic);\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> isset existent, non-existent and dynamic:\\n\";\nvar_dump(isset($ao->a));\nvar_dump(isset($ao->nonexistent));\nvar_dump(isset($ao->dynamic));\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\necho \"\\n--> Unset existent, non-existent and dynamic:\\n\";\nunset($ao->a);\nunset($ao->nonexistent);\nunset($ao->dynamic);\necho \"  Original wrapped object:\\n\";\nvar_dump($obj);\necho \"  Wrapping ArrayObject:\\n\";\nvar_dump($ao);\n?>")).toMatchSnapshot();
  });
});
