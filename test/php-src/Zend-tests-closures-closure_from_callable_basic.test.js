// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/closures/closure_from_callable_basic.phpt
  it("Testing Closure::fromCallable() functionality: Basic", function () {
    expect(parser.parseCode("<?php\ninclude('closure_from_callable.inc');\necho 'Access public static function';\n$fn = Closure::fromCallable(['Foo', 'publicStaticFunction']);\necho $fn(\" OK\".PHP_EOL);\necho 'Access public static function with different case';\n$fn = Closure::fromCallable(['fOo', 'publicStaticfUNCTION']);\necho $fn(\" OK\".PHP_EOL);\necho 'Access public static function with colon scheme';\n$fn = Closure::fromCallable('Foo::publicStaticFunction');\necho $fn(\" OK\".PHP_EOL);\necho 'Access public instance method of object';\n$fn = Closure::fromCallable([new Foo, 'publicInstanceFunc']);\necho $fn(\" OK\".PHP_EOL);\necho 'Access public instance method of parent object through parent:: ';\n$fn = Closure::fromCallable([new Foo, 'publicInstanceFunc']);\necho $fn(\" OK\".PHP_EOL);\necho 'Function that exists';\n$fn = Closure::fromCallable('bar');\necho $fn(\" OK\".PHP_EOL);\necho 'Function that exists with different spelling';\n$fn = Closure::fromCallable('BAR');\necho $fn(\" OK\".PHP_EOL);\necho 'Closure is already a closure';\n$fn = Closure::fromCallable($closure);\necho $fn(\" OK\".PHP_EOL);\necho 'Class with public invocable';\n$fn = Closure::fromCallable(new PublicInvocable);\necho $fn(\" OK\".PHP_EOL);\necho \"Instance return private method as callable\";\n$foo = new Foo;\n$fn = $foo->closePrivateValid();\necho $fn(\" OK\".PHP_EOL);\necho \"Instance return private static method as callable\";\n$foo = new Foo;\n$fn = $foo->closePrivateStatic();\necho $fn(\" OK\".PHP_EOL);\necho 'Instance return protected static method as callable';\n$subFoo = new SubFoo;\n$fn = $subFoo->closeProtectedStaticMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'Subclass closure over parent class protected method';\n$subFoo = new SubFoo;\n$fn = $subFoo->closeProtectedValid();\necho $fn(\" OK\".PHP_EOL);\necho 'Subclass closure over parent class static protected method';\n$subFoo = new SubFoo;\n$fn = $subFoo->closeProtectedStaticMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'Access public instance method of parent object through \"parent::\" ';\n$subFoo = new SubFoo;\n$fn = $subFoo->getParentPublicInstanceMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'Access public instance method of self object through \"self::\" ';\n$foo = new Foo;\n$fn = $foo->getSelfColonPublicInstanceMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'Access public instance method of parent object through \"self::\" to parent method';\n$foo = new SubFoo;\n$fn = $foo->getSelfColonParentPublicInstanceMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'Access protected instance method of parent object through \"self::\" to parent method';\n$foo = new SubFoo;\n$fn = $foo->getSelfColonParentProtectedInstanceMethod();\necho $fn(\" OK\".PHP_EOL);\necho 'MagicCall __call instance method ';\n$fn = Closure::fromCallable([new MagicCall, 'nonExistentMethod']);\necho $fn(\" OK\".PHP_EOL);\necho 'MagicCall __callStatic static method ';\n$fn = Closure::fromCallable(['MagicCall', 'nonExistentMethod']);\necho $fn(\" OK\".PHP_EOL);\n?>")).toMatchSnapshot();
  });
});
