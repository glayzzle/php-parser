// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/property_exists.phpt
  it("Reflection and property_exists()", function () {
    expect(parser.parseCode("<?php\nclass A\n{\n    public    $a = 1;\n    protected $b = 2;\n    private   $c = 3;\n    public    $empty;\n    public    $init = 1;\n    function __toString()\n    {\n        return 'obj(' . get_class($this) . ')';\n    }\n    static function test($oc, $props)\n    {\n        echo '===' . __CLASS__ . \"===\\n\";\n        foreach($props as $p2) {\n            echo $oc, '::$' , $p2, \"\\n\";\n            var_dump(property_exists($oc, $p2));\n        }\n    }\n}\nclass B extends A\n{\n    private   $c = 4;\n    static function test($oc, $props)\n    {\n        echo '===' . __CLASS__ . \"===\\n\";\n        foreach($props as $p2) {\n            echo $oc, '::$' , $p2, \"\\n\";\n            var_dump(property_exists($oc, $p2));\n        }\n    }\n}\nclass C extends B\n{\n    private   $d = 5;\n    static function test($oc, $props)\n    {\n        echo '===' . __CLASS__ . \"===\\n\";\n        foreach($props as $p2) {\n            echo $oc, '::$' , $p2, \"\\n\";\n            var_dump(property_exists($oc, $p2));\n        }\n    }\n}\n$oA = new A;\n$oA->e = 6;\n$oC = new C;\n$pc = array($oA, 'A', 'B', 'C', $oC);\n$pr = array('a', 'b', 'c', 'd', 'e');\nforeach($pc as $p1) {\n    if (is_object($p1)) {\n        $p1->test($p1, $pr);\n    } else {\n        $r = new ReflectionMethod($p1, 'test');\n        $r->invoke(NULL, $p1, $pr);\n    }\n    echo \"===GLOBAL===\\n\";\n    foreach($pr as $p2) {\n        echo $p1, '::$' , $p2, \"\\n\";\n        var_dump(property_exists($p1, $p2));\n    }\n}\necho \"===PROBLEMS===\\n\";\ntry {\n    var_dump(property_exists(NULL, 'empty'));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    var_dump(property_exists(25,'empty'));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump(property_exists('',''));\nvar_dump(property_exists('A',''));\nvar_dump(property_exists('A','123'));\nvar_dump(property_exists('A','init'));\nvar_dump(property_exists('A','empty'));\nvar_dump(property_exists(new A, ''));\nvar_dump(property_exists(new A, '123'));\nvar_dump(property_exists(new A, 'init'));\nvar_dump(property_exists(new A, 'empty'));\n?>")).toMatchSnapshot();
  });
});
