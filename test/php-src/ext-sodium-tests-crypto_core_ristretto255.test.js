// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sodium/tests/crypto_core_ristretto255.phpt
  it("Check for libsodium core ristretto255", function () {
    expect(parser.parseCode("<?php\n$badHex = array(\n    /* Non-canonical field encodings */\n    \"00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n    \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n    \"f3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n    \"edffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n    \"0100000000000000000000000000000000000000000000000000000000000080\",\n    /* Negative field elements */\n    \"0100000000000000000000000000000000000000000000000000000000000000\",\n    \"01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n    \"ed57ffd8c914fb201471d1c3d245ce3c746fcbe63a3679d51b6a516ebebe0e20\",\n    \"c34c4e1826e5d403b78e246e88aa051c36ccf0aafebffe137d148a2bf9104562\",\n    \"c940e5a4404157cfb1628b108db051a8d439e1a421394ec4ebccb9ec92a8ac78\",\n    \"47cfc5497c53dc8e61c91d17fd626ffb1c49e2bca94eed052281b510b1117a24\",\n    \"f1c6165d33367351b0da8f6e4511010c68174a03b6581212c71c0e1d026c3c72\",\n    \"87260f7a2f12495118360f02c26a470f450dadf34a413d21042b43b9d93e1309\",\n    /* Non-square x^2 */\n    \"26948d35ca62e643e26a83177332e6b6afeb9d08e4268b650f1f5bbd8d81d371\",\n    \"4eac077a713c57b4f4397629a4145982c661f48044dd3f96427d40b147d9742f\",\n    \"de6a7b00deadc788eb6b6c8d20c0ae96c2f2019078fa604fee5b87d6e989ad7b\",\n    \"bcab477be20861e01e4a0e295284146a510150d9817763caf1a6f4b422d67042\",\n    \"2a292df7e32cababbd9de088d1d1abec9fc0440f637ed2fba145094dc14bea08\",\n    \"f4a9e534fc0d216c44b218fa0c42d99635a0127ee2e53c712f70609649fdff22\",\n    \"8268436f8c4126196cf64b3c7ddbda90746a378625f9813dd9b8457077256731\",\n    \"2810e5cbc2cc4d4eece54f61c6f69758e289aa7ab440b3cbeaa21995c2f4232b\",\n    /* Negative xy value */\n    \"3eb858e78f5a7254d8c9731174a94f76755fd3941c0ac93735c07ba14579630e\",\n    \"a45fdc55c76448c049a1ab33f17023edfb2be3581e9c7aade8a6125215e04220\",\n    \"d483fe813c6ba647ebbfd3ec41adca1c6130c2beeee9d9bf065c8d151c5f396e\",\n    \"8a2e1d30050198c65a54483123960ccc38aef6848e1ec8f5f780e8523769ba32\",\n    \"32888462f8b486c68ad7dd9610be5192bbeaf3b443951ac1a8118419d9fa097b\",\n    \"227142501b9d4355ccba290404bde41575b037693cef1f438c47f8fbf35d1165\",\n    \"5c37cc491da847cfeb9281d407efc41e15144c876e0170b499a96a22ed31e01e\",\n    \"445425117cb8c90edcbc7c1cc0e74f747f2c1efa5630a967c64f287792a48a4b\",\n    /* s = -1, which causes y = 0 */\n    \"ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\"\n);\n// First 16 lines of output: non-canonical encodings are rejected\nfor ($i = 0; $i < count($badHex); ++$i) {\n    $s = sodium_hex2bin($badHex[$i]);\n    var_dump(sodium_crypto_core_ristretto255_is_valid_point($s));\n}\n$inputHash = sodium_hex2bin(\n    \"5d1be09e3d0c82fc538112490e35701979d99e06ca3e2b5b54bffe8b4dc772c1\" .\n    \"4d98b696a1bbfb5ca32c436cc61c16563790306c79eaca7705668b47dffe5bb6\"\n);\n$outHash = sodium_crypto_core_ristretto255_from_hash($inputHash);\nvar_dump(sodium_bin2hex($outHash));\n// Any random scalar should be valid, and so too should (r * basepoint)\n$r = sodium_crypto_core_ristretto255_scalar_random();\n$s0 = sodium_crypto_scalarmult_ristretto255_base($r);\nvar_dump(sodium_crypto_core_ristretto255_is_valid_point($s0));\n// Test that multiplying by the order of the curve fails:\n$L = \"\\xed\\xd3\\xf5\\x5c\\x1a\\x63\\x12\\x58\" .\n     \"\\xd6\\x9c\\xf7\\xa2\\xde\\xf9\\xde\\x14\" .\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" .\n     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\";\n$s = sodium_crypto_core_ristretto255_random();\ntry {\n    $multL = sodium_crypto_scalarmult_ristretto255($s, $L);\n} catch (SodiumException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n$s2 = sodium_crypto_scalarmult_ristretto255($r, $s);\n// _from_hash should produce a valid point\n$ru = random_bytes(64);\n$s3 = sodium_crypto_core_ristretto255_from_hash($ru);\nvar_dump(sodium_crypto_core_ristretto255_is_valid_point($s3));\n// Modular inverse should be valid too (???)\n//$r_invert = sodium_crypto_core_ristretto255_scalar_invert($r);\n//var_dump(sodium_crypto_core_ristretto255_is_valid_point($r_invert));\n$s_plus = sodium_crypto_core_ristretto255_add($s, $s0);\n$s_minus = sodium_crypto_core_ristretto255_sub($s_plus, $s0);\nvar_dump(hash_equals($s, $s_minus));\n?>")).toMatchSnapshot();
  });
});
