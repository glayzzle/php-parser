// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_fetch_field_oo.phpt
  it("mysqli_fetch_field()", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    // Note: no SQL type tests, internally the same function gets used as for mysqli_fetch_array() which does a lot of SQL type test\n    $mysqli = new mysqli();\n    $res = false;\n    try {\n        new mysqli_result($mysqli);\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    require('table.inc');\n    if (!$mysqli = new mysqli($host, $user, $passwd, $db, $port, $socket))\n        printf(\"[002] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    // Make sure that client, connection and result charsets are all the\n    // same. Not sure whether this is strictly necessary.\n    if (!$mysqli->set_charset('utf8'))\n        printf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->errno);\n    $charsetInfo = $mysqli->get_charset();\n    if (!$res = $mysqli->query(\"SELECT id AS ID, label FROM test AS TEST ORDER BY id LIMIT 1\")) {\n        printf(\"[004] [%d] %s\\n\", $mysqli->errno, $mysqli->error);\n    }\n    var_dump($res->fetch_field());\n    $tmp = $res->fetch_field();\n    var_dump($tmp);\n    if ($tmp->charsetnr != $charsetInfo->number) {\n        printf(\"[005] Expecting charset %s/%d got %d\\n\",\n            $charsetInfo->charset, $charsetInfo->number, $tmp->charsetnr);\n    }\n    if ($tmp->db != $db) {\n        printf(\"[007] Expecting database '%s' got '%s'\\n\",\n          $db, $tmp->db);\n    }\n    var_dump($res->fetch_field());\n    $res->free_result();\n    try {\n        $res->fetch_field();\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    $mysqli->close();\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
