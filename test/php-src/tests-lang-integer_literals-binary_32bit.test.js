// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/integer_literals/binary_32bit.phpt
  it("Binary integer strings (32bit)", function () {
    expect(parser.parseCode("<?php\n/* Using binary prefix notation lowercase */\n/* Maximum value representable as integer */\n$binary = 0b1111111111111111111111111111111;\nvar_dump($binary);\nvar_dump(PHP_INT_MAX);\n/* Floating number */\n$binary = 0b111111010000101010101010101010111111111111111111111111111111111111111111111111111111;\nvar_dump($binary);\n/* Integer */\n$binary = 0b1010110;\nvar_dump($binary);\n/* underscore separator */\n$binary = 0b1_010110;\nvar_dump($binary);\n/* Ignore leading 0 and _ */\n$binary = 0b0_01010110;\nvar_dump($binary);\n$binary = 0b0_1010110;\nvar_dump($binary);\n/* Overflow to infinity */\n$binary = 0bnvar_dump($binary);\n/* Using binary prefix notation uppercase */\n/* Maximum value representable as integer */\n$binary = 0B1111111111111111111111111111111;\nvar_dump($binary);\nvar_dump(PHP_INT_MAX);\n/* Floating number */\n$binary = 0B111111010000101010101010101010111111111111111111111111111111111111111111111111111111;\nvar_dump($binary);\n/* Integer */\n$binary = 0B1010110;\nvar_dump($binary);\n/* underscore separator */\n$binary = 0B1_010110;\nvar_dump($binary);\n/* Ignore leading 0 and _ */\n$binary = 0B0_01010110;\nvar_dump($binary);\n$binary = 0B0_1010110;\nvar_dump($binary);\n/* Overflow to infinity */\n$binarynvar_dump($binary);\n?>")).toMatchSnapshot();
  });
});
