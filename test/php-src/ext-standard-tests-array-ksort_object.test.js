// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/ksort_object.phpt
  it("Test ksort() function : object functionality - sort objects", function () {
    expect(parser.parseCode("<?php\n/*\n * testing ksort() by providing array ofinteger/string objects with following flag values:\n *  1.SORT_NUMERIC - compare items numerically\n *  2.SORT_STRING - compare items as strings\n*/\necho \"*** Testing ksort() : object functionality ***\\n\";\n// class declaration for integer objects\nclass IntegerObject\n{\n  public $class_value;\n  // initializing object member value\n  function __construct($value){\n    $this->class_value = $value;\n  }\n}\n// class declaration for string objects\nclass StringObject\n{\n  public $class_value;\n  // initializing object member value\n  function __construct($value){\n    $this->class_value = $value;\n  }\n  // return string value\n  function __tostring() {\n   return (string)$this->value;\n  }\n}\n// array of integer objects\n$unsorted_int_obj = array (\n  11 => new IntegerObject(11), 66 =>  new IntegerObject(66),\n  23 => new IntegerObject(23), -5 => new IntegerObject(-5),\n  1 => new IntegerObject(0.001), 0 => new IntegerObject(0)\n);\n// array of string objects\n$unsorted_str_obj = array (\n  \"axx\" => new StringObject(\"axx\"), \"t\" => new StringObject(\"t\"),\n  \"w\" => new StringObject(\"w\"), \"py\" => new StringObject(\"py\"),\n  \"apple\" => new StringObject(\"apple\"), \"Orange\" => new StringObject(\"Orange\"),\n  \"Lemon\" => new StringObject(\"Lemon\"), \"aPPle\" => new StringObject(\"aPPle\")\n);\necho \"\\n-- Testing ksort() by supplying various object arrays, 'flag' value is default --\\n\";\n// testing ksort() function by supplying integer object array, flag value is default\n$temp_array = $unsorted_int_obj;\nvar_dump(ksort($temp_array) );\nvar_dump($temp_array);\n// testing ksort() function by supplying string object array, flag value is default\n$temp_array = $unsorted_str_obj;\nvar_dump(ksort($temp_array) );\nvar_dump($temp_array);\necho \"\\n-- Testing ksort() by supplying various object arrays, 'flag' value is SORT_REGULAR --\\n\";\n// testing ksort() function by supplying integer object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_int_obj;\nvar_dump(ksort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\n// testing ksort() function by supplying string object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_str_obj;\nvar_dump(ksort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
