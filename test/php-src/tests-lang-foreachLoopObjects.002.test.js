// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/foreachLoopObjects.002.phpt
  it("Foreach loop tests - visibility.", function () {
    expect(parser.parseCode("<?php\nclass C {\n    public $a = \"Original a\";\n    public $b = \"Original b\";\n    public $c = \"Original c\";\n    protected $d = \"Original d\";\n    private $e = \"Original e\";\n    function doForEachC() {\n        echo \"in C::doForEachC\\n\";\n        foreach ($this as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n    static function doForEach($obj) {\n        echo \"in C::doForEach\\n\";\n        foreach ($obj as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n    function doForEachOnThis() {\n        echo \"in C::doForEachOnThis\\n\";\n        foreach ($this as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n}\nclass D extends C {\n    private $f = \"Original f\";\n    protected $g = \"Original g\";\n    static function doForEach($obj) {\n        echo \"in D::doForEach\\n\";\n        foreach ($obj as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n    function doForEachOnThis() {\n        echo \"in D::doForEachOnThis\\n\";\n        foreach ($this as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n}\nclass E extends D {\n    public $a = \"Overridden a\";\n    public $b = \"Overridden b\";\n    public $c = \"Overridden c\";\n    protected $d = \"Overridden d\";\n    private $e = \"Overridden e\";\n    static function doForEach($obj) {\n        echo \"in E::doForEach\\n\";\n        foreach ($obj as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n    function doForEachOnThis() {\n        echo \"in E::doForEachOnThis\\n\";\n        foreach ($this as $k=>&$v) {\n            var_dump($v);\n            $v=\"changed.$k\";\n        }\n    }\n}\necho \"\\n\\nIterate over various generations from within overridden methods:\\n\";\necho \"\\n--> Using instance of C:\\n\";\n$myC = new C;\n$myC->doForEachOnThis();\nvar_dump($myC);\necho \"\\n--> Using instance of D:\\n\";\n$myD = new D;\n$myD->doForEachOnThis();\nvar_dump($myD);\necho \"\\n--> Using instance of E:\\n\";\n$myE = new E;\n$myE->doForEachOnThis();\nvar_dump($myE);\necho \"\\n\\nIterate over various generations from within an inherited method:\\n\";\necho \"\\n--> Using instance of C:\\n\";\n$myC = new C;\n$myC->doForEachC();\nvar_dump($myC);\necho \"\\n--> Using instance of D:\\n\";\n$myD = new D;\n$myD->doForEachC();\nvar_dump($myD);\necho \"\\n--> Using instance of E:\\n\";\n$myE = new E;\n$myE->doForEachC();\nvar_dump($myE);\necho \"\\n\\nIterate over various generations from within an overridden static method:\\n\";\necho \"\\n--> Using instance of C:\\n\";\n$myC = new C;\nC::doForEach($myC);\nvar_dump($myC);\n$myC = new C;\nD::doForEach($myC);\nvar_dump($myC);\n$myC = new C;\nE::doForEach($myC);\nvar_dump($myC);\necho \"\\n--> Using instance of D:\\n\";\n$myD = new D;\nC::doForEach($myD);\nvar_dump($myD);\n$myD = new D;\nD::doForEach($myD);\nvar_dump($myD);\n$myD = new D;\nE::doForEach($myD);\nvar_dump($myD);\necho \"\\n--> Using instance of E:\\n\";\n$myE = new E;\nC::doForEach($myE);\nvar_dump($myE);\n$myE = new E;\nD::doForEach($myE);\nvar_dump($myE);\n$myE = new E;\nE::doForEach($myE);\nvar_dump($myE);\necho \"\\n\\nIterate over various generations from outside the object:\\n\";\necho \"\\n--> Using instance of C:\\n\";\n$myC = new C;\nforeach ($myC as $k=>&$v) {\n    var_dump($v);\n    $v=\"changed.$k\";\n}\nvar_dump($myC);\necho \"\\n--> Using instance of D:\\n\";\n$myD = new D;\nforeach ($myD as $k=>&$v) {\n    var_dump($v);\n    $v=\"changed.$k\";\n}\nvar_dump($myD);\necho \"\\n--> Using instance of E:\\n\";\n$myE = new E;\nforeach ($myE as $k=>&$v) {\n    var_dump($v);\n    $v=\"changed.$k\";\n}\nvar_dump($myE);\n?>")).toMatchSnapshot();
  });
});
