// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_errorcode.phpt
  it("MySQL PDO->errorCode()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db);\n    function check_error($offset, &$obj, $expected = '00000') {\n        $code = $obj->errorCode();\n        if (($code != $expected) && (($expected != '00000') && ($code != ''))) {\n            printf(\"[%03d] Expecting error code '%s' got code '%s'\\n\",\n                $offset, $expected, $code);\n        }\n    }\n    try {\n        /*\n        If you create a PDOStatement object through PDO->prepare()\n        or PDO->query() and invoke an error on the statement handle,\n        PDO->errorCode() will not reflect that error. You must call\n        PDOStatement->errorCode() to return the error code for an\n        operation performed on a particular statement handle.\n        */\n        $code = $db->errorCode();\n        check_error(2, $db);\n        $stmt = $db->query('SELECT id, label FROM test');\n        $stmt2 = &$stmt;\n        check_error(3, $db);\n        check_error(4, $stmt);\n        $db->exec('DROP TABLE IF EXISTS test');\n        @$stmt->execute();\n        check_error(4, $db);\n        check_error(5, $stmt, '42S02');\n        check_error(6, $stmt2, '42S02');\n        $db->exec('DROP TABLE IF EXISTS unknown');\n        @$stmt = $db->query('SELECT id, label FROM unknown');\n        check_error(7, $db, '42S02');\n        MySQLPDOTest::createTestTable($db);\n        $stmt = $db->query('SELECT id, label FROM test');\n        check_error(8, $db);\n        check_error(9, $stmt);\n        $db2 = &$db;\n        @$db->query('SELECT id, label FROM unknown');\n        check_error(10, $db, '42S02');\n        check_error(11, $db2, '42S02');\n        check_error(12, $stmt);\n        check_error(13, $stmt2);\n        // lets hope this is an invalid attribute code\n        $invalid_attr = -1 * PHP_INT_MAX + 3;\n        $tmp = @$db->getAttribute($invalid_attr);\n        check_error(14, $db, 'IM001');\n        check_error(15, $db2, 'IM001');\n        check_error(16, $stmt);\n        check_error(17, $stmt2);\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
