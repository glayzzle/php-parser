// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/normalizer_normalize.phpt
  it("normalize()", function () {
    expect(parser.parseCode("<?php\n/*\n * Try normalization and test normalization\n * with Procedural and Object methods.\n */\nfunction ut_main()\n{\n    $res_str = '';\n    $forms = array(\n        Normalizer::FORM_C,\n        Normalizer::FORM_D,\n        Normalizer::FORM_KC,\n        Normalizer::FORM_KD,\n    );\n    $forms_str = array (\n        Normalizer::FORM_C => 'UNORM_FORM_C',\n        Normalizer::FORM_D => 'UNORM_FORM_D',\n        Normalizer::FORM_KC => 'UNORM_FORM_KC',\n        Normalizer::FORM_KD => 'UNORM_FORM_KD',\n    );\n    /* just make sure all the form constants are defined as in the api spec */\n    if ( Normalizer::FORM_C != Normalizer::NFC ||\n         Normalizer::FORM_D != Normalizer::NFD ||\n         Normalizer::FORM_KC != Normalizer::NFKC ||\n         Normalizer::FORM_KD != Normalizer::NFKD) {\n            $res_str .= \"Invalid normalization form declarations!\\n\";\n    }\n    $char_a_diaeresis = \"\\xC3\\xA4\";\t// 'LATIN SMALL LETTER A WITH DIAERESIS' (U+00E4)\n    $char_a_ring = \"\\xC3\\xA5\";\t\t// 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5)\n    $char_o_diaeresis = \"\\xC3\\xB6\";    // 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6)\n    $char_angstrom_sign = \"\\xE2\\x84\\xAB\"; // 'ANGSTROM SIGN' (U+212B)\n    $char_A_ring = \"\\xC3\\x85\";\t// 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n    $char_ohm_sign = \"\\xE2\\x84\\xA6\";\t// 'OHM SIGN' (U+2126)\n    $char_omega = \"\\xCE\\xA9\";  // 'GREEK CAPITAL LETTER OMEGA' (U+03A9)\n    $char_combining_ring_above = \"\\xCC\\x8A\";  // 'COMBINING RING ABOVE' (U+030A)\n    $char_fi_ligature = \"\\xEF\\xAC\\x81\";  // 'LATIN SMALL LIGATURE FI' (U+FB01)\n    $char_long_s_dot = \"\\xE1\\xBA\\x9B\";\t// 'LATIN SMALL LETTER LONG S WITH DOT ABOVE' (U+1E9B)\n    $strs = array(\n        'ABC',\n        $char_a_diaeresis . '||' . $char_a_ring . '||' . $char_o_diaeresis,\n        $char_angstrom_sign . '||' . $char_A_ring . '||' . 'A' . $char_combining_ring_above,\n        $char_ohm_sign . '||' . $char_omega,\n        $char_fi_ligature,\n        $char_long_s_dot,\n    );\n    foreach( $forms as $form )\n    {\n        foreach( $strs as $str )\n        {\n            $str_norm = ut_norm_normalize( $str, $form );\n            $error_code = intl_get_error_code();\n            $error_message = intl_get_error_message();\n            $str_hex = urlencode($str);\n            $str_norm_hex = urlencode($str_norm);\n            $res_str .= \"'$str_hex' normalized to form '{$forms_str[$form]}' is '$str_norm_hex'\"\n                     .\t\"\\terror info: '$error_message' ($error_code)\\n\"\n                     .\t\"\";\n            $is_norm = ut_norm_is_normalized( $str, $form );\n            $error_code = intl_get_error_code();\n            $error_message = intl_get_error_message();\n            $res_str .= \"\t\tis in form '{$forms_str[$form]}'? = \" . ($is_norm ? \"yes\" : \"no\")\n                     .\t\"\\terror info: '$error_message' ($error_code)\\n\"\n                     .\t\"\";\n        }\n    }\n    return $res_str;\n}\ninclude_once( 'ut_common.inc' );\nut_run();\n?>")).toMatchSnapshot();
  });
});
