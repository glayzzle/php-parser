// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionMethod_invoke_basic.phpt
  it("ReflectionMethod::invoke()", function () {
    expect(parser.parseCode("<?php\nclass TestClass {\n    public $prop = 2;\n    public function foo() {\n        echo \"Called foo(), property = $this->prop\\n\";\n        var_dump($this);\n        return \"Return Val\";\n    }\n    public function willThrow() {\n        throw new Exception(\"Called willThrow()\");\n    }\n    public function methodWithArgs($a, $b) {\n        echo \"Called methodWithArgs($a, $b)\\n\";\n    }\n    public static function staticMethod() {\n        echo \"Called staticMethod()\\n\";\n        try {\n            var_dump($this);\n        } catch (Throwable $e) {\n            echo \"Exception: \" . $e->getMessage() . \"\\n\";\n        }\n    }\n    private static function privateMethod() {\n        echo \"Called privateMethod()\\n\";\n    }\n}\nabstract class AbstractClass {\n    abstract function foo();\n}\n$foo = new ReflectionMethod('TestClass', 'foo');\n$methodWithArgs = new ReflectionMethod('TestClass', 'methodWithArgs');\n$staticMethod = new ReflectionMethod('TestClass::staticMethod');\n$privateMethod = new ReflectionMethod(\"TestClass::privateMethod\");\n$methodThatThrows = new ReflectionMethod(\"TestClass::willThrow\");\n$testClassInstance = new TestClass();\n$testClassInstance->prop = \"Hello\";\necho \"Public method:\\n\";\nvar_dump($foo->invoke($testClassInstance));\nvar_dump($foo->invoke($testClassInstance, true));\necho \"\\nMethod with args:\\n\";\nvar_dump($methodWithArgs->invoke($testClassInstance, 1, \"arg2\"));\nvar_dump($methodWithArgs->invoke($testClassInstance, 1, \"arg2\", 3));\necho \"\\nStatic method:\\n\";\ntry {\n    var_dump($staticMethod->invoke());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($staticMethod->invoke(true));\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump($staticMethod->invoke(new stdClass()));\necho \"\\nMethod that throws an exception:\\n\";\ntry {\n    var_dump($methodThatThrows->invoke($testClassInstance));\n} catch (Exception $exc) {\n    var_dump($exc->getMessage());\n}\n?>")).toMatchSnapshot();
  });
});
