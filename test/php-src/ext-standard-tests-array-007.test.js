// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/007.phpt
  it("Test array_diff and array_diff_assoc behaviour", function () {
    expect(parser.parseCode("<?php\n$a = array(1,\"big\"=>2,3,6,3,5,3,3,3,3,3,3,3,3,3,3);\n$b = array(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3);\n$c = array(-1,1);\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho '$c='.var_export($c,TRUE).\";\\n\";\nvar_dump(array_diff($a,$b,$c));\nvar_dump(array_diff_assoc($a,$b,$c));\n$a = array(\n'a'=>2,\n'b'=>'some',\n'c'=>'done',\n'z'=>'foo',\n'f'=>5,\n'fan'=>'fen',\n7=>18,\n9=>25,\n11=>42,\n12=>42,\n45=>42,\n73=>'foo',\n95=>'some',\n'som3'=>'some',\n'want'=>'wanna');\n$b = array(\n'a'=>7,\n7=>18,\n9=>13,\n11=>42,\n45=>46,\n'som3'=>'some',\n'foo'=>'some',\n'goo'=>'foo',\n'f'=>5,\n'z'=>'equal'\n);\n$c = array(\n73=>'foo',\n95=>'some');\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho '$c='.var_export($c,TRUE).\";\\n\";\necho \"Results:\\n\\n\";\nvar_dump(array_diff($a,$b,$c));\nvar_dump(array_diff_assoc($a,$b,$c));\necho \"-=-=-=-=-=-=-=-=- New functionality from 5.0.0 -=-=-=-=-=-=-=-\\n\";\nerror_reporting(E_ALL);\nclass cr {\n    private $priv_member;\n    public  $public_member;\n    function __construct($val) {\n        $this->priv_member = $val;\n        $this->public_member = $val;\n    }\n    static function comp_func_cr($a, $b) {\n        if ($a->priv_member === $b->priv_member) return 0;\n        return ($a->priv_member > $b->priv_member)? 1:-1;\n    }\n}\nfunction comp_func($a, $b) {\n    if ($a === $b) return 0;\n    return ($a > $b)? 1:-1;\n}\nfunction comp_func_cr($a, $b) {\n    if ($a->public_member === $b->public_member) return 0;\n    return ($a->public_member > $b->public_member)? 1:-1;\n}\n/*\n$a = array(1,\"big\"=>2,3,6,3,5,3,3,3,3,3,3,3,3,3,3);\n$b = array(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3);\n$c = array(-1,1);\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho '$c='.var_export($c,TRUE).\";\\n\";\nvar_dump(array_diff($a,$b,$c));\nvar_dump(array_diff_assoc($a,$b,$c));\nvar_dump(array_udiff($a, $b, $c, \"comp_func\"));\nvar_dump(array_diff_uassoc($a,$b,$c, \"comp_func\"));\n*/\n/*\n $a = array(new cr(9),new cr(12),new cr(23),new cr(4),new cr(-15),);\n $b = array(new cr(9),new cr(22),new cr( 3),new cr(4),new cr(-15),);\n var_dump(array_udiff($a, $b, \"comp_func_cr\"));\n*/\n$a = array(\"0.1\" => new cr(9), \"0.5\" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);\n$b = array(\"0.2\" => new cr(9), \"0.5\" => new cr(22), 0 => new cr( 3), 1=> new cr(4), 2 => new cr(-15),);\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_udiff_uassoc($a, $b, \"comp_func_cr\", \"comp_func\"));'.\"\\n\";\nvar_dump(array_udiff_uassoc($a, $b, \"comp_func_cr\", \"comp_func\"));\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_udiff_uassoc($a, $b, array(\"cr\", \"comp_func_cr\"), \"comp_func\"));'.\"\\n\";\nvar_dump(array_udiff_uassoc($a, $b, array(\"cr\", \"comp_func_cr\"), \"comp_func\"));\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_udiff($a, $b, \"comp_func_cr\"));'.\"\\n\";\nvar_dump(array_udiff($a, $b, \"comp_func_cr\"));\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_udiff_assoc($a, $b, \"comp_func_cr\"));'.\"\\n\";\nvar_dump(array_udiff_assoc($a, $b, \"comp_func_cr\"));\n?>")).toMatchSnapshot();
  });
});
