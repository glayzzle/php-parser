// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_result_zerofill.phpt
  it("mysqli_stmt_bind_result() - ZEROFILL", function () {
    expect(parser.parseCode("<?php\n    require_once('connect.inc');\n    require_once('table.inc');\n    function zerofill($offset, $link, $datatype, $insert = 1) {\n        mysqli_query($link, 'ALTER TABLE test DROP zero');\n        $sql = sprintf('ALTER TABLE test ADD zero %s UNSIGNED ZEROFILL', $datatype);\n        if (!mysqli_query($link, $sql)) {\n            // no worries - server might not support it\n            return true;\n        }\n        if (!mysqli_query($link, sprintf('UPDATE test SET zero = %s', $insert))) {\n            printf(\"[%03d] UPDATE failed, [%d] %s\\n\",\n                $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!($stmt = mysqli_prepare($link, 'SELECT zero FROM test LIMIT 1'))) {\n            printf(\"[%03d] SELECT failed, [%d] %s\\n\",\n                $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        $result = null;\n        if (!mysqli_stmt_bind_result($stmt, $result)) {\n            printf(\"[%03d] Bind failed, [%d] %s\\n\",\n                mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt) || !mysqli_stmt_fetch($stmt)) {\n            printf(\"[%03d] Execute or fetch failed, [%d] %s\\n\",\n                mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        $res = mysqli_stmt_result_metadata($stmt);\n        $meta = mysqli_fetch_fields($res);\n        mysqli_stmt_free_result($stmt);\n        $meta = $meta[0];\n        $length = $meta->length;\n        if ($length > strlen($insert)) {\n            $expected = str_repeat('0', $length - strlen($insert));\n            $expected .= $insert;\n            if ($expected !== $result) {\n                printf(\"[%03d] Expecting '%s' got '%s'\\n\", $offset, $expected, $result);\n                return false;\n            }\n        } else if ($length <= 1) {\n            printf(\"[%03d] Length reported is too small to run test\\n\", $offset);\n            return false;\n        }\n        return true;\n    }\n    /*\n    We map those to PHP numeric types -\n        no padding/filling done. Neither with libmysql nor with mysqlnd.\n    zerofill(2, $link, 'TINYINT');\n    zerofill(3, $link, 'SMALLINT');\n    zerofill(4, $link, 'MEDIUMINT');\n    zerofill(5, $link, 'INT');\n    zerofill(6, $link, 'INTEGER');\n    zerofill(7, $link, 'BIGINT');\n    zerofill(8, $link, 'FLOAT');\n    zerofill(9, $link, 'DOUBLE');\n    zerofill(10, $link, 'DOUBLE PRECISION');\n    */\n    zerofill(11, $link, 'DECIMAL');\n    zerofill(12, $link, 'DEC');\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
