// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo/tests/bug_71447.phpt
  it("PDO Common: Bug #71447 (Quotes inside comments not properly handled)", function () {
    expect(parser.parseCode("<?php\nif (getenv('REDIR_TEST_DIR') === false) putenv('REDIR_TEST_DIR='.__DIR__ . '/../../pdo/tests/');\nrequire_once getenv('REDIR_TEST_DIR') . 'pdo_test.inc';\n$db = PDOTest::factory();\n$db->setAttribute (\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_WARNING);\n$db->setAttribute (\\PDO::ATTR_DEFAULT_FETCH_MODE, \\PDO::FETCH_NUM);\n$db->setAttribute (\\PDO::ATTR_EMULATE_PREPARES, false);\n$db->exec('CREATE TABLE test(id int)');\n$db->exec('INSERT INTO test VALUES(1)');\n// Comment without quotes or placeholders\n$stmt = $db->prepare(\"\n    SELECT -- That's all folks!\n        '\\\"abc\\\":8000'\n    FROM test\n\");\n$stmt->execute();\nvar_dump($stmt->fetchColumn());\n// Comment and placeholder within a string\n$stmt = $db->prepare(\"\n    SELECT\n        '\\\"abc\\\":8001 -- Wat?'\n    FROM test\n\");\n$stmt->execute();\nvar_dump($stmt->fetchColumn());\n// Comment with single quote\n$stmt = $db->prepare(\"\n    SELECT -- That's all folks!\n        '\\\"abc\\\":8002'\n    FROM test\n\");\n$stmt->execute();\nvar_dump($stmt->fetchColumn());\n// C-Style comment with single quote\n$stmt = $db->prepare(\"\n    SELECT /* That's all folks! */\n        '\\\"abc\\\":8003'\n    FROM test\n\");\n$stmt->execute();\nvar_dump($stmt->fetchColumn());\n// Comment with double quote\n$stmt = $db->prepare(\"\n    SELECT -- Is it only \\\"single quotes?\n        '\\\"abc\\\":8004'\n    FROM test\n\");\n$stmt->execute();\nvar_dump($stmt->fetchColumn());\n// Comment with ? placeholder\n$stmt = $db->prepare(\"\n    SELECT -- What about question marks here?\n        *\n    FROM test\n    WHERE id = ?\n\");\n$stmt->execute([1]);\nvar_dump($stmt->fetchColumn());\n// Comment with named placeholder\n$stmt = $db->prepare(\"\n    SELECT -- What about placeholders :bar\n        *\n    FROM test\n    WHERE id = :id\n\");\n$stmt->execute(['id' => 1]);\nvar_dump($stmt->fetchColumn());\n?>")).toMatchSnapshot();
  });
});
