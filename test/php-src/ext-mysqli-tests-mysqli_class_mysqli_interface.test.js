// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_class_mysqli_interface.phpt
  it("Interface of the class mysqli", function () {
    expect(parser.parseCode("<?php\n    require('connect.inc');\n    $mysqli = new mysqli($host, $user, $passwd, $db, $port, $socket);\n    $link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket);\n    printf(\"Parent class:\\n\");\n    var_dump(get_parent_class($mysqli));\n    printf(\"\\nMethods:\\n\");\n    $methods = get_class_methods($mysqli);\n    $expected_methods = array(\n        '__construct'\t\t\t=> true,\n        'autocommit'\t\t\t=> true,\n        'begin_transaction'\t\t=> true,\n        'change_user'\t\t\t=> true,\n        'character_set_name'\t=> true,\n        'close'\t\t\t\t\t=> true,\n        'commit'\t\t\t\t=> true,\n        'connect'\t\t\t\t=> true,\n        'dump_debug_info'\t\t=> true,\n        'escape_string'\t\t\t=> true,\n        'get_charset'\t\t\t=> true,\n        'get_client_info'\t\t=> true,\n        'get_server_info'\t\t=> true,\n        'get_warnings'\t\t\t=> true,\n        'init'\t\t\t\t\t=> true,\n        'kill'\t\t\t\t\t=> true,\n        'more_results'\t\t\t=> true,\n        'multi_query'\t\t\t=> true,\n        'next_result'\t\t\t=> true,\n        'options'\t\t\t\t=> true,\n        'ping'\t\t\t\t\t=> true,\n        'prepare'\t\t\t\t=> true,\n        'query'\t\t\t\t\t=> true,\n        'real_connect'\t\t\t=> true,\n        'real_escape_string'\t=> true,\n        'real_query'\t\t\t=> true,\n        'refresh'\t\t\t\t=> true,\n        'rollback'\t\t\t\t=> true,\n        'release_savepoint'\t\t=> true,\n        'savepoint'\t\t\t\t=> true,\n        'select_db'\t\t\t\t=> true,\n        'set_charset'\t\t\t=> true,\n        'set_opt'\t\t\t\t=> true,\n        'ssl_set'\t\t\t\t=> true,\n        'stat'   \t\t\t\t=> true,\n        'stmt_init'\t\t\t\t=> true,\n        'store_result'\t\t\t=> true,\n        'thread_safe'\t\t\t=> true,\n        'use_result'\t\t\t=> true,\n    );\n    if ($IS_MYSQLND) {\n        // mysqlnd only\n        /* $expected_methods['get_client_stats']\t= true; */\n        $expected_methods['get_connection_stats']\t= true;\n        $expected_methods['reap_async_query']\t= true;\n        $expected_methods['poll'] = true;\n    }\n    /* we should add ruled when to expect them */\n    if (function_exists('mysqli_debug'))\n        $expected_methods['debug']\t\t= true;\n    if (function_exists('ssl_set'))\n        $expected_methods['ssl_set']\t\t= true;\n    foreach ($methods as $k => $method) {\n        if (isset($expected_methods[$method])) {\n            unset($methods[$k]);\n            unset($expected_methods[$method]);\n        }\n    }\n    if (!empty($methods)) {\n        printf(\"Dumping list of unexpected methods.\\n\");\n        var_dump($methods);\n    }\n    if (!empty($expected_methods)) {\n        printf(\"Dumping list of missing methods.\\n\");\n        var_dump($expected_methods);\n    }\n    if (empty($methods) && empty($expected_methods))\n        printf(\"ok\\n\");\n    printf(\"\\nClass variables:\\n\");\n    $expected_class_variables = [\n        \"affected_rows\" \t=> true,\n        \"client_info\"\t\t=> true,\n        \"client_version\"\t=> true,\n        \"connect_errno\"\t\t=> true,\n        \"connect_error\"\t\t=> true,\n        \"errno\"\t\t\t\t=> true,\n        \"error\"\t\t\t\t=> true,\n        \"field_count\"\t\t=> true,\n        \"host_info\"\t\t\t=> true,\n        \"info\"\t\t\t\t=> true,\n        \"insert_id\"\t\t\t=> true,\n        \"protocol_version\"\t=> true,\n        \"server_info\"\t\t=> true,\n        \"server_version\"\t=> true,\n        \"sqlstate\"\t\t\t=> true,\n        \"thread_id\"\t\t\t=> true,\n        \"warning_count\"\t\t=> true,\n        \"error_list\"\t\t=> true,\n    ];\n    $expected_object_variables = [];\n    $variables = get_class_vars(get_class($mysqli));\n    foreach ($variables as $var => $v) {\n        if (isset($expected_class_variables[$var])) {\n            unset($expected_class_variables[$var]);\n            unset($variables[$var]);\n        }\n    }\n    if (!empty($expected_class_variables)) {\n      printf(\"Dumping list of missing class variables\\n\");\n      var_dump($expected_class_variables);\n    }\n    if (!empty($variables)) {\n      printf(\"Dumping list of unexpected class variables\\n\");\n      var_dump($variables);\n    }\n    echo \"ok\\n\";\n    printf(\"\\nObject variables:\\n\");\n    $variables = get_object_vars($mysqli);\n    foreach ($variables as $var => $v) {\n        if (isset($expected_object_variables[$var])) {\n            unset($expected_object_variables[$var]);\n            unset($variables[$var]);\n        }\n    }\n    if (!empty($expected_object_variables)) {\n      printf(\"Dumping list of missing object variables\\n\");\n      var_dump($expected_object_variables);\n    }\n    if (!empty($variables)) {\n      printf(\"Dumping list of unexpected object variables\\n\");\n      var_dump($variables);\n    }\n    echo \"ok\\n\";\n    printf(\"\\nMagic, magic properties:\\n\");\n    assert(mysqli_affected_rows($link) === $mysqli->affected_rows);\n    printf(\"mysqli->affected_rows = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->affected_rows, gettype($mysqli->affected_rows),\n        mysqli_affected_rows($link), gettype(mysqli_affected_rows($link)));\n    assert(mysqli_get_client_info() === $mysqli->client_info);\n    printf(\"mysqli->client_info = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->client_info, gettype($mysqli->client_info),\n        mysqli_get_client_info(), gettype(mysqli_get_client_info()));\n    assert(mysqli_get_client_version() === $mysqli->client_version);\n    printf(\"mysqli->client_version =  '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->client_version, gettype($mysqli->client_version),\n        mysqli_get_client_version(), gettype(mysqli_get_client_version()));\n    assert(mysqli_errno($link) === $mysqli->errno);\n    printf(\"mysqli->errno = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->errno, gettype($mysqli->errno),\n        mysqli_errno($link), gettype(mysqli_errno($link)));\n    assert(mysqli_error($link) === $mysqli->error);\n    printf(\"mysqli->error = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->error, gettype($mysqli->error),\n        mysqli_error($link), gettype(mysqli_error($link)));\n    assert(mysqli_error_list($link) === $mysqli->error_list);\n    assert(is_array($mysqli->error_list));\n    assert(mysqli_field_count($link) === $mysqli->field_count);\n    printf(\"mysqli->field_count = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->field_count, gettype($mysqli->field_count),\n        mysqli_field_count($link), gettype(mysqli_field_count($link)));\n    assert(mysqli_insert_id($link) === $mysqli->insert_id);\n    printf(\"mysqli->insert_id = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->insert_id, gettype($mysqli->insert_id),\n        mysqli_insert_id($link), gettype(mysqli_insert_id($link)));\n    assert(mysqli_sqlstate($link) === $mysqli->sqlstate);\n    printf(\"mysqli->sqlstate = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->sqlstate, gettype($mysqli->sqlstate),\n        mysqli_sqlstate($link), gettype(mysqli_sqlstate($link)));\n    assert(mysqli_get_host_info($link) === $mysqli->host_info);\n    printf(\"mysqli->host_info = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->host_info, gettype($mysqli->host_info),\n        mysqli_get_host_info($link), gettype(mysqli_get_host_info($link)));\n    /* note that the data types are different */\n    assert(mysqli_info($link) == $mysqli->info);\n    printf(\"mysqli->info = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->info, gettype($mysqli->info),\n        mysqli_info($link), gettype(mysqli_info($link)));\n    assert(mysqli_thread_id($link) > $mysqli->thread_id);\n    assert(gettype($mysqli->thread_id) == gettype(mysqli_thread_id($link)));\n    printf(\"mysqli->thread_id = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->thread_id, gettype($mysqli->thread_id),\n        mysqli_thread_id($link), gettype(mysqli_thread_id($link)));\n    assert(mysqli_get_proto_info($link) === $mysqli->protocol_version);\n    printf(\"mysqli->protocol_version = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->protocol_version, gettype($mysqli->protocol_version),\n        mysqli_get_proto_info($link), gettype(mysqli_get_proto_info($link)));\n    assert(mysqli_get_server_info($link) === $mysqli->server_info);\n    printf(\"mysqli->server_info = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->server_info, gettype($mysqli->server_info),\n        mysqli_get_server_info($link), gettype(mysqli_get_server_info($link)));\n    assert(mysqli_get_server_version($link) === $mysqli->server_version);\n    printf(\"mysqli->server_version = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->server_version, gettype($mysqli->server_version),\n        mysqli_get_server_version($link), gettype(mysqli_get_server_version($link)));\n    assert(mysqli_warning_count($link) === $mysqli->warning_count);\n    printf(\"mysqli->warning_count = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->warning_count, gettype($mysqli->warning_count),\n        mysqli_warning_count($link), gettype(mysqli_warning_count($link)));\n    printf(\"\\nAccess to undefined properties:\\n\");\n    printf(\"mysqli->unknown = '%s'\\n\", @$mysqli->unknown);\n    @$mysqli->unknown = 13;\n    printf(\"setting mysqli->unknown, mysqli_unknown = '%s'\\n\", @$mysqli->unknown);\n    $unknown = 'friday';\n    @$mysqli->unknown = $unknown;\n    printf(\"setting mysqli->unknown, mysqli_unknown = '%s'\\n\", @$mysqli->unknown);\n    $mysqli = new my_mysqli($host, $user, $passwd, $db, $port, $socket);\n    printf(\"\\nAccess hidden properties for MYSLQI_STATUS_INITIALIZED (TODO documentation):\\n\");\n    assert(mysqli_connect_error() === $mysqli->connect_error);\n    printf(\"mysqli->connect_error = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->connect_error, gettype($mysqli->connect_error),\n        mysqli_connect_error(), gettype(mysqli_connect_error()));\n    assert(mysqli_connect_errno() === $mysqli->connect_errno);\n    printf(\"mysqli->connect_errno = '%s'/%s ('%s'/%s)\\n\",\n        $mysqli->connect_errno, gettype($mysqli->connect_errno),\n        mysqli_connect_errno(), gettype(mysqli_connect_errno()));\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
