// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/uasort_object2.phpt
  it("Test uasort() function : object functionality - sort diff. objects", function () {
    expect(parser.parseCode("<?php\n/*\n * This testcase tests uasort() functionality with different objects\n * Objects of different classes:\n *  simple class,\n *  child class,\n *  empty class &\n *  static class\n */\necho \"*** Testing uasort() : object functionality ***\\n\";\n// comparison function\nfunction cmp_function($value1, $value2)\n{\n  if($value1 == $value2) {\n    return 0;\n  }\n  else if($value1 > $value2) {\n    return 1;\n  }\n  else\n    return -1;\n}\n// Simple class with single member variable\nclass SimpleClass\n{\n  private $int_value;\n  public function __construct($value) {\n    $this->int_value = $value;\n  }\n}\n// Class without any member\nclass EmptyClass\n{\n}\n// Class with static member\nclass StaticClass\n{\n  public static $static_value;\n  public function __construct($value) {\n    StaticClass::$static_value = $value;\n  }\n}\n// Abstract class\nabstract class AbstractClass\n{\n  public $pub_value;\n  public abstract function abstractMethod();\n}\n// Child class extending abstract class\nclass ChildClass extends AbstractClass\n{\n  public $child_value = 100;\n  public function abstractMethod() {\n    $pub_value = 5;\n  }\n  public function __construct($value) {\n    $this->child_value = $value;\n  }\n}\n// Testing uasort with StaticClass objects as elements of 'array_arg'\necho \"-- Testing uasort() with StaticClass objects --\\n\";\n$array_arg = array(\n  0 => new StaticClass(20),\n  1 => new StaticClass(50),\n  2 => new StaticClass(15),\n  3 => new StaticClass(70),\n);\nvar_dump( uasort($array_arg, 'cmp_function') );\nvar_dump($array_arg);\n// Testing uasort with EmptyClass objects as elements of 'array_arg'\necho \"-- Testing uasort() with EmptyClass objects --\\n\";\n$array_arg = array(\n  0 => new EmptyClass(),\n  1 => new EmptyClass(),\n  2 => new EmptyClass(),\n  3 => new EmptyClass(),\n);\nvar_dump( uasort($array_arg, 'cmp_function') );\nvar_dump($array_arg);\n// Testing uasort with ChildClass objects as elements of 'array_arg'\necho \"-- Testing uasort() with ChildClass objects --\\n\";\n$array_arg = array(\n  0 => new ChildClass(20),\n  1 => new ChildClass(500),\n  2 => new ChildClass(15),\n  3 => new ChildClass(700),\n);\nvar_dump( uasort($array_arg, 'cmp_function') );\nvar_dump($array_arg);\necho \"Done\"\n?>")).toMatchSnapshot();
  });
});
