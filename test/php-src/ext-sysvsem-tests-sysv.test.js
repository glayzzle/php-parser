// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sysvsem/tests/sysv.phpt
  it("General semaphore and shared memory test", function () {
    expect(parser.parseCode("<?php\n$MEMSIZE = 512;  //  size of shared memory to allocate\n$SEMKEY\t =   ftok(__FILE__, 'P');  //  Semaphore key\n$SHMKEY\t =   ftok(__FILE__, 'Q');  //  Shared memory key\necho \"Start.\\n\";\n// Get semaphore\n$sem_id = sem_get($SEMKEY, 1);\nif ($sem_id === FALSE) {\n    echo \"Fail to get semaphore\";\n    exit;\n}\necho \"Got semaphore.\\n\";\n// Accuire semaphore\nif (! sem_acquire($sem_id)) {\n    echo \"Fail to acquire semaphore.\\n\";\n    sem_remove($sem_id);\n    exit;\n}\necho \"Success acquire semaphore.\\n\";\n$shm_id = shm_attach($SHMKEY, $MEMSIZE);\nif ($shm_id === FALSE) {\n    echo \"Fail to attach shared memory.\\n\";\n    sem_remove($sem_id);\n    exit;\n}\necho \"Success to attach shared memory.\\n\";\n// Write variable 1\nif (!shm_put_var($shm_id, 1, \"Variable 1\")) {\n    echo \"Fail to put var 1 on shared memory $shm_id.\\n\";\n    sem_remove($sem_id);\n    shm_remove ($shm_id);\n    exit;\n}\necho \"Write var1 to shared memory.\\n\";\n// Write variable 2\nif (!shm_put_var($shm_id, 2, \"Variable 2\")) {\n    echo \"Fail to put var 2 on shared memory.\\n\";\n    sem_remove($sem_id);\n    shm_remove ($shm_id);\n    exit;\n}\necho \"Write var2 to shared memory.\\n\";\n// Read variable 1\n$var1   =   shm_get_var ($shm_id, 1);\nif ($var1 === FALSE) {\n    echo \"Fail to retrieve Var 1 from Shared memory, return value=$var1.\\n\";\n} else {\n    echo \"Read var1=$var1.\\n\";\n}\n// Read variable 1\n$var2   =   shm_get_var ($shm_id, 2);\nif ($var1 === FALSE) {\n    echo \"Fail to retrieve Var 2 from Shared memory, return value=$var2.\\n\";\n} else {\n    echo \"Read var2=$var2.\\n\";\n}\n// Release semaphore\nif (!sem_release($sem_id)) {\n    echo \"Fail to release semaphore.\\n\";\n} else {\n    echo \"Semaphore released.\\n\";\n}\n// remove shared memory segmant from SysV\nif (shm_remove ($shm_id)) {\n    echo \"Shared memory successfully removed from SysV.\\n\";\n} else {\n    echo \"Fail to remove shared memory from SysV.\\n\";\n}\n// Remove semaphore\nif (sem_remove($sem_id)) {\n    echo \"semaphore removed successfully from SysV.\\n\";\n} else {\n    echo \"Fail to remove semaphore from SysV.\\n\";\n}\necho \"End.\\n\";\n?>")).toMatchSnapshot();
  });
});
