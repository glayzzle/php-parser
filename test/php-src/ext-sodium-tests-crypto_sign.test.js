// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sodium/tests/crypto_sign.phpt
  it("Check for libsodium ed25519 signatures", function () {
    expect(parser.parseCode("<?php\n$keypair = sodium_crypto_sign_keypair();\nvar_dump(strlen($keypair) === SODIUM_CRYPTO_SIGN_KEYPAIRBYTES);\n$sk = sodium_crypto_sign_secretkey($keypair);\nvar_dump(strlen($sk) === SODIUM_CRYPTO_SIGN_SECRETKEYBYTES);\n$pk = sodium_crypto_sign_publickey($keypair);\nvar_dump(strlen($pk) === SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES);\nvar_dump($pk !== $sk);\n$keypair2 = sodium_crypto_sign_keypair_from_secretkey_and_publickey($sk, $pk);\nvar_dump($keypair === $keypair2);\n$alice_kp = sodium_crypto_sign_keypair();\n$alice_secretkey = sodium_crypto_sign_secretkey($alice_kp);\n$alice_publickey = sodium_crypto_sign_publickey($alice_kp);\n$msg = \"Here is the message, to be signed using Alice's secret key, and \" .\n  \"to be verified using Alice's public key\";\n$msg_signed = sodium_crypto_sign($msg, $alice_secretkey);\nvar_dump(strlen($msg_signed) - strlen($msg) === SODIUM_CRYPTO_SIGN_BYTES);\n$msg_orig = sodium_crypto_sign_open($msg_signed, $alice_publickey);\nvar_dump($msg_orig === $msg);\n$seed = str_repeat('x', SODIUM_CRYPTO_SIGN_SEEDBYTES);\n$alice_kp = sodium_crypto_sign_seed_keypair($seed);\n$alice_secretkey = sodium_crypto_sign_secretkey($alice_kp);\n$alice_publickey = sodium_crypto_sign_publickey($alice_kp);\n$msg = \"Here is another message, to be signed using Alice's secret key, and \" .\n  \"to be verified using Alice's public key, which will be always the same \" .\n  \"since they are derived from a fixed seed\";\n$msg_signed = sodium_crypto_sign($msg, $alice_secretkey);\nvar_dump(strlen($msg_signed) - strlen($msg) === SODIUM_CRYPTO_SIGN_BYTES);\n$msg_orig = sodium_crypto_sign_open($msg_signed, $alice_publickey);\nvar_dump($msg_orig === $msg);\n$signature = sodium_crypto_sign_detached($msg, $alice_secretkey);\nvar_dump(strlen($signature) === SODIUM_CRYPTO_SIGN_BYTES);\nvar_dump(sodium_crypto_sign_verify_detached($signature,\n                                             $msg, $alice_publickey));\nvar_dump(sodium_crypto_sign_verify_detached($signature,\n                                             $msg . \"\\0\", $alice_publickey));\n$calc_pubkey = sodium_crypto_sign_publickey_from_secretkey($alice_secretkey);\nvar_dump(sodium_memcmp($calc_pubkey, $alice_publickey) === 0);\n$ed25519key = sodium_hex2bin(\"55b62f664bf1c359f58a6b91b89556f97284273510573055b9237d17f5a20564607f0626f49e63c2c8f814ed6d955bf8b005b33fd5fd56eaca93073d8eb99165\");\n$curve25519key = sodium_crypto_sign_ed25519_sk_to_curve25519($ed25519key);\nvar_dump($curve25519key === sodium_hex2bin(\"381b2be5e3d38820deb1243fb58b4be654da30dd3ccde492cb88f937eb489363\"));\ntry {\n    sodium_crypto_sign($msg, substr($alice_secretkey, 1));\n} catch (SodiumException $ex) {\n    var_dump(true);\n}\n?>")).toMatchSnapshot();
  });
});
