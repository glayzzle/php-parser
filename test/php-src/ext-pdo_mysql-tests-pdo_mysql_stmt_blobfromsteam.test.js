// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_blobfromsteam.phpt
  it("MySQL PDOStatement - inserting BLOB from stream", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    function blob_from_stream($offset, $db, $file, $blob) {\n            @unlink($file);\n            clearstatcache();\n            if (file_exists($file)) {\n                printf(\"[%03d + 1] Cannot remove old test file\\n\", $offset);\n                return false;\n            }\n            $fp = fopen($file, 'w');\n            if (!$fp || !fwrite($fp, $blob)) {\n                printf(\"[%03d + 2] Cannot create test file '%s'\\n\", $offset, $file);\n                return false;\n            }\n            fclose($fp);\n            clearstatcache();\n            if (!file_exists($file)) {\n                printf(\"[%03d + 3] Failed to create test file '%s'\\n\", $offset, $file);\n                return false;\n            }\n            $db->exec('DROP TABLE IF EXISTS test');\n            $sql = sprintf('CREATE TABLE test(id INT, label BLOB) ENGINE=%s', PDO_MYSQL_TEST_ENGINE);\n            $db->exec($sql);\n            if (!$stmt = $db->prepare('INSERT INTO test(id, label) VALUES (?, ?)')) {\n                printf(\"[%03d + 4] %s\\n\", $offset, var_export($db->errorInfo(), true));\n                return false;\n            }\n            $fp = fopen($file, 'r');\n            if (!$fp) {\n                printf(\"[%03d + 5] Cannot create test file '%s'\\n\", $offset, $file);\n                return false;\n            }\n            $id = 1;\n            $stmt->bindParam(1, $id);\n            if (true !== ($tmp = $stmt->bindParam(2, $fp, PDO::PARAM_LOB))) {\n                printf(\"[%03d + 6] Expecting true, got %s. %s\\n\",\n                    $offset,\n                    var_export($tmp, true),\n                    var_export($db->errorInfo(), true));\n                return false;\n            }\n            if (true !== $stmt->execute()) {\n                printf(\"[%03d + 7] Failed to INSERT data, %s\\n\", $offset, var_export($stmt->errorInfo(), true));\n                return false;\n            }\n            $stmt2 = $db->query('SELECT id, label FROM test WHERE id = 1');\n            $row = $stmt2->fetch(PDO::FETCH_ASSOC);\n            if ($row['label'] != $blob) {\n                printf(\"[%03d + 8] INSERT and/or SELECT has failed, dumping data.\\n\", $offset);\n                var_dump($row);\n                var_dump($blob);\n                return false;\n            }\n            // Lets test the chr(0) handling in case the streaming has failed:\n            // is the bug about chr(0) or the streaming...\n            $db->exec('DELETE FROM test');\n            $stmt = $db->prepare('INSERT INTO test(id, label) VALUES (?, ?)');\n            $stmt->bindParam(1, $id);\n            $stmt->bindParam(2, $blob);\n            if (true !== $stmt->execute())\n                printf(\"[%03d + 9] %s\\n\", $offset, var_export($stmt->errorInfo(), true));\n            $stmt2 = $db->query('SELECT id, label FROM test WHERE id = 1');\n            $row = $stmt2->fetch(PDO::FETCH_ASSOC);\n            if ($row['label'] != $blob) {\n                printf(\"[%03d + 10] INSERT and/or SELECT has failed, dumping data.\\n\", $offset);\n                var_dump($row);\n                var_dump($blob);\n                return false;\n            }\n            return true;\n    }\n    $db = MySQLPDOTest::factory();\n    $blob = 'I am a mighty BLOB!' . chr(0) . \"I am a binary thingie!\";\n    $tmp = MySQLPDOTest::getTempDir();\n    $file = $tmp . DIRECTORY_SEPARATOR . 'pdoblob.tst';\n    try {\n        printf(\"Emulated PS...\\n\");\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n        blob_from_stream(10, $db, $file, $blob);\n        printf(\"Native PS...\\n\");\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n        blob_from_stream(30, $db, $file, $blob);\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
