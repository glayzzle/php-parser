// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/bug42819.phpt
  it("Bug #42819 (namespaces in indexes of constant arrays)", function () {
    expect(parser.parseCode("<?php\nnamespace foo\\foo;\nconst C = \"foo\\\\foo\\\\C\\n\";\nconst I = 12;\nclass foo {\nconst I = 32;\nconst C = \"foo\\\\foo\\\\foo::C\\n\";\n}\nnamespace foo;\nuse \\ArrayObject;\nconst C = \"foo\\\\C\\n\";\nconst I = 11;\nclass foo {\n    const C = \"foo\\\\foo::C\\n\";\n    const I = 22;\n    const C1 = C;\n    const C2 = foo\\C;\n    const C3 = foo\\foo::C;\n    const C4 = \\foo\\C;\n    const C5 = \\foo\\foo::C;\n    const C6 = ArrayObject::STD_PROP_LIST;\n    const C7 = E_ERROR;\n}\nclass bar1 {\n    static $a1 = array(I => 0);\n    static $a2 = array(foo\\I => 0);\n    static $a3 = array(foo\\foo::I => 0);\n    static $a4 = array(\\foo\\I => 0);\n    static $a5 = array(\\foo\\foo::I => 0);\n    static $a6 = array(ArrayObject::STD_PROP_LIST => 0);\n    static $a7 = array(E_ERROR => 0);\n}\nclass bar2 {\n    static $a1 = array(I => I);\n    static $a2 = array(foo\\I => I);\n    static $a3 = array(foo\\foo::I => I);\n    static $a4 = array(\\foo\\I => I);\n    static $a5 = array(\\foo\\foo::I => I);\n    static $a6 = array(ArrayObject::STD_PROP_LIST => I);\n    static $a7 = array(E_ERROR => I);\n}\nclass bar3 {\n    static $a1 = array(I => foo\\I);\n    static $a2 = array(foo\\I => foo\\I);\n    static $a3 = array(foo\\foo::I => foo\\I);\n    static $a4 = array(\\foo\\I => foo\\I);\n    static $a5 = array(\\foo\\foo::I => foo\\I);\n    static $a6 = array(ArrayObject::STD_PROP_LIST => foo\\I);\n    static $a7 = array(E_ERROR => foo\\I);\n}\nclass bar4 {\n    static $a1 = array(I => ArrayObject::STD_PROP_LIST);\n    static $a2 = array(foo\\I => ArrayObject::STD_PROP_LIST);\n    static $a3 = array(foo\\foo::I => ArrayObject::STD_PROP_LIST);\n    static $a4 = array(\\foo\\I => ArrayObject::STD_PROP_LIST);\n    static $a5 = array(\\foo\\foo::I => ArrayObject::STD_PROP_LIST);\n    static $a6 = array(ArrayObject::STD_PROP_LIST => ArrayObject::STD_PROP_LIST);\n    static $a7 = array(E_ERROR => ArrayObject::STD_PROP_LIST);\n}\nclass bar5 {\n    static $a1 = array(I => E_ERROR);\n    static $a2 = array(foo\\I => E_ERROR);\n    static $a3 = array(foo\\foo::I => E_ERROR);\n    static $a4 = array(\\foo\\I => E_ERROR);\n    static $a5 = array(\\foo\\foo::I => E_ERROR);\n    static $a6 = array(ArrayObject::STD_PROP_LIST => E_ERROR);\n    static $a7 = array(E_ERROR => E_ERROR);\n}\necho \"first\\n\";\necho C;\necho foo\\C;\necho foo\\foo::C;\necho foo::C;\necho \\foo\\foo::C;\necho ArrayObject::STD_PROP_LIST . \"\\n\";\necho E_ERROR . \"\\n\";\necho \"second\\n\";\necho \\foo\\foo::C1;\necho \\foo\\foo::C2;\necho \\foo\\foo::C3;\necho \\foo\\foo::C4;\necho \\foo\\foo::C5;\necho \\foo\\foo::C6 . \"\\n\";\necho \\foo\\foo::C7 . \"\\n\";\nprint_r(bar1::$a1);\nprint_r(bar1::$a2);\nprint_r(bar1::$a3);\nprint_r(bar1::$a4);\nprint_r(bar1::$a5);\nprint_r(bar1::$a6);\nprint_r(bar1::$a7);\nprint_r(bar2::$a1);\nprint_r(bar2::$a2);\nprint_r(bar2::$a3);\nprint_r(bar2::$a4);\nprint_r(bar2::$a5);\nprint_r(bar2::$a6);\nprint_r(bar2::$a7);\nprint_r(bar3::$a1);\nprint_r(bar3::$a2);\nprint_r(bar3::$a3);\nprint_r(bar3::$a4);\nprint_r(bar3::$a5);\nprint_r(bar3::$a6);\nprint_r(bar3::$a7);\nprint_r(bar4::$a1);\nprint_r(bar4::$a2);\nprint_r(bar4::$a3);\nprint_r(bar4::$a4);\nprint_r(bar4::$a5);\nprint_r(bar4::$a6);\nprint_r(bar4::$a7);\nprint_r(bar5::$a1);\nprint_r(bar5::$a2);\nprint_r(bar5::$a3);\nprint_r(bar5::$a4);\nprint_r(bar5::$a5);\nprint_r(bar5::$a6);\nprint_r(bar5::$a7);\nfunction oops($a = array(foo\\unknown)){}\noops();\n?>")).toMatchSnapshot();
  });
});
