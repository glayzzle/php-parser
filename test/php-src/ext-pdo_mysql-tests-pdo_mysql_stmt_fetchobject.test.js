// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_fetchobject.phpt
  it("MySQL PDO: PDOStatement->fetchObject()", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n$db = MySQLPDOTest::factory();\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\nMySQLPDOTest::createTestTable($db);\ntry {\n    $query = \"SELECT id, '', NULL, \\\"\\\" FROM test ORDER BY id ASC LIMIT 3\";\n    $stmt = $db->prepare($query);\n    class myclass {\n        private $set_calls = 0;\n        protected static $static_set_calls = 0;\n        // NOTE: PDO does not care about protected\n        protected $grp;\n        // NOTE: PDO does not care about private and calls __construct() after __set()\n        private function __construct($param1, $param2) {\n            printf(\"myclass::__construct(%s, %s): %d / %d\\n\",\n                $param1, $param2,\n                self::$static_set_calls, $this->set_calls);\n        }\n        // NOTE: PDO will call __set() prior to calling __construct()\n        public function __set($prop, $value) {\n            $this->not_a_magic_one();\n            printf(\"myclass::__set(%s, -%s-) %d\\n\",\n                $prop, var_export($value, true), $this->set_calls, self::$static_set_calls);\n            if (\"\" != $prop)\n                $this->{$prop} = $value;\n        }\n        // NOTE: PDO can call regular methods prior to calling __construct()\n        public function not_a_magic_one() {\n            $this->set_calls++;\n            self::$static_set_calls++;\n        }\n    }\n    $stmt->execute();\n    $rowno = 0;\n    $rows[] = array();\n    while (is_object($rows[] = $stmt->fetchObject('myclass', array($rowno++, $rowno))))\n        ;\n    var_dump($rows[$rowno - 1]);\n    try {\n        $stmt->fetchObject('class_does_not_exist');\n    } catch (TypeError $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n} catch (PDOException $e) {\n    // we should never get here, we use warnings, but never trust a system...\n    printf(\"[001] %s, [%s} %s\\n\",\n        $e->getMessage(), $db->errorInfo(), implode(' ', $db->errorInfo()));\n}\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
