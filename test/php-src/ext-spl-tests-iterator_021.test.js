// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/iterator_021.phpt
  it("SPL: RecursiveIteratorIterator and hasChildren", function () {
    expect(parser.parseCode("<?php\nclass MyRecursiveArrayIterator extends RecursiveArrayIterator\n{\n    function valid(): bool\n    {\n        if (!parent::valid())\n        {\n            echo __METHOD__ . \" = false\\n\";\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n    function getChildren(): ?RecursiveArrayIterator\n    {\n        echo __METHOD__ . \"\\n\";\n        return parent::getChildren();\n    }\n}\nclass RecursiveArrayIteratorIterator extends RecursiveIteratorIterator\n{\n    private $max_depth;\n    private $over = 0;\n    private $skip = false;\n    function __construct($it, $max_depth)\n    {\n        $this->max_depth = $max_depth;\n        parent::__construct($it);\n    }\n    function rewind(): void\n    {\n        echo __METHOD__ . \"\\n\";\n        $this->skip = false;\n        parent::rewind();\n    }\n    function valid(): bool\n    {\n        echo __METHOD__ . \"\\n\";\n        if ($this->skip)\n        {\n            $this->skip = false;\n            $this->next();\n        }\n        return parent::valid();\n    }\n    function current(): mixed\n    {\n        echo __METHOD__ . \"\\n\";\n        return parent::current();\n    }\n    function key(): mixed\n    {\n        echo __METHOD__ . \"\\n\";\n        return parent::key();\n    }\n    function next(): void\n    {\n        echo __METHOD__ . \"\\n\";\n        parent::next();\n    }\n    function callHasChildren(): bool\n    {\n        $this->skip = false;\n        $has = parent::callHasChildren();\n        $res = $this->getDepth() < $this->max_depth && $has;\n        echo __METHOD__ . \"(\".$this->getDepth().\") = \".($res?\"yes\":\"no\").\"/\".($has?\"yes\":\"no\").\"\\n\";\n        if ($has && !$res)\n        {\n            $this->over++;\n            if ($this->over == 2) {\n                $this->skip = true;\n            }\n        }\n        return $res;\n    }\n    function beginChildren(): void\n    {\n        echo __METHOD__ . \"(\".$this->getDepth().\")\\n\";\n    }\n    function endChildren(): void\n    {\n        echo __METHOD__ . \"(\".$this->getDepth().\")\\n\";\n    }\n}\nforeach(new RecursiveArrayIteratorIterator(new MyRecursiveArrayIterator(array(\"a\", array(\"ba\", array(\"bba\", \"bbb\"), array(array(\"bcaa\"), array(\"bcba\"))), array(\"ca\"), \"d\")), 2) as $k=>$v)\n{\n    if (is_array($v)) $v = join('',$v);\n    echo \"$k=>$v\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
