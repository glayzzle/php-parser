// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/session/tests/session_set_save_handler_iface_002.phpt
  it("Test session_set_save_handler() function: interface wrong", function () {
    expect(parser.parseCode("<?php\nob_start();\necho \"*** Testing session_set_save_handler() function: interface wrong ***\\n\";\ninterface MySessionHandlerInterface {\n    public function open($path, $name): bool;\n    public function close(): bool;\n    public function read($id): string|false;\n    public function write($id, $data): bool;\n    public function destroy($id): bool;\n    public function gc($maxlifetime): int|false;\n}\nclass MySession2 implements MySessionHandlerInterface {\n    public $path;\n    public function open($path, $name): bool {\n        if (!$path) {\n            $path = sys_get_temp_dir();\n        }\n        $this->path = $path . '/u_sess_' . $name;\n        return true;\n    }\n    public function close(): bool {\n        return true;\n    }\n    public function read($id): string|false {\n        return (string)@file_get_contents($this->path . $id);\n    }\n    public function write($id, $data): bool {\n        echo \"Unsupported session handler in use\\n\";\n        return false;\n    }\n    public function destroy($id): bool {\n        @unlink($this->path . $id);\n        return true;\n    }\n    public function gc($maxlifetime): int|false {\n        foreach (glob($this->path . '*') as $filename) {\n            if (filemtime($filename) + $maxlifetime < time()) {\n                @unlink($filename);\n            }\n        }\n        return true;\n    }\n}\nfunction good_write($id, $data) {\n    global $handler;\n    echo \"good handler writing\\n\";\n    return file_put_contents($handler->path . $id, $data);\n}\n$handler = new MySession2;\n$ret = session_set_save_handler(array($handler, 'open'), array($handler, 'close'),\n    array($handler, 'read'), 'good_write', array($handler, 'destroy'), array($handler, 'gc'));\nvar_dump($ret);\ntry {\n    $ret = session_set_save_handler($handler);\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nsession_start();\n?>")).toMatchSnapshot();
  });
});
