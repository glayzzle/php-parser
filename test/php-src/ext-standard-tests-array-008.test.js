// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/008.phpt
  it("Test array_intersect and array_intersect_assoc behaviour", function () {
    expect(parser.parseCode("<?php\n//-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=- TEST 1 -=-=-=-=-\n$a = array(1,\"big\"=>2,2,6,3,5,3,3,454,'some_string',3,3,3,3,3,3,3,3,17);\n$b = array(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,17,25,'some_string',7,8,9,109,78,17);\n$c = array(-1,2,1,15,25,17);\necho str_repeat(\"-=\",10).\" TEST 1 \".str_repeat(\"-=\",20).\"\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho '$c='.var_export($c,TRUE).\";\\n\";\necho 'array_intersect($a,$b,$c);'.\"\\n\";\nvar_dump(array_intersect($a,$b,$c));\necho 'array_intersect_assoc($a,$b,$c);'.\"\\n\";\nvar_dump(array_intersect_assoc($a,$b,$c));\necho 'array_intersect($a,$b);'.\"\\n\";\nvar_dump(array_intersect($a,$b));\necho 'array_intersect_assoc($a,$b);'.\"\\n\";\nvar_dump(array_intersect_assoc($a,$b));\n//-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=- TEST 2 -=-=-=-=-=-\n$a = array(\n'a'=>2,\n'b'=>'some',\n'c'=>'done',\n'z'=>'foo',\n'f'=>5,\n'fan'=>'fen',\n'bad'=>'bed',\n'gate'=>'web',\n7=>18,\n9=>25,\n11=>42,\n12=>42,\n45=>42,\n73=>'foo',\n95=>'some',\n'som3'=>'some',\n'want'=>'wanna');\n$b = array(\n'a'=>7,\n7=>18,\n9=>13,\n11=>42,\n45=>46,\n'som3'=>'some',\n'foo'=>'some',\n'goo'=>'foo',\n'f'=>5,\n'z'=>'equal',\n'gate'=>'web'\n);\n$c = array(\n'gate'=>'web',\n73=>'foo',\n95=>'some'\n);\necho str_repeat(\"-=\",10).\" TEST 2 \".str_repeat(\"-=\",20).\"\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho '$c='.var_export($c,TRUE).\";\\n\";\necho \"\\n\\nResults:\\n\\n\";\necho 'array_intersect($a,$b,$c);'.\"\\n\";\nvar_dump(array_intersect($a,$b,$c));\necho 'array_intersect_assoc($a,$b,$c);'.\"\\n\";\nvar_dump(array_intersect_assoc($a,$b,$c));\necho 'array_intersect($a,$b);'.\"\\n\";\nvar_dump(array_intersect($a,$b));\necho 'array_intersect_assoc($a,$b);'.\"\\n\";\nvar_dump(array_intersect_assoc($a,$b));\n?>")).toMatchSnapshot();
  });
});
