// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql___construct_uri.phpt
  it("MySQL PDO->__construct() - URI", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    try {\n        if ($tmp = MySQLPDOTest::getTempDir()) {\n            $file = $tmp . DIRECTORY_SEPARATOR . 'pdomuri.tst';\n            $dsn = MySQLPDOTest::getDSN();\n            $user = PDO_MYSQL_TEST_USER;\n            $pass = PDO_MYSQL_TEST_PASS;\n            $uri = 'uri:file://' . $file;\n            if ($fp = @fopen($file, 'w')) {\n                fwrite($fp, $dsn);\n                fclose($fp);\n                clearstatcache();\n                assert(file_exists($file));\n                try {\n                    $db = new PDO($uri, $user, $pass);\n                } catch (PDOException $e) {\n                    printf(\"[002] URI=%s, DSN=%s, File=%s (%d bytes, '%s'), %s\\n\",\n                        $uri, $dsn,\n                        $file, filesize($file), file_get_contents($file),\n                        $e->getMessage());\n                }\n                unlink($file);\n            }\n            if ($fp = @fopen($file, 'w')) {\n                fwrite($fp, $dsn . chr(0) . ';host=nonsense;unix_socket=nonsense');\n                fclose($fp);\n                clearstatcache();\n                assert(file_exists($file));\n                try {\n                    $db = new PDO($uri, $user, $pass);\n                } catch (PDOException $e) {\n                    printf(\"[003] URI=%s, DSN=%s, File=%s (%d bytes, '%s'), %s\\n\",\n                        $uri, $dsn,\n                        $file, filesize($file), file_get_contents($file),\n                        $e->getMessage());\n                }\n                unlink($file);\n            }\n        }\n    } catch (PDOException $e) {\n        printf(\"[001] %s, [%s] %s\\n\",\n            $e->getMessage(),\n            (is_object($db)) ? $db->errorCode() : 'n/a',\n            (is_object($db)) ? implode(' ', $db->errorInfo()) : 'n/a');\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
