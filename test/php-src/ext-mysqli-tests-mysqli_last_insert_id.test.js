// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_last_insert_id.phpt
  it("API vs. SQL LAST_INSERT_ID()", function () {
    expect(parser.parseCode("<?php\n    /*\n    CAUTION: the insert_id() API call is not supposed to return\n    the same value as a call to the LAST_INSERT_ID() SQL function.\n    It is not necessarily a bug if API and SQL function return different\n    values. Check the MySQL C API reference manual for details.\n    */\n    require_once(\"connect.inc\");\n    function get_sql_id($link) {\n        if (!($res = $link->query(\"SELECT LAST_INSERT_ID() AS _id\"))) {\n            printf(\"[003] [%d] %s\\n\", $link->errno, $link->error);\n            return NULL;\n        }\n        $row = $res->fetch_assoc();\n        $res->close();\n        return $row['_id'];\n    }\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    if (!$link->query(\"DROP TABLE IF EXISTS test\") ||\n        !$link->query(\"CREATE TABLE test (id INT auto_increment, label varchar(10) not null, PRIMARY KEY (id)) ENGINE=MyISAM\") ||\n        !$link->query(\"INSERT INTO test (id, label) VALUES (null, 'a')\")) {\n        printf(\"[002] [%d] %s\\n\", $link->errno, $link->error);\n    }\n    $api_id = $link->insert_id;\n    $sql_id = get_sql_id($link);\n    printf(\"API: %d, SQL: %d\\n\", $api_id, $sql_id);\n    if ($api_id < 1)\n        printf(\"[004] Expecting id > 0 got %d, [%d] %s\\n\", $api_id, $link->errno, $link->error)\t;\n    if ($api_id != $sql_id)\n        printf(\"[005] SQL id %d should be equal to API id %d\\n\", $sql_id, $api_id);\n    // Not an INSERT, API value must become 0\n    if (!($res = $link->query(\"SELECT 1 FROM DUAL\")))\n        printf(\"[006] [%d] %s\\n\", $link->errno, $link->error);\n    else\n        $res->close();\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if (0 !== $api_id) {\n        printf(\"[007] API id should have been reset to 0 because previous query was SELECT, got API %d, SQL %d\\n\",\n          $api_id, $new_sql_id);\n    }\n    if ($new_sql_id != $sql_id) {\n        printf(\"[008] The servers LAST_INSERT_ID() changed unexpectedly from %d to %d\\n\", $sql_id, $new_sql_id);\n    }\n    // Insert fails, LAST_INSERT_ID shall not change, API shall return 0\n    if ($link->query(\"INSERT INTO test (id, label) VALUES (null, null)\")) {\n        printf(\"[009] The INSERT did not fail as planned, [%d] %s\\n\", $link->errno, $link->error);\n    }\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if (0 !== $api_id) {\n        printf(\"[010] API id should have been reset to 0 because previous query was SELECT, got API %d, SQL %d\\n\",\n          $api_id, $new_sql_id);\n    }\n    if ($new_sql_id != $sql_id) {\n        printf(\"[011] The servers LAST_INSERT_ID() changed unexpectedly from %d to %d\\n\", $sql_id, $new_sql_id);\n    }\n    // Sequence counter pattern...\n    if (!$link->query(\"UPDATE test SET id=LAST_INSERT_ID(id+1)\"))\n      printf(\"[012] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if ($api_id < 1)\n        printf(\"[013] Expecting id > 0 got %d, [%d] %s\\n\", $api_id, $link->errno, $link->error)\t;\n    if ($api_id != $new_sql_id)\n        printf(\"[014] SQL id %d should be equal to API id %d\\n\", $new_sql_id, $api_id);\n    if ($sql_id == $new_sql_id)\n        printf(\"[015] SQL id %d should have had changed, got %d\\n\", $sql_id, $new_sql_id);\n    $sql_id = $new_sql_id;\n    // Not an INSERT (after UPDATE), API value must become 0\n    if (!$link->query(\"SET @myvar=1\"))\n        printf(\"[016] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if (0 !== $api_id) {\n        printf(\"[017] API id should have been reset to 0 because previous query was SET, got API %d, SQL %d\\n\",\n          $api_id, $new_sql_id);\n    }\n    if ($new_sql_id != $sql_id) {\n        printf(\"[018] The servers LAST_INSERT_ID() changed unexpectedly from %d to %d\\n\", $sql_id, $new_sql_id);\n    }\n    if (!$link->query(\"INSERT INTO test(id, label) VALUES (LAST_INSERT_ID(id + 1), 'b')\"))\n        printf(\"[019] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $sql_id = get_sql_id($link);\n    if ($api_id != $sql_id)\n        printf(\"[020] SQL id %d should be equal to API id %d\\n\", $sql_id, $api_id);\n    if (!$link->query(\"INSERT INTO test(label) VALUES ('c')\"))\n        printf(\"[021] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $sql_id = get_sql_id($link);\n    if ($api_id != $sql_id)\n        printf(\"[022] SQL id %d should be equal to API id %d\\n\", $sql_id, $api_id);\n    if (!($res = $link->query(\"SELECT id, label FROM test ORDER BY id ASC\")))\n        printf(\"[023] [%d] %s\\n\", $link->errno, $link->error);\n    printf(\"Dumping table contents before INSERT...SELECT experiments...\\n\");\n    while ($row = $res->fetch_assoc()) {\n        printf(\"id = %d, label = '%s'\\n\", $row['id'], $row['label']);\n    }\n    $res->close();\n    if (!$link->query(\"INSERT INTO test(label) SELECT CONCAT(label, id) FROM test ORDER BY id ASC\"))\n      printf(\"[024] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $sql_id = get_sql_id($link);\n    if ($api_id != $sql_id)\n        printf(\"[025] SQL id %d should be equal to API id %d\\n\", $sql_id, $api_id);\n    if ($link->query(\"INSERT INTO test(id, label) SELECT id, CONCAT(label, id) FROM test ORDER BY id ASC\"))\n      printf(\"[026] INSERT should have failed because of duplicate PK value, [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if (0 !== $api_id) {\n        printf(\"[027] API id should have been reset to 0 because previous query failed, got API %d, SQL %d\\n\",\n          $api_id, $new_sql_id);\n    }\n    if ($new_sql_id != $sql_id) {\n        printf(\"[028] The servers LAST_INSERT_ID() changed unexpectedly from %d to %d\\n\", $sql_id, $new_sql_id);\n    }\n    /* API insert id will be 101 because of UPDATE, SQL unchanged */\n    if (!$link->query(sprintf(\"INSERT INTO test(id, label) VALUES (%d, 'z') ON DUPLICATE KEY UPDATE id = 101\", $sql_id)\t))\n      printf(\"[029] [%d] %s\\n\", $link->errno, $link->error);\n    $api_id = $link->insert_id;\n    $new_sql_id = get_sql_id($link);\n    if ($api_id != 101)\n        printf(\"[030] API id should be %d got %d\\n\", $sql_id, $api_id);\n    if ($new_sql_id != $sql_id) {\n        printf(\"[031] The servers LAST_INSERT_ID() changed unexpectedly from %d to %d\\n\", $sql_id, $new_sql_id);\n    }\n    if (!($res = $link->query(\"SELECT id, label FROM test ORDER BY id ASC\")))\n        printf(\"[032] [%d] %s\\n\", $link->errno, $link->error);\n    printf(\"Dumping table contents after INSERT...SELECT...\\n\");\n    while ($row = $res->fetch_assoc()) {\n        printf(\"id = %d, label = '%s'\\n\", $row['id'], $row['label']);\n    }\n    $res->close();\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
