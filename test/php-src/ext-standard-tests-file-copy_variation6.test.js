// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/copy_variation6.phpt
  it("Test copy() function: usage variations - copy empty file across dirs", function () {
    expect(parser.parseCode("<?php\n/* Test copy() function: Trying to create copy of source file\n     into different destination dir paths given in various notations */\necho \"*** Test copy() function: copying file across directories ***\\n\";\n$base_dir = __DIR__.\"/copy_variation6\";\nmkdir($base_dir);\n$sub_dir = $base_dir.\"/copy_variation6_sub\";\nmkdir($sub_dir);\n$dirname_with_blank = $sub_dir.\"/copy variation6\";\nmkdir($dirname_with_blank);\n$src_file_name = __DIR__.\"/copy_variation6.tmp\";\nfclose( fopen($src_file_name, \"w\") );\necho \"Size of source file => \";\nvar_dump( filesize($src_file_name) );\nclearstatcache();\n$dests = array(\n  $base_dir.\"/copy_copy_variation6.tmp\",\n  $base_dir.\"/copy_variation6_sub/copy_copy_variation6.tmp\",\n  \"$sub_dir/copy_copy_variation6.tmp\",\n  \"$sub_dir/../copy_copy_variation6.tmp\",\n  \"$sub_dir/../copy_variation6_sub/copy_copy_variation6.tmp\",\n  \"$sub_dir/..///../copy_copy_variation6.tmp\",\n  \"$sub_dir///../*\",\n  \"$dirname_with_blank/copy_copy_variation6.tmp\"\n);\necho \"\\n-- Now applying copy() on source file to create copies --\";\n$count = 1;\nforeach($dests as $dest) {\n  echo \"\\n-- Iteration $count --\\n\";\n  echo \"Copy operation => \";\n  var_dump( copy($src_file_name, $dest) );\n  echo \"Existence of destination file => \";\n  var_dump( file_exists($dest) );\n  echo \"Destination file name is => \";\n  print($dest);\n  echo \"\\n\";\n  echo \"Size of source file => \";\n  var_dump( filesize($src_file_name) );\n  clearstatcache();\n  echo \"Size of destination file => \";\n  var_dump( filesize($dest) );\n  clearstatcache();\n  unlink(\"$dest\");\n  $count++;\n}\nunlink($src_file_name);\nrmdir($dirname_with_blank);\nrmdir($sub_dir);\nrmdir($base_dir);\necho \"*** Done ***\\n\";\n?>")).toMatchSnapshot();
  });
});
