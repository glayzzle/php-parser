// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_intersect_1.phpt
  it("Test of the *intersect* bunch of functions (both assoc and non-assoc)", function () {
    expect(parser.parseCode("<?php\nerror_reporting(E_ALL);\nclass cr {\n    private $priv_member;\n    public  $public_member;\n    function __construct($val) {\n        $this->priv_member = $val;\n        $this->public_member = $val;\n    }\n    static function comp_func_cr($a, $b) {\n        if ($a->priv_member === $b->priv_member) return 0;\n        return ($a->priv_member > $b->priv_member)? 1:-1;\n    }\n}\nfunction comp_func($a, $b) {\n    if ($a === $b) return 0;\n    return ($a > $b)? 1:-1;\n}\nfunction comp_func_cr($a, $b) {\n    if ($a->public_member === $b->public_member) return 0;\n    return ($a->public_member > $b->public_member)? 1:-1;\n}\n$a = array(\"0.1\" => new cr(9), \"0.5\" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);\n$b = array(\"0.2\" => new cr(9), \"0.5\" => new cr(22), 0 => new cr( 3), 1=> new cr(4), 2 => new cr(-15),);\n/* array_uintersect() */\necho \"begin ------------ array_uintersect() ---------------------------\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_uintersect($a, $b, \"comp_func_cr\"));'.\"\\n\";\nvar_dump(array_uintersect($a, $b, \"comp_func_cr\"));\necho \"end   ------------ array_uintersect() ---------------------------\\n\";\n/* array_uintersect_assoc() */\necho \"begin ------------ array_uintersect_assoc() ---------------------\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_uintersect_assoc($a, $b, \"comp_func_cr\"));'.\"\\n\";\nvar_dump(array_uintersect_assoc($a, $b, \"comp_func_cr\"));\necho \"end   ------------ array_uintersect_assoc() ---------------------\\n\";\n/* array_uintersect_uassoc() - with ordinary function */\necho \"begin ------------ array_uintersect_uassoc() with ordinary func -\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_uintersect_uassoc($a, $b, \"comp_func_cr\", \"comp_func\"));'.\"\\n\";\nvar_dump(array_uintersect_uassoc($a, $b, \"comp_func_cr\", \"comp_func\"));\necho \"end   ------------ array_uintersect_uassoc() with ordinary func -\\n\";\n/* array_uintersect_uassoc() - by method call */\necho \"begin ------------ array_uintersect_uassoc() with method --------\\n\";\necho '$a='.var_export($a,TRUE).\";\\n\";\necho '$b='.var_export($b,TRUE).\";\\n\";\necho 'var_dump(array_uintersect_uassoc($a, $b, array(\"cr\", \"comp_func_cr\"), \"comp_func\"));'.\"\\n\";\nvar_dump(array_uintersect_uassoc($a, $b, array(\"cr\", \"comp_func_cr\"), \"comp_func\"));\necho \"end   ------------ array_uintersect_uassoc() with method --------\\n\";\n?>")).toMatchSnapshot();
  });
});
