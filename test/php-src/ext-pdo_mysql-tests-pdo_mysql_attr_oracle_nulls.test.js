// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_attr_oracle_nulls.phpt
  it("PDO::ATTR_ORACLE_NULLS", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db);\n    try {\n        $db->setAttribute(PDO::ATTR_ORACLE_NULLS, []);\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_ORACLE_NULLS, new stdClass());\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_ORACLE_NULLS, 'pdo');\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    $db->setAttribute(PDO::ATTR_ORACLE_NULLS, 1);\n    $stmt = $db->query(\"SELECT NULL AS z, '' AS a, ' ' AS b, TRIM(' ') as c, ' d' AS d, '\" . chr(0) . \" e' AS e\");\n    var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n    $db->setAttribute(PDO::ATTR_ORACLE_NULLS, 0);\n    $stmt = $db->query(\"SELECT NULL AS z, '' AS a, ' ' AS b, TRIM(' ') as c, ' d' AS d, '\" . chr(0) . \" e' AS e\");\n    var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n    $db->setAttribute(PDO::ATTR_ORACLE_NULLS, 1);\n    $stmt = $db->query('SELECT VERSION() as _version');\n    $row = $stmt->fetch(PDO::FETCH_ASSOC);\n    if ((int)strtok($row['_version'], '.') >= 5)\n        $have_procedures = true;\n    else\n        $have_procedures = false;\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n    $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n    if ($have_procedures && (false !== $db->exec('DROP PROCEDURE IF EXISTS p')) &&\n        (false !== $db->exec(\"CREATE PROCEDURE p() BEGIN SELECT NULL as z, '' AS a, ' ' AS b, TRIM(' ') as c, ' d' AS d, ' e' AS e; END;\"))) {\n        // requires MySQL 5+\n        $stmt = $db->prepare('CALL p()');\n        $stmt->execute();\n        do {\n            var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        } while ($stmt->nextRowset());\n        $stmt->execute();\n        do {\n            var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        } while ($stmt->nextRowset());\n    }\n    if ($have_procedures)\n        @$db->exec('DROP PROCEDURE IF EXISTS p');\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
