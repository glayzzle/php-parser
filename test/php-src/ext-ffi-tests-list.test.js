// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/ffi/tests/list.phpt
  it("FFI Double linked lists", function () {
    expect(parser.parseCode("<?php\nclass DList {\n    private static $ffi = null;\n    private $root;\n    function __construct() {\n        if (is_null(self::$ffi)) {\n            self::$ffi =\n                FFI::cdef(\"\n                    typedef struct _dlist dlist;\n                    struct _dlist {\n                        int data;\n                        dlist *prev;\n                        dlist *next;\n                    };\n                \");\n        }\n        $node = FFI::addr(self::$ffi->new(\"dlist\", false));\n        $node->data = 0;\n        $node->next = $node;\n        $node->prev = $node;\n        $this->root = $node;\n    }\n    function __destruct() {\n        $root = $this->root;\n        $node = $root->next;\n        while ($node != $root) {\n            $prev = $node;\n            $node = $node->next;\n            FFI::free($prev);\n        }\n        FFI::free($root);\n    }\n    function add(int $data) {\n        $node = FFI::addr(self::$ffi->new(\"dlist\", false));\n        $node->data = $data;\n        $node->next = $this->root;\n        $node->prev = $this->root->prev;\n        $this->root->prev->next = $node;\n        $this->root->prev = $node;\n    }\n    function del(int $data) {\n        $root = $this->root;\n        $node = $root->next;\n        while ($node != $root) {\n            if ($node->data == $data) {\n                $node->prev->next = $node->next;\n                $node->next->prev = $node->prev;\n                FFI::free($node);\n                break;\n            }\n            $node = $node->next;\n        }\n    }\n    function print() {\n        echo \"[\";\n        $first = true;\n        $root = $this->root;\n        $node = $root->next;\n        while ($node != $root) {\n            if (!$first) {\n                echo \", \";\n            } else {\n                $first = false;\n            }\n            echo $node->data;\n            $node = $node->next;\n        }\n        echo \"]\\n\";\n    }\n}\n$dlist = new Dlist;\n$dlist->add(1);\n$dlist->add(3);\n$dlist->add(5);\n$dlist->print();\n$dlist->del(3);\n$dlist->print();\necho \"OK\\n\";\n?>")).toMatchSnapshot();
  });
});
