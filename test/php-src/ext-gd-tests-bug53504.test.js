// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gd/tests/bug53504.phpt
  it("Bug #53504 imagettfbbox/imageftbbox gives incorrect values for bounding box", function () {
    expect(parser.parseCode("<?php\n$cwd = __DIR__;\n$font = \"$cwd/Tuffy.ttf\";\n$g = imagecreate(800, 800);\n$bgnd  = imagecolorallocate($g, 255, 255, 255);\n$black = imagecolorallocate($g, 0, 0, 0);\n$red = imagecolorallocate($g, 255, 0, 0);\n$blue = imagecolorallocate($g, 0, 0, 255);\n$tests = [\n    // Kerning examples (unfortunately not available in \"Tuffy\" test font):\n    ['fontSize' => 50, 'angle' => 0, 'x' => 20, 'y' => 70, 'text' => 'AV Teg', 'exp' => [2,15, 208,15, 208,-48, 2,-48]],\n    ['fontSize' => 50, 'angle' => 90, 'x' => 70, 'y' => 350, 'text' => 'AV Teg', 'exp' => [15,-1, 15,-208, -48,-208, -48,-2]],\n    ['fontSize' => 50, 'angle' => 40, 'x' => 130, 'y' => 280, 'text' => 'AV Teg', 'exp' => [11,11, 169,-122, 129,-171, -30,-39]],\n    // Shift-Test:\n    ['fontSize' => 100, 'angle' => 0, 'x' => 350, 'y' => 110, 'text' => 'H-Shift', 'exp' => [8,2, 386,2, 386,-97, 8,-97]],\n    // Small/single chars:\n    ['fontSize' => 100, 'angle' => 0, 'x' => 350, 'y' => 220, 'text' => '-', 'exp' => [7,-37, 51,-37, 51,-46, 7,-46]],\n    ['fontSize' => 100, 'angle' => 0, 'x' => 430, 'y' => 220, 'text' => ',', 'exp' => [7,15, 21,15, 21,-13, 7,-13]],\n    ['fontSize' => 100, 'angle' => 0, 'x' => 510, 'y' => 220, 'text' => '.', 'exp' => [7,1, 21,1, 21,-13, 7,-13]],\n    ['fontSize' => 100, 'angle' => 0, 'x' => 590, 'y' => 220, 'text' => '|', 'exp' => [8,0, 17,0, 17,-95, 8,-95]],\n    ['fontSize' => 100, 'angle' => 0, 'x' => 670, 'y' => 220, 'text' => 'g', 'exp' => [5,29, 60,29, 60,-72, 5,-72]],\n    // Multi-Line + rotation:\n    ['fontSize' => 30, 'angle' => 0, 'x' => 20, 'y' => 400, 'text' => \"Multi\\nLine\\nTest\", 'exp' => [2,107, 80,107, 80,-29, 2,-29]],\n    ['fontSize' => 30, 'angle' => 40, 'x' => 150, 'y' => 420, 'text' => \"Multi\\nLine\\nTest\", 'exp' => [70,81, 131,31, 43,-74, -18,-24]],\n    ['fontSize' => 30, 'angle' => 90, 'x' => 250, 'y' => 340, 'text' => \"Multi\\nLine\\nTest\", 'exp' => [107,-1, 107,-80, -29,-80, -29,-2]],\n    // Some edge case glyphs:\n    ['fontSize' => 50, 'angle' => 90, 'x' => 70, 'y' => 750, 'text' => \"iiiiiiiiiiii\", 'exp' => [0,-4, 0,-165, -47,-165, -47,-4]],\n    ['fontSize' => 50, 'angle' => 90, 'x' => 150, 'y' => 750, 'text' => \"~~~~~~~\", 'exp' => [-19,-2, -18,-167, -29,-167, -29,-2]],\n    ['fontSize' => 50, 'angle' => 50, 'x' => 210, 'y' => 750, 'text' => \"iiiiiiiiiiii\", 'exp' => [3,-3, 107,-127, 70,-157, -34,-33]],\n    ['fontSize' => 50, 'angle' => 50, 'x' => 300, 'y' => 750, 'text' => \"~~~~~~~\", 'exp' => [-13,-13, 93,-141, 85,-147, -21,-20]],\n    ['fontSize' => 50, 'angle' => 0, 'x' => 430, 'y' => 650, 'text' => \"iiiiiiiiiiii\", 'exp' => [4,0, 165,0, 165,-47, 4,-47]],\n    ['fontSize' => 50, 'angle' => 0, 'x' => 430, 'y' => 750, 'text' => \"~~~~~~~\", 'exp' => [2,-19, 167,-19, 167,-29, 2,-29]],\n    // \"Big\" test:\n    ['fontSize' => 200, 'angle' => 0, 'x' => 400, 'y' => 500, 'text' => \"Big\", 'exp' => [16,59, 329,59, 329,-190, 16,-190]],\n];\nforeach ($tests as $testnum => $test) {\n    $bbox = imageftbbox($test['fontSize'], $test['angle'], $font, $test['text']);\n    printf('%2d: ', $testnum);\n    for ($i = 0; $i < 8; $i++) {\n        $exp = $test['exp'][$i];\n        if ($bbox[$i] >= $exp - 2 && $bbox[$i] <= $exp + 2) {\n            echo '.';\n        } else {\n            echo \"(expected $exp, got $bbox[$i])\";\n        }\n    }\n    echo \"\\n\";\n    $bboxDrawn = imagefttext($g, $test['fontSize'], $test['angle'],\n        $test['x'], $test['y'], $black, $font, $test['text']);\n    // check if both bboxes match when adding x/y offset:\n    for ($i = 0; $i < count($bbox); $i += 2) {\n        if ($bbox[$i] + $test['x'] !== $bboxDrawn[$i]) echo \"imageftbbox and imagefttext differ!\\n\";\n        if ($bbox[$i + 1] + $test['y'] !== $bboxDrawn[$i + 1]) echo \"imageftbbox and imagefttext differ!\\n\";\n    }\n    // draw bounding box:\n    imagepolygon($g, $bboxDrawn, $red);\n    // draw baseline:\n    $width = sqrt(pow($bboxDrawn[2] - $bboxDrawn[0], 2) + pow($bboxDrawn[3] - $bboxDrawn[1], 2));\n    imageline($g, $test['x'], $test['y'],\n        $test['x'] + (int)($width * cos(deg2rad($test['angle']))),\n        $test['y'] - (int)($width * sin(deg2rad($test['angle']))), $blue);\n}\nimagepng($g, \"$cwd/bug53504.png\");\n?>")).toMatchSnapshot();
  });
});
