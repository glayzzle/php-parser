// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fgetcsv_variation31.phpt
  it("Test fgetcsv() : usage variations - with length and enclosure, file pointer pointing at end of file", function () {
    expect(parser.parseCode("<?php\n/*\n   Testing fgetcsv() to read a file whose file pointer is pointing to end of file\n   and fgetcsv() provided with enclosure argument\n*/\necho \"*** Testing fgetcsv() : with enclosure argument, file pointer pointing at end of file ***\\n\";\n/* the array is with two elements in it. Each element should be read as\n   1st element is delimiter & 2nd element is csv fields\n*/\n$csv_lists = array (\n  array(',', 'water,fruit'),\n  array(' ', 'water fruit'),\n  array(' ', '\"water\" \"fruit\"'),\n  array('\\\\', 'water\\\\\"fruit\"\\\\\"air\"'),\n  array('\\\\', '\"water\"\\\\\"fruit\"\\\\\"\"\"'),\n);\n$filename = __DIR__ . '/fgetcsv_variation31.tmp';\n@unlink($filename);\n$file_modes = array (\"r\",\"rb\", \"rt\", \"r+\", \"r+b\", \"r+t\",\n                     \"a+\", \"a+b\", \"a+t\",\n                     \"w+\", \"w+b\", \"w+t\",\n                     \"x+\", \"x+b\", \"x+t\");\n$loop_counter = 1;\nforeach ($csv_lists as $csv_list) {\n  for($mode_counter = 0; $mode_counter < count($file_modes); $mode_counter++) {\n    // create the file and add the content with has csv fields\n    if ( strstr($file_modes[$mode_counter], \"r\") ) {\n      $file_handle = fopen($filename, \"w\");\n    } else {\n      $file_handle = fopen($filename, $file_modes[$mode_counter] );\n    }\n    if ( !$file_handle ) {\n      echo \"Error: failed to create file $filename!\\n\";\n      exit();\n    }\n    $delimiter = $csv_list[0];\n    $csv_field = $csv_list[1];\n    fwrite($file_handle, $csv_field . \"\\n\");\n    // write another line of text and a blank line\n    // this will be used to test, if the fgetcsv() read more than a line and its\n    // working when only a blan line is read\n    fwrite($file_handle, \"This is line of text without csv fields\\n\");\n    fwrite($file_handle, \"\\n\"); // blank line\n    // close the file if the mode to be used is read mode  and re-open using read mode\n    // else rewind the file pointer to beginning of the file\n    if ( strstr($file_modes[$mode_counter], \"r\" ) ) {\n      fclose($file_handle);\n      $file_handle = fopen($filename, $file_modes[$mode_counter]);\n    }\n    echo \"\\n-- Testing fgetcsv() with file opened using $file_modes[$mode_counter] mode --\\n\";\n    // set the file pointer to EOF\n    var_dump( fseek($file_handle, 0, SEEK_END) );\n    // call fgetcsv() to parse csv fields\n    // now file pointer should point to end of the file, try reading again\n    var_dump( feof($file_handle) );\n    $enc = 'z';\n    var_dump( fgetcsv($file_handle, 1024, $delimiter, $enc ) ); // with length, delimiter\n    // check the file pointer position and if eof\n    var_dump( ftell($file_handle) );\n    var_dump( feof($file_handle) );\n    // close the file\n    fclose($file_handle);\n    //delete file\n    unlink($filename);\n  } //end of mode loop\n} // end of foreach\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
