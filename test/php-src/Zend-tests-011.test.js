// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/011.phpt
  it("property_exists() tests", function () {
    expect(parser.parseCode("<?php\nclass foo {\n    public $pp1 = 1;\n    private $pp2 = 2;\n    protected $pp3 = 3;\n    function bar() {\n        var_dump(property_exists(\"foo\",\"pp1\"));\n        var_dump(property_exists(\"foo\",\"pp2\"));\n        var_dump(property_exists(\"foo\",\"pp3\"));\n    }\n}\nclass bar extends foo {\n    function test() {\n        var_dump(property_exists(\"foo\",\"pp1\"));\n        var_dump(property_exists(\"foo\",\"pp2\"));\n        var_dump(property_exists(\"foo\",\"pp3\"));\n    }\n}\nvar_dump(property_exists(\"foo\",\"pp1\"));\nvar_dump(property_exists(\"foo\",\"pp2\"));\nvar_dump(property_exists(\"foo\",\"pp3\"));\nvar_dump(property_exists(\"foo\",\"nonexistent\"));\nvar_dump(property_exists(\"fo\",\"nonexistent\"));\nvar_dump(property_exists(\"foo\",\"\"));\nvar_dump(property_exists(\"\",\"test\"));\nvar_dump(property_exists(\"\",\"\"));\n$foo = new foo;\nvar_dump(property_exists($foo,\"pp1\"));\nvar_dump(property_exists($foo,\"pp2\"));\nvar_dump(property_exists($foo,\"pp3\"));\nvar_dump(property_exists($foo,\"nonexistent\"));\nvar_dump(property_exists($foo,\"\"));\ntry {\n    var_dump(property_exists(array(), \"test\"));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    var_dump(property_exists(1, \"test\"));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    var_dump(property_exists(3.14, \"test\"));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    var_dump(property_exists(true, \"test\"));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    var_dump(property_exists(null, \"test\"));\n} catch (\\TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\n$foo->bar();\n$bar = new bar;\n$bar->test();\n?>")).toMatchSnapshot();
  });
});
