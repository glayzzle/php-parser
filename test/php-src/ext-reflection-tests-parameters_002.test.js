// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/parameters_002.phpt
  it("ReflectionParameter::getClass(), getDeclaringClass(), getDeclaringFunction()", function () {
    expect(parser.parseCode("<?php\nfunction test($nix, Array $ar, &$ref, stdClass $std,\n    NonExistingClass $na, stdClass &$opt = NULL, $def = \"FooBar\")\n{\n}\nclass test\n{\n    function method($nix, Array $ar, &$ref, stdClass $std,\n        NonExistingClass $na, stdClass $opt = NULL, $def = \"FooBar\")\n    {\n    }\n}\nfunction check_params_decl_func($r, $f)\n{\n    $c = $r->$f();\n    $sep = $c instanceof ReflectionMethod ? $c->class . '::' : '';\n    echo $f . ': ' . ($c ? $sep . $c->name : 'NULL') . \"()\\n\";\n}\nfunction check_params_decl_class($r, $f)\n{\n    $c = $r->$f();\n    echo $f . ': ' . ($c ? $c->name : 'NULL') . \"\\n\";\n}\nfunction check_params_func($r, $f)\n{\n    echo $f . ': ';\n    $v = $r->$f();\n    var_dump($v);\n}\nfunction check_params($r)\n{\n    echo \"#####\" . ($r instanceof ReflectionMethod ? $r->class . '::' : '') . $r->name . \"()#####\\n\";\n    $i = 0;\n    foreach($r->getParameters() as $p)\n    {\n        echo \"===\" . $i . \"===\\n\";\n        $i++;\n        check_params_func($p, 'getName');\n        check_params_func($p, 'isPassedByReference');\n        try\n        {\n            check_params_decl_class($p, 'getClass');\n        }\n        catch(ReflectionException $e)\n        {\n            echo $e->getMessage() . \"\\n\";\n        }\n        check_params_decl_class($p, 'getDeclaringClass');\n//\t\tcheck_params_decl_func($p, 'getDeclaringFunction');\n        check_params_func($p, 'isArray');\n        check_params_func($p, 'allowsNull');\n        check_params_func($p, 'isOptional');\n        check_params_func($p, 'isDefaultValueAvailable');\n        if ($p->isOptional())\n        {\n            check_params_func($p, 'getDefaultValue');\n        }\n    }\n}\ncheck_params(new ReflectionFunction('test'));\ncheck_params(new ReflectionMethod('test::method'));\n?>")).toMatchSnapshot();
  });
});
