// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/zend_test/tests/attribute_arguments.phpt
  it("Verify that parameter attributes for native functions correctly support arguments.", function () {
    expect(parser.parseCode("<?php\n$reflection = new ReflectionFunction(\"zend_test_parameter_with_attribute\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ZendTestClassWithMethodWithParameterAttribute\", \"no_override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ZendTestClassWithMethodWithParameterAttribute\", \"override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ZendTestChildClassWithMethodWithParameterAttribute\", \"no_override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ZendTestChildClassWithMethodWithParameterAttribute\", \"override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\nclass ChildClassWithNoAttribute extends ZendTestClassWithMethodWithParameterAttribute {\n\tpublic function override(string $parameter): int\n\t{\n\t\treturn 5;\n\t}\n}\n$reflection = new ReflectionMethod(\"ChildClassWithNoAttribute\", \"no_override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ChildClassWithNoAttribute\", \"override\");\nvar_dump(count($reflection->getParameters()[0]->getAttributes()));\nclass ChildClassWithSameAttribute extends ZendTestClassWithMethodWithParameterAttribute {\n\tpublic function override(#[ZendTestParameterAttribute(\"value5\")] string $parameter): int\n\t{\n\t\treturn 6;\n\t}\n}\n$reflection = new ReflectionMethod(\"ChildClassWithSameAttribute\", \"no_override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ChildClassWithSameAttribute\", \"override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n#[\\Attribute(\\Attribute::TARGET_PARAMETER)]\nclass SomeAttribute {\n  public function __construct(public string $someParam) { }\n}\nclass ChildClassWithDifferentAttribute extends ZendTestClassWithMethodWithParameterAttribute {\n\tpublic function override(#[SomeAttribute(\"value6\")] string $parameter): int\n\t{\n\t\treturn 7;\n\t}\n}\n$reflection = new ReflectionMethod(\"ChildClassWithDifferentAttribute\", \"no_override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n$reflection = new ReflectionMethod(\"ChildClassWithDifferentAttribute\", \"override\");\n$attribute = $reflection->getParameters()[0]->getAttributes()[0];\nvar_dump($attribute->getArguments());\nvar_dump($attribute->newInstance());\n?>")).toMatchSnapshot();
  });
});
