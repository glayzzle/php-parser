// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_filter_object.phpt
  it("Test array_filter() function : object functionality", function () {
    expect(parser.parseCode("<?php\n/* This file uses 'input' array with different types of objects and passes\n * it to array_filter() to test object functionality\n * i.e. object of simple class with members and functions\n * object of empty class\n * object of child class extending abstract class\n * object of class containing static member\n */\necho \"*** Testing array_filter() : object functionality ***\\n\";\n// simple class with members - variable and method\nclass SimpleClass\n{\n  public $var1 = 10;\n  public function check() {\n    return $var1;\n  }\n}\n// class without members\nclass EmptyClass\n{\n}\n// abstract class\nabstract class AbstractClass\n{\n  protected $var2 = 5;\n  abstract function emptyMethod();\n}\n// class deriving above abstract class\nclass ChildClass extends AbstractClass\n{\n  private $var3;\n  public function emptyMethod() {\n    echo \"defined in child\";\n  }\n}\n// class with final method\nclass FinalClass\n{\n  private $var4;\n  final function finalMethod() {\n    echo 'This can not be overloaded';\n  }\n}\n// class with static members\nclass StaticClass\n{\n  static $var5 = 5;\n  public static function staticMethod() {\n    echo 'this is static method';\n  }\n}\nfunction always_true($input)\n{\n  return true;\n}\n// Callback function which returns always false\nfunction always_false($input)\n{\n  return false;\n}\n// 'input' array containing objects as elements\n$input = array(\n  new SimpleClass(),\n  new EmptyClass(),\n  new ChildClass(),\n  new FinalClass(),\n  new StaticClass()\n);\n// with default callback\nvar_dump( array_filter($input) );\n// with always_true callback function\nvar_dump( array_filter($input, \"always_true\") );\n// with always_false callback function\nvar_dump( array_filter($input, \"always_false\") );\necho \"Done\"\n?>")).toMatchSnapshot();
  });
});
