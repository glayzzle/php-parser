// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/ffi/tests/022.phpt
  it("FFI 022: structure/union alignment", function () {
    expect(parser.parseCode("<?php\nfunction test_size($size, $type) {\n    if (FFI::sizeof(FFI::new($type)) !== $size) {\n        echo \"FAIL: sizeof($type) != $size\\n\";\n    }\n}\nfunction test_align($align, $type) {\n    if (FFI::alignof(FFI::new($type)) !== $align) {\n        echo \"FAIL: alignof($type) != $align\\n\";\n    }\n}\ntest_size(8, \"struct {uint32_t a; uint32_t b;}\");\ntest_size(3, \"struct {char a; uint8_t b; uint8_t c;}\");\ntest_size(8, \"struct {char a; uint32_t b;}\");\ntest_size(8, \"struct {uint32_t a; char b;}\");\ntest_size(5, \"struct __attribute__((packed)) {char a; uint32_t b;}\");\ntest_size(5, \"struct __attribute__((packed)) {uint32_t a; char b;}\");\ntest_size(16, \"struct {uint32_t a; uint32_t b;}[2]\");\ntest_size(6,  \"struct {char a; uint8_t b; uint8_t c;}[2]\");\ntest_size(16, \"struct {char a; uint32_t b;}[2]\");\ntest_size(16, \"struct {uint32_t a; char b;}[2]\");\ntest_size(10, \"struct __attribute__((packed)) {char a; uint32_t b;}[2]\");\ntest_size(10, \"struct __attribute__((packed)) {uint32_t a; char b;}[2]\");\ntest_align(4, \"union {uint32_t a; uint32_t b;}\");\ntest_align(1, \"union {char a; uint8_t b; uint8_t c;}\");\ntest_align(4, \"union {char a; uint32_t b;}\");\ntest_align(4, \"union {uint32_t a; char b;}\");\ntest_align(1, \"union __attribute__((packed)) {char a; uint32_t b;}\");\ntest_align(1, \"union __attribute__((packed)) {uint32_t a; char b;}\");\ntest_size(8, \"struct {char a __attribute__((packed)); uint32_t b;}\");\ntest_size(5, \"struct {char a; uint32_t b  __attribute__((packed));}\");\ntest_size(5, \"struct {uint32_t a __attribute__((packed)); char b;}\");\ntest_size(8, \"struct {uint32_t a; char b __attribute__((packed));}\");\ntest_align(4, \"struct {char a __attribute__((packed)); uint32_t b;}\");\ntest_align(1, \"struct {char a; uint32_t b  __attribute__((packed));}\");\ntest_align(1, \"struct {uint32_t a __attribute__((packed)); char b;}\");\ntest_align(4, \"struct {uint32_t a; char b __attribute__((packed));}\");\ntest_size(16, \"struct  __attribute__((aligned(16))) {char a; uint32_t b;}\");\ntest_align(16, \"struct  __attribute__((aligned(16))) {char a; uint32_t b;}\");\ntest_size(16, \"struct {char a; uint32_t b;} __attribute__((aligned(16)))\");\ntest_align(16, \"struct {char a; uint32_t b;} __attribute__((aligned(16)))\");\ntest_size(8, \"struct  {char a; uint32_t b __attribute__((aligned(1)));}\");\ntest_align(4, \"struct  {char a; uint32_t b __attribute__((aligned(1)));}\");\ntest_size(32, \"struct {char a; uint32_t b __attribute__((aligned(16)));}\");\ntest_align(16, \"struct {char a; uint32_t b __attribute__((aligned(16)));}\");\nif (substr(PHP_OS, 0, 3) != 'WIN') {\n    test_size(FFI::__BIGGEST_ALIGNMENT__ * 2, \"struct  {char a; uint32_t b __attribute__((aligned));}\");\n    test_align(FFI::__BIGGEST_ALIGNMENT__, \"struct  {char a; uint32_t b __attribute__((aligned));}\");\n}\ntest_size(16, \"struct  __declspec(align(16)) {char a; uint32_t b;}\");\ntest_align(16, \"struct  __declspec(align(16)) {char a; uint32_t b;}\");\n?>\nok")).toMatchSnapshot();
  });
});
