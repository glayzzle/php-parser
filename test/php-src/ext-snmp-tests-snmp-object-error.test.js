// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/snmp/tests/snmp-object-error.phpt
  it("OO API: Generic errors", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__.'/snmp_include.inc');\n//EXPECTF format is quickprint OFF\nsnmp_set_quick_print(false);\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\ntry {\n    var_dump(new SNMP(SNMP::VERSION_1, $hostname));\n} catch (TypeError $e) {\n    print $e->getMessage() . \"\\n\";\n}\ntry {\n    var_dump(new SNMP(SNMP::VERSION_1, $hostname, $community, ''));\n} catch (TypeError $e) {\n    print $e->getMessage() . \"\\n\";\n}\ntry {\n    var_dump(new SNMP(SNMP::VERSION_1, $hostname, $community, $timeout, ''));\n} catch (TypeError $e) {\n    print $e->getMessage() . \"\\n\";\n}\ntry {\n    var_dump(new SNMP(7, $hostname, $community));\n} catch (ValueError $e) {\n    print $e->getMessage() . \"\\n\";\n}\necho \"Exception handling\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $user_noauth, $timeout, $retries);\ntry {\n    var_dump($session->get('.1.3.6.1.2.1.1.1..0'));\n} catch (SNMPException $e) {\n    var_dump($e->getCode());\n    var_dump($e->getMessage());\n}\n$session->exceptions_enabled = SNMP::ERRNO_ANY;\ntry {\n    var_dump($session->get('.1.3.6.1.2.1.1.1..0'));\n} catch (SNMPException $e) {\n    var_dump($e->getCode());\n    var_dump($e->getMessage());\n}\nvar_dump($session->close());\necho \"Open normal session\\n\";\n$session = new SNMP(SNMP::VERSION_3, $hostname, $user_noauth, $timeout, $retries);\ntry {\n    $session->valueretrieval = 67;\n    var_dump($session->valueretrieval);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\necho \"Closing session\\n\";\nvar_dump($session->close());\ntry {\n    var_dump($session->get('.1.3.6.1.2.1.1.1.0'));\n    var_dump($session->close());\n} catch (\\Error $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\n$session = new SNMP(SNMP::VERSION_2c, $hostname, $community, $timeout, $retries);\nvar_dump($session->max_oids);\ntry {\n    $session->max_oids = \"ttt\";\n} catch (TypeError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\ntry {\n    $session->max_oids = 0;\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\nvar_dump($session->max_oids);\n?>")).toMatchSnapshot();
  });
});
