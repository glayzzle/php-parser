// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/bug80458.phpt
  it("Bug #80458 PDOStatement::fetchAll() throws for upsert queries", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n$db = MySQLPDOTest::factory();\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n$db->query('DROP TABLE IF EXISTS test');\n$db->query('CREATE TABLE test (first int) ENGINE = InnoDB');\n$res = $db->query('INSERT INTO test(first) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)');\nvar_dump($res->fetchAll());\n$stmt = $db->prepare('DELETE FROM test WHERE first=1');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n$res = $db->query('DELETE FROM test WHERE first=2');\nvar_dump($res->fetchAll());\n$stmt2 = $db->prepare('DELETE FROM test WHERE first=3');\n$stmt2->execute();\nforeach($stmt2 as $row){\n    // expect nothing\n}\n$stmt3 = $db->prepare('DELETE FROM test WHERE first=4');\n$stmt3->execute();\nvar_dump($stmt3->fetch(PDO::FETCH_ASSOC));\n$stmt = $db->prepare('SELECT first FROM test WHERE first=5');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS nores');\n$db->exec('CREATE PROCEDURE nores() BEGIN DELETE FROM test WHERE first=6; END;');\n$stmt4 = $db->prepare('CALL nores()');\n$stmt4->execute();\nvar_dump($stmt4->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS nores');\n$db->exec('DROP PROCEDURE IF EXISTS ret');\n$db->exec('CREATE PROCEDURE ret() BEGIN SELECT first FROM test WHERE first=7; END;');\n$stmt5 = $db->prepare('CALL ret()');\n$stmt5->execute();\nvar_dump($stmt5->fetchAll());\n$stmt5->nextRowset(); // needed to fetch the empty result set of CALL\nvar_dump($stmt5->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS ret');\n/* With emulated prepares */\nprint(\"Emulated prepares\\n\");\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);\n$stmt = $db->prepare('DELETE FROM test WHERE first=8');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n$res = $db->query('DELETE FROM test WHERE first=9');\nvar_dump($res->fetchAll());\n$stmt2 = $db->prepare('DELETE FROM test WHERE first=10');\n$stmt2->execute();\nforeach($stmt2 as $row){\n    // expect nothing\n}\n$stmt3 = $db->prepare('DELETE FROM test WHERE first=11');\n$stmt3->execute();\nvar_dump($stmt3->fetch(PDO::FETCH_ASSOC));\n$stmt = $db->prepare('SELECT first FROM test WHERE first=12');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS nores');\n$db->exec('CREATE PROCEDURE nores() BEGIN DELETE FROM test WHERE first=13; END;');\n$stmt4 = $db->prepare('CALL nores()');\n$stmt4->execute();\nvar_dump($stmt4->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS nores');\n$db->exec('DROP PROCEDURE IF EXISTS ret');\n$db->exec('CREATE PROCEDURE ret() BEGIN SELECT first FROM test WHERE first=14; END;');\n$stmt5 = $db->prepare('CALL ret()');\n$stmt5->execute();\nvar_dump($stmt5->fetchAll());\n$stmt5->nextRowset(); // needed to fetch the empty result set of CALL\nvar_dump($stmt5->fetchAll());\n$db->exec('DROP PROCEDURE IF EXISTS ret');\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n$db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n$stmt = $db->prepare('DELETE FROM test WHERE first=15');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n$stmt = $db->prepare('SELECT first FROM test WHERE first=16');\n$stmt->execute();\nvar_dump($stmt->fetchAll());\n?>")).toMatchSnapshot();
  });
});
