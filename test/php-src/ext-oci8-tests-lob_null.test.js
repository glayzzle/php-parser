// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/lob_null.phpt
  it("Test null data for CLOBs", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__.'/connect.inc';\nerror_reporting(E_ALL ^ E_DEPRECATED);\n// Initialization\n$s = oci_parse($c, 'drop table lob_null_tab');\n@oci_execute($s);\n$s = oci_parse($c, 'create table lob_null_tab (id number, data clob)');\noci_execute($s);\n$s = oci_parse($c,\n'create or replace procedure lob_null_proc_in (pid in number, pdata in CLOB)\n as begin\n   insert into lob_null_tab (id, data) values (pid, pdata);\n end;');\noci_execute($s);\n$s = oci_parse($c,\n'create or replace procedure lob_null_proc_out (pid in number, pdata out clob)\n   as begin\n     select data into pdata from lob_null_tab where id = pid;\n end;');\noci_execute($s);\n// TEMPORARY CLOB\necho \"Temporary CLOB: NULL\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (1, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary(null);\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\necho \"Temporary CLOB: ''\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (2, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary('');\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\necho \"Temporary CLOB: text\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (3, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary('Inserted via SQL statement');\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\n// PROCEDURE PARAMETER\necho \"Procedure parameter: NULL\\n\";\n$s = oci_parse($c, \"call lob_null_proc_in(4, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary(null);\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\necho \"Procedure parameter: ''\\n\";\n$s = oci_parse($c, \"call lob_null_proc_in(5, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary('');\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\necho \"Procedure parameter: text\\n\";\n$s = oci_parse($c, \"call lob_null_proc_in(6, :b)\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n$lob->writeTemporary('Inserted via procedure parameter');\n$r = @oci_execute($s);\nif (!$r) {\n    $m = oci_error($s);\n    echo $m['message'], \"\\n\";\n}\nelse {\n    $lob->close();\n}\n// RETURNING INTO\necho \"RETURNING INTO: null\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (7, empty_clob()) returning data into :b\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\noci_execute($s, OCI_DEFAULT);  // Must have OCI_DEFAULT here so locator is still valid\n$lob->save(null);\necho \"RETURNING INTO: ''\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (8, empty_clob()) returning data into :b\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\noci_execute($s, OCI_DEFAULT);  // Must have OCI_DEFAULT here so locator is still valid\n$lob->save('');\necho \"RETURNING INTO: text\\n\";\n$s = oci_parse($c, \"insert into lob_null_tab values (9, empty_clob()) returning data into :b\");\n$lob = oci_new_descriptor($c, OCI_D_LOB);\noci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\noci_execute($s, OCI_DEFAULT);  // Must have OCI_DEFAULT here so locator is still valid\n$lob->save('Inserted with RETURNING INTO');\necho \"Fetch as string\\n\";\n$s = oci_parse ($c, 'select id, data from lob_null_tab order by id');\noci_execute($s);\noci_fetch_all($s, $res);\nvar_dump($res);\necho \"\\nFetch as a descriptor\\n\";\n$s = oci_parse ($c, 'select id, data from lob_null_tab order by id');\noci_execute($s);\nwhile ($arr = oci_fetch_assoc($s)) {\n    if (is_object($arr['DATA'])) {\n        echo $arr['ID'] . \" is an object: \";\n        $r = $arr['DATA']->load();\n        var_dump($r);\n    }\n    else {\n        echo $arr['ID'] . \" is not an object\\n\";\n    }\n}\necho \"\\nFetch via the procedure parameter\\n\";\nfor ($i = 1; $i <= 9; $i++)\n{\n    $s = oci_parse ($c, \"call lob_null_proc_out($i, :b)\");\n    $lob = oci_new_descriptor($c, OCI_D_LOB);\n    oci_bind_by_name($s, ':b', $lob, -1, OCI_B_CLOB);\n    oci_execute($s);\n    if (is_object($lob)) {\n        echo $i . \" is an object: \";\n        $r = $lob->load();\n        var_dump($r);\n    }\n    else {\n        echo $i . \" is not an object\\n\";\n    }\n}\n// Cleanup\n$s = oci_parse($c, 'drop table lob_null_tab');\n@oci_execute($s);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
