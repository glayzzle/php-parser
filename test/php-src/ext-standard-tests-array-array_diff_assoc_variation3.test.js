// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_diff_assoc_variation3.phpt
  it("Test array_diff_assoc() function : variation - array containing different data types", function () {
    expect(parser.parseCode("<?php\n/*\n * Test how array_diff_assoc() compares indexed arrays containing different data types\n */\necho \"\\n*** Testing array_diff_assoc() : usage variations ***\\n\";\n$array = array(1, 2, 3);\n//get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a class\nclass classA\n{\n  public function __toString() {\n    return \"Class A object\";\n  }\n}\n// heredoc string\n$heredoc = <<<EOT\nhello world\nEOT;\n//array of different data types to be passed to $arr1 argument\n$inputs = array(\n       // int data\n/*1*/\n'int' => array(\n       0,\n       1,\n       12345,\n       -2345),\n       // float data\n/*2*/\n'float' => array(\n       10.5,\n       -10.5,\n       12.3456789000e10,\n       12.3456789000E-10,\n       .5),\n       // null data\n/*3*/\n'null' => array(\n       NULL,\n       null),\n       // boolean data\n/*4*/\n'bool' => array(\n       true,\n       false,\n       TRUE,\n       FALSE),\n       // empty data\n/*5*/\n'empty' => array(\n       \"\",\n       ''),\n       // string data\n/*6*/\n'string' => array(\n       \"string\",\n       'string',\n       $heredoc),\n       // binary data\n/*7*/\n'binary' => array(\n       b\"binary\",\n       (binary)\"binary\"),\n       // object data\n/*8*/\n'object' => array(\n      new classA()),\n       // undefined data\n/*9*/\n'undefined' => array(\n       @$undefined_var),\n       // unset data\n/*10*/\n'unset' => array(\n      @$unset_var),\n);\n// loop through each element of $inputs to check the behavior of array_diff_assoc\n$iterator = 1;\nforeach($inputs as $key => $input) {\n  echo \"\\n-- Iteration $iterator --\\n\";\n  var_dump( array_diff_assoc($input, $array));\n  $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
