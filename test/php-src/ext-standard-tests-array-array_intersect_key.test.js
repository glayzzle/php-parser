// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_intersect_key.phpt
  it("Test of the array_intersect_key() and array_intersect_ukey()", function () {
    expect(parser.parseCode("<?php\n$a = array(1, 6, 2, -20, 15, 1200, -2500);\n$b = array(0, 7, 2, -20, 11, 1100, -2500);\n$c = array(0, 6, 2, -20, 19, 1000, -2500);\n$d = array(3, 8,-2, -20, 14,  900, -2600);\n$a_f = array_flip($a);\n$b_f = array_flip($b);\n$c_f = array_flip($c);\n$d_f = array_flip($d);\n/* give nicer values */\nforeach ($a_f as $k=> &$a_f_el) { $a_f_el =$k*2;}\nforeach ($b_f as $k=> &$b_f_el) { $b_f_el =$k*2;}\nforeach ($c_f as $k=> &$c_f_el) { $c_f_el =$k*2;}\nforeach ($d_f as $k=> &$d_f_el) { $d_f_el =$k*2;}\nvar_dump(array_intersect_key($a_f, $b_f));// keys -> 2, -20, -2500\nvar_dump(array_intersect_ukey($a_f, $b_f, \"comp_func\"));// 2, 20, -2500\nvar_dump(array_intersect_key($a_f, $c_f));// keys -> 6, 2, -20, -2500\nvar_dump(array_intersect_ukey($a_f, $c_f, \"comp_func\"));// 6, 2, -20, -2500\nvar_dump(array_intersect_key($a_f, $d_f));// -20\nvar_dump(array_intersect_ukey($a_f, $d_f, \"comp_func\"));// -20\nvar_dump(array_intersect_key($a_f, $b_f, $c_f));// 2, -20, -2500\nvar_dump(array_intersect_ukey($a_f, $b_f, $c_f, \"comp_func\"));// 2, -20, -2500\nvar_dump(array_intersect_key($a_f, $b_f, $d_f));// -20\nvar_dump(array_intersect_ukey($a_f, $b_f, $d_f, \"comp_func\"));// -20\nvar_dump(array_intersect_key($a_f, $b_f, $c_f, $d_f));// -20\nvar_dump(array_intersect_ukey($a_f, $b_f, $c_f, $d_f, \"comp_func\"));//-20\nvar_dump(array_intersect_key($b_f, $c_f));// 0, 2, -20, -2500\nvar_dump(array_intersect_ukey($b_f, $c_f, \"comp_func\"));//0, 2, -20, 2500\nvar_dump(array_intersect_key($b_f, $d_f));// -20\nvar_dump(array_intersect_ukey($b_f, $d_f, \"comp_func\"));// -20\nvar_dump(array_intersect_key($b_f, $c_f, $d_f));// -20\nvar_dump(array_intersect_ukey($b_f, $c_f,  $d_f, \"comp_func\"));// -20\necho \"----- Now testing array_intersect() ------- \\n\";\nvar_dump(array_intersect($a, $b_f));\nvar_dump(array_uintersect($a, $b, \"comp_func\"));\nvar_dump(array_intersect($a, $b, $c));\nvar_dump(array_uintersect($a, $b, $c, \"comp_func\"));\nvar_dump(array_intersect($a, $b, $c, $d));\nvar_dump(array_uintersect($a, $b, $c, $d, \"comp_func\"));\n///////////////////////////////////////////////////////////////////////\nfunction comp_func($a, $b) {\n        if ($a === $b) return 0;\n        return ($a > $b)? 1:-1;\n}\n?>")).toMatchSnapshot();
  });
});
