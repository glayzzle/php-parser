// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_int_64bit.phpt
  it("Test is_int() & it's FALIASes: is_long() & is_integer() functions", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing is_int(), is_integer() & is_long()  with valid integer values ***\\n\";\n// different valid  integer values\n$valid_ints = array(\n  0,\n  1,\n  -1,\n  -2147483648, // max negative integer value\n  -2147483647,\n  2147483647,  // max positive integer value\n  2147483640,\n  0x123B,      // integer as hexadecimal\n  0x12ab,\n  0Xfff,\n  0XFA,\n  -0x80000000, // max negative integer as hexadecimal\n  0x7fffffff,  // max positive integer as hexadecimal\n  0x7FFFFFFF,  // max positive integer as hexadecimal\n  0123,        // integer as octal\n  01,       // should be quivalent to octal 1\n  -020000000000, // max negative integer as octal\n  017777777777,  // max positive integer as octal\n);\n/* loop to check that is_int() recognizes different\n   integer values, expected output: bool(true) */\n$loop_counter = 1;\nforeach ($valid_ints as $int_val ) {\n   echo \"--Iteration $loop_counter--\\n\"; $loop_counter++;\n   var_dump( is_int($int_val) );\n   var_dump( is_integer($int_val) );\n   var_dump( is_long($int_val) );\n}\necho \"\\n*** Testing is_int(), is_integer() & is_long() with  non integer values ***\\n\";\n// resource type variable\n$fp = fopen (__FILE__, \"r\");\n$dfp = opendir ( __DIR__ );\n// unset variable\n$unset_var = 10;\nunset ($unset_var);\n// other types in a array\n$not_int_types = array (\n  /* float values */\n  -2147483649, // float value\n  2147483648,  // float value\n  -0x80000001, // float value, beyond max negative int\n  0x800000001, // float value, beyond max positive int\n  020000000001, // float value, beyond max positive int\n  -020000000001, // float value, beyond max negative int\n  0.0,\n  -0.1,\n  1.0,\n  1e5,\n  -1e6,\n  1E8,\n  -1E9,\n  10.0000000000000000005,\n  10.5e+5,\n  /* objects */\n  new stdclass,\n  /* resources */\n  $fp,\n  $dfp,\n  /* arrays */\n  array(),\n  array(0),\n  array(1),\n  array(NULL),\n  array(null),\n  array(\"string\"),\n  array(true),\n  array(TRUE),\n  array(false),\n  array(FALSE),\n  array(1,2,3,4),\n  array(1 => \"One\", \"two\" => 2),\n  /* strings */\n  \"\",\n  '',\n  \"0\",\n  '0',\n  \"1\",\n  '1',\n  \"\\x01\",\n  '\\x01',\n  \"\\01\",\n  '\\01',\n  'string',\n  \"string\",\n  \"true\",\n  \"FALSE\",\n  'false',\n  'TRUE',\n  \"NULL\",\n  'null',\n  /* booleans */\n  true,\n  false,\n  TRUE,\n  FALSE,\n  /* undefined and unset vars */\n  @$unset_var,\n  @$undefined_var\n);\n/* loop through the $not_int_types to see working of\n   is_int() on non integer types, expected output: bool(false) */\n$loop_counter = 1;\nforeach ($not_int_types as $type ) {\n   echo \"--Iteration $loop_counter--\\n\"; $loop_counter++;\n   var_dump( is_int($type) );\n   var_dump( is_integer($type) );\n   var_dump( is_long($type) );\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
