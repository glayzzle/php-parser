// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/sodium/tests/crypto_aead.phpt
  it("Check for libsodium AEAD", function () {
    expect(parser.parseCode("<?php\necho \"aead_chacha20poly1305:\\n\";\n$msg = random_bytes(random_int(1, 1000));\n$nonce = random_bytes(SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES);\n$key = sodium_crypto_aead_chacha20poly1305_keygen();\n$ad = random_bytes(random_int(1, 1000));\n$ciphertext = sodium_crypto_aead_chacha20poly1305_encrypt($msg, $ad, $nonce, $key);\n$msg2 = sodium_crypto_aead_chacha20poly1305_decrypt($ciphertext, $ad, $nonce, $key);\nvar_dump($ciphertext !== $msg);\nvar_dump($msg === $msg2);\nvar_dump(sodium_crypto_aead_chacha20poly1305_decrypt($ciphertext, 'x' . $ad, $nonce, $key));\ntry {\n    // Switched order\n    $msg2 = sodium_crypto_aead_chacha20poly1305_decrypt($ciphertext, $ad, $key, $nonce);\n    var_dump(false);\n} catch (SodiumException $ex) {\n    var_dump(true);\n}\necho \"aead_chacha20poly1305_ietf:\\n\";\nif (SODIUM_LIBRARY_MAJOR_VERSION > 7 ||\n    (SODIUM_LIBRARY_MAJOR_VERSION == 7 &&\n     SODIUM_LIBRARY_MINOR_VERSION >= 6)) {\n    $msg = random_bytes(random_int(1, 1000));\n    $nonce = random_bytes(SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES);\n    $key = sodium_crypto_aead_chacha20poly1305_ietf_keygen();\n    $ad = random_bytes(random_int(1, 1000));\n    $ciphertext = sodium_crypto_aead_chacha20poly1305_ietf_encrypt($msg, $ad, $nonce, $key);\n    $msg2 = sodium_crypto_aead_chacha20poly1305_ietf_decrypt($ciphertext, $ad, $nonce, $key);\n    var_dump($ciphertext !== $msg);\n    var_dump($msg === $msg2);\n    var_dump(sodium_crypto_aead_chacha20poly1305_ietf_decrypt($ciphertext, 'x' . $ad, $nonce, $key));\n    try {\n        // Switched order\n        $msg2 = sodium_crypto_aead_chacha20poly1305_ietf_decrypt($ciphertext, $ad, $key, $nonce);\n        var_dump(false);\n    } catch (SodiumException $ex) {\n        var_dump(true);\n    }\n} else {\n    var_dump(true);\n    var_dump(true);\n    var_dump(false);\n    var_dump(true);\n}\necho \"aead_xchacha20poly1305_ietf:\\n\";\nif (SODIUM_LIBRARY_MAJOR_VERSION > 9 ||\n    (SODIUM_LIBRARY_MAJOR_VERSION == 9 &&\n     SODIUM_LIBRARY_MINOR_VERSION >= 4)) {\n    $msg = random_bytes(random_int(1, 1000));\n    $nonce = random_bytes(SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES);\n    $key = sodium_crypto_aead_xchacha20poly1305_ietf_keygen();\n    $ad = random_bytes(random_int(1, 1000));\n    $ciphertext = sodium_crypto_aead_xchacha20poly1305_ietf_encrypt($msg, $ad, $nonce, $key);\n    $msg2 = sodium_crypto_aead_xchacha20poly1305_ietf_decrypt($ciphertext, $ad, $nonce, $key);\n    var_dump($ciphertext !== $msg);\n    var_dump($msg === $msg2);\n    var_dump(sodium_crypto_aead_xchacha20poly1305_ietf_decrypt($ciphertext, 'x' . $ad, $nonce, $key));\n    try {\n        // Switched order\n        $msg2 = sodium_crypto_aead_xchacha20poly1305_ietf_decrypt($ciphertext, $ad, $key, $nonce);\n        var_dump(false);\n    } catch (SodiumException $ex) {\n        var_dump(true);\n    }\n} else {\n    var_dump(true);\n    var_dump(true);\n    var_dump(false);\n    var_dump(true);\n}\necho \"aead_aes256gcm:\\n\";\nif (sodium_crypto_aead_aes256gcm_is_available()) {\n    $msg = random_bytes(random_int(1, 1000));\n    $nonce = random_bytes(SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES);\n    $ad = random_bytes(random_int(1, 1000));\n    $key = sodium_crypto_aead_aes256gcm_keygen();\n    $ciphertext = sodium_crypto_aead_aes256gcm_encrypt($msg, $ad, $nonce, $key);\n    $msg2 = sodium_crypto_aead_aes256gcm_decrypt($ciphertext, $ad, $nonce, $key);\n    var_dump($ciphertext !== $msg);\n    var_dump($msg === $msg2);\n    var_dump(sodium_crypto_aead_aes256gcm_decrypt($ciphertext, 'x' . $ad, $nonce, $key));\n    try {\n        // Switched order\n        $msg2 = sodium_crypto_aead_aes256gcm_decrypt($ciphertext, $ad, $key, $nonce);\n        var_dump(false);\n    } catch (SodiumException $ex) {\n        var_dump(true);\n    }\n} else {\n    var_dump(true);\n    var_dump(true);\n    var_dump(false);\n    var_dump(true);\n}\n?>")).toMatchSnapshot();
  });
});
