// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_convert_encoding.phpt
  it("mb_convert_encoding()", function () {
    expect(parser.parseCode("<?php\n// TODO: Add more tests\n$sjis = base64_decode('k/qWe4zqg2WDTINYg2eCxYK3gUIwMTIzNIJUglWCVoJXgliBQg==');\n$jis = base64_decode('GyRCRnxLXDhsJUYlLSU5JUgkRyQ5ISMbKEIwMTIzNBskQiM1IzYjNyM4IzkhIxsoQg==');\n$euc_jp = \"\\xC6\\xFC\\xCB\\xDC\\xB8\\xEC\\xA5\\xC6\\xA5\\xAD\\xA5\\xB9\\xA5\\xC8\\xA4\\xC7\\xA4\\xB9\\xA1\\xA301234\\xA3\\xB5\\xA3\\xB6\\xA3\\xB7\\xA3\\xB8\\xA3\\xB9\\xA1\\xA3\";\n// Test with single \"form encoding\"\necho \"== BASIC TEST ==\\n\";\n$s = bin2hex(mb_convert_encoding($sjis, 'EUC-JP', 'SJIS'));\nprint(\"EUC-JP: $s\\n\"); // EUC-JP\n$s = bin2hex(mb_convert_encoding($jis, 'EUC-JP', 'JIS'));\nprint(\"EUC-JP: $s\\n\"); // EUC-JP\n$s = mb_convert_encoding($euc_jp, 'SJIS', 'EUC-JP');\nprint(\"SJIS: \".base64_encode($s).\"\\n\"); // SJIS\n$s = mb_convert_encoding($euc_jp, 'JIS', 'EUC-JP');\nprint(\"JIS: \".base64_encode($s).\"\\n\"); // JIS\n// Using Encoding List Array\necho \"== STRING ENCODING LIST ==\\n\";\n$a = 'JIS,UTF-8,EUC-JP,SJIS';\n$s = $jis;\n$s = bin2hex(mb_convert_encoding($s, 'EUC-JP', $a));\nprint(\"EUC-JP: $s\\n\"); // EUC-JP\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'SJIS', $a);\nprint(\"SJIS: \".base64_encode($s).\"\\n\");  // SJIS\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'JIS', $a);\nprint(\"JIS: \".base64_encode($s).\"\\n\"); // JIS\n// Using Encoding List Array\necho \"== ARRAY ENCODING LIST ==\\n\";\n$a = ['JIS', 'UTF-8', 'EUC-JP', 'SJIS'];\n$s = $jis;\n$s = bin2hex(mb_convert_encoding($s, 'EUC-JP', $a));\nprint(\"EUC-JP: $s\\n\"); // EUC-JP\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'SJIS', $a);\nprint(\"SJIS: \".base64_encode($s).\"\\n\");  // SJIS\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'JIS', $a);\nprint(\"JIS: \".base64_encode($s).\"\\n\"); // JIS\n// Regression test for bug #81676\necho \"UTF-8: \" . mb_convert_encoding('test', 'UTF-8', mb_list_encodings()), \"\\n\";\n// Using Detect Order\necho \"== DETECT ORDER ==\\n\";\n$s = $jis;\n$s = bin2hex(mb_convert_encoding($s, 'EUC-JP', 'auto'));\nprint(\"EUC-JP: $s\\n\"); // EUC-JP\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'SJIS', 'auto');\nprint(\"SJIS: \".base64_encode($s).\"\\n\");  // SJIS\n$s = $euc_jp;\n$s = mb_convert_encoding($s, 'JIS', 'auto');\nprint(\"JIS: \".base64_encode($s).\"\\n\"); // JIS\n// Invalid Parameters\necho \"== INVALID PARAMETER ==\\n\";\n$s = mb_convert_encoding(1234, 'EUC-JP');\nprint(\"INT: $s\\n\");\n$s = mb_convert_encoding('', 'EUC-JP');\nprint(\"EUC-JP: $s\\n\");  // SJIS\n$s = $euc_jp;\ntry {\n    var_dump(mb_convert_encoding($s, 'BAD'));\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \\PHP_EOL;\n}\n?>")).toMatchSnapshot();
  });
});
