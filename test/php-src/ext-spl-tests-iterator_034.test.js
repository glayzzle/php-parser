// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/iterator_034.phpt
  it("SPL: RecursiveIteratorIterator and break deep", function () {
    expect(parser.parseCode("<?php\nclass MyRecursiveArrayIterator extends RecursiveArrayIterator\n{\n    function valid(): bool\n    {\n        if (!parent::valid())\n        {\n            echo __METHOD__ . \"() = false\\n\";\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n    function getChildren(): ?RecursiveArrayIterator\n    {\n        echo __METHOD__ . \"()\\n\";\n        return parent::getChildren();\n    }\n    function rewind(): void\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::rewind();\n    }\n}\nclass RecursiveArrayIteratorIterator extends RecursiveIteratorIterator\n{\n    private $max_depth;\n    private $over = 0;\n    function __construct($it, $max_depth)\n    {\n        $this->max_depth = $max_depth;\n        parent::__construct($it);\n    }\n    function rewind(): void\n    {\n        echo __METHOD__ . \"() - BEGIN\\n\";\n        parent::rewind();\n        echo __METHOD__ . \"() - DONE\\n\";\n    }\n    function valid(): bool\n    {\n        echo __METHOD__ . \"()\\n\";\n        return parent::valid();\n    }\n    function current(): mixed\n    {\n        echo __METHOD__ . \"()\\n\";\n        return parent::current();\n    }\n    function key(): int\n    {\n        echo __METHOD__ . \"()\\n\";\n        return parent::key();\n    }\n    function next(): void\n    {\n        echo __METHOD__ . \"()\\n\";\n        parent::next();\n    }\n    function callHasChildren(): bool\n    {\n        $has = parent::callHasChildren();\n        $res = $this->getDepth() < $this->max_depth && $has;\n        echo __METHOD__ . \"(\".$this->getDepth().\") = \".($res?\"yes\":\"no\").\"/\".($has?\"yes\":\"no\").\"\\n\";\n        return $res;\n    }\n    function beginChildren(): void\n    {\n        echo __METHOD__ . \"(\".$this->getDepth().\")\\n\";\n        parent::beginChildren();\n    }\n    function endChildren(): void\n    {\n        echo __METHOD__ . \"(\".$this->getDepth().\")\\n\";\n        parent::endChildren();\n    }\n}\n$p = 0;\n$it = new RecursiveArrayIteratorIterator(new MyRecursiveArrayIterator(array(\"a\", array(\"ba\", array(\"bba\", \"bbb\"), array(array(\"bcaa\"), array(\"bcba\"))), array(\"ca\"), \"d\")), 2);\nforeach($it as $k=>$v)\n{\n    if (is_array($v)) $v = join('',$v);\n    echo \"$k=>$v\\n\";\n    if ($p++ == 5)\n    {\n        echo \"===BREAK===\\n\";\n        break;\n    }\n}\necho \"===FOREND===\\n\";\n$it->rewind();\necho \"===CHECK===\\n\";\nvar_dump($it->valid());\nvar_dump($it->current() == \"a\");\n?>")).toMatchSnapshot();
  });
});
