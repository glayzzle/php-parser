// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/closure_061.phpt
  it("Rebinding of ::getClosure()s", function () {
    expect(parser.parseCode("<?php\nuse SplDoublyLinkedList as DLL;\nfunction func($arg) { }\nclass Cls {\n    public function method() {}\n    public static function staticMethod($arg) {}\n}\nclass ClsChild extends Cls {}\nclass ClsUnrelated {}\n/* Format: [Function, [Obj, Scope]] */\n$tests = [\n    ['func', [\n        [null,         null],\n        [new Cls,      null],\n        [new Cls,      'Cls'],\n        [null,         'Cls'],\n        [null,         'stdClass'],\n        [new stdClass, null],\n    ]],\n    ['strlen', [\n        [null,         null],\n        [new Cls,      null],\n        [new Cls,      'Cls'],\n        [null,         'Cls'],\n        [null,         'stdClass'],\n        [new stdClass, null],\n    ]],\n    [['Cls', 'staticMethod'], [\n        [null,   'Cls'],\n        [new Cls, null],\n        [new Cls, 'Cls'],\n        [null,    null],\n        [null,    'ClsChild'],\n        [null,    'ClsUnrelated'],\n    ]],\n    [[new Cls, 'method'], [\n        [null,             'Cls'],\n        [new Cls,          'Cls'],\n        [new ClsChild,     'Cls'],\n        [new ClsUnrelated, 'Cls'],\n        [new Cls,          null],\n        [new Cls,          'ClsUnrelated'],\n        [new Cls,          'ClsChild'],\n    ]],\n    [[new DLL, 'count'], [\n        [new DLL, DLL::class],\n        [new SplStack, DLL::class],\n        [new ClsUnrelated, DLL::class],\n        [null, null],\n        [null, DLL::class],\n        [new DLL, null],\n        [new DLL, ClsUnrelated::class],\n    ]],\n    [function() {}, [\n        [null,         null],\n        [new Cls,      null],\n        [new Cls,      'Cls'],\n        [null,         'Cls'],\n        [null,         'stdClass'],\n        [new stdClass, null],\n    ]],\n];\nset_error_handler(function($errno, $errstr) {\n    echo \"$errstr\\n\\n\";\n});\nforeach ($tests as list($fn, $bindings)) {\n    if (is_array($fn)) {\n        $r = new ReflectionMethod($fn[0], $fn[1]);\n        $c = $r->getClosure(is_object($fn[0]) ? $fn[0] : null);\n        $fnStr = is_object($fn[0]) ? \"(new \" . get_class($fn[0]) . \")->$fn[1]\" : \"$fn[0]::$fn[1]\";\n    } else {\n        $c = (new ReflectionFunction($fn))->getClosure();\n        $fnStr = $fn;\n    }\n    if ($fn instanceof Closure) {\n        $fnStr = \"(function() {})\";\n    }\n    echo \"$fnStr()\\n\" . str_repeat('-', strlen($fnStr) + 2), \"\\n\\n\";\n    foreach ($bindings as list($obj, $scope)) {\n        $objStr = $obj ? \"new \" . get_class($obj) : \"null\";\n        $scopeStr = $scope ? \"$scope::class\" : \"null\";\n        echo \"bindTo($objStr, $scopeStr):\\n\";\n        $ret = $c->bindTo($obj, $scope);\n        if ($ret !== null) {\n            echo \"Success!\\n\\n\";\n        }\n    }\n}\n?>")).toMatchSnapshot();
  });
});
