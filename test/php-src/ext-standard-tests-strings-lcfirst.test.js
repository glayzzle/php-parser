// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/lcfirst.phpt
  it("lcfirst() function", function () {
    expect(parser.parseCode("<?php\n/* Make a string's first character uppercase */\necho \"#### Basic and Various operations ####\\n\";\n$str_array = array(\n            \"TesTing lcfirst.\",\n            \"1.testing lcfirst\",\n            \"HELLO wORLD\",\n            'HELLO wORLD',\n                    \"\\0\",\t\t// Null\n                    \"\\x00\",\t\t// Hex Null\n                    \"\\x000\",\n                    \"abcd\",\t\t// double quoted string\n                    'xyz',\t\t// single quoted string\n                    \"-3\",\n                    -3,\n                    '-3.344',\n                    -3.344,\n                    \"NULL\",\n                    \"0\",\n                    0,\n                    TRUE,\t\t// bool type\n                    \"TRUE\",\n                    \"1\",\n                    1,\n                    1.234444,\n                    FALSE,\n                    \"FALSE\",\n                    \" \",\n                    \"     \",\n                    'b',\t\t// single char\n                    '\\t',\t\t// escape sequences\n                    \"\\t\",\n                    \"12\",\n                    \"12twelve\",\t\t// int + string\n              );\n/* loop to test working of lcfirst with different values */\nforeach ($str_array as $string) {\n  var_dump( lcfirst($string) );\n}\necho \"\\n#### Testing miscellaneous inputs ####\\n\";\necho \"\\n--- Testing lowercamelcase action call example ---\\n\";\nclass Setter {\n    protected $vars = array('partnerName' => false);\n    public function __call($m, $v) {\n        if (stristr($m, 'set')) {\n            $action = lcfirst(substr($m, 3));\n            $this->$action = $v[0];\n        }\n    }\n    public function __set($key, $value) {\n        if (array_key_exists($key, $this->vars)) {\n            $this->vars[$key] = $value;\n        }\n    }\n    public function __get($key) {\n        if (array_key_exists($key, $this->vars)) {\n            return $this->vars[$key];\n        }\n    }\n}\n$class = new Setter();\n$class->setPartnerName('partnerName');\nvar_dump($class->partnerName);\necho \"\\n--- Testing objects ---\\n\";\n/* we get \"Recoverable fatal error: saying Object of class could not be converted\n        to string\" by default when an object is passed instead of string:\nThe error can be  avoided by choosing the __toString magix method as follows: */\nclass stringObject {\n  function __toString() {\n    return \"Hello world\";\n  }\n}\n$obj_string = new stringObject;\nvar_dump(lcfirst(\"$obj_string\"));\necho \"\\n--- Testing a longer and heredoc string ---\\n\";\n$string = <<<EOD\nAbcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\n@#$%^&**&^%$#@!~:())))((((&&&**%$###@@@!!!~~~~@###$%^&*\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789\nEOD;\nvar_dump(lcfirst($string));\necho \"\\n--- Testing a heredoc null string ---\\n\";\n$str = <<<EOD\nEOD;\nvar_dump(lcfirst($str));\necho \"\\n--- Testing simple and complex syntax strings ---\\n\";\n$str = 'world';\n/* Simple syntax */\nvar_dump(lcfirst(\"$str\"));\nvar_dump(lcfirst(\"$str'S\"));\nvar_dump(lcfirst(\"$strS\"));\n/* String with curly braces, complex syntax */\nvar_dump(lcfirst(\"${str}S\"));\nvar_dump(lcfirst(\"{$str}S\"));\necho \"\\n--- Nested lcfirst() ---\\n\";\nvar_dump(lcfirst(lcfirst(\"hello\")));\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
