// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/attributes/006_filter.phpt
  it("Attributes can be filtered by name and base type.", function () {
    expect(parser.parseCode("<?php\n$ref = new \\ReflectionFunction(#[A1] #[A2] function () { });\n$attr = $ref->getAttributes(A3::class);\nvar_dump(count($attr));\n$ref = new \\ReflectionFunction(#[A1] #[A2] function () { });\n$attr = $ref->getAttributes(A2::class);\nvar_dump(count($attr), $attr[0]->getName());\n$ref = new \\ReflectionFunction(#[A1] #[A2] #[A2] function () { });\n$attr = $ref->getAttributes(A2::class);\nvar_dump(count($attr), $attr[0]->getName(), $attr[1]->getName());\necho \"\\n\";\ninterface Base { }\nclass A1 implements Base { }\nclass A2 implements Base { }\nclass A3 extends A2 { }\n$ref = new \\ReflectionFunction(#[A1] #[A2] #[A5] function () { });\n$attr = $ref->getAttributes(\\stdClass::class, \\ReflectionAttribute::IS_INSTANCEOF);\nvar_dump(count($attr));\nprint_r(array_map(fn ($a) => $a->getName(), $attr));\n$ref = new \\ReflectionFunction(#[A1] #[A2] function () { });\n$attr = $ref->getAttributes(A1::class, \\ReflectionAttribute::IS_INSTANCEOF);\nvar_dump(count($attr));\nprint_r(array_map(fn ($a) => $a->getName(), $attr));\n$ref = new \\ReflectionFunction(#[A1] #[A2] function () { });\n$attr = $ref->getAttributes(Base::class, \\ReflectionAttribute::IS_INSTANCEOF);\nvar_dump(count($attr));\nprint_r(array_map(fn ($a) => $a->getName(), $attr));\n$ref = new \\ReflectionFunction(#[A1] #[A2] #[A3] function () { });\n$attr = $ref->getAttributes(A2::class, \\ReflectionAttribute::IS_INSTANCEOF);\nvar_dump(count($attr));\nprint_r(array_map(fn ($a) => $a->getName(), $attr));\n$ref = new \\ReflectionFunction(#[A1] #[A2] #[A3] function () { });\n$attr = $ref->getAttributes(Base::class, \\ReflectionAttribute::IS_INSTANCEOF);\nvar_dump(count($attr));\nprint_r(array_map(fn ($a) => $a->getName(), $attr));\necho \"\\n\";\n$ref = new \\ReflectionFunction(function () { });\ntry {\n    $ref->getAttributes(A1::class, 3);\n} catch (\\Error $e) {\n    var_dump('ERROR 1', $e->getMessage());\n}\n$ref = new \\ReflectionFunction(function () { });\ntry {\n    $ref->getAttributes(SomeMissingClass::class, \\ReflectionAttribute::IS_INSTANCEOF);\n} catch (\\Error $e) {\n    var_dump('ERROR 2', $e->getMessage());\n}\n?>")).toMatchSnapshot();
  });
});
