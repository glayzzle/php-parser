// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gd/tests/imagecopyresampled_variation1.phpt
  it("Test for correct colors of imagecopyresampled() wrt. alpha", function () {
    expect(parser.parseCode("<?php\nconst EXP_RED = 66;\nconst EXP_GREEN = 66;\nconst EXP_BLUE = 133;\nconst EXP_ALPHA = 32;\n/* create the source image */\n$im = imagecreatetruecolor(10, 10);\nimagealphablending($im, false);\n$solid = imagecolorallocate($im, 0, 100, 150);\n$transparent = imagecolorallocatealpha($im, 200, 0, 100, 64);\n/* draw a checker pattern */\nfor ($i = 0; $i < imagesx($im); $i++) {\n    for ($j = 0; $j < imagesy($im); $j++) {\n        imagesetpixel($im, $i, $j, ($i%2 != $j%2 ? $solid : $transparent));\n    }\n}\n/* create the destination image */\n$copy = imagecreatetruecolor(5, 5);\nimagealphablending($copy, false);\nimagesavealpha($copy, true);\nimagecopyresampled($copy, $im, 0,0, 0,0, 5,5, 10, 10);\n/* assert all pixels have the same color */\n$color = imagecolorat($copy, 3, 3);\nfor ($i = 0; $i < imagesx($copy); $i++) {\n    for ($j = 0; $j < imagesy($copy); $j++) {\n        if (imagecolorat($copy, $i, $j) != $color) {\n            echo 'different pixel values', PHP_EOL;\n        }\n    }\n}\n/* assign actual component values */\n$red = ($color & 0xFF0000) >> 16;\n$green = ($color & 0x00FF00) >> 8;\n$blue = ($color & 0x0000FF);\n$alpha = ($color & 0x7F000000) >> 24;\n/* test for expected component values */\nif (!($red >= EXP_RED - 1 && $red <= EXP_RED + 1)) {\n    printf(\"red: expected roughly %d, got %d\\n\", EXP_RED, $red);\n}\nif (!($green >= EXP_GREEN - 1 && $green <= EXP_GREEN + 1)) {\n    printf(\"green: expected roughly %d, got %d\\n\", EXP_GREEN, $green);\n}\nif (!($blue >= EXP_BLUE - 1 && $blue <= EXP_BLUE + 1)) {\n    printf(\"blue: expected roughly %d, got %d\\n\", EXP_BLUE, $blue);\n}\nif (!($alpha >= EXP_ALPHA - 1 && $alpha <= EXP_ALPHA + 1)) {\n    printf(\"alpha: expected roughly %d, got %d\\n\", EXP_ALPHA, $alpha);\n}\nimagedestroy($copy);\nimagedestroy($im);\necho 'DONE';\n?>")).toMatchSnapshot();
  });
});
