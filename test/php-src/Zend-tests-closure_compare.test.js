// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/closure_compare.phpt
  it("Closure comparison", function () {
    expect(parser.parseCode("<?php\nfunction foo() {\n    static $var;\n}\n$closures[0] = Closure::fromCallable('foo');\n$closures[1] = Closure::fromCallable('foo');\nprintf(\"foo == foo: %s\\n\", $closures[0] == $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable('strlen');\n$closures[1] = Closure::fromCallable('strlen');\nprintf(\"strlen == strlen: %s\\n\", $closures[0] == $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable('strlen');\n$closures[1] = Closure::fromCallable('strrev');\nprintf(\"strlen != strrev: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\ntrait MethodTrait {\n    public function traitMethod(){}\n}\nclass Foo {\n    use MethodTrait {\n        MethodTrait::traitMethod as aliasMethod;\n    }\n    public function __call($method, $args) {\n    \n    }\n    public function exists() {}\n    public static function existsStatic() {}\n}\nclass Bar extends Foo {}\nclass Baz {\n    use MethodTrait;\n}\n$closures[0] = Closure::fromCallable([Foo::class, \"existsStatic\"]);\n$closures[1] = Closure::fromCallable([Bar::class, \"existsStatic\"]);\nprintf(\"foo::existsStatic != bar::existsStatic: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$foo = new Foo;\n$closures[0] = Closure::fromCallable([$foo, \"exists\"]);\n$closures[1] = $closures[0]->bindTo(new Foo);\nprintf(\"foo#0::exists != foo#1::exists: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$baz = new Baz;\n$closures[0] = Closure::fromCallable([$foo, \"traitMethod\"]);\n$closures[1] = Closure::fromCallable([$baz, \"traitMethod\"]);\nprintf(\"foo::traitMethod != baz::traitMethod: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable([$foo, \"traitMethod\"]);\n$closures[1] = Closure::fromCallable([$foo, \"aliasMethod\"]);\nprintf(\"foo::traitMethod != foo::aliasMethod: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable([$foo, \"exists\"]);\n$closures[1] = Closure::fromCallable([$foo, \"exists\"]);\nprintf(\"foo::exists == foo::exists: %s\\n\", $closures[0] == $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable([$foo, \"method\"]);\n$closures[1] = Closure::fromCallable([$foo, \"method\"]);\nprintf(\"foo::method == foo::method: %s\\n\", $closures[0] == $closures[1] ? \"OK\" : \"FAIL\");\n$closures[1] = $closures[1]->bindTo(new Bar);\nprintf(\"foo::method != bar::method: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$closures[0] = Closure::fromCallable([$foo, \"method\"]);\n$closures[1] = Closure::fromCallable([$foo, \"method2\"]);\nprintf(\"foo::method != foo::method2: %s\\n\", $closures[0] != $closures[1] ? \"OK\" : \"FAIL\");\n$closures[2] = Closure::fromCallable([$closures[0], \"__invoke\"]);\n$closures[3] = Closure::fromCallable([$closures[1], \"__invoke\"]);\nprintf(\"Closure[0]::invoke != Closure[1]::invoke: %s\\n\", $closures[2] != $closures[3] ? \"OK\" : \"FAIL\");\n$closures[2] = Closure::fromCallable([$closures[0], \"__invoke\"]);\n$closures[3] = Closure::fromCallable([$closures[0], \"__invoke\"]);\nprintf(\"Closure[0]::invoke == Closure[0]::invoke: %s\\n\", $closures[2] == $closures[3] ? \"OK\" : \"FAIL\");\n?>")).toMatchSnapshot();
  });
});
