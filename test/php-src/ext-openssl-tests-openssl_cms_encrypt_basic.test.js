// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/openssl_cms_encrypt_basic.phpt
  it("openssl_cms_encrypt() tests", function () {
    expect(parser.parseCode("<?php\n$infile = __DIR__ . \"/plain.txt\";\n$outfile = tempnam(sys_get_temp_dir(), \"cms_enc_basic\");\nif ($outfile === false)\n    die(\"failed to get a temporary filename!\");\n$outfile2 = $outfile . \".out\";\n$single_cert = \"file://\" . __DIR__ . \"/cert.crt\";\n$privkey = \"file://\" . __DIR__ . \"/private_rsa_1024.key\";\n$wrongkey = \"file://\" . __DIR__ . \"/private_rsa_2048.key\";\n$multi_certs = array($single_cert, $single_cert);\n$assoc_headers = array(\"To\" => \"test@test\", \"Subject\" => \"testing openssl_cms_encrypt()\");\n$headers = array(\"test@test\", \"testing openssl_cms_encrypt()\");\n$empty_headers = array();\n$wrong = \"wrong\";\n$empty = \"\";\n$cipher = OPENSSL_CIPHER_AES_128_CBC;\nvar_dump(openssl_cms_encrypt($infile, $outfile, $single_cert, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, openssl_x509_read($single_cert), $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_decrypt($outfile, $outfile2, $single_cert, $privkey));\nreadfile($outfile2);\nvar_dump(openssl_cms_encrypt($infile, $outfile, $single_cert, $assoc_headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, $single_cert, $empty_headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($wrong, $outfile, $single_cert, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($empty, $outfile, $single_cert, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $empty, $single_cert, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, $wrong, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, $empty, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, $multi_certs, $headers, cipher_algo: $cipher));\nvar_dump(openssl_cms_encrypt($infile, $outfile, array_map('openssl_x509_read', $multi_certs), $headers, cipher_algo: $cipher));\nif (file_exists($outfile)) {\n    echo \"true\\n\";\n    unlink($outfile);\n}\nif (file_exists($outfile2)) {\n    echo \"true\\n\";\n    unlink($outfile2);\n}\n?>")).toMatchSnapshot();
  });
});
