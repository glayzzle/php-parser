// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/iterator_041.phpt
  it("SPL: iterator_to_array() and exceptions", function () {
    expect(parser.parseCode("<?php\nclass MyArrayIterator extends ArrayIterator\n{\n    static protected $fail = 0;\n    public $state;\n    static function fail($state, $method)\n    {\n        if (self::$fail == $state)\n        {\n            throw new Exception(\"State $state: $method()\");\n        }\n    }\n    function __construct()\n    {\n        $this->state = MyArrayIterator::$fail;\n        self::fail(0, __FUNCTION__);\n        parent::__construct(array(1, 2));\n        self::fail(1, __FUNCTION__);\n    }\n    function rewind(): void\n    {\n        self::fail(2, __FUNCTION__);\n        parent::rewind();\n    }\n    function valid(): bool\n    {\n        self::fail(3, __FUNCTION__);\n        return parent::valid();\n    }\n    function current(): mixed\n    {\n        self::fail(4, __FUNCTION__);\n        return parent::current();\n    }\n    function key(): string|int|null\n    {\n        self::fail(5, __FUNCTION__);\n        return parent::key();\n    }\n    function next(): void\n    {\n        self::fail(6, __FUNCTION__);\n        parent::next();\n    }\n    function __destruct()\n    {\n//\t\tself::fail(7, __FUNCTION__);\n    }\n    static function test($func, $skip = null)\n    {\n        echo \"===$func===\\n\";\n        self::$fail = 0;\n        while(self::$fail < 10)\n        {\n            try\n            {\n                var_dump($func(new MyArrayIterator()));\n                break;\n            }\n            catch (Exception $e)\n            {\n                echo $e->getMessage() . \"\\n\";\n            }\n            if (isset($skip[self::$fail]))\n            {\n                self::$fail = $skip[self::$fail];\n            }\n            else\n            {\n                self::$fail++;\n            }\n        }\n    }\n}\nMyArrayIterator::test('iterator_to_array');\nMyArrayIterator::test('iterator_count', array(3 => 6));\n?>")).toMatchSnapshot();
  });
});
