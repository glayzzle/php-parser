// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_pad_variation6.phpt
  it("Test array_pad() function : usage variations - different arrays for 'input' argument", function () {
    expect(parser.parseCode("<?php\n/*\n* Passing different arrays to $input argument and testing whether\n* array_pad() behaves in an expected way with the other arguments passed to the function.\n* The $pad_size and $pad_value arguments passed are fixed values.\n*/\necho \"*** Testing array_pad() : Passing different arrays to \\$input argument ***\\n\";\n/* Different heredoc strings */\n// heredoc with blank line\n$blank_line = <<<EOT\nEOT;\n// heredoc with multiline string\n$multiline_string = <<<EOT\nhello world\nThe big brown fox jumped over;\nthe lazy dog\nThis is a double quoted string\nEOT;\n// heredoc with different whitespaces\n$diff_whitespaces = <<<EOT\nhello\\r world\\t\n1111\\t\\t != 2222\\v\\v\nheredoc\\ndouble quoted string. with\\vdifferent\\fwhite\\vspaces\nEOT;\n// heredoc with quoted strings and numeric values\n$numeric_string = <<<EOT\n11 < 12. 123 >22\n'single quoted string'\n\"double quoted string\"\n2222 != 1111.\\t 0000 = 0000\\n\nEOT;\n// different arrays to be passed to $input argument\n$inputs = array (\n/*1*/  array(1, 2), // with default keys and numeric values\n       array(1.1, 2.2), // with default keys & float values\n       array(false,true), // with default keys and boolean values\n       array(), // empty array\n/*5*/  array(NULL), // with NULL\n       array(\"a\\v\\f\", \"aaaa\\r\", \"b\\tbbb\", \"\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}\"),  // with double quoted strings\n       array('a\\v\\f', 'aaaa\\r', 'b\\tbbb', '\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}'),  // with single quoted strings\n       array(\"h1\" => $blank_line, \"h2\" => $multiline_string, \"h3\" => $diff_whitespaces, $numeric_string),  // with heredocs\n       // associative arrays\n/*9*/  array(1 => \"one\", 2 => \"two\", 3 => \"three\"),  // explicit numeric keys, string values\n       array(\"one\" => 1, \"two\" => 2, \"three\" => 3 ),  // string keys & numeric values\n       array( 1 => 10, 2 => 20, 4 => 40, 3 => 30),  // explicit numeric keys and numeric values\n       array( \"one\" => \"ten\", \"two\" => \"twenty\", \"three\" => \"thirty\"),  // string key/value\n       array(\"one\" => 1, 2 => \"two\", 4 => \"four\"),  //mixed\n       // associative array, containing null/empty/boolean values as key/value\n/*14*/ array(NULL => \"NULL\", null => \"null\", \"NULL\" => NULL, \"null\" => null),\n       array(true => \"true\", false => \"false\", \"false\" => false, \"true\" => true),\n       array(\"\" => \"emptyd\", '' => 'emptys', \"emptyd\" => \"\", 'emptys' => ''),\n       array(1 => '', 2 => \"\", 3 => NULL, 4 => null, 5 => false, 6 => true),\n       array('' => 1, \"\" => 2, NULL => 3, null => 4, false => 5, true => 6),\n       // array with repetitive keys\n/*19*/ array(\"One\" => 1, \"two\" => 2, \"One\" => 10, \"two\" => 20, \"three\" => 3)\n);\n// initialize the $pad_size and $pad_value arguments\n$pad_size = 6;\n$pad_value = \"HELLO\";\n// loop through each sub-array within $inputs to check the behavior of array_pad()\n$iterator = 1;\nforeach($inputs as $input) {\n  echo \"-- Iteration $iterator --\\n\";\n  var_dump( array_pad($input, $pad_size, $pad_value) );  // positive 'pad_size'\n  var_dump( array_pad($input, -$pad_size, $pad_value) );  // negative 'pad_size'\n  $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
