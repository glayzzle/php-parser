// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/grammar/semi_reserved_004.phpt
  it("Test semi-reserved words as static class properties", function () {
    expect(parser.parseCode("<?php\nclass Obj\n{\n    static $empty = 'empty';\n    static $callable = 'callable';\n    static $class = 'class';\n    static $trait = 'trait';\n    static $extends = 'extends';\n    static $implements = 'implements';\n    static $static = 'static';\n    static $abstract = 'abstract';\n    static $final = 'final';\n    static $public = 'public';\n    static $protected = 'protected';\n    static $private = 'private';\n    static $const = 'const';\n    static $enddeclare = 'enddeclare';\n    static $endfor = 'endfor';\n    static $endforeach = 'endforeach';\n    static $endif = 'endif';\n    static $endwhile = 'endwhile';\n    static $and = 'and';\n    static $global = 'global';\n    static $goto = 'goto';\n    static $instanceof = 'instanceof';\n    static $insteadof = 'insteadof';\n    static $interface = 'interface';\n    static $namespace = 'namespace';\n    static $new = 'new';\n    static $or = 'or';\n    static $xor = 'xor';\n    static $try = 'try';\n    static $use = 'use';\n    static $var = 'var';\n    static $exit = 'exit';\n    static $list = 'list';\n    static $clone = 'clone';\n    static $include = 'include';\n    static $include_once = 'include_once';\n    static $throw = 'throw';\n    static $array = 'array';\n    static $print = 'print';\n    static $echo = 'echo';\n    static $require = 'require';\n    static $require_once = 'require_once';\n    static $return = 'return';\n    static $else = 'else';\n    static $elseif = 'elseif';\n    static $default = 'default';\n    static $break = 'break';\n    static $continue = 'continue';\n    static $switch = 'switch';\n    static $yield = 'yield';\n    static $function = 'function';\n    static $fn = 'fn';\n    static $if = 'if';\n    static $endswitch = 'endswitch';\n    static $finally = 'finally';\n    static $for = 'for';\n    static $foreach = 'foreach';\n    static $declare = 'declare';\n    static $case = 'case';\n    static $do = 'do';\n    static $while = 'while';\n    static $as = 'as';\n    static $catch = 'catch';\n    static $die = 'die';\n    static $self = 'self';\n    static $parent = 'parent';\n    static $isset = 'isset';\n    static $unset = 'unset';\n    static $__CLASS__ = '__CLASS__';\n    static $__TRAIT__ = '__TRAIT__';\n    static $__FUNCTION__ = '__FUNCTION__';\n    static $__METHOD__ = '__METHOD__';\n    static $__LINE__ = '__LINE__';\n    static $__FILE__ = '__FILE__';\n    static $__DIR__ = '__DIR__';\n    static $__NAMESPACE__ = '__NAMESPACE__';\n    static $__halt_compiler = '__halt_compiler';\n}\necho Obj::$empty, PHP_EOL;\necho Obj::$callable, PHP_EOL;\necho Obj::$class, PHP_EOL;\necho Obj::$trait, PHP_EOL;\necho Obj::$extends, PHP_EOL;\necho Obj::$implements, PHP_EOL;\necho Obj::$static, PHP_EOL;\necho Obj::$abstract, PHP_EOL;\necho Obj::$final, PHP_EOL;\necho Obj::$public, PHP_EOL;\necho Obj::$protected, PHP_EOL;\necho Obj::$private, PHP_EOL;\necho Obj::$const, PHP_EOL;\necho Obj::$enddeclare, PHP_EOL;\necho Obj::$endfor, PHP_EOL;\necho Obj::$endforeach, PHP_EOL;\necho Obj::$endif, PHP_EOL;\necho Obj::$endwhile, PHP_EOL;\necho Obj::$and, PHP_EOL;\necho Obj::$global, PHP_EOL;\necho Obj::$goto, PHP_EOL;\necho Obj::$instanceof, PHP_EOL;\necho Obj::$insteadof, PHP_EOL;\necho Obj::$interface, PHP_EOL;\necho Obj::$namespace, PHP_EOL;\necho Obj::$new, PHP_EOL;\necho Obj::$or, PHP_EOL;\necho Obj::$xor, PHP_EOL;\necho Obj::$try, PHP_EOL;\necho Obj::$use, PHP_EOL;\necho Obj::$var, PHP_EOL;\necho Obj::$exit, PHP_EOL;\necho Obj::$list, PHP_EOL;\necho Obj::$clone, PHP_EOL;\necho Obj::$include, PHP_EOL;\necho Obj::$include_once, PHP_EOL;\necho Obj::$throw, PHP_EOL;\necho Obj::$array, PHP_EOL;\necho Obj::$print, PHP_EOL;\necho Obj::$echo, PHP_EOL;\necho Obj::$require, PHP_EOL;\necho Obj::$require_once, PHP_EOL;\necho Obj::$return, PHP_EOL;\necho Obj::$else, PHP_EOL;\necho Obj::$elseif, PHP_EOL;\necho Obj::$default, PHP_EOL;\necho Obj::$break, PHP_EOL;\necho Obj::$continue, PHP_EOL;\necho Obj::$switch, PHP_EOL;\necho Obj::$yield, PHP_EOL;\necho Obj::$function, PHP_EOL;\necho Obj::$fn, PHP_EOL;\necho Obj::$if, PHP_EOL;\necho Obj::$endswitch, PHP_EOL;\necho Obj::$finally, PHP_EOL;\necho Obj::$for, PHP_EOL;\necho Obj::$foreach, PHP_EOL;\necho Obj::$declare, PHP_EOL;\necho Obj::$case, PHP_EOL;\necho Obj::$do, PHP_EOL;\necho Obj::$while, PHP_EOL;\necho Obj::$as, PHP_EOL;\necho Obj::$catch, PHP_EOL;\necho Obj::$die, PHP_EOL;\necho Obj::$self, PHP_EOL;\necho Obj::$parent, PHP_EOL;\necho Obj::$isset, PHP_EOL;\necho Obj::$unset, PHP_EOL;\necho Obj::$__CLASS__, PHP_EOL;\necho Obj::$__TRAIT__, PHP_EOL;\necho Obj::$__FUNCTION__, PHP_EOL;\necho Obj::$__METHOD__, PHP_EOL;\necho Obj::$__LINE__, PHP_EOL;\necho Obj::$__FILE__, PHP_EOL;\necho Obj::$__DIR__, PHP_EOL;\necho Obj::$__NAMESPACE__, PHP_EOL;\necho Obj::$__halt_compiler, PHP_EOL;\necho \"\\nDone\\n\";\n?>")).toMatchSnapshot();
  });
});
