// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/ecc.phpt
  it("openssl_*() with OPENSSL_KEYTYPE_EC", function () {
    expect(parser.parseCode("<?php\n$config =  __DIR__ . DIRECTORY_SEPARATOR . 'openssl.cnf';\n$args = array(\n    \"curve_name\" => \"secp384r1\",\n    \"private_key_type\" => OPENSSL_KEYTYPE_EC,\n    \"config\" => $config,\n);\necho \"Testing openssl_pkey_new\\n\";\n$key1 = openssl_pkey_new($args);\nvar_dump($key1);\n$argsFailed = array(\n    \"curve_name\" => \"invalid_cuve_name\",\n    \"private_key_type\" => OPENSSL_KEYTYPE_EC,\n    \"config\" => $config,\n);\n$keyFailed = openssl_pkey_new($argsFailed);\nvar_dump($keyFailed);\n$d1 = openssl_pkey_get_details($key1);\nvar_dump($d1[\"bits\"]);\nvar_dump(strlen($d1[\"key\"]));\nvar_dump($d1[\"ec\"][\"curve_name\"]);\nvar_dump($d1[\"type\"] == OPENSSL_KEYTYPE_EC);\n$key2 = openssl_pkey_new($d1);\nvar_dump($key2);\n$d2 = openssl_pkey_get_details($key2);\n// Compare array\nvar_dump($d1 === $d2);\n// Check that the public key info is computed from the private key if it is missing.\n$d1_priv = $d1;\nunset($d1_priv[\"ec\"][\"x\"]);\nunset($d1_priv[\"ec\"][\"y\"]);\n$key3 = openssl_pkey_new($d1_priv);\nvar_dump($key3);\n$d3 = openssl_pkey_get_details($key3);\nvar_dump($d1 === $d3);\n$dn = array(\n    \"countryName\" => \"BR\",\n    \"stateOrProvinceName\" => \"Rio Grande do Sul\",\n    \"localityName\" => \"Porto Alegre\",\n    \"commonName\" => \"Henrique do N. Angelo\",\n    \"emailAddress\" => \"hnangelo@php.net\"\n);\n// openssl_csr_new creates a new public key pair if the key argument is null\necho \"Testing openssl_csr_new with key generation\\n\";\n$keyGenerate = null;\nvar_dump($keyGenerate);\n$csr = openssl_csr_new($dn, $keyGenerate, $args);\nvar_dump($keyGenerate);\n$args[\"digest_alg\"] = \"sha1\";\necho \"Testing openssl_csr_new with existing ecc key\\n\";\n$csr = openssl_csr_new($dn, $key1, $args);\nvar_dump($csr);\n$pubkey1 = openssl_pkey_get_details(openssl_csr_get_public_key($csr));\nvar_dump(isset($pubkey1[\"ec\"][\"priv_key\"]));\nunset($d1[\"ec\"][\"priv_key\"]);\nvar_dump(array_diff($d1[\"ec\"], $pubkey1[\"ec\"]));\n$x509 = openssl_csr_sign($csr, null, $key1, 365, $args);\nvar_dump($x509);\necho \"Testing openssl_x509_check_private_key\\n\";\nvar_dump(openssl_x509_check_private_key($x509, $key1));\n$key3 = openssl_pkey_new($args);\nvar_dump(openssl_x509_check_private_key($x509, $key3));\necho \"Testing openssl_get_curve_names\\n\";\n$curve_names = openssl_get_curve_names();\nvar_dump(is_array($curve_names));\nforeach ($curve_names as $curve_name) {\n    if (\"secp384r1\" === $curve_name) {\n        echo \"Found secp384r1 in curve names\\n\";\n    }\n}\n?>")).toMatchSnapshot();
  });
});
