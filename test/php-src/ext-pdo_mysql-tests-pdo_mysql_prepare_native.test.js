// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_prepare_native.phpt
  it("MySQL PDO->prepare(), native PS", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    function prepex($offset, &$db, $query, $input_params = null, $error_info = null, $suppress_warning = false) {\n        try {\n            if ($suppress_warning || (is_array($error_info) && isset($error_info['prepare'])))\n                $stmt = @$db->prepare($query);\n            else\n                $stmt = $db->prepare($query);\n            if (is_array($error_info) && isset($error_info['prepare'])) {\n                $tmp = $db->errorInfo();\n                if (isset($error_info['prepare']['sqlstate']) &&\n                    ($error_info['prepare']['sqlstate'] !== $tmp[0])) {\n                    printf(\"[%03d] prepare() - expecting SQLSTATE '%s' got '%s'\\n\",\n                        $offset, $error_info['prepare']['sqlstate'], $tmp[0]);\n                    return false;\n                }\n                if (isset($error_info['prepare']['mysql']) &&\n                    ($error_info['prepare']['mysql'] !== $tmp[1])) {\n                    printf(\"[%03d] prepare() - expecting MySQL Code '%s' got '%s'\\n\",\n                        $offset, $error_info['prepare']['mysql'], $tmp[0]);\n                    return false;\n                }\n                return false;\n            }\n            if (!is_object($stmt))\n                return false;\n            if (is_null($input_params))\n                $input_params = array();\n// 5.0.18, 5.1.14 @ 15\n// printf(\"[%03d]\\n\", $offset);\n            if ($suppress_warning || (is_array($error_info) && isset($error_info['execute'])))\n                $ret = @$stmt->execute($input_params);\n            else\n                $ret = $stmt->execute($input_params);\n            if (!is_bool($ret))\n                printf(\"[%03d] PDO::execute() should return a boolean value, got %s/%s\\n\",\n                    var_export($ret, true), $ret);\n            $tmp = $stmt->errorInfo();\n            if (isset($tmp[1]) && ($tmp[1] == 2030)) {\n                // Trying to hack around MySQL Server version dependent features\n                // 2030 This command is not supported in the prepared statement protocol yet\n                return false;\n            }\n            if (is_array($error_info) && isset($error_info['execute'])) {\n                if (isset($error_info['execute']['sqlstate']) &&\n                    ($error_info['execute']['sqlstate'] !== $tmp[0])) {\n                    printf(\"[%03d] execute() - expecting SQLSTATE '%s' got '%s'\\n\",\n                        $offset, $error_info['execute']['sqlstate'], $tmp[0]);\n                    return false;\n                }\n                if (isset($error_info['execute']['mysql']) &&\n                    ($error_info['execute']['mysql'] !== $tmp[1])) {\n                    printf(\"[%03d] execute() - expecting MySQL Code '%s' got '%s'\\n\",\n                        $offset, $error_info['execute']['mysql'], $tmp[0]);\n                    return false;\n                }\n                return false;\n            }\n        } catch (PDOException $e) {\n            printf(\"[%03d] %s, [%s} %s\\n\",\n                $offset, $e->getMessage(),\n                $db->errorCode(), implode(' ', $db->errorInfo()));\n            return false;\n        }\n        return $stmt;\n    }\n    try {\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn off emulated prepared statements\\n\");\n        try {\n            prepex(3, $db, '', [], ['prepare' => ['sqlstate' => '42000']]);\n        } catch (\\ValueError $e) {\n            echo $e->getMessage(), \\PHP_EOL;\n        }\n        // lets be fair and do the most simple SELECT first\n        $stmt = prepex(4, $db, 'SELECT 1 as \"one\"');\n        if (MySQLPDOTest::isPDOMySQLnd())\n            // native types - int\n            $expected = array('one' => 1);\n        else\n            // always strings, like STRINGIFY flag\n            $expected = array('one' => '1');\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        if ($row !== $expected) {\n            printf(\"[004a] Expecting %s got %s\\n\", var_export($expected, true), var_export($row, true));\n        }\n        prepex(5, $db, 'DROP TABLE IF EXISTS test');\n        prepex(6, $db, sprintf('CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        prepex(7, $db, \"INSERT INTO test(id, label) VALUES(1, ':placeholder')\");\n        $stmt = prepex(8, $db, 'SELECT label FROM test ORDER BY id ASC');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        prepex(9, $db, 'DELETE FROM test');\n        prepex(10, $db, 'INSERT INTO test(id, label) VALUES(1, :placeholder)',\n            array(':placeholder' => 'first row'));\n        prepex(11, $db, 'INSERT INTO test(id, label) VALUES(2, :placeholder)',\n            array(':placeholder' => 'second row'));\n        $stmt = prepex(12, $db, 'SELECT label FROM test ORDER BY id ASC');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // Is PDO fun?\n        $stmt = prepex(13, $db, 'SELECT label FROM test WHERE :placeholder > 1',\n            array(':placeholder' => 'id'));\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        for ($num_params = 2; $num_params < 100; $num_params++) {\n            $params = array(':placeholder' => 'a');\n            for ($i = 1; $i < $num_params; $i++) {\n                $params[str_repeat('a', $i)] = 'some data';\n            }\n            prepex(16, $db, 'SELECT id, label FROM test WHERE label > :placeholder',\n                $params, array('execute' => array('sqlstate' => 'HY093')));\n        }\n        $stmt = prepex(16, $db, 'SELECT id, label FROM test WHERE :placeholder IS NOT NULL',\n            array(':placeholder' => 1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n            printf(\"[017] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows\\n\", $tmp);\n        $stmt = prepex(18, $db, 'SELECT id, label FROM test WHERE :placeholder IS NULL',\n            array(':placeholder' => 1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 0)\n            printf(\"[019] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows\\n\", $tmp);\n        prepex(20, $db, 'DROP TABLE IF EXISTS test');\n        prepex(21, $db, 'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM');\n        // Not every MySQL Server version supports this\n        if (is_object(prepex(22, $db, 'CREATE FULLTEXT INDEX idx1 ON test(label)', null, null, true))) {\n            prepex(23, $db, 'INSERT INTO test(id, label) VALUES (1, :placeholder)',\n                array(':placeholder' => 'MySQL is the best database in the world!'));\n            prepex(24, $db, 'INSERT INTO test(id, label) VALUES (2, :placeholder)',\n                array(':placeholder' => 'If I have the freedom to choose, I would always go again for the MySQL Server'));\n            $stmt = prepex(25, $db, 'SELECT id, label FROM test WHERE MATCH label AGAINST (:placeholder)',\n                array(':placeholder' => 'mysql'), null, true);\n            if (is_object($stmt)) {\n                /*\n                Lets ignore this\n                if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n                    printf(\"[033] Expecting two rows, got %d rows\\n\", $tmp);\n                */\n                $stmt = prepex(26, $db, 'SELECT id, label FROM test ORDER BY id ASC');\n                if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n                    printf(\"[027] Expecting two rows, got %d rows\\n\", $tmp);\n                if ($tmp[0]['label'] !== 'MySQL is the best database in the world!') {\n                    printf(\"[028] INSERT seems to have failed, dumping data, check manually\\n\");\n                    var_dump($tmp);\n                }\n            }\n        }\n        $db->exec('DELETE FROM test');\n        $db->exec(\"INSERT INTO test(id, label) VALUES (1, 'row1')\");\n        $db->exec(\"INSERT INTO test(id, label) VALUES (2, 'row2')\");\n        $sql = sprintf(\"SELECT id, label FROM test WHERE (label LIKE %s) AND (id = :placeholder)\",\n            $db->quote('%ro%'));\n        $stmt = prepex(29, $db, $sql,\tarray('placeholder' => -1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 0)\n                printf(\"[030] Expecting zero rows, got %d rows\\n\", $tmp);\n        $sql = sprintf(\"SELECT id, label FROM test WHERE  (id = :placeholder) OR (label LIKE %s)\",\n            $db->quote('%go%'));\n        $stmt = prepex(31, $db, $sql,\tarray('placeholder' => 1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 1)\n                printf(\"[032] Expecting one row, got %d rows\\n\", $tmp);\n        // and now, the same with anonymous placeholders...\n        prepex(33, $db, 'DROP TABLE IF EXISTS test');\n        prepex(34, $db, sprintf('CREATE TABLE test(id INT, label CHAR(255)) ENGINE=%s', PDO_MYSQL_TEST_ENGINE));\n        prepex(35, $db, \"INSERT INTO test(id, label) VALUES(1, '?')\");\n        $stmt = prepex(36, $db, 'SELECT label FROM test');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        prepex(37, $db, 'DELETE FROM test');\n        prepex(38, $db, 'INSERT INTO test(id, label) VALUES(1, ?)',\n            array('first row'));\n        prepex(39, $db, 'INSERT INTO test(id, label) VALUES(2, ?)',\n            array('second row'));\n        $stmt = prepex(40, $db, 'SELECT label FROM test');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        // Is PDO fun?\n        prepex(40, $db, 'SELECT label FROM test WHERE ? > 1',\n            array('id'));\n        prepex(41, $db, 'SELECT ? FROM test WHERE id > 1',\n            array('id'));\n        prepex(42, $db, 'SELECT ? FROM test WHERE ? > ?',\n            array('id', 'label', 'value'));\n        for ($num_params = 2; $num_params < 100; $num_params++) {\n            $params = array('a');\n            for ($i = 1; $i < $num_params; $i++) {\n                $params[] = 'some data';\n            }\n            prepex(43, $db, 'SELECT id, label FROM test WHERE label > ?',\n                $params, array('execute' => array('sqlstate' => 'HY093')));\n        }\n        prepex(44, $db, 'DELETE FROM test');\n        prepex(45, $db, 'INSERT INTO test(id, label) VALUES (1, ?), (2, ?)',\n            array('row', 'row'));\n        $stmt = prepex(46, $db, 'SELECT id, label FROM test ORDER BY id');\n        $tmp = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        $exp = array(\n            0 => array(\n                \"id\"  => \"1\",\n                \"label\" => \"row\"\n            ),\n            1 => array(\n                \"id\" => \"2\",\n                \"label\" => \"row\"\n            ),\n        );\n        if (MySQLPDOTest::isPDOMySQLnd()) {\n            // mysqlnd returns native types\n            $exp[0]['id'] = 1;\n            $exp[1]['id'] = 2;\n        }\n        if ($tmp !== $exp) {\n            printf(\"[064] Results seem wrong. Please check dumps manually.\\n\");\n            var_dump($exp);\n            var_dump($tmp);\n        }\n        $stmt = prepex(47, $db, 'SELECT id, label FROM test WHERE ? IS NOT NULL',\n            array(1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n            printf(\"[048] '1' IS NOT NULL evaluates to true, expecting two rows, got %d rows\\n\", $tmp);\n        $stmt = prepex(49, $db, 'SELECT id, label FROM test WHERE ? IS NULL',\n            array(1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 0)\n            printf(\"[050] '1' IS NOT NULL evaluates to true, expecting zero rows, got %d rows\\n\", $tmp);\n        prepex(51, $db, 'DROP TABLE IF EXISTS test');\n        prepex(52, $db, 'CREATE TABLE test(id INT, label CHAR(255)) ENGINE=MyISAM');\n        if (is_object(prepex(53, $db, 'CREATE FULLTEXT INDEX idx1 ON test(label)', null, null, true))) {\n            prepex(54, $db, 'INSERT INTO test(id, label) VALUES (1, ?)',\n                array('MySQL is the best database in the world!'));\n            prepex(55, $db, 'INSERT INTO test(id, label) VALUES (1, ?)',\n                array('If I have the freedom to choose, I would always go again for the MySQL Server'));\n            $stmt = prepex(56, $db, 'SELECT id, label FROM test WHERE MATCH label AGAINST (?)',\n                array('mysql'), null, true);\n            /*\n            Lets ignore that\n            if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n                printf(\"[074] Expecting two rows, got %d rows\\n\", $tmp);\n            */\n        }\n        prepex(57, $db, 'DELETE FROM test');\n        prepex(58, $db, 'INSERT INTO test(id, label) VALUES (1, ?), (2, ?)',\n            array('row1', 'row2'));\n        /*\n        TODO enable after fix\n        $stmt = prepex(37, $db, 'SELECT id, label FROM \\'test WHERE MATCH label AGAINST (:placeholder)',\n            array(':placeholder' => 'row'),\n            array('execute' => array('sqlstate' => '42000', 'mysql' => 1064)));\n        */\n        $stmt = prepex(59, $db, 'SELECT id, label AS \"label\" FROM test WHERE label = ?',\n            array('row1'));\n        $tmp = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        $exp = array(\n            0 => array(\"id\" => \"1\", \"label\" => \"row1\")\n        );\n        if (MySQLPDOTest::isPDOMySQLnd()) {\n            // mysqlnd returns native types\n            $exp[0]['id'] = 1;\n        }\n        if ($tmp !== $exp) {\n            printf(\"[065] Results seem wrong. Please check dumps manually.\\n\");\n            var_dump($exp);\n            var_dump($tmp);\n        }\n        $sql = sprintf(\"SELECT id, label FROM test WHERE (label LIKE %s) AND (id = ?)\",\n            $db->quote('%ro%'));\n        $stmt = prepex(60, $db, $sql,\tarray(-1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 0)\n                printf(\"[061] Expecting zero rows, got %d rows\\n\", $tmp);\n        $sql = sprintf(\"SELECT id, label FROM test WHERE  (id = ?) OR (label LIKE %s)\",\n            $db->quote('%ro%'));\n        $stmt = prepex(61, $db, $sql,\tarray(1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 2)\n                printf(\"[062] Expecting two rows, got %d rows\\n\", $tmp);\n        $sql = \"SELECT id, label FROM test WHERE id = ? AND label = (SELECT label AS 'SELECT' FROM test WHERE id = ?)\";\n        $stmt = prepex(63, $db, $sql,\tarray(1, 1));\n        if (count(($tmp = $stmt->fetchAll(PDO::FETCH_ASSOC))) != 1)\n                printf(\"[064] Expecting one row, got %d rows\\n\", $tmp);\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
