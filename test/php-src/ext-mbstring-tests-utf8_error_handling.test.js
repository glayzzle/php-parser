// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/utf8_error_handling.phpt
  it("Confirm error handling for UTF-8 complies with WHATWG spec", function () {
    expect(parser.parseCode("<?php\n/* The WHATWG specifies not just how web browsers should handle _valid_\n * UTF-8 text, but how they should handle _invalid_ UTF-8 text (such\n * as how many error markers each invalid byte sequence should decode\n * to).\n * That specification is followed by the JavaScript Encoding API.\n *\n * The API documentation for mb_convert_encoding does not specify how\n * many error markers we will emit for each possible invalid byte\n * sequence, so we might as well comply with the WHATWG specification.\n *\n * Thanks to Martin AuswÃ¶ger for pointing this out... and another big\n * thanks for providing test cases!\n *\n * Ref: https://encoding.spec.whatwg.org/#utf-8-decoder\n */\nmb_substitute_character(0x25);\n$testCases = [\n  [\"\\x80\", \"%\"],\n  [\"\\xFF\", \"%\"],\n  [\"\\xC2\\x7F\", \"%\\x7F\"],\n  [\"\\xC2\\x80\", \"\\xC2\\x80\"],\n  [\"\\xDF\\xBF\", \"\\xDF\\xBF\"],\n  [\"\\xDF\\xC0\", \"%%\"],\n  [\"\\xE0\\xA0\\x7F\", \"%\\x7F\"],\n  [\"\\xE0\\xA0\\x80\", \"\\xE0\\xA0\\x80\"],\n  [\"\\xEF\\xBF\\xBF\", \"\\xEF\\xBF\\xBF\"],\n  [\"\\xEF\\xBF\\xC0\", \"%%\"],\n  [\"\\xF0\\x90\\x80\\x7F\", \"%\\x7F\"],\n  [\"\\xF0\\x90\\x80\\x80\", \"\\xF0\\x90\\x80\\x80\"],\n  [\"\\xF4\\x8F\\xBF\\xBF\", \"\\xF4\\x8F\\xBF\\xBF\"],\n  [\"\\xF4\\x8F\\xBF\\xC0\", \"%%\"],\n  [\"\\xFA\\x80\\x80\\x80\\x80\", \"%%%%%\"],\n  [\"\\xFB\\xBF\\xBF\\xBF\\xBF\", \"%%%%%\"],\n  [\"\\xFD\\x80\\x80\\x80\\x80\\x80\", \"%%%%%%\"],\n  [\"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\", \"%%%%%%\"]\n];\nforeach ($testCases as $testCase) {\n  $result = mb_convert_encoding($testCase[0], 'UTF-8', 'UTF-8');\n  if ($result !== $testCase[1]) {\n    die(\"Expected UTF-8 string \" . bin2hex($testCase[0]) . \" to convert to UTF-8 string \" . bin2hex($testCase[1]) . \"; got \" . bin2hex($result));\n  }\n}\necho \"All done!\\n\";\n?>")).toMatchSnapshot();
  });
});
