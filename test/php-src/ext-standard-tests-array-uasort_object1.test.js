// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/uasort_object1.phpt
  it("Test uasort() function : object functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing uasort() function with the array of objects\n * array of objects which has only one member variable & more than one member variables\n */\necho \"*** Testing uasort() : object functionality ***\\n\";\n// comparison function\nfunction simple_cmp($value1, $value2)\n{\n  if($value1 == $value2) {\n    return 0;\n  }\n  else if($value1 > $value2) {\n    return 1;\n  }\n  else\n    return -1;\n}\n// comparison function for SimpleClass2 objects which has more than one members\nfunction multiple_cmp($value1, $value2)\n{\n  if($value1->getValue() == $value2->getValue())\n    return 0;\n  else if($value1->getValue() > $value2->getValue())\n    return 1;\n  else\n    return -1;\n}\n// Simple class with single member variable\nclass SimpleClass1\n{\n  private $int_value;\n  public function __construct($value) {\n    $this->int_value = $value;\n  }\n}\n// Simple class with more than one member variables\nclass SimpleClass2\n{\n  private $int_value;\n  protected $float_value;\n  public $string_value;\n  public function __construct($int, $float, $str) {\n    $this->int_value = $int;\n    $this->float_value = $float;\n    $this->string_value = $str;\n  }\n  public function getValue() {\n    return $this->int_value;\n  }\n}\n// array of SimpleClass objects with only one member\n$array_arg = array(\n  0 => new SimpleClass1(10),\n  1 => new SimpleClass1(1),\n  2 => new SimpleClass1(100),\n  3 => new SimpleClass1(50)\n);\nvar_dump( uasort($array_arg, 'simple_cmp') );\nvar_dump($array_arg);\n// array of SimpleClass objects having more than one members\n$array_arg = array(\n  0 => new SimpleClass2(2, 3.4, \"mango\"),\n  1 => new SimpleClass2(10, 1.2, \"apple\"),\n  2 => new SimpleClass2(5, 2.5, \"orange\"),\n);\nvar_dump( uasort($array_arg, 'multiple_cmp') );\nvar_dump($array_arg);\necho \"Done\"\n?>")).toMatchSnapshot();
  });
});
