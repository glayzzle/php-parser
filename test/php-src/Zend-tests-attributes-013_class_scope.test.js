// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/attributes/013_class_scope.phpt
  it("Attributes make use of class scope.", function () {
    expect(parser.parseCode("<?php\n#[A1(self::class, self::FOO)]\nclass C1\n{\n    #[A1(self::class, self::FOO)]\n    private const FOO = 'foo';\n    #[A1(self::class, self::FOO)]\n    public $a;\n    #[A1(self::class, self::FOO)]\n    public function bar(#[A1(self::class, self::FOO)] $p) { }\n}\n$ref = new \\ReflectionClass(C1::class);\nprint_r($ref->getAttributes()[0]->getArguments());\nprint_r($ref->getReflectionConstant('FOO')->getAttributes()[0]->getArguments());\nprint_r($ref->getProperty('a')->getAttributes()[0]->getArguments());\nprint_r($ref->getMethod('bar')->getAttributes()[0]->getArguments());\nprint_r($ref->getMethod('bar')->getParameters()[0]->getAttributes()[0]->getArguments());\necho \"\\n\";\ntrait T1\n{\n    #[A1(self::class, self::FOO)]\n    public function foo() { }\n}\nclass C2\n{\n    use T1;\n    private const FOO = 'bar';\n}\n$ref = new \\ReflectionClass(C2::class);\nprint_r($ref->getMethod('foo')->getAttributes()[0]->getArguments());\n$ref = new \\ReflectionClass(T1::class);\n$attr = $ref->getMethod('foo')->getAttributes()[0];\ntry {\n    $attr->getArguments();\n} catch (\\Error $e) {\n    var_dump('ERROR 1', $e->getMessage());\n}\necho \"\\n\";\nclass C3\n{\n    private const FOO = 'foo';\n    public static function foo()\n    {\n        return new #[A1(self::class, self::FOO)] class() {\n            private const FOO = 'bar';\n            #[A1(self::class, self::FOO)]\n            public function bar() { }\n        };\n    }\n}\n$ref = new \\ReflectionObject(C3::foo());\n$args = $ref->getAttributes()[0]->getArguments();\nvar_dump($args[0] == $ref->getName(), $args[1]);\n$args = $ref->getMethod('bar')->getAttributes()[0]->getArguments();\nvar_dump($args[0] == $ref->getName(), $args[1]);\n?>")).toMatchSnapshot();
  });
});
