// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/phar/tests/phar_convert_repeated_b.phpt
  it("PharData::convertToZip|Tar|Phar() repeated (phardata_based archives)", function () {
    expect(parser.parseCode("<?php\n$fname = __DIR__ . '/' . basename(__FILE__, '.php') . '.zip';\necho \"=================== new PharData() ==================\\n\";\n$phar = new PharData($fname);\n$phar['a'] = 'a';\n$phar['b'] = 'b';\n$phar['c'] = 'c';\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToTar() =====================\\n\";\n$phar = $phar->convertToData(Phar::TAR);\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToZip() =====================\\n\";\n$phar = $phar->convertToData(Phar::ZIP, Phar::NONE, '.1.zip');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToPhar() ====================\\n\";\ntry {\n    $phar = $phar->convertToExecutable(Phar::PHAR);\n    var_dump($phar->isFileFormat(Phar::PHAR));\n    var_dump($phar->isFileFormat(Phar::TAR));\n    var_dump($phar->isFileFormat(Phar::ZIP));\n    var_dump(strlen($phar->getStub()));\n    var_dump($phar->getAlias());\n} catch(Exception $e) {\n    echo $e->getMessage().\"\\n\";\n}\necho \"================ convertToTar(GZ) ====================\\n\";\n$phar = $phar->convertToData(Phar::TAR, Phar::GZ, '.2.tar');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToPhar() ====================\\n\";\ntry {\n    $phar = $phar->convertToExecutable(Phar::PHAR);\n    var_dump($phar->isFileFormat(Phar::PHAR));\n    var_dump($phar->isFileFormat(Phar::TAR));\n    var_dump($phar->isFileFormat(Phar::ZIP));\n    var_dump(strlen($phar->getStub()));\n    var_dump($phar->getAlias());\n} catch(Exception $e) {\n    echo $e->getMessage().\"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
