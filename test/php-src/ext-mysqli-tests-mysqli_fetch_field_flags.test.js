// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_fetch_field_flags.phpt
  it("mysqli_fetch_field() - flags/field->flags", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n/* TODO: mysqli.c needs to export a few more constants - see all the defined() calls! */\n    $flags = array(\n        MYSQLI_NOT_NULL_FLAG => 'NOT_NULL',\n        MYSQLI_PRI_KEY_FLAG => 'PRI_KEY',\n        MYSQLI_UNIQUE_KEY_FLAG => 'UNIQUE_KEY',\n        MYSQLI_MULTIPLE_KEY_FLAG => 'MULTIPLE_KEY',\n        MYSQLI_BLOB_FLAG => 'BLOB',\n        MYSQLI_UNSIGNED_FLAG\t=> 'UNSIGNED',\n        MYSQLI_ZEROFILL_FLAG => 'ZEROFILL',\n        MYSQLI_AUTO_INCREMENT_FLAG => 'AUTO_INCREMENT',\n        MYSQLI_TIMESTAMP_FLAG\t=> 'TIMESTAMP',\n        MYSQLI_SET_FLAG\t=> 'SET',\n        MYSQLI_NUM_FLAG => 'NUM',\n        MYSQLI_PART_KEY_FLAG => 'PART_KEY',\n        // MYSQLI_GROUP_FLAG => 'MYSQLI_GROUP_FLAG' - internal usage only\n        (defined('MYSQLI_NO_DEFAULT_VALUE_FLAG') ? MYSQLI_NO_DEFAULT_VALUE_FLAG : 4096) => 'NO_DEFAULT_VALUE',\n        (defined('MYSQLI_BINARY_FLAG') ? MYSQLI_BINARY_FLAG : 128) => 'BINARY',\n        (defined('MYSQLI_ENUM_FLAG') ? MYSQLI_ENUM_FLAG : 256) => 'ENUM',\n        // MYSQLI_BINCMP_FLAG\n    );\n    // 5.1.24 / 6.0.4+\n    if (defined('MYSQLI_ON_UPDATE_NOW'))\n        $flags[MYSQLI_ON_UPDATE_NOW] = 'ON_UPDATE_NOW';\n    else\n        $flags[8192] = 'ON_UPDATE_NOW';\n    krsort($flags);\n    $columns = array(\n        'INT DEFAULT NULL' => 'NUM',\n        'INT NOT NULL' => 'NOT_NULL NO_DEFAULT_VALUE NUM',\n        'INT NOT NULL DEFAULT 1' => 'NOT_NULL NUM',\n        'INT UNSIGNED DEFAULT NULL' => 'UNSIGNED NUM',\n        'INT UNSIGNED NOT NULL'\t=> 'NOT_NULL UNSIGNED NO_DEFAULT_VALUE NUM',\n        'INT UNSIGNED NOT NULL DEFAULT 1' => 'NOT_NULL UNSIGNED NUM',\n        'INT UNSIGNED ZEROFILL DEFAULT NULL' => 'UNSIGNED ZEROFILL NUM',\n        'INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY' => 'NOT_NULL PRI_KEY UNSIGNED AUTO_INCREMENT NUM PART_KEY',\n        'CHAR(1) DEFAULT NULL'\t=> '',\n        'CHAR(1) NOT NULL' => 'NOT_NULL NO_DEFAULT_VALUE',\n        'VARBINARY(127) DEFAULT NULL' => 'BINARY',\n        'BLOB'\t=> 'BLOB BINARY',\n        'TINYBLOB'\t=> 'BLOB BINARY',\n        'MEDIUMBLOB'\t=> 'BLOB BINARY',\n        'LONGBLOB'\t=> 'BLOB BINARY',\n        'TEXT'\t=> 'BLOB',\n        'TINYTEXT'\t=> 'BLOB',\n        'MEDIUMTEXT'\t=> 'BLOB',\n        'LONGTEXT'\t=> 'BLOB',\n        'SET(\"one\", \"two\")'\t=> 'SET',\n        'SET(\"one\", \"two\") NOT NULL'\t=> 'NOT_NULL SET NO_DEFAULT_VALUE',\n        'SET(\"one\", \"two\") NOT NULL DEFAULT \"one\"'\t=> 'NOT_NULL SET',\n        'ENUM(\"one\", \"two\")'\t=> 'ENUM',\n        'ENUM(\"one\", \"two\") NOT NULL' => 'NOT_NULL ENUM NO_DEFAULT_VALUE',\n        'ENUM(\"one\", \"two\") NOT NULL DEFAULT \"one\"' => 'NOT_NULL ENUM',\n        'TINYINT UNIQUE' => 'UNIQUE_KEY NUM PART_KEY',\n        'SMALLINT UNIQUE' => 'UNIQUE_KEY NUM PART_KEY',\n        'MEDIUMINT UNIQUE DEFAULT 1' => 'UNIQUE_KEY NUM PART_KEY',\n        'BIGINT UNSIGNED UNIQUE DEFAULT 100' => 'UNIQUE_KEY UNSIGNED NUM PART_KEY',\n        'BIT' => 'UNSIGNED',\n        'VARCHAR(2) NOT NULL PRIMARY KEY' => 'NOT_NULL PRI_KEY NO_DEFAULT_VALUE PART_KEY'\n    );\n    function checkFlags($reported_flags, $expected_flags, $flags) {\n        $found_flags = $unexpected_flags = '';\n        foreach ($flags as $code => $name) {\n            if ($reported_flags >= $code) {\n                $reported_flags -= $code;\n                $found_flags .= $name . ' ';\n                if (stristr($expected_flags, $name)) {\n                    $expected_flags = trim(str_ireplace($name, '', $expected_flags));\n                } else {\n                    $unexpected_flags .= $name . ' ';\n                }\n            }\n        }\n        return array($expected_flags, $unexpected_flags, $found_flags);\n    }\n    if (!$link = my_mysqli_connect($host, $user, $passwd, $db, $port, $socket))\n        printf(\"[001] [%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error());\n    foreach ($columns as $column_def => $expected_flags) {\n        if (!mysqli_query($link, 'DROP TABLE IF EXISTS test')) {\n            printf(\"[002] %s [%d] %s\\n\", $column_def,\n                mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        $create = sprintf('CREATE TABLE test(id INT, col1 %s)', $column_def);\n        if (!mysqli_query($link, $create)) {\n            // Server might not support it - skip\n            continue;\n        }\n        if (!$res = mysqli_query($link, 'SELECT * FROM test')) {\n            printf(\"[003] Can't select from table, %s [%d] %s\\n\", $column_def,\n                mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        $field = mysqli_fetch_field_direct($res, 1);\n        if (!is_object($field)) {\n            printf(\"[004] Fetching the meta data failed, %s [%d] %s\\n\", $column_def,\n                mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        if ($field->name != 'col1') {\n            printf(\"[005] Field information seems wrong, %s [%d] %s\\n\", $column_def,\n                mysqli_errno($link), mysqli_error($link));\n            continue;\n        }\n        /*\n        TODO\n        Unfortunately different server versions give you slightly different\n        results.The test does not yet fully reflect all server changes/bugs etc.\n        */\n        switch ($column_def) {\n            case 'INT UNSIGNED NOT NULL':\n            case 'INT NOT NULL':\n            case 'CHAR(1) NOT NULL':\n            case 'SET(\"one\", \"two\") NOT NULL':\n            case 'ENUM(\"one\", \"two\") NOT NULL':\n                $version = mysqli_get_server_version($link);\n                if ($version < 50000) {\n                    // TODO - check exact version!\n                    $expected_flags = trim(str_replace('NO_DEFAULT_VALUE', '', $expected_flags));\n                }\n                break;\n            case 'BIT':\n                $version = mysqli_get_server_version($link);\n                if (($version <= 50114 && $version > 50100) || ($version == 50200)) {\n                    // TODO - check exact version!\n                    $expected_flags = trim(str_replace('UNSIGNED', '', $expected_flags));\n                }\n            default:\n                break;\n        }\n        list($missing_flags, $unexpected_flags, $flags_found) = checkFlags($field->flags, $expected_flags, $flags);\n        if ($unexpected_flags) {\n            printf(\"[006] Found unexpected flags '%s' for %s, found '%s' with MySQL %s'\\n\",\n                $unexpected_flags, $column_def, $flags_found, mysqli_get_server_version($link));\n        }\n        if ($missing_flags) {\n            printf(\"[007] The flags '%s' have not been reported for %s, found '%s'\\n\",\n                $missing_flags, $column_def, $flags_found);\n            var_dump($create);\n            var_dump(mysqli_get_server_version($link));\n            die($missing_flags);\n        }\n        mysqli_free_result($res);\n    }\n    if (!mysqli_query($link, 'DROP TABLE IF EXISTS test')) {\n        printf(\"[008] %s [%d] %s\\n\", $column_def,\n            mysqli_errno($link), mysqli_error($link));\n    }\n    $column_def = array('col1 CHAR(1)', 'col2 CHAR(2)','INDEX idx_col1_col2(col1, col2)');\n    $expected_flags = array('col1' => 'MULTIPLE_KEY PART_KEY', 'col2' => 'PART_KEY');\n    $create = 'CREATE TABLE test(id INT, ';\n    foreach ($column_def as $k => $v) {\n        $create .= sprintf('%s, ', $v);\n    }\n    $create = sprintf('%s)', substr($create, 0, -2));\n    if (mysqli_query($link, $create)) {\n        if (!$res = mysqli_query($link, 'SELECT * FROM test')) {\n            printf(\"[009] Cannot run SELECT, [%d] %s\\n\",\n                mysqli_errno($link), mysqli_error($link));\n        }\n        // id column - skip it\n        $field = mysqli_fetch_field($res);\n        while ($field = mysqli_fetch_field($res)) {\n            if (!isset($expected_flags[$field->name])) {\n                printf(\"[010] Found unexpected field '%s'\\n\", $field->name);\n            }\n            list($missing_flags, $unexpected_flags, $flags_found) = checkFlags($field->flags, $expected_flags[$field->name], $flags);\n            if ($unexpected_flags)\n                printf(\"[011] Found unexpected flags '%s' for %s, found '%s'\\n\",\n                    $unexpected_flags, $field->name, $flags_found);\n            if ($missing_flags)\n                printf(\"[012] The flags '%s' have not been reported for %s, found '%s'\\n\",\n                    $missing_flags, $field->name, $flags_found);\n        }\n    }\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
