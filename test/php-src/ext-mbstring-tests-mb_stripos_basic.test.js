// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_stripos_basic.phpt
  it("Test mb_stripos() function : basic functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Test basic functionality of mb_stripos with ASCII and multibyte characters\n */\necho \"*** Testing mb_stripos() : basic functionality***\\n\";\nmb_internal_encoding('UTF-8');\n//ascii strings\n$ascii_haystacks = array(\n   'abc defabc   def',\n   'ABC DEFABC   DEF',\n   'Abc dEFaBC   Def',\n);\n$ascii_needles = array(\n   // 4 good ones\n   'DE',\n   'de',\n   'De',\n   'dE',\n   //flag a swap between good and bad\n   '!',\n   // 4 bad ones\n   'df',\n   'Df',\n   'dF',\n   'DF'\n);\n//greek strings in UTF-8\n$greek_lower = base64_decode('zrHOss6zzrTOtc62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4TPhc+Gz4fPiM+J');\n$greek_upper = base64_decode('zpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoc6jzqTOpc6mzqfOqM6p');\n$greek_mixed = base64_decode('zrHOss6TzpTOlc6WzpfOmM65zrrOu868zr3Ovs6fzqDOoc6jzqTOpc+Gz4fPiM+J');\n$greek_haystacks = array($greek_lower, $greek_upper, $greek_mixed);\n$greek_nlower = base64_decode('zrzOvc6+zr8=');\n$greek_nupper = base64_decode('zpzOnc6ezp8=');\n$greek_nmixed1 = base64_decode('zpzOnc6+zr8=');\n$greek_nmixed2 = base64_decode('zrzOvc6+zp8=');\n$greek_blower = base64_decode('zpzOns6f');\n$greek_bupper = base64_decode('zrzOvs6/');\n$greek_bmixed1 = base64_decode('zpzOvs6/');\n$greek_bmixed2 = base64_decode('zrzOvs6f');\n$greek_needles = array(\n   // 4 good ones\n   $greek_nlower, $greek_nupper, $greek_nmixed1, $greek_nmixed2,\n   '!', // used to flag a swap between good and bad\n   // 4 bad ones\n   $greek_blower, $greek_bupper, $greek_bmixed1, $greek_bmixed2,\n);\n// try the basic options\necho \"\\n -- ASCII Strings, needle should be found --\\n\";\nforeach ($ascii_needles as $needle) {\n   if ($needle == '!') {\n      echo \"\\n -- ASCII Strings, needle should not be found --\\n\";\n   }\n   else {\n      foreach ($ascii_haystacks as $haystack) {\n         var_dump(mb_stripos($haystack, $needle));\n      }\n   }\n}\necho \"\\n -- Greek Strings, needle should be found --\\n\";\nforeach ($greek_needles as $needle) {\n   if ($needle == '!') {\n      echo \"\\n -- ASCII Strings, needle should not be found --\\n\";\n   }\n   else {\n      foreach ($greek_haystacks as $haystack) {\n         var_dump(mb_stripos($haystack, $needle));\n      }\n   }\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
