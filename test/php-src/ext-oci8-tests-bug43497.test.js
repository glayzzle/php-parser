// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/bug43497.phpt
  it("Bug #43497 (OCI8 XML/getClobVal aka temporary LOBs leak UGA memory)", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__.'/connect.inc';\nfunction sessionid($c)  // determines and returns current session ID\n{\n    $query = \"select sid from v\\$session where audsid = userenv('sessionid')\";\n    $stmt = oci_parse($c, $query);\n    if (oci_execute($stmt, OCI_DEFAULT)) {\n        $row = oci_fetch($stmt);\n        return oci_result($stmt, 1);\n    }\n    return null;\n}\nfunction templobs($c, $sid)  // returns number of temporary LOBs\n{\n    $query = \"select abstract_lobs from v\\$temporary_lobs where sid = \" . $sid;\n    $stmt = oci_parse($c, $query);\n    if (oci_execute($stmt, OCI_DEFAULT)) {\n        $row = oci_fetch($stmt);\n        $val = oci_result($stmt, 1);\n        oci_free_statement($stmt);\n        return $val;\n    }\n    return null;\n}\n// Read all XML data using explicit LOB locator\nfunction readxmltab_ex($c)\n{\n    $stmt = oci_parse($c, \"select extract(xml, '/').getclobval() from bug43497_tab\");\n    $cntchk = 0;\n    if (oci_execute($stmt)) {\n        while ($result = oci_fetch_array($stmt, OCI_NUM)) {\n            $result[0]->free();   // cleanup properly\n            ++$cntchk;\n        }\n    }\n    echo \"Loop count check = $cntchk\\n\";\n}\n// Read all XML data using explicit LOB locator but without freeing the temp lobs\nfunction readxmltab_ex_nofree($c)\n{\n    $stmt = oci_parse($c, \"select extract(xml, '/').getclobval() from bug43497_tab\");\n    $cntchk = 0;\n    if (oci_execute($stmt)) {\n        while ($result = oci_fetch_array($stmt, OCI_NUM)) {\n            ++$cntchk;\n        }\n    }\n    echo \"Loop count check = $cntchk\\n\";\n}\n// Read all XML data using implicit LOB locator\nfunction readxmltab_im($c)\n{\n    $stmt = oci_parse($c, \"select extract(xml, '/').getclobval() from bug43497_tab\");\n    $cntchk = 0;\n    if (oci_execute($stmt)) {\n        while ($result = oci_fetch_array($stmt, OCI_NUM+OCI_RETURN_LOBS)) {\n            ++$cntchk;\n        }\n    }\n    echo \"Loop count check = $cntchk\\n\";\n}\nfunction createxmltab($c)  // create table w/ field of XML type\n{\n    @dropxmltab($c);\n    $stmt = oci_parse($c, \"create table bug43497_tab (id number primary key, xml xmltype)\");\n    oci_execute($stmt);\n}\nfunction dropxmltab($c)  // delete table\n{\n    $stmt = oci_parse($c, \"drop table bug43497_tab\");\n    oci_execute($stmt);\n}\nfunction fillxmltab($c)\n{\n    for ($id = 1; $id <= 100; $id++) {\n        // create an XML element string with random data\n        $s = \"<data>\";\n        for ($j = 0; $j < 128; $j++) {\n            $s .= rand();\n        }\n        $s .= \"</data>\\n\";\n        for ($j = 0; $j < 4; $j++) {\n            $s .= $s;\n        }\n        $data = \"<?xml version=\\\"1.0\\\"?><records>\" . $s . \"</records>\";\n        // insert XML data into database\n        $stmt = oci_parse($c, \"insert into bug43497_tab(id, xml) values (:id, sys.xmltype.createxml(:xml))\");\n        oci_bind_by_name($stmt, \":id\", $id);\n        $clob = oci_new_descriptor($c, OCI_D_LOB);\n        oci_bind_by_name($stmt, \":xml\", $clob, -1, OCI_B_CLOB);\n        $clob->writeTemporary($data);\n        oci_execute($stmt);\n        $clob->close();\n        $clob->free();\n    }\n}\n// Initialize\ncreatexmltab($c);\nfillxmltab($c);\n// Run Test\n$sid = sessionid($c);\necho \"Explicit LOB use\\n\";\nfor ($i = 1; $i <= 10; $i++) {\n    echo \"\\nRun              = \" . $i . \"\\n\";\n    echo \"Temporary LOBs   = \" . templobs($c, $sid) . \"\\n\";\n    readxmltab_ex($c);\n}\necho \"\\nImplicit LOB use\\n\";\nfor ($i = 1; $i <= 10; $i++) {\n    echo \"\\nRun              = \" . $i . \"\\n\";\n    echo \"Temporary LOBs   = \" . templobs($c, $sid) . \"\\n\";\n    readxmltab_im($c);\n}\necho \"\\nExplicit LOB with no free\\n\";\nfor ($i = 1; $i <= 10; $i++) {\n    echo \"\\nRun              = \" . $i . \"\\n\";\n    echo \"Temporary LOBs   = \" . templobs($c, $sid) . \"\\n\";\n    readxmltab_ex_nofree($c);\n}\n// Cleanup\ndropxmltab($c);\noci_close($c);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
