// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionClass_setStaticPropertyValue_001.phpt
  it("ReflectionClass::setStaticPropertyValue()", function () {
    expect(parser.parseCode("<?php\nclass A {\n    static private $privateOverridden = \"original private\";\n    static protected $protectedOverridden = \"original protected\";\n    static public $publicOverridden = \"original public\";\n}\nclass B extends A {\n    static private $privateOverridden = \"changed private\";\n    static protected $protectedOverridden = \"changed protected\";\n    static public $publicOverridden = \"changed public\";\n}\necho \"Set static values in A:\\n\";\n$rcA = new ReflectionClass('A');\n$rcA->setStaticPropertyValue(\"privateOverridden\", \"new value 1\");\n$rcA->setStaticPropertyValue(\"protectedOverridden\", \"new value 2\");\n$rcA->setStaticPropertyValue(\"publicOverridden\", \"new value 3\");\nprint_r($rcA->getStaticProperties());\necho \"\\nSet static values in B:\\n\";\n$rcB = new ReflectionClass('B');\n$rcB->setStaticPropertyValue(\"privateOverridden\", \"new value 4\");\n$rcB->setStaticPropertyValue(\"privateOverridden\", \"new value 5\");\n$rcB->setStaticPropertyValue(\"protectedOverridden\", \"new value 6\");\n$rcB->setStaticPropertyValue(\"publicOverridden\", \"new value 7\");\nprint_r($rcA->getStaticProperties());\nprint_r($rcB->getStaticProperties());\necho \"\\nSet non-existent values from A with no default value:\\n\";\ntry {\n    var_dump($rcA->setStaticPropertyValue(\"protectedDoesNotExist\", \"new value 8\"));\n    echo \"you should not see this\";\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    var_dump($rcA->setStaticPropertyValue(\"privateDoesNotExist\", \"new value 9\"));\n    echo \"you should not see this\";\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
