// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/007_basic.phpt
  it("Test fopen(), fclose() & feof() functions: basic functionality", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing basic operations of fopen() and fclose() functions ***\\n\";\n$modes = array(\n  \"w\",\n  \"wb\",\n  \"wt\",\n  \"w+\",\n  \"w+b\",\n  \"w+t\",\n  \"r\",\n  \"rb\",\n  \"rt\",\n  \"r+\",\n  \"r+b\",\n  \"r+t\",\n  \"a\",\n  \"ab\",\n  \"at\",\n  \"a+\",\n  \"a+t\",\n  \"a+b\"\n);\nfor( $i=0; $i<count($modes); $i++ ) {\n  echo \"\\n-- Iteration with mode '$modes[$i]' --\\n\";\n  $filename = __DIR__.\"/007_basic.tmp\";\n  // check fopen()\n  $handle = fopen($filename, $modes[$i]);\n  var_dump($handle );\n  var_dump( ftell($handle) );\n  var_dump( feof($handle) );\n  // check fclose()\n  var_dump( fclose($handle) );\n  var_dump( $handle );\n  // confirm the closure, using ftell() and feof()\n  try {\n    var_dump( ftell($handle) );\n  } catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n  try {\n    var_dump( feof($handle) );\n  } catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n}\n// remove the temp file\nunlink($filename);\n$x_modes = array(\n  \"x\",\n  \"xb\",\n  \"xt\",\n  \"x+\",\n  \"x+b\",\n  \"x+t\"\n);\nfor( $i=0; $i<count($x_modes); $i++ ) {\n  echo \"\\n-- Iteration with mode '$x_modes[$i]' --\\n\";\n  $handle = fopen($filename, $x_modes[$i]);\n  var_dump($handle );\n  var_dump( ftell($handle) );\n  var_dump( feof($handle) );\n  // check fclose()\n  var_dump( fclose($handle) );\n  var_dump( $handle );\n  // confirm the closure, using ftell() and feof()\n  try {\n    var_dump( ftell($handle) );\n  } catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n  try {\n    var_dump( feof($handle) );\n  } catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n  var_dump( $handle );\n  // remove the file\n  unlink( $filename );\n}\necho \"\\n*** Done ***\\n\";\n?>")).toMatchSnapshot();
  });
});
