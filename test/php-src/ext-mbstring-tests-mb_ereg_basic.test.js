// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_ereg_basic.phpt
  it("Test mb_ereg() function : basic functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Test basic functionality of mb_ereg\n */\necho \"*** Testing mb_ereg() : basic functionality ***\\n\";\nif(mb_regex_encoding('utf-8') == true) {\n    echo \"Regex encoding set to utf-8\\n\";\n} else {\n    echo \"Could not set regex encoding to utf-8\\n\";\n}\n$string_ascii = 'This is an English string. 0123456789.';\n$regex_ascii1 = '(.*is)+.*\\.[[:blank:]][0-9]{9}';\n$regex_ascii2 = '.*is+';\n$string_mb = base64_decode('5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZ44CCMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII=');\n$regex_mb1 = base64_decode('KOaXpeacrOiqnikuKj8oWzEtOV0rKQ==');\n$regex_mb2 = base64_decode('5LiW55WM');\necho \"\\n**-- ASCII String --**\\n\";\necho \"-- Without \\$regs argument--\\n\";\nvar_dump(mb_ereg($regex_ascii1, $string_ascii));\nvar_dump(mb_ereg($regex_ascii2, $string_ascii));\necho \"--With \\$regs argument --\\n\";\nvar_dump(mb_ereg($regex_ascii1, $string_ascii, $regs_ascii1));\nbase64_encode_var_dump($regs_ascii1);\nvar_dump(mb_ereg($regex_ascii2, $string_ascii, $regs_ascii2));\nbase64_encode_var_dump($regs_ascii2);\necho \"\\n**-- Multibyte String --**\\n\";\necho \"-- Without \\$regs argument --\\n\";\nvar_dump(mb_ereg($regex_mb1, $string_mb));\nvar_dump(mb_ereg($regex_mb2, $string_mb));\necho \"-- With \\$regs argument --\\n\";\nvar_dump(mb_ereg($regex_mb1, $string_mb, $regs_mb1));\nbase64_encode_var_dump($regs_mb1);\nvar_dump(mb_ereg($regex_mb2, $string_mb, $regs_mb2));\nvar_dump($regs_mb2);\necho \"Done\";\n/**\n * replicate a var dump of an array but outputted string values are base64 encoded\n *\n * @param array $regs\n */\nfunction base64_encode_var_dump($regs) {\n    if ($regs) {\n        echo \"array(\" . count($regs) . \") {\\n\";\n        foreach ($regs as $key => $value) {\n            echo \"  [$key]=>\\n  \";\n            if (is_string($value)) {\n                var_dump(base64_encode($value));\n            } else {\n                var_dump($value);\n            }\n        }\n        echo \"}\\n\";\n    } else {\n        echo \"NULL\\n\";\n    }\n}\n?>")).toMatchSnapshot();
  });
});
