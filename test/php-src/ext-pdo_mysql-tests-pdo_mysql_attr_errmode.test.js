// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_attr_errmode.phpt
  it("PDO::ATTR_ERRMODE", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    try {\n        $db->setAttribute(PDO::ATTR_ERRMODE, []);\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_ERRMODE, new stdClass());\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_ERRMODE, 'pdo');\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_ERRMODE, 1000);\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);\n    // no message for any PDO call but...\n    $db->query('THIS IS NOT VALID SQL');\n    // ... still messages for everything else\n    $code = $db->errorCode();\n    $info = $db->errorInfo();\n    if ($code != '42000')\n        printf(\"[005] Expecting SQL code 42000 got '%s'\\n\", $code);\n    if ($code !== $info[0])\n        printf(\"[006] Code and info should be identical, got errorCode() = %s, errorInfo()[0] = %s\\n\",\n            $code, $info[0]);\n    if ('' == $info[1])\n        printf(\"[007] Driver specific error code not set\\n\");\n    if ('' == $info[2])\n        printf(\"[008] Driver specific error message not set\\n\");\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\n    $db->query('THIS IS NOT VALID SQL');\n    $code = $db->errorCode();\n    $info = $db->errorInfo();\n    if ($code != '42000')\n        printf(\"[009] Expecting SQL code 42000 got '%s'\\n\", $code);\n    if ($code !== $info[0])\n        printf(\"[010] Code and info should be identical, got errorCode() = %s, errorInfo()[0] = %s\\n\",\n            $code, $info[0]);\n    if ('' == $info[1])\n        printf(\"[011] Driver specific error code not set\\n\");\n    if ('' == $info[2])\n        printf(\"[012] Driver specific error message not set\\n\");\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    try {\n        $line = __LINE__ + 1;\n        $db->query('THIS IS NOT VALID SQL');\n    } catch (PDOException $e) {\n        $code = $db->errorCode();\n        $info = $db->errorInfo();\n        if ($code != '42000')\n            printf(\"[013] Expecting SQL code 42000 got '%s'\\n\", $code);\n        if ($code !== $info[0])\n            printf(\"[014] Code and info should be identical, got errorCode() = %s, errorInfo()[0] = %s\\n\",\n                $code, $info[0]);\n        if ('' == $info[1])\n            printf(\"[015] Driver specific error code not set\\n\");\n        if ('' == $info[2])\n            printf(\"[016] Driver specific error message not set\\n\");\n        if ($e->getCode() !== $code)\n            printf(\"[017] Exception code '%s' differs from errorCode '%s'\\n\",\n                $e->getCode(), $code);\n        $msg = $e->getMessage();\n        foreach ($info as $k => $v) {\n            if (false === stristr($msg, (string)$v)) {\n                printf(\"[018] Cannot find all parts of the error info ('%s') in the exception message '%s'\\n\",\n                    $v, $msg);\n            }\n        }\n        if ($e->getLine() !== $line)\n            printf(\"[019] Exception has been thrown in line %d, exception object reports line %d\\n\",\n                $line, $e->getLine());\n        if ($e->getFile() !== __FILE__)\n            printf(\"[020] Exception has been thrown in file '%s', exception object reports file '%s'\\n\",\n                __FILE__, $e->getFile());\n    }\n    function my_handler($e) {\n        global $db, $line;\n        $code = $db->errorCode();\n        $info = $db->errorInfo();\n        if ($code != '42000')\n            printf(\"[021] Expecting SQL code 42000 got '%s'\\n\", $code);\n        if ($code !== $info[0])\n            printf(\"[022] Code and info should be identical, got errorCode() = %s, errorInfo()[0] = %s\\n\",\n                $code, $info[0]);\n        if ('' == $info[1])\n            printf(\"[023] Driver specific error code not set\\n\");\n        if ('' == $info[2])\n            printf(\"[024] Driver specific error message not set\\n\");\n        if ($e->getCode() !== $code)\n            printf(\"[025] Exception code '%s' differs from errorCode '%s'\\n\",\n                $e->getCode(), $code);\n        $msg = $e->getMessage();\n        foreach ($info as $k => $v) {\n            if (false === stristr($msg, (string)$v)) {\n                printf(\"[026] Cannot find all parts of the error info ('%s') in the exception message '%s'\\n\",\n                    $v, $msg);\n            }\n        }\n        if ($e->getLine() !== $line)\n            printf(\"[027] Exception has been thrown in line %d, exception object reports line %d\\n\",\n                $line, $e->getLine());\n        if ($e->getFile() !== __FILE__)\n            printf(\"[028] Exception has been thrown in file '%s', exception object reports file '%s'\\n\",\n                __FILE__, $e->getFile());\n        if (get_class($e) != 'PDOException')\n            printf(\"[029] Expecting PDO exception got exception of type '%s'\\n\", get_class($e));\n        print \"\\nend of execution\";\n    }\n    set_exception_handler('my_handler');\n    $line = __LINE__ + 1;\n    $db->query('THIS IS NOT VALID SQL');\n    print \"done!\\n\";\n?>")).toMatchSnapshot();
  });
});
