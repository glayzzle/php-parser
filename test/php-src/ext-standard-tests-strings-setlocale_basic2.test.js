// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/setlocale_basic2.phpt
  it("Test setlocale() function : basic functionality - set locale using an array", function () {
    expect(parser.parseCode("<?php\n/* Test the setlocale() when an array is provided as input containing list of locales */\nfunction list_system_locales() {\n  // start the buffering of next command to internal output buffer\n  ob_start();\n  // run the command 'locale -a' to fetch all locales available in the system\n  system('locale -a');\n  // get the contents from the internal output buffer\n  $all_locales = ob_get_contents();\n  // fflush and end the output buffering to internal output buffer\n  ob_end_clean();\n  $system_locales = explode(\"\\n\", $all_locales);\n  // return all the locale found in the system\n  return $system_locales;\n}\n/* Collect existing system locales and prepare a list of locales that can be used as\n   input to setlocale() */\necho \"*** Testing setlocale() with an array containing list of locales ***\\n\";\n//set of locales to be used\n$common_locales = array(\n  \"english_US\"=> \"en_US.utf8\",\n  \"english_AU\" => \"en_AU.utf8\",\n  \"korean_KR\" => \"ko_KR.utf8\",\n  \"Chinese_zh\" => \"zh_CN.utf8\",\n  \"germen_DE\" => \"de_DE.utf8\",\n  \"spanish_es\" => \"es_EC.utf8\",\n  \"french_FR\" => \"fr_FR.utf8\",\n  \"japanees_JP\" => \"ja_JP.utf8\",\n  \"greek_GR\" => \"el_GR.utf8\",\n  \"dutch_NL\" => \"nl_NL.utf8\"\n);\n//set of currency symbol according to above list of locales\n$currency_symbol = array(\n  \"en_US.utf8\" => \"USD\",\n  \"en_AU.utf8\" => \"AUD\",\n  \"ko_KR.utf8\" => \"KRW\",\n  \"zh_CN.utf8\" => \"CNY\",\n  \"de_DE.utf8\" => \"EUR\",\n  \"es_EC.utf8\" => \"USD\",\n  \"fr_FR.utf8\" => \"EUR\",\n  \"ja_JP.utf8\" => \"JPY\",\n  \"el_GR.utf8\" => \"EUR\",\n  \"nl_NL.utf8\" =>\"EUR\"\n);\n// gather all the locales installed in the system\n$all_system_locales = list_system_locales();\n// prepare the list of locales based on list of locales found in the system\n// and those known to this script ( as stored $common_locales) which can be\n// given as input to setlocale(), later verify the new locale setting by\n// checking the currency setting of the system(use localconv())\n$list_of_locales = array();\nforeach($common_locales as $value) {\n  if( in_array($value, $all_system_locales) ) {\n    $list_of_locales[] = $value;\n  }\n}\n// Now $list_of_locales array contains the locales that can be passed to\n// setlocale() function.\necho \"-- Testing setlocale() : 'category' argument as LC_ALL & 'locale' argument as an array --\\n\";\nif ( count($list_of_locales) > 0 ) {\n  // set locale to $list_of_locales\n  $new_locale = setlocale(LC_ALL, $list_of_locales);\n  // dump the current locale\n  var_dump($new_locale);\n  // check that new locale setting is effective\n  // use localeconv() to get the details of currently set locale\n  $locale_info = localeconv();\n  $new_currency = trim($locale_info['int_curr_symbol']);\n  echo \"Checking currency settings in the new locale, expected: \".$currency_symbol[$new_locale].\", Found: \".$new_currency.\"\\n\";\n  echo \"Test \";\n  if(trim($currency_symbol[$new_locale]) == $new_currency){\n    echo \"PASSED.\\n\";\n  } else {\n    echo \"FAILED.\\n\";\n  }\n} else {\n  echo \"Test FAILED.\\n\";\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
