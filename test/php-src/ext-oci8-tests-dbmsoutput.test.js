// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/dbmsoutput.phpt
  it("PL/SQL: dbms_output", function () {
    expect(parser.parseCode("<?php\nrequire(__DIR__.'/connect.inc');\n// Initialization\n$stmtarray = array(\n    \"create or replace procedure dbmsoutput_proc as\n      begin\n        dbms_output.put_line('Hello World!');\n      end;\",\n    \"create or replace type dorow as table of varchar2(4000)\",\n    \"create or replace function mydofetch return dorow pipelined is\n    line    varchar2(4000);\n    status  integer;\n    begin\n      loop\n        dbms_output.get_line(line, status);\n        exit when status = 1;\n        pipe row (line);\n      end loop;\n      return;\n    end;\"\n);\noci8_test_sql_execute($c, $stmtarray);\n// Run Test\n// Turn DBMS_OUTPUT on\nfunction setserveroutputon($c)\n{\n    $s = oci_parse($c, \"begin dbms_output.enable(null); end;\");\n    oci_execute($s);\n}\n// Create some output\nfunction createoutput($c, $prefix)\n{\n    $s = oci_parse($c, \"call dbms_output.put_line(:bv1 || ' ' || :bv2 || ' Hello, world! Lots and lots and ... of text')\");\n    oci_bind_by_name($s, \":bv1\", $i, -1, SQLT_INT);\n    oci_bind_by_name($s, \":bv2\", $prefix);\n    for ($i = 0; $i < 100; ++$i) {\n        oci_execute($s);\n    }\n}\n// Call dbms_output.get_line()\n// Returns an array of DBMS_OUTPUT lines, or false.\nfunction getdbmsoutput_do($c)\n{\n    $s = oci_parse($c, \"begin dbms_output.get_line(:ln, :st); end;\");\n    oci_bind_by_name($s, \":ln\", $ln, 100);\n    oci_bind_by_name($s, \":st\", $st, -1, SQLT_INT);\n    $res = [];\n    while (($succ = oci_execute($s)) && !$st) {\n        $res[] = $ln;  // append each line to the array\n    }\n    return $res;\n}\nfunction getdbmsoutput_do2($c)\n{\n    $orignumlines = $numlines = 100;\n    $s = oci_parse($c, \"begin dbms_output.get_lines(:lines, :numlines); end;\");\n    $r = oci_bind_by_name($s, \":numlines\", $numlines);\n    $res = array();\n    while ($numlines >= $orignumlines) {\n        oci_bind_array_by_name($s, \":lines\", $lines,  $numlines, 255, SQLT_CHR);\n        oci_execute($s);\n        if ($numlines == 0) {\n            break;\n        }\n        $res = array_merge($res, array_slice($lines, 0, $numlines));\n        unset($lines);\n    }\n    return $res;\n}\nfunction getdbmsoutput_pl($c)\n{\n    $s = oci_parse($c, \"select * from table(mydofetch())\");\n    oci_execute($s);\n    $res = [];\n    while ($row = oci_fetch_array($s, OCI_NUM)) {\n        $res[] = $row[0];\n    }\n    return $res;\n}\necho \"Test 1\\n\";\nsetserveroutputon($c);   // Turn output buffering on\n$s = oci_parse($c, 'call dbmsoutput_proc()');\noci_execute($s);\nvar_dump(getdbmsoutput_do($c));\necho \"Test 2\\n\";\ncreateoutput($c, 'test 2');\nvar_dump(getdbmsoutput_do($c));\necho \"Test 3\\n\";\ncreateoutput($c, 'test 3');\nvar_dump(getdbmsoutput_do2($c));\necho \"Test 4\\n\";\ncreateoutput($c, 'test 4');\nvar_dump(getdbmsoutput_pl($c));\n// Clean up\n$stmtarray = array(\n    \"drop procedure dbmsoutput_proc\"\n);\noci8_test_sql_execute($c, $stmtarray);\n?>")).toMatchSnapshot();
  });
});
