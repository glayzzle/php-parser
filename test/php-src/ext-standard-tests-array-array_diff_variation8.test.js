// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_diff_variation8.phpt
  it("Test array_diff() function : usage variations - associative arrays containing different data types", function () {
    expect(parser.parseCode("<?php\n/*\n * Test array_diff() with associative arrays containing different data types as values\n */\necho \"*** Testing array_diff() : usage variations ***\\n\";\n$array = array('a' => '1', 'b' => '2', 'c' => '3');\n// get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// get a resource variable\n$fp = fopen(__FILE__, \"r\");\n// get a class\nclass classA\n{\n  public function __toString() {\n     return \"Class A object\";\n  }\n}\n// get a heredoc string\n$heredoc = <<<EOT\nHello world\nEOT;\n// associative arrays with different values\n$inputs = array (\n       // arrays with integer values\n/*1*/  array('0' => 0, '1' => 0),\n       array(\"one\" => 1, 'two' => 2, \"three\" => 1, 4 => 1),\n       // arrays with float values\n/*3*/  array(\"float1\" => 2.3333, \"float2\" => 2.3333),\n       array(\"f1\" => 1.2, 'f2' => 3.33, 3 => 4.89999922839999, 'f4' => 1.2),\n       // arrays with string values\n/*5*/  array(111 => \"\\tHello\", \"red\" => \"col\\tor\", 2 => \"\\v\\fworld\", 3 =>  \"\\tHello\"),\n       array(111 => '\\tHello', \"red\" => 'col\\tor', 2 => '\\v\\fworld', 3 =>  '\\tHello'),\n       array(1 => \"hello\", \"heredoc\" => $heredoc, $heredoc),\n       // array with object, unset variable and resource variable\n/*8*/ array(11 => new classA(), \"unset\" => @$unset_var, \"resource\" => $fp, new classA(), $fp),\n);\n// loop through each sub-array of $inputs to check the behavior of array_unique()\n$iterator = 1;\nforeach($inputs as $input) {\n  echo \"-- Iteration $iterator --\\n\";\n  var_dump( array_diff($array, $input) );\n  var_dump( array_diff($input, $array) );\n  $iterator++;\n}\nfclose($fp);\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
