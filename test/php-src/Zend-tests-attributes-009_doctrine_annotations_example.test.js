// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/attributes/009_doctrine_annotations_example.phpt
  it("Doctrine-like attributes usage", function () {
    expect(parser.parseCode("<?php\nnamespace Doctrine\\ORM\\Attributes {\n    class Annotation { public $values; public function construct() { $this->values = func_get_args(); } }\n    class Entity extends Annotation {}\n    class Id extends Annotation {}\n    class Column extends Annotation { const UNIQUE = 'unique'; const T_INTEGER = 'integer'; }\n    class GeneratedValue extends Annotation {}\n    class JoinTable extends Annotation {}\n    class ManyToMany extends Annotation {}\n    class JoinColumn extends Annotation { const UNIQUE = 'unique'; }\n    class InverseJoinColumn extends Annotation {}\n}\nnamespace Symfony\\Component\\Validator\\Constraints {\n    class Annotation { public $values; public function construct() { $this->values = func_get_args(); } }\n    class Email extends Annotation {}\n    class Range extends Annotation {}\n}\nnamespace {\nuse Doctrine\\ORM\\Attributes as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n#[ORM\\Entity]\n/** @ORM\\Entity */\nclass User\n{\n    /** @ORM\\Id @ORM\\Column(type=\"integer\"*) @ORM\\GeneratedValue */\n    #[ORM\\Id]\n    #[ORM\\Column(\"integer\")]\n    #[ORM\\GeneratedValue]\n    private $id;\n    /**\n     * @ORM\\Column(type=\"string\", unique=true)\n     * @Assert\\Email(message=\"The email '{{ value }}' is not a valid email.\")\n     */\n    #[ORM\\Column(\"string\", ORM\\Column::UNIQUE)]\n    #[Assert\\Email(array(\"message\" => \"The email '{{ value }}' is not a valid email.\"))]\n    private $email;\n    /**\n     * @ORM\\Column(type=\"integer\")\n     * @Assert\\Range(\n     *      min = 120,\n     *      max = 180,\n     *      minMessage = \"You must be at least {{ limit }}cm tall to enter\",\n     *      maxMessage = \"You cannot be taller than {{ limit }}cm to enter\"\n     * )\n     */\n    #[Assert\\Range([\"min\" => 120, \"max\" => 180, \"minMessage\" => \"You must be at least {{ limit }}cm tall to enter\"])]\n    #[ORM\\Column(ORM\\Column::T_INTEGER)]\n    protected $height;\n    /**\n     * @ORM\\ManyToMany(targetEntity=\"Phonenumber\")\n     * @ORM\\JoinTable(name=\"users_phonenumbers\",\n     *      joinColumns={@ORM\\JoinColumn(name=\"user_id\", referencedColumnName=\"id\")},\n     *      inverseJoinColumns={@ORM\\JoinColumn(name=\"phonenumber_id\", referencedColumnName=\"id\", unique=true)}\n     *      )\n     */\n    #[ORM\\ManyToMany(Phonenumber::class)]\n    #[ORM\\JoinTable(\"users_phonenumbers\")]\n    #[ORM\\JoinColumn(\"user_id\", \"id\")]\n    #[ORM\\InverseJoinColumn(\"phonenumber_id\", \"id\", ORM\\JoinColumn::UNIQUE)]\n    private $phonenumbers;\n}\n$class = new ReflectionClass(User::class);\n$attributes = $class->getAttributes();\nforeach ($attributes as $attribute) {\n    var_dump($attribute->getName(), $attribute->getArguments());\n}\nforeach ($class->getProperties() as $property) {\n    $attributes = $property->getAttributes();\n    foreach ($attributes as $attribute) {\n        var_dump($attribute->getName(), $attribute->getArguments());\n    }\n}\n}\n?>")).toMatchSnapshot();
  });
});
