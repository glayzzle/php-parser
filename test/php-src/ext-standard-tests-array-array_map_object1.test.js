// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_map_object1.phpt
  it("Test array_map() function : usage variations - object functionality", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing array_map() for object functionalities:\n *   1) simple class with variable and method\n *   2) class without members\n *   3) class with only one method and no variable\n *   4) abstract and child class\n *   5) class with static and final members\n *   6) interface and implemented class\n */\necho \"*** Testing array_map() : object functionality ***\\n\";\necho \"-- simple class with public variable and method --\\n\";\nclass SimpleClass\n{\n  public $var1 = 1;\n  public static function square($n) {\n    return $n * $n;\n  }\n}\nfunction test($cb, $args) {\n  echo join('::', $cb) . \"\\n\";\n  try {\n    var_dump(array_map($cb, $args));\n  } catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n}\ntest(array('SimpleClass', 'square'), array(1, 2));\necho \"\\n-- simple class with private variable and method --\\n\";\nclass SimpleClassPri\n{\n  private $var1 = 10;\n  private static function add($n) {\n    return $var + $n;\n  }\n}\ntest(array('SimpleClassPri', 'add'), array(1));\necho \"\\n-- simple class with protected variable and method --\\n\";\nclass SimpleClassPro\n{\n  protected $var1 = 5;\n  protected static function mul($n) {\n    return $var1 * $n;\n  }\n}\ntest(array('SimpleClassPro', 'mul'), array(2));\necho \"\\n-- class without members --\\n\";\nclass EmptyClass\n{\n}\ntest(array('EmptyClass'), array(1, 2));\necho \"\\n-- abstract class --\\n\";\nabstract class AbstractClass\n{\n  protected $var2 = 5;\n  abstract static function emptyFunction();\n}\n// class deriving the above abstract class\nclass ChildClass extends AbstractClass\n{\n  private $var3;\n  public static function emptyFunction() {\n    echo \"defined in child\\n\";\n  }\n}\ntest(array('ChildClass', 'emptyFunction'), array(1, 2));\necho \"\\n-- class with final method --\\n\";\nclass FinalClass\n{\n  private $var4;\n  final static function finalMethod() {\n    echo \"This function can't be overloaded\\n\";\n  }\n}\ntest(array('FinalClass', 'finalMethod'), array(1, 2));\necho \"\\n-- class with static members --\\n\";\nclass StaticClass\n{\n  static $var5 = 2;\n  public static function square($n) {\n    return ($n * $n);\n  }\n  private static function cube($n) {\n    return ($n * $n * $n);\n  }\n  protected static function retVal($n)  {\n    return array($n);\n  }\n}\ntest(array('StaticClass', 'square'), array(1, 2));\ntest(array('StaticClass', 'cube'), array(2));\ntest(array('StaticClass', 'retVal'), array(3, 4));\necho \"-- class implementing an interface --\\n\";\ninterface myInterface\n{\n  public function toImplement();\n}\nclass InterClass implements myInterface\n{\n  public static function square($n) {\n    return ($n * $n);\n  }\n  public function toImplement() {\n    return 1;\n  }\n}\ntest(array('InterClass', 'square'), array(1, 2));\n?>")).toMatchSnapshot();
  });
});
