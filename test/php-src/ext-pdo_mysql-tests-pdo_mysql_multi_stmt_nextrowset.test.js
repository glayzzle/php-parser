// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_multi_stmt_nextrowset.phpt
  it("MySQL PDOStatement->nextRowSet() with PDO::MYSQL_ATTR_MULTI_STATEMENTS either true or false", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n    MySQLPDOTest::createTestTable($db);\n    function test_proc($db) {\n        $db->exec('DROP PROCEDURE IF EXISTS p');\n        $db->exec('CREATE PROCEDURE p() BEGIN SELECT id FROM test ORDER BY id ASC LIMIT 3; SELECT id, label FROM test WHERE id < 4 ORDER BY id DESC LIMIT 3; END;');\n        $stmt = $db->query('CALL p()');\n        do {\n            var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        } while ($stmt->nextRowSet());\n        var_dump($stmt->nextRowSet());\n    }\n    try {\n        // Using native PS for proc, since emulated fails.\n        printf(\"Native PS...\\n\");\n        foreach (array(false, true) as $multi) {\n            $value = $multi ? 'true' : 'false';\n            echo \"\\nTesting with PDO::MYSQL_ATTR_MULTI_STATEMENTS set to {$value}\\n\";\n            $dsn = MySQLPDOTest::getDSN();\n            $user = PDO_MYSQL_TEST_USER;\n            $pass = PDO_MYSQL_TEST_PASS;\n            $db = new PDO($dsn, $user, $pass, array(PDO::MYSQL_ATTR_MULTI_STATEMENTS => $multi));\n            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\n            $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n            $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 1);\n            $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n            test_proc($db);\n            $db = new PDO($dsn, $user, $pass, array(PDO::MYSQL_ATTR_MULTI_STATEMENTS => $multi));\n            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\n            $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n            $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 0);\n            $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n            test_proc($db);\n            // Switch back to emulated prepares to verify multi statement attribute.\n            $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n            // This will fail when $multi is false.\n            $stmt = $db->query(\"SELECT * FROM test; INSERT INTO test (id, label) VALUES (99, 'x')\");\n            if ($stmt !== false) {\n                $stmt->closeCursor();\n            }\n            $info = $db->errorInfo();\n            var_dump($info[0]);\n        }\n        @$db->exec('DROP PROCEDURE IF EXISTS p');\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
