// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/006.phpt
  it("ReflectionClass::[gs]etStaticPropertyValue", function () {
    expect(parser.parseCode("<?php\n/* ReflectionClass cannot touch protected or private static properties */\n/* ReflectionClass cannot create or delete static properties */\nClass Test\n{\n    static public    $pub = 'pub';\n    static protected $pro = 'pro';\n    static private   $pri = 'pri';\n    static function testing()\n    {\n        $ref = new ReflectionClass('Test');\n        foreach(array('pub', 'pro', 'pri') as $name)\n        {\n            try\n            {\n                var_dump($ref->getStaticPropertyValue($name));\n                var_dump($ref->getStaticPropertyValue($name));\n                $ref->setStaticPropertyValue($name, 'updated');\n                var_dump($ref->getStaticPropertyValue($name));\n            }\n            catch(Exception $e)\n            {\n                echo \"EXCEPTION\\n\";\n            }\n        }\n    }\n}\nClass TestDerived extends Test\n{\n//\tstatic public    $pub = 'pub';\n//\tstatic protected $pro = 'pro';\n    static private   $pri = 'pri';\n    static function testing()\n    {\n        $ref = new ReflectionClass('Test');\n        foreach(array('pub', 'pro', 'pri') as $name)\n        {\n            try\n            {\n                var_dump($ref->getStaticPropertyValue($name));\n                var_dump($ref->getStaticPropertyValue($name));\n                $ref->setStaticPropertyValue($name, 'updated');\n                var_dump($ref->getStaticPropertyValue($name));\n            }\n            catch(Exception $e)\n            {\n                echo \"EXCEPTION\\n\";\n            }\n        }\n    }\n}\n$ref = new ReflectionClass('Test');\nforeach(array('pub', 'pro', 'pri') as $name)\n{\n    try\n    {\n        var_dump($ref->getStaticPropertyValue($name));\n        var_dump($ref->getStaticPropertyValue($name));\n        $ref->setStaticPropertyValue($name, 'updated');\n        var_dump($ref->getStaticPropertyValue($name));\n    }\n    catch(Exception $e)\n    {\n        echo \"EXCEPTION\\n\";\n    }\n}\nTest::testing();\nTestDerived::testing();\n?>")).toMatchSnapshot();
  });
});
