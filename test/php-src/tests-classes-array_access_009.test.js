// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/classes/array_access_009.phpt
  it("ZE2 ArrayAccess and ArrayProxyAccess, ArrayProxy", function () {
    expect(parser.parseCode("<?php\n// NOTE: This will become part of SPL\ninterface ArrayProxyAccess extends ArrayAccess\n{\n    function proxyGet($element);\n    function proxySet($element, $index, $value);\n    function proxyUnset($element, $index);\n}\nclass ArrayProxy implements ArrayAccess\n{\n    private $object;\n    private $element;\n    function __construct(ArrayProxyAccess $object, $element)\n    {\n        echo __METHOD__ . \"($element)\\n\";\n        if (!$object->offsetExists($element))\n        {\n            $object[$element] = array();\n        }\n        $this->object = $object;\n        $this->element = $element;\n    }\n    function offsetExists($index): bool {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        return array_key_exists($index, $this->object->proxyGet($this->element));\n    }\n    function offsetGet($index): mixed {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        $tmp = $this->object->proxyGet($this->element);\n        return isset($tmp[$index]) ? $tmp[$index] : NULL;\n    }\n    function offsetSet($index, $value): void {\n        echo __METHOD__ . \"($this->element, $index, $value)\\n\";\n        $this->object->proxySet($this->element, $index, $value);\n    }\n    function offsetUnset($index): void {\n        echo __METHOD__ . \"($this->element, $index)\\n\";\n        $this->object->proxyUnset($this->element, $index);\n    }\n}\nclass Peoples implements ArrayProxyAccess\n{\n    public $person;\n    function __construct()\n    {\n        $this->person = array(array('name'=>'Foo'));\n    }\n    function offsetExists($index): bool\n    {\n        return array_key_exists($index, $this->person);\n    }\n    function offsetGet($index): mixed\n    {\n        return new ArrayProxy($this, $index);\n    }\n    function offsetSet($index, $value): void\n    {\n        $this->person[$index] = $value;\n    }\n    function offsetUnset($index): void\n    {\n        unset($this->person[$index]);\n    }\n    function proxyGet($element)\n    {\n        return $this->person[$element];\n    }\n    function proxySet($element, $index, $value)\n    {\n        $this->person[$element][$index] = $value;\n    }\n    function proxyUnset($element, $index)\n    {\n        unset($this->person[$element][$index]);\n    }\n}\n$people = new Peoples;\nvar_dump($people->person[0]['name']);\n$people->person[0]['name'] = $people->person[0]['name'] . 'Bar';\nvar_dump($people->person[0]['name']);\n$people->person[0]['name'] .= 'Baz';\nvar_dump($people->person[0]['name']);\necho \"===ArrayOverloading===\\n\";\n$people = new Peoples;\nvar_dump($people[0]);\nvar_dump($people[0]['name']);\n$people[0]['name'] = 'FooBar';\nvar_dump($people[0]['name']);\n$people[0]['name'] = $people->person[0]['name'] . 'Bar';\nvar_dump($people[0]['name']);\n$people[0]['name'] .= 'Baz';\nvar_dump($people[0]['name']);\nunset($people[0]['name']);\nvar_dump($people[0]);\nvar_dump($people[0]['name']);\n$people[0]['name'] = 'BlaBla';\nvar_dump($people[0]['name']);\n?>")).toMatchSnapshot();
  });
});
