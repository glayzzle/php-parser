// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_attr_statement_class.phpt
  it("PDO::ATTR_STATEMENT_CLASS", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n    MySQLPDOTest::createTestTable($db);\n    $default =  $db->getAttribute(PDO::ATTR_STATEMENT_CLASS);\n    var_dump($default);\n    try {\n        $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, 'foo');\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['classname']);\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    // unknown class\n    try {\n        $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['classname', []]);\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    // class not derived from PDOStatement\n    class myclass {\n        function __construct() {\n            printf(\"myclass\\n\");\n        }\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['myclass', []]);\n    } catch (\\TypeError $e) {\n        echo $e->getMessage(), \\PHP_EOL;\n    }\n    // public constructor not allowed\n    class mystatement extends PDOStatement {\n        public function __construct() {\n            printf(\"mystatement\\n\");\n        }\n    }\n    try {\n        if (false !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['mystatement', []])))\n            printf(\"[006] Expecting boolean/false got %s\\n\", var_export($tmp, true));\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n    // ... but a public destructor is allowed\n    class mystatement2 extends PDOStatement {\n        public function __destruct() {\n            printf(\"mystatement\\n\");\n        }\n    }\n    if (true !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('mystatement2', array()))))\n        printf(\"[007] Expecting boolean/true got %s\\n\", var_export($tmp, true));\n    // private constructor\n    class mystatement3 extends PDOStatement {\n        private function __construct($msg) {\n            printf(\"mystatement3\\n\");\n            var_dump($msg);\n        }\n    }\n    if (true !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('mystatement3', array('param1')))))\n        printf(\"[008] Expecting boolean/true got %s\\n\", var_export($tmp, true));\n    // private constructor\n    class mystatement4 extends PDOStatement {\n        private function __construct($msg) {\n            printf(\"%s\\n\", get_class($this));\n            var_dump($msg);\n        }\n    }\n    if (true !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('mystatement4', array('param1')))))\n        printf(\"[008] Expecting boolean/true got %s\\n\", var_export($tmp, true));\n    var_dump($db->getAttribute(PDO::ATTR_STATEMENT_CLASS));\n    $stmt = $db->query('SELECT id, label FROM test ORDER BY id ASC LIMIT 2');\n    class mystatement5 extends mystatement4 {\n        public function fetchAll($fetch_style = 1, ...$fetch_args): array {\n            return [];\n        }\n    }\n    if (true !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('mystatement5', array('mystatement5')))))\n        printf(\"[009] Expecting boolean/true got %s\\n\", var_export($tmp, true));\n    $stmt = $db->query('SELECT id, label FROM test ORDER BY id ASC LIMIT 2');\n    var_dump($stmt->fetchAll());\n    if (true !== ($tmp = $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, array('PDOStatement'))))\n        printf(\"[010] Expecting boolean/true got %s\\n\", var_export($tmp, true));\n    $stmt = $db->query('SELECT id, label FROM test ORDER BY id ASC LIMIT 1');\n    var_dump($stmt->fetchAll());\n    // Yes, this is a fatal error and I want it to fail.\n    abstract class mystatement6 extends mystatement5 {\n    }\n    try {\n        $db->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['mystatement6', ['mystatement6']]);\n        $stmt = $db->query('SELECT id, label FROM test ORDER BY id ASC LIMIT 1');\n    } catch (\\Error $e) {\n        echo get_class($e), ': ', $e->getMessage(), \\PHP_EOL;\n    }\n?>")).toMatchSnapshot();
  });
});
