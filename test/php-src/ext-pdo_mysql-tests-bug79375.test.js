// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/bug79375.phpt
  it("Bug #79375: mysqli_store_result does not report error from lock wait timeout", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\nfunction createDB(): PDO {\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    return $db;\n}\n$db = createDB();\n$db2 = createDB();\n$db->query('DROP TABLE IF EXISTS test');\n$db->query('CREATE TABLE test (first int) ENGINE = InnoDB');\n$db->query('INSERT INTO test VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9)');\nfunction testNormalQuery(PDO $db, string $name) {\n    $db->exec(\"SET innodb_lock_wait_timeout = 1\");\n    $db->exec(\"START TRANSACTION\");\n    $query = \"SELECT first FROM test WHERE first = 1 FOR UPDATE\";\n    echo \"Running query on $name\\n\";\n    try {\n        $stmt = $db->query($query);\n        echo \"Got {$stmt->rowCount()} for $name\\n\";\n    } catch (PDOException $e) {\n        echo $e->getMessage().\"\\n\";\n    }\n}\nfunction testPrepareExecute(PDO $db, string $name) {\n    $db->exec(\"SET innodb_lock_wait_timeout = 1\");\n    $db->exec(\"START TRANSACTION\");\n    $query = \"SELECT first FROM test WHERE first = 1 FOR UPDATE\";\n    echo \"Running query on $name\\n\";\n    $stmt = $db->prepare($query);\n    try {\n        $stmt->execute();\n        echo \"Got {$stmt->rowCount()} for $name\\n\";\n    } catch (PDOException $e) {\n        echo $e->getMessage().\"\\n\";\n    }\n}\nfunction testUnbuffered(PDO $db, string $name) {\n    $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n    $db->exec(\"SET innodb_lock_wait_timeout = 1\");\n    $db->exec(\"START TRANSACTION\");\n    $query = \"SELECT first FROM test WHERE first = 1 FOR UPDATE\";\n    echo \"Running query on $name\\n\";\n    $stmt = $db->prepare($query);\n    $stmt->execute();\n    try {\n        $rows = $stmt->fetchAll();\n        $count = count($rows);\n        echo \"Got $count for $name\\n\";\n    } catch (PDOException $e) {\n        echo $e->getMessage().\"\\n\";\n    }\n}\ntestNormalQuery($db, 'first connection');\ntestNormalQuery($db2, 'second connection');\nunset($db);\nunset($db2);\necho \"\\n\";\n$db = createDB();\n$db2 = createDB();\ntestPrepareExecute($db, 'first connection');\ntestPrepareExecute($db2, 'second connection');\nunset($db);\nunset($db2);\necho \"\\n\";\n$db = createDB();\n$db2 = createDB();\ntestUnbuffered($db, 'first connection');\ntestUnbuffered($db2, 'second connection');\nunset($db);\nunset($db2);\necho \"\\n\";\n?>")).toMatchSnapshot();
  });
});
