// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_subclass.phpt
  it("MySQL PDOStatement->execute()/fetch(), Non-SELECT", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    try {\n        class MyPDO extends PDO {\n            public function __construct() {\n                $this->protocol();\n                return call_user_func_array(array($this, 'parent::__construct'), func_get_args());\n            }\n            public function exec($statement): int|false {\n                $this->protocol();\n                return parent::exec($statement);\n            }\n            public function query(...$args): PDOStatement|false {\n                $this->protocol();\n                return parent::query(...$args);\n            }\n            public function __call($method, $args) {\n                print \"__call(\".var_export($method,true).\", \".var_export($args, true).\")\\n\";\n                // $this->protocol();\n            }\n            private function protocol() {\n                $stack = debug_backtrace();\n                if (!isset($stack[1]))\n                    return;\n                printf(\"%s(\", $stack[1]['function']);\n                $args = '';\n                foreach ($stack[1]['args'] as $k => $v)\n                    $args .= sprintf(\"%s, \", var_export($v, true));\n                if ($args != '')\n                    printf(\"%s\", substr($args, 0, -2));\n                printf(\")\\n\");\n            }\n        }\n        $db = new MyPDO(PDO_MYSQL_TEST_DSN, PDO_MYSQL_TEST_USER, PDO_MYSQL_TEST_PASS);\n        $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n        $db->exec('DROP TABLE IF EXISTS test');\n        $db->exec('CREATE TABLE test(id INT)');\n        $db->exec('INSERT INTO test(id) VALUES (1), (2)');\n        $stmt = $db->query('SELECT * FROM test ORDER BY id ASC');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        var_dump($stmt->fetch());\n        $db->intercept_call();\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    $db->exec('DROP TABLE IF EXISTS test');\n    print \"done!\\n\";\n?>")).toMatchSnapshot();
  });
});
