// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_commit.phpt
  it("MySQL PDO->commit()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    try {\n        if (true !== ($tmp = $db->beginTransaction())) {\n            printf(\"[001] Expecting true, got %s/%s\\n\", gettype($tmp), $tmp);\n        }\n        // DDL will issue an implicit commit\n        $db->exec(sprintf('DROP TABLE IF EXISTS test_commit'));\n        $db->exec(sprintf('CREATE TABLE test_commit(id INT) ENGINE=%s', MySQLPDOTest::detect_transactional_mysql_engine($db)));\n        try {\n            $db->commit();\n            $failed = false;\n        } catch (PDOException $e) {\n            $failed = true;\n        }\n        if (!$failed) {\n            printf(\"[002] Commit should have failed\\n\");\n        }\n        // pdo_transaction_transitions should check this as well...\n        // ... just to be sure the most basic stuff really works we check it again...\n        if (1 !== ($tmp = $db->getAttribute(PDO::ATTR_AUTOCOMMIT)))\n            printf(\"[003] According to the manual we should be back to autocommit mode, got %s/%s\\n\",\n                gettype($tmp), var_export($tmp, true));\n        if (true !== ($tmp = $db->beginTransaction()))\n            printf(\"[004] Expecting true, got %s/%s\\n\", gettype($tmp), $tmp);\n        $db->exec(\"INSERT INTO test(id, label) VALUES (100, 'z')\");\n        if (true !== ($tmp = $db->commit()))\n            printf(\"[005] No commit allowed? [%s] %s\\n\",\n                $db->errorCode(), implode(' ', $db->errorInfo()));\n        // a weak test without unicode etc. - lets leave that to dedicated tests\n        $stmt = $db->query('SELECT id, label FROM test WHERE id = 100');\n        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        if (!isset($rows[0]['label']) || ($rows[0]['label'] != 'z')) {\n            printf(\"[006] Record data is strange, dumping rows\\n\");\n            var_dump($rows);\n        }\n        // Ok, lets check MyISAM resp. any other non-transactional engine\n        // pdo_mysql_begin_transaction has more on this, quick check only\n        $db = MySQLPDOTest::factory();\n        MySQLPDOTest::createTestTable($db, 'MyISAM');\n        if (true !== ($tmp = $db->beginTransaction()))\n            printf(\"[007] Expecting true, got %s/%s\\n\", gettype($tmp), $tmp);\n        $db->exec(\"INSERT INTO test(id, label) VALUES (100, 'z')\");\n        if (true !== ($tmp = $db->commit()))\n            printf(\"[008] No commit allowed? [%s] %s\\n\",\n                $db->errorCode(), implode(' ', $db->errorInfo()));\n        // a weak test without unicode etc. - lets leave that to dedicated tests\n        $stmt = $db->query('SELECT id, label FROM test WHERE id = 100');\n        $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        if (!isset($rows[0]['label']) || ($rows[0]['label'] != 'z')) {\n            printf(\"[009] Record data is strange, dumping rows\\n\");\n            var_dump($rows);\n        }\n    } catch (PDOException $e) {\n        printf(\"[002] %s, [%s] %s\\n\",\n            $e->getMessage(),\n            $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";")).toMatchSnapshot();
  });
});
