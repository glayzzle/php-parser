// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_attr_server_version.phpt
  it("PDO::ATTR_SERVER_VERSION", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    assert(('' == $db->errorCode()) || ('00000' == $db->errorCode()));\n    $version = $db->getAttribute(PDO::ATTR_SERVER_VERSION);\n    if ('' == $version)\n        printf(\"[001] Server version must not be empty\\n\");\n    // Ideally the server version would be an integer - as documented but BC break!\n    // If its a version string it should be of the format \\d+\\.\\d+\\.\\d+.*\n    if (is_string($version)) {\n        // Its not an int like documented but a string - maybe for BC reasons...\n        if (!preg_match('/(\\d+)\\.(\\d+)\\.(\\d+)(.*)/', $version, $matches))\n            printf(\"[002] Client version string seems wrong, got '%s'\\n\", $version);\n        else {\n            // Difficult to define any meaningful constraints\n            // A possible better check would be calling mysqli_get_server_version() and\n            // comparing what we get. However, mysqli_get_server_version() needs a mysqli handle\n            // for which in turn one needs to parse the PDO test environment variables\n            // for connection parameter...\n            if ($matches[1] < 3)\n                printf(\"[003] Strange major version: '%s'. Should be more than 3\\n\", $matches[1]);\n            if ($matches[2] < 0)\n                printf(\"[004] Minor version should be at least 0, got '%s'\\n\", $matches[2]);\n            if ($matches[3] < 0)\n                printf(\"[005] Sub version should be at least 0, got '%s'\\n\", $matches[2]);\n        }\n    } else if (is_int($version)) {\n        // Lets accept also int if it follows the rules from the original MYSQL C API\n        $major = floor($version / 10000);\n        $minor = floor(($version - ($main * 10000)) / 100);\n        $sub = $version - ($main * 10000) - ($minor * 100);\n        if ($major < 3)\n            printf(\"[006] Strange major version: '%s'. Should be more than 3\\n\", $major);\n        if ($minor < 0)\n            printf(\"[007] Minor version should be at least 0, got '%s'\\n\", $minor);\n        if ($sub < 0)\n            printf(\"[008] Sub version should be at least 0, got '%s'\\n\", $sub);\n    }\n    // Read-only?\n    if (false !== $db->setAttribute(PDO::ATTR_CLIENT_VERSION, '1.0'))\n        printf(\"[009] Wonderful, I can change the client version!\\n\");\n    $new_version = $db->getAttribute(PDO::ATTR_SERVER_VERSION);\n    if ($new_version !== $version)\n        printf(\"[010] Did we change it from '%s' to '%s'?\\n\", $version, $new_version);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
