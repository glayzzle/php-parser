// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/bug41125.phpt
  it("Bug #41125 (PDO mysql + quote() + prepare() can result in seg fault)", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\n$search = \"o'\";\n$sql = \"SELECT 1 FROM DUAL WHERE 'o''riley' LIKE \" . $db->quote('%' . $search . '%');\n$stmt = $db->prepare($sql);\n$stmt->execute();\nprint implode(' - ', (($r = @$stmt->fetch(PDO::FETCH_NUM)) ? $r : array())) .\"\\n\";\nprint implode(' - ', $stmt->errorinfo()) .\"\\n\";\nprint \"-------------------------------------------------------\\n\";\n$queries = array(\n    \"SELECT 1 FROM DUAL WHERE 1 = '?\\'\\''\",\n    \"SELECT 'a\\\\'0' FROM DUAL WHERE 1 = ?\",\n    \"SELECT 'a', 'b\\'' FROM DUAL WHERE '''' LIKE '\\\\'' AND ?\",\n    \"SELECT 'foo?bar', '', '''' FROM DUAL WHERE ?\"\n);\nforeach ($queries as $k => $query) {\n    $stmt = $db->prepare($query);\n    $stmt->execute(array(1));\n    printf(\"[%d] Query: [[%s]]\\n\", $k + 1, $query);\n    print implode(' - ', (($r = @$stmt->fetch(PDO::FETCH_NUM)) ? $r : array())) .\"\\n\";\n    print implode(' - ', $stmt->errorinfo()) .\"\\n\";\n    print \"--------\\n\";\n}\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n$sql = \"SELECT upper(:id) FROM DUAL WHERE '1'\";\n$stmt = $db->prepare($sql);\n$id = 'o\\'\\0';\n$stmt->bindParam(':id', $id);\n$stmt->execute();\nprintf(\"Query: [[%s]]\\n\", $sql);\nprint implode(' - ', (($r = @$stmt->fetch(PDO::FETCH_NUM)) ? $r : array())) .\"\\n\";\nprint implode(' - ', $stmt->errorinfo()) .\"\\n\";\nprint \"-------------------------------------------------------\\n\";\n$queries = array(\n    \"SELECT 1, 'foo' FROM DUAL WHERE 1 = :id AND '\\\\0' IS NULL AND  2 <> :id\",\n    \"SELECT 1 FROM DUAL WHERE 1 = :id AND '' AND  2 <> :id\",\n    \"SELECT 1 FROM DUAL WHERE 1 = :id AND '\\'\\'' = '''' AND  2 <> :id\",\n    \"SELECT 1 FROM DUAL WHERE 1 = :id AND '\\'' = '''' AND  2 <> :id\",\n    \"SELECT 'a', 'b\\'' FROM DUAL WHERE '''' LIKE '\\\\'' AND 1\",\n    \"SELECT 'a''', '\\'b\\'' FROM DUAL WHERE '''' LIKE '\\\\'' AND 1\",\n    \"SELECT UPPER(:id) FROM DUAL WHERE '1'\",\n    \"SELECT 1 FROM DUAL WHERE '\\''\",\n    \"SELECT 1 FROM DUAL WHERE :id AND '\\\\0' OR :id\",\n    \"SELECT 1 FROM DUAL WHERE 'a\\\\f\\\\n\\\\0' AND 1 >= :id\",\n    \"SELECT 1 FROM DUAL WHERE '\\'' = ''''\",\n    \"SELECT '\\\\n' '1 FROM DUAL WHERE '''' and :id'\",\n    \"SELECT 1 'FROM DUAL WHERE :id AND '''' = '''' OR 1 = 1 AND ':id\",\n);\n$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n$id = 1;\nforeach ($queries as $k => $query) {\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':id', $id);\n    $stmt->execute();\n    printf(\"[%d] Query: [[%s]]\\n\", $k + 1, $query);\n    print implode(' - ', (($r = @$stmt->fetch(PDO::FETCH_NUM)) ? $r : array())) .\"\\n\";\n    print implode(' - ', $stmt->errorinfo()) .\"\\n\";\n    print \"--------\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
