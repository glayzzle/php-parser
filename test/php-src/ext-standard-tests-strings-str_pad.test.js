// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/str_pad.phpt
  it("str_pad() function", function () {
    expect(parser.parseCode("<?php\n/* Pad a string to a certain length with another string */\necho \"\\n#### Basic operations ####\\n\";\n$input_string = \"str_pad()\";\n$pad_length = 20;\n$pad_string = \"-+\";\nvar_dump( str_pad($input_string, $pad_length) ); // default pad_string & pad_type\nvar_dump( str_pad($input_string, $pad_length, $pad_string) ); // default pad_type\nvar_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_LEFT) );\nvar_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_RIGHT) );\nvar_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_BOTH) );\necho \"\\n#### variations with input string and pad-length ####\\n\";\n/* different input string variation */\n$input_strings = array(\n    \"variation\", // normal string\n    \"\", \t// empty string\n    true,  // boolean\n    15,  // numeric\n    15.55,  // numeric\n    \"2990\"  // numeric string\n);\n/* different pad_lengths */\n$pad_lengths = array(\n    -PHP_INT_MAX,  // huge negative value\n    -1,  // negative value\n    0,  // pad_length < sizeof(input_string)\n    9,  // pad_length <= sizeof(input_string)\n    10,  // pad_length > sizeof(input_string)\n    16,  // pad_length > sizeof(input_string)\n);\n$pad_string = \"=\";\n/* loop through to use each variant of $pad_length on each element of $input_strings array */\nforeach ($input_strings as $input_string ) {\n    foreach ($pad_lengths as $pad_length ) {\n        var_dump( str_pad($input_string, $pad_length) ); // default pad_string & pad_type\n        var_dump( str_pad($input_string, $pad_length, $pad_string) ); // default pad_type\n        var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_LEFT) );\n        var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_RIGHT) );\n        var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_BOTH) );\n    }\n}\necho \"\\n#### variation with pad string ####\\n\";\n$pad_strings = array (\"=\", 1, true, \"string_pad\", 1.5, \"\\t\", '\\t');\n$input_string=\"variation\";\n$pad_length = 16;\nforeach ( $pad_strings as $pad_string ) {\n    var_dump( str_pad($input_string, $pad_length, $pad_string) ); // default pad_type\n    var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_LEFT) );\n    var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_RIGHT) );\n    var_dump( str_pad($input_string, $pad_length, $pad_string, STR_PAD_BOTH) );\n}\necho \"\\n#### error conditions ####\\n\";\necho \"\\n--- empty padding string ---\\n\";\ntry {\n    str_pad($input_string, 12, \"\");\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n/* bad pad_type - passing an undefined one */\ntry {\n    str_pad($input_string, $pad_length, \"+\", 15);\n} catch (\\ValueError $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
