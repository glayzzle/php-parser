// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/readonly_props/cache_slot.phpt
  it("Test interaction with cache slots", function () {
    expect(parser.parseCode("<?php\nclass Test {\n    public readonly string $prop;\n    public readonly array $prop2;\n    public readonly object $prop3;\n    public function setProp(string $prop) {\n        $this->prop = $prop;\n    }\n    public function initAndAppendProp2() {\n        $this->prop2 = [];\n        $this->prop2[] = 1;\n    }\n    public function initProp3() {\n        $this->prop3 = new stdClass;\n        $this->prop3->foo = 1;\n    }\n    public function replaceProp3() {\n        $ref =& $this->prop3;\n        $ref = new stdClass;\n    }\n}\n$test = new Test;\n$test->setProp(\"a\");\nvar_dump($test->prop);\ntry {\n    $test->setProp(\"b\");\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump($test->prop);\necho \"\\n\";\n$test = new Test;\ntry {\n    $test->initAndAppendProp2();\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $test->initAndAppendProp2();\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump($test->prop2);\necho \"\\n\";\n$test = new Test;\n$test->initProp3();\n$test->replaceProp3();\nvar_dump($test->prop3);\n$test->replaceProp3();\nvar_dump($test->prop3);\necho \"\\n\";\n// Test variations using closure rebinding, so we have unknown property_info in JIT.\n$test = new Test;\n(function() { $this->prop2 = []; })->call($test);\n$appendProp2 = (function() {\n    $this->prop2[] = 1;\n})->bindTo($test, Test::class);\ntry {\n    $appendProp2();\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    $appendProp2();\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump($test->prop2);\necho \"\\n\";\n$test = new Test;\n$replaceProp3 = (function() {\n    $ref =& $this->prop3;\n    $ref = new stdClass;\n})->bindTo($test, Test::class);\n$test->initProp3();\n$replaceProp3();\nvar_dump($test->prop3);\n$replaceProp3();\nvar_dump($test->prop3);\n?>")).toMatchSnapshot();
  });
});
