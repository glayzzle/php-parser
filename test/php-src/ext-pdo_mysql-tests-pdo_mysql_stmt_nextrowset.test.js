// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_nextrowset.phpt
  it("MySQL PDOStatement->nextRowSet()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n    MySQLPDOTest::createTestTable($db);\n    $stmt = $db->query('SELECT id FROM test');\n    if (false !== ($tmp = $stmt->nextRowSet()))\n        printf(\"[002] Expecting false got %s\\n\", var_export($tmp, true));\n    function test_proc1($db) {\n        $stmt = $db->query('SELECT @VERSION as _version');\n        $tmp = $stmt->fetch(PDO::FETCH_ASSOC);\n        assert($tmp['_version'] === NULL);\n        while ($stmt->fetch()) ;\n        $db->exec('DROP PROCEDURE IF EXISTS p');\n        $db->exec('CREATE PROCEDURE p(OUT ver_param VARCHAR(25)) BEGIN SELECT VERSION() INTO ver_param; END;');\n        $db->exec('CALL p(@VERSION)');\n        $stmt = $db->query('SELECT @VERSION as _version');\n        var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        var_dump($stmt->nextRowSet());\n    }\n    function test_proc2($db) {\n        $db->exec('DROP PROCEDURE IF EXISTS p');\n        $db->exec('CREATE PROCEDURE p() BEGIN SELECT id FROM test ORDER BY id ASC LIMIT 3; SELECT id, label FROM test WHERE id < 4 ORDER BY id DESC LIMIT 3; END;');\n        $stmt = $db->query('CALL p()');\n        do {\n            var_dump($stmt->fetchAll(PDO::FETCH_ASSOC));\n        } while ($stmt->nextRowSet());\n        var_dump($stmt->nextRowSet());\n        echo \"Skip fetchAll(): \";\n        unset($stmt);\n        $stmt = $db->query('CALL p()');\n        var_dump($stmt->nextRowSet());\n        $stmt->closeCursor();\n    }\n    try {\n        // Emulated PS\n        printf(\"Emulated PS...\\n\");\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 1);\n        test_proc1($db);\n        test_proc2($db);\n        $db = MySQLPDOTest::factory();\n        $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 0);\n        test_proc1($db);\n        test_proc2($db);\n        // Native PS\n        printf(\"Native PS...\\n\");\n        $db = MySQLPDOTest::factory();\n        $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 1);\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n        test_proc1($db);\n        test_proc2($db);\n        $db = MySQLPDOTest::factory();\n        $db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, 0);\n        $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, 0);\n        test_proc1($db);\n        test_proc2($db);\n        @$db->exec('DROP PROCEDURE IF EXISTS p');\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
