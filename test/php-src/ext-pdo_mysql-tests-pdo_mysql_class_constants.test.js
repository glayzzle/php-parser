// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_class_constants.phpt
  it("PDO MySQL specific class constants", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    function get_client_version() {\n        if (extension_loaded('mysqli')) {\n            return mysqli_get_client_version();\n        }\n        /* XXX the MySQL client library version isn't exposed with any\n        constants, the single possibility is to use the PDO::getAttribute().\n        This however will fail with no connection. */\n        return MySQLPDOTest::getClientVersion(MySQLPDOTest::factory());\n    }\n    $expected = array(\n        'MYSQL_ATTR_USE_BUFFERED_QUERY'\t\t=> true,\n        'MYSQL_ATTR_LOCAL_INFILE'\t\t\t\t\t=> true,\n        'MYSQL_ATTR_DIRECT_QUERY'\t\t\t\t\t=> true,\n        'MYSQL_ATTR_FOUND_ROWS'\t\t\t\t\t\t=> true,\n        'MYSQL_ATTR_IGNORE_SPACE'\t\t\t\t\t=> true,\n        'MYSQL_ATTR_INIT_COMMAND'\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_SSL_KEY\"\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_SSL_CERT\"\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_SSL_CA\"\t\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_SSL_CAPATH\"\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_SSL_CIPHER\"\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_COMPRESS\"\t\t\t\t\t\t=> true,\n        \"MYSQL_ATTR_MULTI_STATEMENTS\"\t\t\t\t\t=> true,\n    );\n    if (!MySQLPDOTest::isPDOMySQLnd()) {\n        $expected['MYSQL_ATTR_MAX_BUFFER_SIZE']\t\t\t= true;\n        $expected['MYSQL_ATTR_READ_DEFAULT_FILE']\t\t= true;\n        $expected['MYSQL_ATTR_READ_DEFAULT_GROUP']\t\t= true;\n    }\n    if (extension_loaded('mysqlnd')) {\n        $expected['MYSQL_ATTR_SSL_VERIFY_SERVER_CERT']  = true;\n        $expected['MYSQL_ATTR_SERVER_PUBLIC_KEY']\t\t= true;\n    } else if (get_client_version() > 50605) {\n        $expected['MYSQL_ATTR_SERVER_PUBLIC_KEY']\t= true;\n    }\n    if (MySQLPDOTest::isPDOMySQLnd() || get_client_version() >= 80021) {\n        $expected['MYSQL_ATTR_LOCAL_INFILE_DIRECTORY']\t= true;\n    }\n    /*\n    TODO\n        MYSQLI_OPT_CONNECT_TIMEOUT != PDO::ATTR_TIMEOUT  (integer)\n    Sets the timeout value in seconds for communications with the database.\n        ^  Potential BUG, PDO::ATTR_TIMEOUT is used in pdo_mysql_handle_factory\n        MYSQLI_SET_CHARSET_NAME -> DSN/charset=<charset_name>\n        ^ Undocumented and pitfall for ext/mysqli users\n        Assorted mysqlnd settings missing\n    */\n    $ref = new ReflectionClass('PDO');\n    $constants = $ref->getConstants();\n    $values = array();\n    foreach ($constants as $name => $value)\n        if (substr($name, 0, 11) == 'MYSQL_ATTR_') {\n            if (!isset($values[$value]))\n                $values[$value] = array($name);\n            else\n                $values[$value][] = $name;\n            if (isset($expected[$name])) {\n                unset($expected[$name]);\n                unset($constants[$name]);\n            }\n        } else {\n            unset($constants[$name]);\n        }\n    if (!empty($constants)) {\n        printf(\"[001] Dumping list of unexpected constants\\n\");\n        var_dump($constants);\n    }\n    if (!empty($expected)) {\n        printf(\"[002] Dumping list of missing constants\\n\");\n        var_dump($expected);\n    }\n    if (!empty($values)) {\n        foreach ($values as $value => $constants) {\n            if (count($constants) > 1) {\n                printf(\"[003] Several constants share the same value '%s'\\n\", $value);\n                var_dump($constants);\n            }\n        }\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
