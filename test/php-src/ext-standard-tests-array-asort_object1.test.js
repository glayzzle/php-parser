// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/asort_object1.phpt
  it("Test asort() function : object functionality - sort objects", function () {
    expect(parser.parseCode("<?php\n/*\n * testing asort() by providing integer/string object arrays with following flag values\n * 1. Default flag value\n * 2. SORT_REGULAR - compare items normally\n*/\necho \"*** Testing asort() : object functionality ***\\n\";\n// class declaration for integer objects\nclass for_integer_asort\n{\n  public $class_value;\n  // initializing object member value\n  function __construct($value){\n    $this->class_value = $value;\n  }\n}\n// class declaration for string objects\nclass for_string_asort\n{\n  public $class_value;\n  // initializing object member value\n  function __construct($value){\n    $this->class_value = $value;\n   }\n  // return string value\n  function __tostring() {\n   return (string)$this->value;\n  }\n}\n// array of integer objects\n$unsorted_int_obj = array (\n  1 => new for_integer_asort(11), 2 =>  new for_integer_asort(66),\n  3 => new for_integer_asort(23), 4 => new for_integer_asort(-5),\n  5 => new for_integer_asort(0.001), 6 => new for_integer_asort(0)\n);\n// array of string objects\n$unsorted_str_obj = array (\n  \"a\" => new for_string_asort(\"axx\"), \"b\" => new for_string_asort(\"t\"),\n  \"c\" => new for_string_asort(\"w\"), \"d\" => new for_string_asort(\"py\"),\n  \"e\" => new for_string_asort(\"apple\"), \"f\" => new for_string_asort(\"Orange\"),\n  \"g\" => new for_string_asort(\"Lemon\"), \"h\" => new for_string_asort(\"aPPle\")\n);\necho \"\\n-- Testing asort() by supplying various object arrays, 'flag' value is default --\\n\";\n// testing asort() function by supplying integer object array, flag value is default\n$temp_array = $unsorted_int_obj;\nvar_dump(asort($temp_array) );\nvar_dump($temp_array);\n// testing asort() function by supplying string object array, flag value is default\n$temp_array = $unsorted_str_obj;\nvar_dump(asort($temp_array) );\nvar_dump($temp_array);\necho \"\\n-- Testing asort() by supplying various object arrays, 'flag' value is SORT_REGULAR --\\n\";\n// testing asort() function by supplying integer object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_int_obj;\nvar_dump(asort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\n// testing asort() function by supplying string object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_str_obj;\nvar_dump(asort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
