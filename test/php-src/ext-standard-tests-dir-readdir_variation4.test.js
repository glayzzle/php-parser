// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/dir/readdir_variation4.phpt
  it("Test readdir() function : usage variations - different file names", function () {
    expect(parser.parseCode("<?php\n/*\n * Pass a directory handle pointing to a directory that contains\n * files with different file names to test how readdir() reads them\n */\necho \"*** Testing readdir() : usage variations ***\\n\";\n$dir_path = __DIR__ . \"/readdir_variation4/\";\nmkdir($dir_path);\n// heredoc string\n$heredoc = <<<EOT\nhd_file\nEOT;\n$inputs = array(\n       // int data\n/*1*/  0,\n       1,\n       12345,\n       -2345,\n       // float data\n/*5*/  10.5,\n       -10.5,\n       12.3456789000e10,\n       12.3456789000E-10,\n       .5,\n       // empty data\n/*10*/ \"\",\n       array(),\n       // string data\n/*12*/ \"double_file\",\n       'single_file',\n       $heredoc,\n);\n$iterator = 1;\nforeach($inputs as $key => $input) {\n    echo \"\\n-- Iteration $iterator --\\n\";\n    $handle = \"fp{$iterator}\";\n    var_dump( $$handle = fopen(@\"$dir_path$input.tmp\", 'w') );\n    var_dump( fwrite($$handle, $key));\n    fclose($$handle);\n    $iterator++;\n};\necho \"\\n-- Call to readdir() --\\n\";\n$dir_handle = opendir($dir_path);\nwhile(FALSE !== ($file = readdir($dir_handle))){\n    // different OS order files differently so will\n    // store file names into an array so can use sorted in expected output\n    $contents[] = $file;\n    // remove files while going through directory\n    @unlink($dir_path . $file);\n}\n// more important to check that all contents are present than order they are returned in\nsort($contents);\nvar_dump($contents);\nclosedir($dir_handle);\n?>")).toMatchSnapshot();
  });
});
