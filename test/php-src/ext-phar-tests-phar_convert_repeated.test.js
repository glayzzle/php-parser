// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/phar/tests/phar_convert_repeated.phpt
  it("Phar::convertToZip|Tar|Phar() repeated (phar_based archives)", function () {
    expect(parser.parseCode("<?php\n$fname = __DIR__ . '/' . basename(__FILE__, '.php') . '.phar';\n$pname = 'phar://' . $fname;\n$fname2 = __DIR__ . '/' . basename(__FILE__, '.php') . '.phar.zip';\n$fname3 = __DIR__ . '/' . basename(__FILE__, '.php') . '.phar.tar';\n$stub = '<?php echo \"first stub\\n\"; __HALT_COMPILER(); ?>';\n$file = $stub;\n$files = array();\n$files['a'] = 'a';\n$files['b'] = 'b';\n$files['c'] = 'c';\ninclude 'files/phar_test.inc';\necho \"=================== new Phar() =======================\\n\";\n$phar = new Phar($fname);\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToTar() =====================\\n\";\n$phar = $phar->convertToExecutable(Phar::TAR);\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToZip() =====================\\n\";\n$phar = $phar->convertToExecutable(Phar::ZIP);\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToPhar() ====================\\n\";\n$phar = $phar->convertToExecutable(Phar::PHAR, Phar::NONE, '.2.phar');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump(strlen($phar->getStub()));\nvar_dump($phar->getAlias());\necho \"================= convertToZip() =====================\\n\";\n$phar = $phar->convertToExecutable(Phar::ZIP, Phar::NONE, '.2.phar.zip');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToTar() =====================\\n\";\n$phar = $phar->convertToExecutable(Phar::TAR, Phar::NONE, '2.phar.tar');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\necho \"================= convertToZip() =====================\\n\";\n$phar = $phar->convertToExecutable(Phar::ZIP, Phar::NONE, '3.phar.zip');\nvar_dump($phar->isFileFormat(Phar::PHAR));\nvar_dump($phar->isFileFormat(Phar::TAR));\nvar_dump($phar->isFileFormat(Phar::ZIP));\nvar_dump($phar->getStub());\nvar_dump($phar->getAlias());\n?>")).toMatchSnapshot();
  });
});
