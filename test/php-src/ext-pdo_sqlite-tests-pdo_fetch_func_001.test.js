// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_sqlite/tests/pdo_fetch_func_001.phpt
  it("Testing several callbacks using PDO::FETCH_FUNC", function () {
    expect(parser.parseCode("<?php\n$db = new PDO('sqlite::memory:');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\n$db->exec('CREATE TABLE testing (id INTEGER , name VARCHAR)');\n$db->exec('INSERT INTO testing VALUES(1, \"php\")');\n$db->exec('INSERT INTO testing VALUES(2, \"\")');\n$st = $db->query('SELECT * FROM testing');\n$st->fetchAll(PDO::FETCH_FUNC, function($x, $y) use ($st) { var_dump($st); print \"data: $x, $y\\n\"; });\n$st = $db->query('SELECT name FROM testing');\nvar_dump($st->fetchAll(PDO::FETCH_FUNC, 'strtoupper'));\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, 'nothing'));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, ''));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, NULL));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, 1));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, array('self', 'foo')));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\nclass foo {\n    public function method($x) {\n        return \"--- $x ---\";\n    }\n}\nclass bar extends foo {\n    public function __construct($db) {\n        $st = $db->query('SELECT * FROM testing');\n        var_dump($st->fetchAll(PDO::FETCH_FUNC, array($this, 'parent::method')));\n    }\n    static public function test($x, $y) {\n        return $x .'---'. $y;\n    }\n    private function test2($x, $y) {\n        return $x;\n    }\n    public function test3($x, $y) {\n        return $x .'==='. $y;\n    }\n}\nnew bar($db);\n$st = $db->query('SELECT * FROM testing');\nvar_dump($st->fetchAll(PDO::FETCH_FUNC, array('bar', 'test')));\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, array('bar', 'test2')));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, array('bar', 'test3')));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\ntry {\n    $st = $db->query('SELECT * FROM testing');\n    var_dump($st->fetchAll(PDO::FETCH_FUNC, array('bar', 'inexistent')));\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \\PHP_EOL;\n}\n?>")).toMatchSnapshot();
  });
});
