// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/drcp_connect1.phpt
  it("DRCP: oci_connect()", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__.\"/details.inc\";\nrequire __DIR__.\"/drcp_functions.inc\";\n// Open a number of connections with oci_connect and oci_pconnect and verify\n// whether we get a used session with DRCP.\n// To verify this, we change the value of a PL/SQL package variable in one\n// session and query for this through another connection\necho \"Test 1a\\n\";\nvar_dump($conn1 = oci_connect($user,$password,$dbase));\n// Create the package\ndrcp_create_package($conn1);\necho \"Test 1b\\n\";\n// OCI_CONNECT\necho \" This is with OCI_CONNECT.....\\n\";\ndrcp_select_packagevar($conn1); // Returns 0\ndrcp_set_packagevar($conn1,1000);\noci_close($conn1);\necho \" Connection conn1  closed....\\n\";\necho \"Test 2\\n\";\n// Second connection should return 0 for the package variable.\nvar_dump($conn2 = oci_connect($user,$password,$dbase));\necho \" Select with connection 2\\n\";\ndrcp_select_packagevar($conn2); // Returns 0\ndrcp_set_packagevar($conn2,100);\necho \"Test 3\\n\";\n// Third connection. There is no oci_close() for conn2 hence this should\n// return the value set by conn2.\nvar_dump($conn3 = oci_connect($user,$password,$dbase));\necho \" Select with connection 3\\n\";\ndrcp_select_packagevar($conn3); // Returns 100\n// Close all the connections\noci_close($conn2);\noci_close($conn3);\necho \"Test 4\\n\";\n// OCI_PCONNECT\necho \" This is with oci_pconnect().....\\n\";\nvar_dump($pconn1 = oci_pconnect($user,$password,$dbase));\ndrcp_set_packagevar($pconn1,1000);\noci_close($pconn1);\necho \" Connection pconn1  closed....\\n\";\n// Second connection with oci_pconnect should return the same session hence the\n// value returned is what is set by pconn1\necho \"Test 5\\n\";\nvar_dump($pconn2 = oci_pconnect($user,$password,$dbase));\necho \" Select with persistent connection 2\\n\";\ndrcp_select_packagevar($pconn2); // Returns 1000\noci_close($pconn2);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
