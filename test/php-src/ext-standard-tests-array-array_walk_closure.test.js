// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_walk_closure.phpt
  it("array_walk() closure tests", function () {
    expect(parser.parseCode("<?php\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\nvar_dump(array_walk($ar, function(){ var_dump(func_get_args());}));\necho \"\\nclosure with array\\n\";\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\n$user_data = [\"sum\" => 42];\n$func = function($value, $key, &$udata) {\n    var_dump($udata);\n    $udata[\"sum\"] += $value;\n};\nvar_dump(array_walk($ar, $func, $user_data));\necho \"End result:\";\nvar_dump($user_data[\"sum\"]);\necho \"\\nclosure with use\\n\";\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\n$user_data = [\"sum\" => 42];\n$func = function($value, $key) use (&$user_data) {\n    var_dump($user_data);\n    $user_data[\"sum\"] += $value;\n};\nvar_dump(array_walk($ar, $func, $user_data));\necho \"End result:\";\nvar_dump($user_data[\"sum\"]);\necho \"\\nclosure with object\\n\";\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\n$user_data = (object)[\"sum\" => 42];\n$func = function($value, $key, &$udata) {\n    var_dump($udata);\n    $udata->sum += $value;\n};\nvar_dump(array_walk($ar, $func, $user_data));\necho \"End result:\";\nvar_dump($user_data->sum);\necho \"\\nfunction with object\\n\";\nfunction sum_it_up_object($value, $key, $udata)\n{\n    var_dump($udata);\n    $udata->sum += $value;\n}\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\n$user_data = (object)[\"sum\" => 42];\nvar_dump(array_walk($ar, \"sum_it_up_object\", $user_data));\necho \"End result:\";\nvar_dump($user_data->sum);\necho \"\\nfunction with array\\n\";\nfunction sum_it_up_array($value, $key, $udata)\n{\n    var_dump($udata);\n    $udata['sum'] += $value;\n}\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\n$user_data = [\"sum\" => 42];\nvar_dump(array_walk($ar, \"sum_it_up_array\", $user_data));\necho \"End result:\";\nvar_dump($user_data['sum']);\necho \"\\nclosure and exception\\n\";\n$ar = [\"one\" => 1, \"two\"=>2, \"three\" => 3];\ntry {\n    var_dump(array_walk($ar, function($v, $k) { if ($v == 2) throw new Exception; } ));\n} catch (Exception $e) {\n    var_dump($e->getTrace());\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
