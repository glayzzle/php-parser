// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/iterator_001.phpt
  it("SPL: Iterator aggregating inner iterator's methods", function () {
    expect(parser.parseCode("<?php\nclass NumericArrayIterator implements Iterator\n{\n    protected $a;\n    protected $i = 0;\n    public function __construct($a)\n    {\n        echo __METHOD__ . \"\\n\";\n        $this->a = $a;\n    }\n    public function rewind(): void\n    {\n        echo __METHOD__ . \"\\n\";\n        $this->i = 0;\n    }\n    public function valid(): bool\n    {\n        $ret = $this->i < count($this->a);\n        echo __METHOD__ . '(' . ($ret ? 'true' : 'false') . \")\\n\";\n        return $ret;\n    }\n    public function key(): mixed\n    {\n        echo __METHOD__ . \"\\n\";\n        return $this->i;\n    }\n    public function current(): mixed\n    {\n        echo __METHOD__ . \"\\n\";\n        return $this->a[$this->i];\n    }\n    public function next(): void\n    {\n        echo __METHOD__ . \"\\n\";\n        $this->i++;\n    }\n    public function greaterThan($comp)\n    {\n        echo get_class($this) . '::' . __FUNCTION__ . '(' . $comp . \")\\n\";\n        return $this->current() > $comp;\n    }\n}\nclass SeekableNumericArrayIterator extends NumericArrayIterator implements SeekableIterator\n{\n    public function seek($index): void\n    {\n        if ($index < count($this->a)) {\n            $this->i = $index;\n        }\n        echo __METHOD__ . '(' . $index . \")\\n\";\n    }\n}\n$a = array(1, 2, 3, 4, 5);\n$it = new LimitIterator(new NumericArrayIterator($a), 1, 3);\nforeach ($it as $v)\n{\n    print $v . ' is ' . ($it->greaterThan(2) ? 'greater than 2' : 'less than or equal 2') . \"\\n\";\n}\necho \"===SEEKABLE===\\n\";\n$a = array(1, 2, 3, 4, 5);\n$it = new LimitIterator(new SeekableNumericArrayIterator($a), 1, 3);\nforeach($it as $v)\n{\n    print $v . ' is ' . ($it->greaterThan(2) ? 'greater than 2' : 'less than or equal 2') . \"\\n\";\n}\necho \"===STACKED===\\n\";\necho \"Shows '2 is greater than 2' because the test is actually done with the current value which is 3.\\n\";\n$a = array(1, 2, 3, 4, 5);\n$it = new CachingIterator(new LimitIterator(new SeekableNumericArrayIterator($a), 1, 3));\nforeach($it as $v)\n{\n    print $v . ' is ' . ($it->greaterThan(2) ? 'greater than 2' : 'less than or equal 2') . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
