// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_bind_param_type_juggling.phpt
  it("mysqli_stmt_bind_param() - binding variable twice", function () {
    expect(parser.parseCode("<?php\n    require('table.inc');\n    function bind_twice($link, $engine, $sql_type1, $sql_type2, $bind_type1, $bind_type2, $bind_value1, $bind_value2, $offset) {\n        if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\")) {\n            printf(\"[%03d + 1] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        mysqli_autocommit($link, true);\n        $sql = sprintf(\"CREATE TABLE test(col1 %s, col2 %s) ENGINE=%s\", $sql_type1, $sql_type2, $engine);\n        if (!mysqli_query($link, $sql)) {\n            printf(\"[%03d + 2] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!$stmt = mysqli_stmt_init($link)) {\n            printf(\"[%03d + 3] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(col1, col2) VALUES (?, ?)\")) {\n            printf(\"[%03d + 4] [%d] %s\\n\", $offset, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_bind_param($stmt, $bind_type1 . $bind_type2, $bind_value1, $bind_value1)) {\n            printf(\"[%03d + 5] [%d] %s\\n\", $offset, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%03d + 6] [%d] %s\\n\", $offset, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_bind_param($stmt, $bind_type1 . $bind_type2, $bind_value1, $bind_value2)) {\n            printf(\"[%03d + 7] [%d] %s\\n\", $offset, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        if (!mysqli_stmt_execute($stmt)) {\n            printf(\"[%03d + 8] [%d] %s\\n\", $offset, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            return false;\n        }\n        mysqli_stmt_close($stmt);\n        if (!$res = mysqli_query($link, \"SELECT col1, col2 FROM test\")) {\n            printf(\"[%03d + 9] [%d] %s\\n\", $offset, mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        if (2 !== ($tmp = mysqli_num_rows($res))) {\n            printf(\"[%03d + 10] Expecting 2 rows, got %d rows [%d] %s\\n\", $offset, $tmp, mysqli_errno($link), mysqli_error($link));\n        }\n        $row = mysqli_fetch_assoc($res);\n        if (($row['col1'] != $bind_value1) || ($row['col2'] != $bind_value1)) {\n            printf(\"[%03d + 11] Expecting col1 = %s, col2 = %s got col1 = %s, col2 = %s - [%d] %s\\n\",\n                $offset, $bind_value1, $bind_value1,\n                $row['col1'], $row['col2'],\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        $row = mysqli_fetch_assoc($res);\n        if (($row['col1'] != $bind_value1) || ($row['col2'] != $bind_value2)) {\n            printf(\"[%03d + 12] Expecting col1 = %s, col2 = %s got col1 = %s, col2 = %s - [%d] %s\\n\",\n                $offset, $bind_value1, $bind_value2,\n                $row['col1'], $row['col2'],\n                mysqli_errno($link), mysqli_error($link));\n            return false;\n        }\n        mysqli_free_result($res);\n        return true;\n    }\n    bind_twice($link, $engine, 'CHAR(1)', 'CHAR(1)', 's', 's', 'a', 'b', 10);\n    bind_twice($link, $engine, 'INT', 'INT', 'i', 'i', 1, 2, 20);\n    bind_twice($link, $engine, 'FLOAT', 'FLOAT', 'd', 'd', 1.01, 1.02, 30);\n    /* type juggling - note that int->char works */\n    bind_twice($link, $engine, 'CHAR(1)', 'CHAR(1)', 's', 's', 1, 2, 40);\n    /* type juggling - note that string->integer works */\n    bind_twice($link, $engine, 'INT', 'INT', 'i', 'i', '1', '2', 50);\n    /* type juggling - note that string->float works*/\n    bind_twice($link, $engine, 'FLOAT', 'FLOAT', 'd', 'd', '1.01', '1.02', 60);\n    /* now, let's have two columns of different type and do type juggling */\n    /*\n    what the test will do is:\n        1) col1 INT, col2 CHAR(1)\n    2) bind_param('is', 1, 1)\n    3) execute()\n        4) bind_param('is', 1, 'a')\n        5) execute()\n        col1 INT, col2 INT\n    bind_param('ii', '1', '2')\t--> OK  (int column, string value)\n        bind_param('ii', 1, 2) \t\t\t--> OK  (int column, int value)\n    col1 CHAR(1), col2 CHAR(2)\n    bind_param('ss', 1, 2)  \t\t--> OK (string column, int value)\n        So, what about:\n        col1 INT, COL2 CHAR(1)\n        bind_param('is', 1, 1)     ---> ??\n    */\n    bind_twice($link, $engine, 'INT', 'CHAR(1)', 'i', 's', 1, 'a', 70);\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
