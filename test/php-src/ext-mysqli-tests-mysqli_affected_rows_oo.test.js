// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_affected_rows_oo.phpt
  it("mysqli->affected_rows", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    $mysqli = new mysqli();\n    try {\n        $mysqli->affected_rows;\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    if (!$mysqli = new my_mysqli($host, $user, $passwd, $db, $port, $socket)) {\n        printf(\"[001] Cannot connect to the server using host=%s, user=%s, passwd=***, dbname=%s, port=%s, socket=%s\\n\",\n            $host, $user, $db, $port, $socket);\n    }\n    if (0 !== ($tmp = $mysqli->affected_rows))\n    printf(\"[002] Expecting int/0, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query('DROP TABLE IF EXISTS test'))\n        printf(\"[003] [%d] %s\\n\", $mysqli->errno, $mysqli->error);\n    if (!$mysqli->query('CREATE TABLE test(id INT, label CHAR(1), PRIMARY KEY(id)) ENGINE = ' . $engine))\n        printf(\"[004] [%d] %s\\n\", $mysqli->errno, $mysqli->error);\n    if (!$mysqli->query(\"INSERT INTO test(id, label) VALUES (1, 'a')\"))\n        printf(\"[005] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (1 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[006] Expecting int/1, got %s/%s\\n\", gettype($tmp), $tmp);\n    // ignore INSERT error, NOTE: command line returns 0, affected_rows returns -1 as documented\n    $mysqli->query(\"INSERT INTO test(id, label) VALUES (1, 'a')\");\n    if (-1 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[007] Expecting int/-1, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"INSERT INTO test(id, label) VALUES (1, 'a') ON DUPLICATE KEY UPDATE id = 4\"))\n        printf(\"[008] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (2 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[009] Expecting int/2, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"INSERT INTO test(id, label) VALUES (2, 'b'), (3, 'c')\"))\n        printf(\"[010] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (2 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[011] Expecting int/2, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"INSERT IGNORE INTO test(id, label) VALUES (1, 'a')\")) {\n        printf(\"[012] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    }\n    if (1 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[013] Expecting int/1, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"INSERT INTO test(id, label) SELECT id + 10, label FROM test\"))\n        printf(\"[014] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (4 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[015] Expecting int/4, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"REPLACE INTO test(id, label) values (4, 'd')\"))\n        printf(\"[015] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (2 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[016] Expecting int/2, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"REPLACE INTO test(id, label) values (5, 'e')\"))\n        printf(\"[017] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (1 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[018] Expecting int/1, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"UPDATE test SET label = 'a' WHERE id = 2\"))\n        printf(\"[019] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    if (1 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[020] Expecting int/1, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"UPDATE test SET label = 'a' WHERE id = 2\")) {\n        printf(\"[021] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    }\n    if (0 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[022] Expecting int/0, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query(\"UPDATE test SET label = 'a' WHERE id = 100\")) {\n        printf(\"[023] [%d] %s\\n\",  $mysqli->errno, $mysqli->error);\n    }\n    if (0 !== ($tmp = $mysqli->affected_rows))\n        printf(\"[024] Expecting int/0, got %s/%s\\n\", gettype($tmp), $tmp);\n    if (!$mysqli->query('DROP TABLE IF EXISTS test'))\n        printf(\"[025] [%d] %s\\n\", $mysqli->errno, $mysqli->error);\n    $mysqli->close();\n    try {\n        $mysqli->affected_rows;\n    } catch (Error $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
