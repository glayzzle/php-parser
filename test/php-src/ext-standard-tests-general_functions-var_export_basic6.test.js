// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/var_export_basic6.phpt
  it("Test var_export() function with valid objects", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing var_export() with valid objects ***\\n\";\n// class with no members\nclass foo\n{\n// no members\n}\n// abstract class\nabstract class abstractClass\n{\n  abstract protected function getClassName();\n  public function printClassName () {\n    echo $this->getClassName() . \"\\n\";\n  }\n}\n// implement abstract class\nclass concreteClass extends abstractClass\n{\n  protected function getClassName() {\n    return \"concreteClass\";\n  }\n}\n// interface class\ninterface iValue\n{\n   public function setVal ($name, $val);\n   public function dumpVal ();\n}\n// implement the interface\nclass Value implements iValue\n{\n  private $vars = array ();\n  public function setVal ( $name, $val ) {\n    $this->vars[$name] = $val;\n  }\n  public function dumpVal () {\n    var_export ( $vars );\n  }\n}\n// a gereral class\nclass myClass\n{\n  var $foo_object;\n  public $public_var;\n  public $public_var1;\n  private $private_var;\n  protected $protected_var;\n  function __construct ( ) {\n    $this->foo_object = new foo();\n    $this->public_var = 10;\n    $this->public_var1 = new foo();\n    $this->private_var = new foo();\n    $this->proected_var = new foo();\n  }\n}\n// create a object of each class defined above\n$myClass_object = new myClass();\n$foo_object = new foo();\n$Value_object = new Value();\n$concreteClass_object = new concreteClass();\n$valid_objects = array(\n                  \"new stdclass\" => new stdclass,\n                  \"new foo\" => new foo,\n                  \"new concreteClass\" => new concreteClass,\n                  \"new Value\" => new Value,\n                  \"new myClass\" => new myClass,\n                  \"myClass_object\" => $myClass_object,\n                  \"myClass_object->foo_object\" => $myClass_object->foo_object,\n                  \"myClass_object->public_var1\" => $myClass_object->public_var1,\n                  \"foo_object\" => $foo_object,\n                  \"Value_object\" => $Value_object,\n                  \"concreteClass_object\" => $concreteClass_object\n                 );\n/* Loop to check for above objects with var_export() */\necho \"\\n*** Output for objects ***\\n\";\nforeach($valid_objects as $key => $obj) {\n    echo \"\\n-- Iteration: $key --\\n\";\n    var_export( $obj );\n    echo \"\\n\";\n    var_export( $obj, FALSE);\n    echo \"\\n\";\n    var_dump( var_export( $obj, TRUE) );\n    echo \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
