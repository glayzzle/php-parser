// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/throw/002.phpt
  it("Test throw with various expressions", function () {
    expect(parser.parseCode("<?php\nclass Foo {\n    public function createNotFoundException() {\n        return new Exception('Not found');\n    }\n    public function throwException() {\n        throw $this->createNotFoundException();\n    }\n    public static function staticCreateNotFoundException() {\n        return new Exception('Static not found');\n    }\n    public static function staticThrowException() {\n        throw static::staticCreateNotFoundException();\n    }\n}\ntry {\n    (new Foo())->throwException();\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    Foo::staticThrowException();\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    throw true ? new Exception('Ternary true 1') : new Exception('Ternary true 2');\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    throw false ? new Exception('Ternary false 1') : new Exception('Ternary false 2');\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $exception1 = new Exception('Coalesce non-null 1');\n    $exception2 = new Exception('Coalesce non-null 2');\n    throw $exception1 ?? $exception2;\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $exception1 = null;\n    $exception2 = new Exception('Coalesce null 2');\n    throw $exception1 ?? $exception2;\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    throw $exception = new Exception('Assignment');\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $exception = null;\n    throw $exception ??= new Exception('Coalesce assignment null');\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $exception = new Exception('Coalesce assignment non-null 1');\n    throw $exception ??= new Exception('Coalesce assignment non-null 2');\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n$andConditionalTest = function ($condition1, $condition2) {\n    throw $condition1 && $condition2\n        ? new Exception('And in conditional 1')\n        : new Exception('And in conditional 2');\n};\ntry {\n    $andConditionalTest(false, false);\n} catch(Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $andConditionalTest(false, true);\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $andConditionalTest(true, false);\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\ntry {\n    $andConditionalTest(true, true);\n} catch (Exception $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
