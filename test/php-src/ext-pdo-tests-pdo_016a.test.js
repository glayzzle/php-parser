// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo/tests/pdo_016a.phpt
  it("PDO Common: PDO::FETCH_BOUND w/o :", function () {
    expect(parser.parseCode("<?php\nif (getenv('REDIR_TEST_DIR') === false) putenv('REDIR_TEST_DIR='.__DIR__ . '/../../pdo/tests/');\nrequire_once getenv('REDIR_TEST_DIR') . 'pdo_test.inc';\n$db = PDOTest::factory();\nif ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {\n    $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);\n}\n$db->exec('CREATE TABLE test(idx int NOT NULL PRIMARY KEY, txt VARCHAR(20))');\n$db->exec('INSERT INTO test VALUES(0, \\'String0\\')');\n$db->exec('INSERT INTO test VALUES(1, \\'String1\\')');\n$db->exec('INSERT INTO test VALUES(2, \\'String2\\')');\n$stmt1 = $db->prepare('SELECT COUNT(idx) FROM test');\n$stmt2 = $db->prepare('SELECT idx, txt FROM test ORDER by idx');\n$stmt1->execute();\nvar_dump($stmt1->fetchColumn());\n$stmt1 = null;\n$stmt2->execute();\n$cont = $stmt2->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_UNIQUE);\nvar_dump($cont);\necho \"===WHILE===\\n\";\n$stmt2->bindColumn('idx', $idx);\n$stmt2->bindColumn('txt', $txt);\n$stmt2->execute();\nwhile($stmt2->fetch(PDO::FETCH_BOUND)) {\n    var_dump(array($idx=>$txt));\n}\necho \"===ALONE===\\n\";\n$stmt3 = $db->prepare('SELECT txt FROM test WHERE idx=:inp');\n$stmt3->bindParam('inp', $idx); /* by foreign name */\n$stmt4 = $db->prepare('SELECT idx FROM test WHERE txt=:txt');\n$stmt4->bindParam('txt', $txt);  /* using same name */\nforeach($cont as $idx => $txt)\n{\n    var_dump(array($idx=>$txt));\n    var_dump($stmt3->execute());\n    if ($idx == 0) {\n        /* portability-wise, you may only bindColumn()s\n         * after execute() has been called at least once */\n        $stmt3->bindColumn('txt', $col1);\n    }\n    var_dump($stmt3->fetch(PDO::FETCH_BOUND));\n    $stmt3->closeCursor();\n    var_dump($stmt4->execute());\n    if ($idx == 0) {\n        /* portability-wise, you may only bindColumn()s\n         * after execute() has been called at least once */\n        $stmt4->bindColumn('idx', $col2);\n    }\n    var_dump($stmt4->fetch(PDO::FETCH_BOUND));\n    $stmt4->closeCursor();\n    var_dump(array($col2=>$col1));\n}\necho \"===REBIND/SAME===\\n\";\n$stmt4->bindColumn('idx', $col1);\nforeach($cont as $idx => $txt)\n{\n    var_dump(array($idx=>$txt));\n    var_dump($stmt3->execute());\n    var_dump($stmt3->fetch(PDO::FETCH_BOUND));\n    $stmt3->closeCursor();\n    var_dump($col1);\n    var_dump($stmt4->execute());\n    var_dump($stmt4->fetch(PDO::FETCH_BOUND));\n    $stmt4->closeCursor();\n    var_dump($col1);\n}\necho \"===REBIND/CONFLICT===\\n\";\n$stmt2->bindColumn('idx', $col1);\n$stmt2->bindColumn('txt', $col1);\n$stmt2->execute();\nwhile($stmt2->fetch(PDO::FETCH_BOUND))\n{\n    var_dump($col1);\n}\n?>")).toMatchSnapshot();
  });
});
