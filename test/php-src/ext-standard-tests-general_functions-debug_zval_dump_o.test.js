// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/debug_zval_dump_o.phpt
  it("Test debug_zval_dump() function : working on objects", function () {
    expect(parser.parseCode("<?php\nfunction zval_dump( $values ) {\n  $counter = 1;\n  foreach( $values as $value ) {\n    echo \"-- Iteration $counter --\\n\";\n    debug_zval_dump( $value );\n    $counter++;\n  }\n}\n/* checking on objects type */\necho \"*** Testing debug_zval_dump() on objects ***\\n\";\nclass object_class {\n  var $value1 = 1;\n  private $value2 = 10;\n  protected $value3 = 20;\n  public $value4 = 30;\n  private function foo1() {\n    echo \"function foo1\\n\";\n  }\n  protected function foo2() {\n    echo \"function foo2\\n\";\n  }\n  public function foo3() {\n    echo \"function foo3\\n\";\n  }\n  public $array_var  = array( \"key1\" => 1, \"key2 \" => 3);\n  function __construct () {\n      $this->value1 = 5;\n      $this->object_class1 = $this;\n  }\n}\nclass no_member_class{\n//no members\n}\n/* class with member as object of other class */\nclass contains_object_class\n{\n   var       $p = 30;\n   protected $p1 = 40;\n   private   $p2 = 50;\n   var       $class_object1;\n   public    $class_object2;\n   private   $class_object3;\n   protected $class_object4;\n   var       $no_member_class_object;\n   public function func() {\n     echo \"func() is called \\n\";\n   }\n   function __construct () {\n     $this->class_object1 = new object_class();\n     $this->class_object2 = new object_class();\n     $this->class_object3 = $this->class_object1;\n     $this->class_object4 = $this->class_object2;\n     $this->no_member_class_object = new no_member_class();\n     $this->class_object5 = $this;   //recursive reference\n   }\n}\n/* creating new object $obj */\n$obj = new contains_object_class();\n$obj1 = & $obj;  //object $obj1 references object $obj\n$obj2 = & $obj;\n$obj3 = & $obj2;\n/* object which is unset */\n$unset_obj = new object_class();\nunset($unset_obj);\n$objects = array (\n  new object_class,\n  new no_member_class,\n  $obj,\n  $obj->class_object1,\n  $obj->class_object2,\n  $obj->no_member_class_object,\n  @$temp_class_obj,  //undefined object\n  $obj2->class_object1,\n  $obj3->class_object2,\n  $obj2->class_object1->value4,\n  @$unset_obj\n);\n/* using zval_dump() to dump out the objects and its reference count */\nzval_dump($objects);\n$int_var = 500;\n$obj = $int_var;  //$obj is lost, $obj1,$obj2,$obj3,$obj4 = 500\necho \"\\n-- Testing debug_zval_dump() on overwritten object variables --\\n\";\ndebug_zval_dump($obj, $obj1, $obj2, $obj3);\necho \"\\n-- Testing debug_zval_dump() on objects having circular reference --\\n\";\n$recursion_obj1 = new object_class();\n$recursion_obj2 = new object_class();\n$recursion_obj1->obj = &$recursion_obj2;  //circular reference\n$recursion_obj2->obj = &$recursion_obj1;  //circular reference\ndebug_zval_dump($recursion_obj2);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
