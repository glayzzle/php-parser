// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_pgsql/tests/copy_from.phpt
  it("PDO PgSQL pgsqlCopyFromArray and pgsqlCopyFromFile", function () {
    expect(parser.parseCode("<?php\nrequire __DIR__ . '/../../../ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory(__DIR__ . '/common.phpt');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);\n$db->exec('CREATE TABLE test (a integer not null primary key, b text, c integer)');\necho \"Preparing test file and array for CopyFrom tests\\n\";\n$tableRows = array();\n$tableRowsWithDifferentNullValues = array();\nfor($i=0;$i<3;$i++) {\n    $firstParameter = $i;\n    $secondParameter = \"test insert {$i}\";\n    $tableRows[] = \"{$firstParameter}\\t{$secondParameter}\\t\\\\N\";\n    $tableRowsWithDifferentNullValues[] = \"{$firstParameter};{$secondParameter};NULL\";\n    $tableRowsWithDifferentNullValuesAndSelectedFields[] = \"{$firstParameter};NULL\";\n}\n$filename = 'test_pgsqlCopyFromFile.csv';\n$filenameWithDifferentNullValues = 'test_pgsqlCopyFromFileWithDifferentNullValues.csv';\n$filenameWithDifferentNullValuesAndSelectedFields = 'test_pgsqlCopyFromFileWithDifferentNullValuesAndSelectedFields.csv';\nfile_put_contents($filename, implode(\"\\n\",$tableRows));\nfile_put_contents($filenameWithDifferentNullValues, implode(\"\\n\",$tableRowsWithDifferentNullValues));\nfile_put_contents($filenameWithDifferentNullValuesAndSelectedFields, implode(\"\\n\",$tableRowsWithDifferentNullValuesAndSelectedFields));\necho \"Testing pgsqlCopyFromArray() with default parameters\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromArray('test',$tableRows));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromArray() with different field separator and not null indicator\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromArray('test',$tableRowsWithDifferentNullValues,\";\",\"NULL\"));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromArray() with only selected fields\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromArray('test',$tableRowsWithDifferentNullValuesAndSelectedFields,\";\",\"NULL\",'a,c'));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromArray() with error\\n\";\n$db->beginTransaction();\ntry {\n    var_dump($db->pgsqlCopyFromArray('test_error',$tableRowsWithDifferentNullValuesAndSelectedFields,\";\",\"NULL\",'a,c'));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromFile() with default parameters\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromFile('test',$filename));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromFile() with different field separator and not null indicator\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromFile('test',$filenameWithDifferentNullValues,\";\",\"NULL\"));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromFile() with only selected fields\\n\";\n$db->beginTransaction();\nvar_dump($db->pgsqlCopyFromFile('test',$filenameWithDifferentNullValuesAndSelectedFields,\";\",\"NULL\",'a,c'));\n$stmt = $db->query(\"select * from test\");\nforeach($stmt as $r) {\n    var_dump($r);\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromFile() with error\\n\";\n$db->beginTransaction();\ntry {\n    var_dump($db->pgsqlCopyFromFile('test_error',$filenameWithDifferentNullValuesAndSelectedFields,\";\",\"NULL\",'a,c'));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\n$db->rollback();\necho \"Testing pgsqlCopyFromFile() with non existing file\\n\";\n$db->beginTransaction();\ntry {\n    var_dump($db->pgsqlCopyFromFile('test',\"nonexisting/foo.csv\",\";\",\"NULL\",'a,c'));\n} catch (Exception $e) {\n    echo \"Exception: {$e->getMessage()}\\n\";\n}\n$db->rollback();\n// Clean up\nforeach (array($filename, $filenameWithDifferentNullValues, $filenameWithDifferentNullValuesAndSelectedFields) as $f) {\n    @unlink($f);\n}\n?>")).toMatchSnapshot();
  });
});
