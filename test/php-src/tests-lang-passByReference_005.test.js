// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/passByReference_005.phpt
  it("Pass uninitialized variables by reference and by value to test implicit initialisation.", function () {
    expect(parser.parseCode("<?php\nfunction v($val) {\n    $val = \"Val changed\";\n}\nfunction r(&$ref) {\n    $ref = \"Ref changed\";\n}\nfunction vv($val1, $val2) {\n    $val1 = \"Val1 changed\";\n    $val2 = \"Val2 changed\";\n}\nfunction vr($val, &$ref) {\n    $val = \"Val changed\";\n    $ref = \"Ref changed\";\n}\nfunction rv(&$ref, $val) {\n    $val = \"Val changed\";\n    $ref = \"Ref changed\";\n}\nfunction rr(&$ref1, &$ref2) {\n    $ref1 = \"Ref1 changed\";\n    $ref2 = \"Ref2 changed\";\n}\nclass C {\n    function __construct($val, &$ref) {\n        $val = \"Val changed\";\n        $ref = \"Ref changed\";\n    }\n    function v($val) {\n        $val = \"Val changed\";\n    }\n    function r(&$ref) {\n        $ref = \"Ref changed\";\n    }\n    function vv($val1, $val2) {\n        $val1 = \"Val1 changed\";\n        $val2 = \"Val2 changed\";\n    }\n    function vr($val, &$ref) {\n        $val = \"Val changed\";\n        $ref = \"Ref changed\";\n    }\n    function rv(&$ref, $val) {\n        $val = \"Val changed\";\n        $ref = \"Ref changed\";\n    }\n    function rr(&$ref1, &$ref2) {\n        $ref1 = \"Ref1 changed\";\n        $ref2 = \"Ref2 changed\";\n    }\n    static function static_v($val) {\n        $val = \"Val changed\";\n    }\n    static function static_r(&$ref) {\n        $ref = \"Ref changed\";\n    }\n    static function static_vv($val1, $val2) {\n        $val1 = \"Val1 changed\";\n        $val2 = \"Val2 changed\";\n    }\n    static function static_vr($val, &$ref) {\n        $val = \"Val changed\";\n        $ref = \"Ref changed\";\n    }\n    static function static_rv(&$ref, $val) {\n        $val = \"Val changed\";\n        $ref = \"Ref changed\";\n    }\n    static function static_rr(&$ref1, &$ref2) {\n        $ref1 = \"Ref1 changed\";\n        $ref2 = \"Ref2 changed\";\n    }\n}\necho \"\\n ---- Pass by ref / pass by val: functions ----\\n\";\nunset($u1, $u2);\nv($u1);\nr($u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nvv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nvr($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nrv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nrr($u1, $u2);\nvar_dump($u1, $u2);\necho \"\\n\\n ---- Pass by ref / pass by val: static method calls ----\\n\";\nunset($u1, $u2);\nC::static_v($u1);\nC::static_r($u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nC::static_vv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nC::static_vr($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nC::static_rv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\nC::static_rr($u1, $u2);\nvar_dump($u1, $u2);\necho \"\\n\\n ---- Pass by ref / pass by val: instance method calls ----\\n\";\nunset($u1, $u2);\n$c = new C($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\n$c->v($u1);\n$c->r($u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\n$c->vv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\n$c->vr($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\n$c->rv($u1, $u2);\nvar_dump($u1, $u2);\nunset($u1, $u2);\n$c->rr($u1, $u2);\nvar_dump($u1, $u2);\n?>")).toMatchSnapshot();
  });
});
