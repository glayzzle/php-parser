// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/bug72333.phpt
  it("Bug #72333: fwrite() on non-blocking SSL sockets doesn't work", function () {
    expect(parser.parseCode("<?php\n$certFile = __DIR__ . DIRECTORY_SEPARATOR . 'bug72333.pem.tmp';\n$serverCode = <<<'CODE'\n    $context = stream_context_create(['ssl' => ['local_cert' => '%s']]);\n    $flags = STREAM_SERVER_BIND|STREAM_SERVER_LISTEN;\n    $fp = stream_socket_server(\"ssl://127.0.0.1:10011\", $errornum, $errorstr, $flags, $context);\n    phpt_notify();\n    $conn = stream_socket_accept($fp);\n    $total = 100000;\n    $result = fread($conn, $total);\n    stream_set_blocking($conn, false);\n    usleep(50000);\n    $read = [$conn];\n    while (stream_select($read, $write, $except, 1)) {\n        $result = fread($conn, 100000);\n        if (!$result) {\n            break;\n        }\n        $total += strlen($result);\n        if ($total >= 4000000) {\n            break;\n        }\n    }\n    phpt_wait();\nCODE;\n$serverCode = sprintf($serverCode, $certFile);\n$peerName = 'bug72333';\n$clientCode = <<<'CODE'\n    $context = stream_context_create(['ssl' => ['verify_peer' => false, 'peer_name' => '%s']]);\n    phpt_wait();\n    $fp = stream_socket_client(\"ssl://127.0.0.1:10011\", $errornum, $errorstr, 3000, STREAM_CLIENT_CONNECT, $context);\n    stream_set_blocking($fp, false);\n    function blocking_fwrite($fp, $buf) {\n        $write = [$fp];\n        $total = 0;\n        while (stream_select($read, $write, $except, 1)) {\n            $result = fwrite($fp, $buf);\n            if (!$result) {\n                break;\n            }\n            $total += $result;\n            if ($total >= strlen($buf)) {\n                return $total;\n            }\n            $buf = substr($buf, $total);\n        }\n    }\n    $str1 = str_repeat(\"a\", 4000000);\n    blocking_fwrite($fp, $str1);\n    phpt_notify();\n    echo \"done\";\nCODE;\n$clientCode = sprintf($clientCode, $peerName);\ninclude 'CertificateGenerator.inc';\n$certificateGenerator = new CertificateGenerator();\n$certificateGenerator->saveNewCertAsFileWithKey($peerName, $certFile);\ninclude 'ServerClientTestCase.inc';\nServerClientTestCase::getInstance()->run($clientCode, $serverCode);\n?>")).toMatchSnapshot();
  });
});
