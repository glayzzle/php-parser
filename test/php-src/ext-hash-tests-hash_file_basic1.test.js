// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/hash/tests/hash_file_basic1.phpt
  it("Hash: hash_file() function : basic functionality", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing hash_file() : basic functionality ***\\n\";\n$file = __DIR__ . \"hash_file.txt\";\n/* Creating a temporary file file */\nif (($fp = fopen( $file, \"w+\")) == FALSE) {\n    echo \"Cannot create file ($file)\";\n    exit;\n}\n/* Writing into file */\n$content = \"This is a sample string used to test the hash_file function with various hashing algorithms\";\nif (is_writable($file)) {\n  if (fwrite($fp, $content) === FALSE) {\n    echo \"Cannot write to file ($file)\";\n    exit;\n  }\n}\n// close the file\nfclose($fp);\necho \"adler32: \" . hash_file('adler32', $file) . \"\\n\";\necho \"crc32: \" . hash_file('crc32', $file) . \"\\n\";\necho \"gost: \" . hash_file('gost', $file). \"\\n\";\necho \"haval128,3: \" . hash_file('haval128,3', $file). \"\\n\";\necho \"md2: \" . hash_file('md2', $file). \"\\n\";\necho \"md4: \" . hash_file('md4', $file). \"\\n\";\necho \"md5: \" . hash_file('md5', $file). \"\\n\";\necho \"ripemd128: \" . hash_file('ripemd128', $file). \"\\n\";\necho \"ripemd160: \" . hash_file('ripemd160', $file). \"\\n\";\necho \"ripemd256: \" . hash_file('ripemd256', $file). \"\\n\";\necho \"ripemd320: \" . hash_file('ripemd320', $file). \"\\n\";\necho \"sha1: \" . hash_file('sha1', $file). \"\\n\";\necho \"sha256: \" . hash_file('sha256', $file). \"\\n\";\necho \"sha384: \" . hash_file('sha384', $file). \"\\n\";\necho \"sha512: \" . hash_file('sha512', $file). \"\\n\";\necho \"snefru: \" . hash_file('snefru', $file). \"\\n\";\necho \"tiger192,3: \" . hash_file('tiger192,3', $file). \"\\n\";\necho \"whirlpool: \" . hash_file('whirlpool', $file). \"\\n\";\necho \"adler32(raw): \" . bin2hex(hash_file('adler32', $file, TRUE)) . \"\\n\";\necho \"md5(raw): \" . bin2hex(hash_file('md5', $file, TRUE)). \"\\n\";\necho \"sha256(raw): \" . bin2hex(hash_file('sha256', $file, TRUE)). \"\\n\";\nunlink($file);\n?>")).toMatchSnapshot();
  });
});
