// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/gd/tests/colorclosest.phpt
  it("imageclosest", function () {
    expect(parser.parseCode("<?php\n$im = imagecreatetruecolor(5,5);\n$c = imagecolorclosest($im, 255,0,255);\nprintf(\"%X\\n\", $c);\nimagedestroy($im);\n$im = imagecreate(5,5);\n$c = imagecolorclosest($im, 255,0,255);\ntry {\n  imagecolorsforindex($im, $c);\n} catch (ValueError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\nimagedestroy($im);\n$im = imagecreate(5,5);\nimagecolorallocate($im, 255, 0, 255);\n$c = imagecolorclosest($im, 255,0,255);\nprint_r(imagecolorsforindex($im, $c));\nimagedestroy($im);\n$im = imagecreate(5,5);\nfor ($i=0; $i<255; $i++) imagecolorresolve($im, $i,0,0);\n$c = imagecolorclosest($im, 255,0,0);\nprint_r(imagecolorsforindex($im, $c));\n$im = imagecreate(5,5);\nfor ($i=0; $i<256; $i++) {\n    if ($i == 246) {\n        imagecolorallocate($im, $i,10,10);\n    } else {\n        imagecolorallocate($im, $i,0,0);\n    }\n}\n$c = imagecolorclosest($im, 255,10,10);\nprint_r(imagecolorsforindex($im, $c));\n// with alpha\n$im = imagecreatetruecolor(5,5);\n$c = imagecolorclosestalpha($im, 255,0,255,100);\nprintf(\"%X\\n\", $c);\nimagedestroy($im);\n$im = imagecreate(5,5);\n$c = imagecolorclosestalpha($im, 255,0,255,100);\ntry {\n  imagecolorsforindex($im, $c);\n} catch (ValueError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\nimagedestroy($im);\n$im = imagecreate(5,5);\nimagecolorallocatealpha($im, 255, 0, 255, 1);\n$c = imagecolorclosestalpha($im, 255,0,255,1);\nprint_r(imagecolorsforindex($im, $c));\nimagedestroy($im);\n$im = imagecreate(5,5);\nfor ($i=0; $i<255; $i++) imagecolorresolvealpha($im, $i,0,0,1);\n$c = imagecolorclosestalpha($im, 255,0,0,1);\nprint_r(imagecolorsforindex($im, $c));\n$im = imagecreate(5,5);\nfor ($i=0; $i<256; $i++) {\n    if ($i == 246) {\n        imagecolorallocatealpha($im, $i,10,10,1);\n    } else {\n        imagecolorallocatealpha($im, $i,0,0,100);\n    }\n}\n$c = imagecolorclosestalpha($im, 255,10,10,1);\nprint_r(imagecolorsforindex($im, $c));\n?>")).toMatchSnapshot();
  });
});
