// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/multiple_iterator_001.phpt
  it("SPL: MultipleIterator", function () {
    expect(parser.parseCode("<?php\n$iter1 = new ArrayIterator(array(1,2,3));\n$iter2 = new ArrayIterator(array(1,2));\n$iter3 = new ArrayIterator(array(new stdClass(),\"string\",3));\n$m = new MultipleIterator();\necho \"-- Default flags, no iterators --\\n\";\nforeach($m as $value) {\n    var_dump($value);\n}\ntry {\n    var_dump($m->current());\n} catch (RuntimeException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($m->key());\n} catch (RuntimeException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n$m->attachIterator($iter1);\n$m->attachIterator($iter2);\n$m->attachIterator($iter3);\necho \"-- Default flags, MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC --\\n\";\nvar_dump($m->getFlags() === (MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC));\nforeach($m as $key => $value) {\n    var_dump($key, $value);\n}\ntry {\n    $m->current();\n} catch(RuntimeException $e) {\n    echo \"RuntimeException thrown: \" . $e->getMessage() . \"\\n\";\n}\ntry {\n    $m->key();\n} catch(RuntimeException $e) {\n    echo \"RuntimeException thrown: \" . $e->getMessage() . \"\\n\";\n}\necho \"-- Flags = MultipleIterator::MIT_NEED_ANY | MultipleIterator::MIT_KEYS_NUMERIC --\\n\";\n$m->setFlags(MultipleIterator::MIT_NEED_ANY | MultipleIterator::MIT_KEYS_NUMERIC);\nvar_dump($m->getFlags() === (MultipleIterator::MIT_NEED_ANY | MultipleIterator::MIT_KEYS_NUMERIC));\nforeach($m as $key => $value) {\n    var_dump($key, $value);\n}\necho \"-- Default flags, added element --\\n\";\n$m->setFlags(MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC);\n$iter2[] = 3;\nforeach($m as $key => $value) {\n    var_dump($key, $value);\n}\necho \"-- Flags |= MultipleIterator::MIT_KEYS_ASSOC, with iterator associated with NULL --\\n\";\n$m->setFlags(MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_ASSOC);\n$m->rewind();\ntry {\n    $m->current();\n} catch(InvalidArgumentException $e) {\n    echo \"InvalidArgumentException thrown: \" . $e->getMessage() . \"\\n\";\n}\necho \"-- Flags |= MultipleIterator::MIT_KEYS_ASSOC --\\n\";\n$m->attachIterator($iter1, \"iter1\");\n$m->attachIterator($iter2, \"iter2\");\n$m->attachIterator($iter3, 3);\nforeach($m as $key => $value) {\n    var_dump($key, $value);\n}\necho \"-- Associate with invalid value --\\n\";\ntry {\n    $m->attachIterator($iter3, new stdClass());\n} catch(TypeError $e) {\n    echo \"TypeError thrown: \" . $e->getMessage() . \"\\n\";\n}\necho \"-- Associate with duplicate value --\\n\";\ntry {\n    $m->attachIterator($iter3, \"iter1\");\n} catch(InvalidArgumentException $e) {\n    echo \"InvalidArgumentException thrown: \" . $e->getMessage() . \"\\n\";\n}\necho \"-- Count, contains, detach, count, contains, iterate --\\n\";\nvar_dump($m->countIterators());\nvar_dump($m->containsIterator($iter2));\nvar_dump($m->detachIterator($iter2));\nvar_dump($m->countIterators());\nvar_dump($m->containsIterator($iter2));\nforeach($m as $key => $value) {\n    var_dump($key, $value);\n}\n?>")).toMatchSnapshot();
  });
});
