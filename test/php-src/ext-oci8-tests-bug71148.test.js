// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/oci8/tests/bug71148.phpt
  it("Bug #71448 (Binding reference overwritten on php7)", function () {
    expect(parser.parseCode("<?php\nrequire(__DIR__.'/connect.inc');\n// Initialize\n$stmtarray = array(\n    \"CREATE OR REPLACE FUNCTION bindfunc(var1 varchar2, var2 varchar2)\n       RETURN varchar2\n       AS var3 VARCHAR2(20);\n       BEGIN\n         var3 := CONCAT(var1, var2);\n         RETURN var3;\n       END;\",\n    \"CREATE OR REPLACE PROCEDURE bindproc(var1 IN string, var2 IN string, var3 IN OUT string) IS\n       BEGIN\n         var3 := CONCAT(var1, var3);\n         var3 := CONCAT(var3, var2);\n       END;\"\n);\noci8_test_sql_execute($c, $stmtarray);\n// Run test\nfunction bindvar($stmt, $name, $var)\n{\n  oci_bind_by_name($stmt, $name, $var);\n}\n// Test 1: Bind input parameter in a local function\n$sql = \"select :var1, :var2 from dual\";\n$cache1 = \"INSTR1\";\n$cache2 = \"INSTR2\";\necho \"Test 1: Bind input parameter in a local function\\n\";\n$stmt = oci_parse($c, $sql);\nbindvar($stmt, ':var1', $cache1);\nbindvar($stmt, ':var2', $cache2);\noci_execute($stmt);\nvar_dump(oci_fetch_assoc($stmt));\noci_free_statement($stmt);\n// Test 2: Bind output parameter in a local function\n$sql = \"begin :output1 := 'OUTSTR1'; :output2 := 'OUTSTR2'; end;\";\n$cache1 = \"xxxxxx\";\n$cache2 = \"xxxxxx\";\necho \"\\nTest 2: Bind output parameter in a local function\\n\";\n$stmt = oci_parse($c, $sql);\nbindvar($stmt, ':output1', $cache1);\nbindvar($stmt, ':output2', $cache2);\noci_execute($stmt);\nvar_dump($cache1);\nvar_dump($cache2);\noci_free_statement($stmt);\n// Test 3: Bind output parameter within the same scope of execute\n$sql = \"begin :output1 := 'OUTSTR1'; :output2 := 'OUTSTR2'; end;\";\n$cache1 = \"xxxxxx\";\n$cache2 = \"xxxxxx\";\necho \"\\nTest 3: Bind output parameter within the same scope of execute\\n\";\n$stmt = oci_parse($c, $sql);\noci_bind_by_name($stmt, \":output1\", $cache1);\noci_bind_by_name($stmt, \":output2\", $cache2);\noci_execute($stmt);\nvar_dump($cache1);\nvar_dump($cache2);\noci_free_statement($stmt);\n// Test 4: Bind output parameter within the same scope of execute\n$sql= \"begin :output := bindfunc(:var1, :var2); end;\";\n$cache1 = \"STR1\";\n$cache2 = \"STR2\";\necho \"\\nTest 4: Bind output parameter within the same scope of execute\\n\";\n$stmt = oci_parse($c, $sql);\noci_bind_by_name($stmt, \":var1\", $cache1, -1);\noci_bind_by_name($stmt, \":var2\", $cache2, -1);\noci_bind_by_name($stmt, \":output\", $cache3, 100);\noci_execute($stmt);\nvar_dump($cache3);\n// Test 5: Bind IN OUT parameter in a local function\n$sql = \"call bindproc(:var1, :var2, :var3)\";\n$cache1 = 'STR1';\n$cache2 = 'STR2';\n$cache3 = ' ';\necho \"\\nTest 5: Bind IN OUT parameter in a local function\\n\";\n$stmt = oci_parse($c, $sql);\nbindvar($stmt, ':var1', $cache1);\nbindvar($stmt, ':var2', $cache2);\nbindvar($stmt, ':var3', $cache3);\noci_execute($stmt);\nvar_dump($cache1);\nvar_dump($cache2);\nvar_dump($cache3);\noci_free_statement($stmt);\n// Test 6: Bind IN OUT parameter within the same scope of execute\n$sql = \"call bindproc(:var1, :var2, :var3)\";\n$cache1 = 'STR1';\n$cache2 = 'STR2';\n$cache3 = ' ';\necho \"\\nTest 6: Bind IN OUT parameter within the same scope of execute\\n\";\n$stmt = oci_parse($c, $sql);\noci_bind_by_name($stmt, \":var1\", $cache1, -1);\noci_bind_by_name($stmt, \":var2\", $cache2, -1);\noci_bind_by_name($stmt, \":var3\", $cache3, 100);\noci_execute($stmt);\nvar_dump($cache1);\nvar_dump($cache2);\nvar_dump($cache3);\n// Cleanup\n$stmtarray = array(\n    \"DROP FUNCTION bindfunc\",\n    \"DROP PROCEDURE bindproc\"\n);\noci8_test_sql_execute($c, $stmtarray);\n?>")).toMatchSnapshot();
  });
});
