// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/soap/tests/bugs/bug30045.phpt
  it("Bug #30045 (Cannot pass big integers (> 2147483647) in SOAP requests)", function () {
    expect(parser.parseCode("<?php\nfunction foo($type, $num) {\n  return new SoapVar($num, $type);\n}\nclass LocalSoapClient extends SoapClient {\n  function __construct($wsdl, $options) {\n    parent::__construct($wsdl, $options);\n    $this->server = new SoapServer($wsdl, $options);\n    $this->server->addFunction('foo');\n  }\n  function __doRequest($request, $location, $action, $version, $one_way = 0): ?string {\n    $xml = simplexml_load_string($request);\n    echo $xml->children(\"http://schemas.xmlsoap.org/soap/envelope/\")->Body->children(\"http://test-uri\")->children()->param1->asXML(),\"\\n\";\n    unset($xml);\n    ob_start();\n    $this->server->handle($request);\n    $response = ob_get_contents();\n    ob_end_clean();\n    return $response;\n  }\n}\n$soap = new LocalSoapClient(NULL, array(\"uri\"=>\"http://test-uri\", \"location\"=>\"test://\"));\nfunction test($type, $num) {\n  global $soap;\n  try {\n      printf(\"  %0.0f\\n    \", $num);\n      $ret = $soap->foo($type, new SoapVar($num, $type));\n      printf(\"    %0.0f\\n\", $ret);\n    } catch (SoapFault $ex) {\n      var_dump($ex);\n    }\n}\n/*\necho \"byte\\n\";\n//test(XSD_BYTE, -129);\ntest(XSD_BYTE, -128);\ntest(XSD_BYTE,  127);\n//test(XSD_BYTE,  128);\necho \"\\nshort\\n\";\n//test(XSD_SHORT, -32769);\ntest(XSD_SHORT, -32768);\ntest(XSD_SHORT,  32767);\n//test(XSD_SHORT,  32768);\necho \"\\nint\\n\";\n//test(XSD_INT, -2147483649);\ntest(XSD_INT, -2147483648);\ntest(XSD_INT,  2147483647);\n//test(XSD_INT,  2147483648);\necho \"\\nlong\\n\";\n//test(XSD_LONG, -9223372036854775809);\ntest(XSD_LONG, -9223372036854775808);\ntest(XSD_LONG,  9223372036854775807);\n//test(XSD_LONG,  9223372036854775808);\necho \"\\nunsignedByte\\n\";\n//test(XSD_UNSIGNEDBYTE, -1);\ntest(XSD_UNSIGNEDBYTE,  0);\ntest(XSD_UNSIGNEDBYTE,  255);\n//test(XSD_UNSIGNEDBYTE,  256);\necho \"\\nunsignedShort\\n\";\n//test(XSD_UNSIGNEDSHORT, -1);\ntest(XSD_UNSIGNEDSHORT,  0);\ntest(XSD_UNSIGNEDSHORT,  65535);\n//test(XSD_UNSIGNEDSHORT,  65536);\necho \"\\nunsignedInt\\n\";\n//test(XSD_UNSIGNEDINT, -1);\ntest(XSD_UNSIGNEDINT,  0);\ntest(XSD_UNSIGNEDINT,  4294967295);\n//test(XSD_UNSIGNEDINT,  4294967296);\necho \"\\nunsignedLong\\n\";\n//test(XSD_UNSIGNEDLONG, -1);\ntest(XSD_UNSIGNEDLONG,  0);\ntest(XSD_UNSIGNEDLONG,  18446744073709551615);\n//test(XSD_UNSIGNEDLONG,  18446744073709551616);\necho \"\\nnegativeInteger\\n\";\ntest(XSD_NEGATIVEINTEGER, -18446744073709551616);\ntest(XSD_NEGATIVEINTEGER, -1);\n//test(XSD_NEGATIVEINTEGER,  0);\necho \"\\nnonPositiveInteger\\n\";\ntest(XSD_NONPOSITIVEINTEGER, -18446744073709551616);\ntest(XSD_NONPOSITIVEINTEGER,  0);\n//test(XSD_NONPOSITIVEINTEGER,  1);\necho \"\\nnonNegativeInteger\\n\";\n//test(XSD_NONNEGATIVEINTEGER, -1);\ntest(XSD_NONNEGATIVEINTEGER,  0);\ntest(XSD_NONNEGATIVEINTEGER,  18446744073709551616);\necho \"\\nPositiveInteger\\n\";\n//test(XSD_POSITIVEINTEGER,  0);\ntest(XSD_POSITIVEINTEGER,  1);\ntest(XSD_POSITIVEINTEGER,  18446744073709551616);\necho \"\\ninteger\\n\";\ntest(XSD_INTEGER, -18446744073709551616);\ntest(XSD_INTEGER,  18446744073709551616);\n*/\necho \"long\\n\";\ntest(XSD_LONG, 2147483647);\ntest(XSD_LONG, 2147483648);\ntest(XSD_LONG,  4294967296);\ntest(XSD_LONG,  8589934592);\ntest(XSD_LONG, 17179869184);\necho \"\\nunsignedLong\\n\";\ntest(XSD_UNSIGNEDLONG,  2147483647);\ntest(XSD_UNSIGNEDLONG,  2147483648);\ntest(XSD_UNSIGNEDLONG,  4294967296);\ntest(XSD_UNSIGNEDLONG,  8589934592);\ntest(XSD_UNSIGNEDLONG, 17179869184);\n?>")).toMatchSnapshot();
  });
});
