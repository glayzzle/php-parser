// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/dateformat_is_set_lenient.phpt
  it("datefmt_set_lenient and datefmt_set_lenient()", function () {
    expect(parser.parseCode("<?php\n/*\n * Test for the datefmt_get_lenient & datefmt_set_lenient function\n */\nfunction ut_main()\n{\n        $res_str = '';\n    //Create\n        $fmt = ut_datefmt_create( \"en-US\",  IntlDateFormatter::SHORT, IntlDateFormatter::SHORT , 'America/New_York', IntlDateFormatter::GREGORIAN );\n        $res_str .= \"\\nIntlDateFormatter Created.\\n\";\n        $resLenient1 = ut_datefmt_is_lenient( $fmt);\n        $res_str .= \"After call to get_lenient :  lenient= \";\n    if( $resLenient1){\n        $res_str .= \"TRUE\\n\";\n    }else{\n        $res_str .= \"FALSE\\n\";\n    }\n    //Set and test\n        $res_str .= \"--------------------\\n\";\n        $isLenient = TRUE;\n    $res_str .= \"Setting IntlDateFormatter with lenient = \";\n    if( $isLenient){\n        $res_str .= \"TRUE\\n\";\n    }else{\n        $res_str .= \"FALSE\\n\";\n    }\n    ut_datefmt_set_lenient( $fmt , $isLenient );\n    $resLenient = ut_datefmt_is_lenient( $fmt);\n    $res_str .= \"After call to is_lenient :  lenient= \";\n    if( $resLenient){\n        $res_str .= \"TRUE\\n\";\n    }else{\n        $res_str .= \"FALSE\\n\";\n    }\n    //Set and test\n        $res_str .= \"--------------------\\n\";\n        $isLenient = FALSE;\n    $res_str .= \"Setting IntlDateFormatter with lenient =\";\n    if( $isLenient){\n        $res_str .= \"TRUE\\n\";\n    }else{\n        $res_str .= \"FALSE\\n\";\n    }\n    ut_datefmt_set_lenient( $fmt , $isLenient);\n    $resLenient = ut_datefmt_is_lenient( $fmt);\n    $res_str .= \"After call to is_lenient :  lenient= \";\n    if( $resLenient){\n        $res_str .= \"TRUE\\n\";\n    }else{\n        $res_str .= \"FALSE\\n\";\n    }\n        $res_str .= \"--------------------\\n\";\n        return $res_str;\n}\ninclude_once( 'ut_common.inc' );\n// Run the test\nut_run();\n?>")).toMatchSnapshot();
  });
});
