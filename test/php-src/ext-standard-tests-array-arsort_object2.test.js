// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/arsort_object2.phpt
  it("Test arsort() function : object functionality - sorting objects with diff. accessibility of member vars", function () {
    expect(parser.parseCode("<?php\n/*\n * testing arsort() by providing integer/string object arrays with following flag values\n * 1. Default flag value\n   2. SORT_REGULAR - compare items normally\n*/\necho \"*** Testing arsort() : object functionality ***\\n\";\n// class declaration for integer objects\nclass for_integer_arsort\n{\n  public $public_class_value;\n  private $private_class_value;\n  protected $protected_class_value;\n  // initializing object member value\n  function __construct($value1, $value2,$value3){\n    $this->public_class_value = $value1;\n    $this->private_class_value = $value2;\n    $this->protected_class_value = $value3;\n  }\n}\n// class declaration for string objects\nclass for_string_arsort\n{\n  public $public_class_value;\n  private $private_class_value;\n  protected $protected_class_value;\n  // initializing object member value\n  function __construct($value1, $value2,$value3){\n    $this->public_class_value = $value1;\n    $this->private_class_value = $value2;\n    $this->protected_class_value = $value3;\n  }\n  // return string value\n  function __tostring() {\n   return (string)$this->value;\n  }\n}\n// array of integer objects\n$unsorted_int_obj = array (\n  1 => new for_integer_arsort(11, 33,2), 2 =>  new for_integer_arsort(44, 66,3),\n  3 => new for_integer_arsort(23, 32,6), 4 => new for_integer_arsort(-88, -5,-4),\n);\n// array of string objects\n$unsorted_str_obj = array (\n  \"a\" => new for_string_arsort(\"axx\",\"AXX\",\"d\"), \"b\" => new for_string_arsort(\"T\", \"t\",\"q\"),\n  \"c\" => new for_string_arsort(\"w\", \"W\",\"c\"), \"d\" => new for_string_arsort(\"PY\", \"py\",\"s\"),\n);\necho \"\\n-- Testing arsort() by supplying various object arrays, 'flag' value is default --\\n\";\n// testing arsort() function by supplying integer object array, flag value is default\n$temp_array = $unsorted_int_obj;\nvar_dump(arsort($temp_array) );\nvar_dump($temp_array);\n// testing arsort() function by supplying string object array, flag value is default\n$temp_array = $unsorted_str_obj;\nvar_dump(arsort($temp_array) );\nvar_dump($temp_array);\necho \"\\n-- Testing arsort() by supplying various object arrays, 'flag' value is SORT_REGULAR --\\n\";\n// testing arsort() function by supplying integer object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_int_obj;\nvar_dump(arsort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\n// testing arsort() function by supplying string object array, flag value = SORT_REGULAR\n$temp_array = $unsorted_str_obj;\nvar_dump(arsort($temp_array, SORT_REGULAR) );\nvar_dump($temp_array);\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
