// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_unshift_variation4.phpt
  it("Test array_unshift() function : usage variations - assoc. array with diff. keys for 'array' argument", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing the functionality of array_unshift() by passing different\n * associative arrays having different possible keys to $array argument.\n * The $var argument passed is a fixed value\n*/\necho \"*** Testing array_unshift() : associative array with different keys ***\\n\";\n//get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n//get a resource variable\n$fp = fopen(__FILE__, \"r\");\n//get a class\nclass classA\n{\n  public function __toString(){\n    return \"Class A object\";\n  }\n}\n// get a heredoc string\n$heredoc = <<<EOT\nHello world\nEOT;\n// initializing $var argument\n$var = 10;\n// different variations of associative arrays to be passed to $array argument\n$arrays = array (\n       // empty array\n/*1*/  array(),\n       // arrays with integer keys\n       array(0 => \"0\"),\n       array(1 => \"1\"),\n       array(1 => \"1\", 2 => \"2\", 3 => \"3\", 4 => \"4\"),\n       // arrays with string keys\n/*7*/  array('\\tHello' => 111, 're\\td' => \"color\",\n             '\\v\\fworld' => 2.2, 'pen\\n' => 33),\n       array(\"\\tHello\" => 111, \"re\\td\" => \"color\",\n             \"\\v\\fworld\" => 2.2, \"pen\\n\" => 33),\n       array(\"hello\", $heredoc => \"string\"), // heredoc\n       // array with object, unset variable and resource variable\n       array(@$unset_var => \"hello\", $fp => 'resource'),\n       // array with mixed keys\n/*11*/ array('hello' => 1, \"fruit\" => 2.2,\n             $fp => 'resource', 133 => \"int\",\n             @$unset_var => \"unset\", $heredoc => \"heredoc\")\n);\n// loop through the various elements of $arrays to test array_unshift()\n$iterator = 1;\nforeach($arrays as $array) {\n  echo \"-- Iteration $iterator --\\n\";\n  /* with default argument */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var) );\n  // dump the resulting array\n  var_dump($temp_array);\n  /* with optional arguments */\n  // returns element count in the resulting array after arguments are pushed to\n  // beginning of the given array\n  $temp_array = $array;\n  var_dump( array_unshift($temp_array, $var, \"hello\", 'world') );\n  // dump the resulting array\n  var_dump($temp_array);\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
