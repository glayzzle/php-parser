// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_callable_basic2.phpt
  it("Test is_callable() function : usage variations - on objects", function () {
    expect(parser.parseCode("<?php\nfunction check_iscallable_objects( $methods ) {\n  global $loop_counter;\n  $counter = 1;\n  foreach($methods as $method) {\n    echo \"-- Innerloop iteration $counter of Outerloop iteration $loop_counter --\\n\";\n    var_dump( is_callable($method) );\n    var_dump( is_callable($method, true) );\n    var_dump( is_callable($method, false) );\n    var_dump( is_callable($method, true, $callable_name) );\n    echo $callable_name, \"\\n\";\n    var_dump( is_callable($method, false, $callable_name) );\n    echo $callable_name, \"\\n\";\n    $counter++;\n  }\n}\necho \"\\n*** Testing is_callable() on objects ***\\n\";\nclass object_class\n{\n  public $value = 100;\n  /* static method */\n  static public function foo() {\n  }\n  public function foo1() {\n  }\n  /* function name with mixed string and integer */\n  public function x123() {\n  }\n  /* function name as NULL */\n  public function null() {\n  }\n  /* function name having boolean value */\n  public function TRUE() {\n  }\n  protected function foo2() {\n  }\n  private function foo3() {\n  }\n}\n/* class with no member */\nclass no_member_class {\n // no members\n}\n/* class with member as object of other class */\nclass contains_object_class\n{\n   public    $class_object1;\n   var       $no_member_class_object;\n   public function func() {\n     echo \"func() is called \\n\";\n   }\n   function __construct () {\n     $this->class_object1 = new object_class();\n     $this->no_member_class_object = new no_member_class();\n   }\n}\n/* objects of different classes */\n$obj = new contains_object_class;\n$temp_class_obj = new object_class();\n/* object which is unset */\n$unset_obj = new object_class();\nunset($unset_obj);\n/* check is_callable() on static method */\necho \"\\n** Testing behavior of is_callable() on static methods **\\n\";\nvar_dump( is_callable('object_class::foo()', true) );   //expected: true\nvar_dump( is_callable('object_class::foo()') );    //expected: false\necho \"\\n** Testing normal operations of is_callable() on objects **\\n\";\n$objects = array (\n  new object_class,\n  new no_member_class,\n  new contains_object_class,\n  $obj,\n  $obj->class_object1,\n  $obj->no_member_class_object,\n  $temp_class_obj,\n  @$unset_obj\n);\n/* loop to check whether given object/string has valid given method name\n *  expected: true if valid callback\n *            false otherwise\n */\n$loop_counter = 1;\nforeach($objects as $object) {\n  echo \"--- Outerloop iteration $loop_counter ---\\n\";\n  $methods = array (\n    array( $object, 'foo1' ),\n    array( $object, 'foo2' ),\n    array( $object, 'foo3' ),\n    array( $object, 'x123' ),\n    array( $object, 'null' ),\n    array( $object, 'TRUE' ),\n    array( $object, '123' ),\n    array( @$temp_class_obj->value, 100 ),\n    array( $object, 'func' ),\n    array( 'object_class', 'foo1' ),\n    $object,\n  );\n  /* use check_iscallable_objects() to check whether given object/string\n     has valid method name */\n  check_iscallable_objects($methods);\n  $loop_counter++;\n}\n?>")).toMatchSnapshot();
  });
});
