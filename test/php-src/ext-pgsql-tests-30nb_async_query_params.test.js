// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pgsql/tests/30nb_async_query_params.phpt
  it("PostgreSQL non-blocking async query params", function () {
    expect(parser.parseCode("<?php\ninclude('config.inc');\ninclude('nonblocking.inc');\n$db = pg_connect($conn_str);\n$version = pg_version($db);\nif ($version['protocol'] < 3) {\n    echo \"OK\";\n    exit(0);\n}\n$db_socket = pg_socket($db);\nstream_set_blocking($db_socket, false);\n$sent = pg_send_query_params($db, \"SELECT * FROM \".$table_name.\" WHERE num > \\$1;\", array(100));\nif ($sent === FALSE) {\n    echo \"pg_send_query_params() error\\n\";\n} elseif ($sent === 0) {\n    nb_flush($db, $db_socket);\n}\nnb_consume($db, $db_socket);\nif (!($result = pg_get_result($db))) {\n    echo \"pg_get_result() error\\n\";\n}\nif (!($rows = pg_num_rows($result))) {\n    echo \"pg_num_rows() error\\n\";\n}\nfor ($i=0; $i < $rows; $i++) {\n    pg_fetch_array($result, $i, PGSQL_NUM);\n}\nfor ($i=0; $i < $rows; $i++) {\n    pg_fetch_object($result);\n}\nfor ($i=0; $i < $rows; $i++) {\n    pg_fetch_row($result, $i);\n}\nfor ($i=0; $i < $rows; $i++) {\n    pg_fetch_result($result, $i, 0);\n}\npg_num_rows(pg_query_params($db, \"SELECT * FROM \".$table_name.\" WHERE num > \\$1;\", array(100)));\npg_num_fields(pg_query_params($db, \"SELECT * FROM \".$table_name.\" WHERE num > \\$1;\", array(100)));\npg_field_name($result, 0);\npg_field_num($result, $field_name);\npg_field_size($result, 0);\npg_field_type($result, 0);\npg_field_prtlen($result, 0);\npg_field_is_null($result, 0);\n$sent = pg_send_query_params($db, \"INSERT INTO \".$table_name.\" VALUES (\\$1, \\$2);\", array(9999, \"A'BC\"));\nif ($sent === FALSE) {\n    echo \"pg_send_query_params() error\\n\";\n} elseif ($sent === 0) {\n    nb_flush($db, $db_socket);\n}\npg_last_oid($result);\npg_free_result($result);\npg_close($db);\necho \"OK\";\n?>")).toMatchSnapshot();
  });
});
