// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_stmt_send_long_data_packet_size_libmysql.phpt
  it("mysqli_stmt_send_long_data() - exceed packet size, libmysql - bug #26824", function () {
    expect(parser.parseCode("<?php\n    require('table.inc');\n    if (!$stmt = mysqli_stmt_init($link))\n        printf(\"[001] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_query($link, \"DROP TABLE IF EXISTS test\"))\n        printf(\"[002] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_query($link, sprintf(\"CREATE TABLE test(id INT NOT NULL AUTO_INCREMENT, label LONGBLOB, PRIMARY KEY(id)) ENGINE = %s\", $engine)))\n        printf(\"[003] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!mysqli_stmt_prepare($stmt, \"INSERT INTO test(id, label) VALUES (?, ?)\"))\n        printf(\"[004] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = null;\n    $label = null;\n    if (!mysqli_stmt_bind_param($stmt, \"ib\", $id, $label))\n        printf(\"[005] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    if (!$res = mysqli_query($link, \"SHOW VARIABLES LIKE 'max_allowed_packet'\"))\n        printf(\"[006] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[007] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    mysqli_free_result($res);\n    if (0 === ($max_allowed_packet = (int)$row['Value']))\n        printf(\"[008] Cannot determine max_allowed_packet size and/or bogus max_allowed_packet setting used.\\n\");\n    // let's ignore upper limits for LONGBLOB (2^32) ...\n    // maximum packet size up to which we test is 10M\n    $tmp = '';\n    $blob = '';\n    for ($i = 0; $i < 1024; $i++) {\n        $tmp .= 'a';\n    }\n    $limit = min(floor($max_allowed_packet / 1024 / 2), 10240);\n    for ($i = 0; $i < $limit; $i++)\n        $blob .= $tmp;\n    assert(strlen($blob) <= $max_allowed_packet);\n    if (true != ($tmp = mysqli_stmt_send_long_data($stmt, 1, $blob)))\n        printf(\"[009] Expecting boolean/true, got %s/%s. [%d] %s\\n\",\n            gettype($tmp), $tmp, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    $id = 1;\n    if (true !== mysqli_stmt_execute($stmt))\n        printf(\"[010] [%d] %s\\n\", mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    /*\n    TODO - we skip this part of the test for now, because of bugs.mysql.com/26824\n    if (floor($max_allowed_packet / 1024 / 2) <= 10240) {\n            // test with a blob smaller than 10M allows us to test\n            // for too long packages without wasting too much memory\n            $limit = $max_allowed_packet - strlen($blob) + 1;\n            $blob2 = $blob;\n            for ($i = 0; $i < $limit; $i++)\n                    $blob2 .= 'b';\n            assert(strlen($blob2) > $max_allowed_packet);\n            if (true != ($tmp = mysqli_stmt_send_long_data($stmt, 1, $blob2)))\n                    printf(\"[011] Expecting boolean/false, got %s/%s. [%d] %s\\n\",\n                            gettype($tmp), $tmp, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n            $id = 2;\n            if (false !== ($tmp = mysqli_stmt_execute($stmt)))\n                    printf(\"[012] Expecting boolean/false, got %s/%s, [%d] %s\\n\",\n                            gettype($tmp), $tmp, mysqli_stmt_errno($stmt), mysqli_stmt_error($stmt));\n    }\n    */\n    mysqli_stmt_close($stmt);\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
