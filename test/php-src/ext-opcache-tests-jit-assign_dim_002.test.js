// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/opcache/tests/jit/assign_dim_002.phpt
  it("JIT ASSIGN_DIM: 002", function () {
    expect(parser.parseCode("<?php\nfunction foo() {\n    $var[] = 1;\n    var_dump($var);\n}\nfoo();\nfunction foo1() {\n    $var1[] = true;\n    var_dump($var1);\n}\nfoo1();\nfunction foo2() {\n    $var2[] = array();\n    var_dump($var2);\n}\nfoo2();\nfunction foo3() {\n    $array = array(PHP_INT_MAX => \"dummy\");\n    try {\n        $array[] = array();\n    } catch (Error $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    $array = new ArrayObject();\n    $array[index()] = 1;\n    $array[offset()] = 2;\n    var_dump($array);\n}\nfoo3();\nfunction index() {\n    return 2;\n}\nfunction offset() {\n    return \"a\";\n}\nfunction foo4() {\n    $array = array();\n    $array[] = array();\n    $array[0][] = 1;\n    $array[0][1] = 1;\n    var_dump($array);\n    try {\n        $array[function() {}] = 2;\n    } catch (Error $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    var_dump($array);\n    $array2[][] = 3;\n    var_dump($array);\n}\nfoo4();\nfunction foo5() {\n    $a = 1;\n    try {\n        $a[2] = 1;\n    } catch (Error $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    return $a;\n}\nvar_dump(foo5());\nfunction false_to_array($a) {\n    var_dump($a[2] = 1);\n    return $a;\n}\nfunction false_to_array_append($a) {\n    var_dump($a[] = 1);\n    return $a;\n}\nfunction false_to_array_invalid_index($a) {\n    var_dump($a[[]] = 1);\n    return $a;\n}\nfunction false_to_array_nested($a) {\n    var_dump($a[2][3] = 1);\n    return $a;\n}\nfunction false_to_array_nested_append($a) {\n    var_dump($a[][] = 1);\n    return $a;\n}\nfunction false_to_array_nested_invalid_index($a) {\n    var_dump($a[[]][0] = 1);\n    return $a;\n}\nvar_dump(false_to_array(false));\nvar_dump(false_to_array_append(false));\ntry {\n    var_dump(false_to_array_invalid_index(false));\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nvar_dump(false_to_array_nested(false));\nvar_dump(false_to_array_nested_append(false));\ntry {\n    var_dump(false_to_array_nested_invalid_index(false));\n} catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nfunction array_access_undef() {\n    $ao = new ArrayObject;\n    $ao[0] = $undef;\n    var_dump($ao[0]);\n}\narray_access_undef();\n?>")).toMatchSnapshot();
  });
});
