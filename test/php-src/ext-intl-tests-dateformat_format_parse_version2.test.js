// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/dateformat_format_parse_version2.phpt
  it("datefmt_format_code() and datefmt_parse_code()", function () {
    expect(parser.parseCode("<?php\n/*\n * Test for the datefmt_format  function\n */\nfunction ut_main()\n{\n    $timezone = 'GMT+05:00';\n    $locale_arr = array (\n        'en_US'\n    );\n    $datetype_arr = array (\n                IntlDateFormatter::FULL,\n                IntlDateFormatter::LONG,\n                IntlDateFormatter::MEDIUM\n        );\n        $res_str = '';\n    $time_arr = array (\n        0,\n        -1200000,\n        1200000,\n        2200000000,\n        -2200000000,\n        90099999,\n        3600,\n        -3600\n    );\n    $localtime_arr1 = array (\n        'tm_sec' => 24 ,\n        'tm_min' => 3,\n        'tm_hour' => 19,\n        'tm_mday' => 3,\n        'tm_mon' => 3,\n        'tm_year' => 105,\n    );\n    $localtime_arr2 = array (\n        'tm_sec' => 21,\n        'tm_min' => 5,\n        'tm_hour' => 7,\n        'tm_mday' => 13,\n        'tm_mon' => 7,\n        'tm_year' => 205,\n    );\n    $localtime_arr3 = array (\n            'tm_sec' => 11,\n            'tm_min' => 13,\n            'tm_hour' => 0,\n            'tm_mday' => 17,\n            'tm_mon' => 11,\n            'tm_year' => -5\n        );\n    $localtime_arr = array (\n        $localtime_arr1,\n        $localtime_arr2,\n        $localtime_arr3\n    );\n    //Test format and parse with a timestamp : long\n    foreach( $time_arr as $timestamp_entry){\n        $res_str .= \"\\n------------\\n\";\n        $res_str .= \"\\nInput timestamp is : $timestamp_entry\";\n        $res_str .= \"\\n------------\\n\";\n        foreach( $locale_arr as $locale_entry ){\n            foreach( $datetype_arr as $datetype_entry ) {\n                $res_str .= \"\\nIntlDateFormatter locale= $locale_entry ,datetype = $datetype_entry ,timetype =$datetype_entry \";\n                $fmt = ut_datefmt_create( $locale_entry , $datetype_entry ,$datetype_entry,$timezone);\n                $formatted = ut_datefmt_format( $fmt , $timestamp_entry);\n                $res_str .= \"\\nFormatted timestamp is : $formatted\";\n                $parsed = ut_datefmt_parse( $fmt , $formatted);\n                if( intl_get_error_code() == U_ZERO_ERROR){\n                    $res_str .= \"\\nParsed timestamp is : $parsed\";\n                }else{\n                    $res_str .= \"\\nError while parsing as: '\".intl_get_error_message().\"'\";\n                }\n            }\n        }\n    }\n    //Test format and parse with a localtime :array\n    foreach( $localtime_arr as $localtime_entry){\n        $res_str .= \"\\n------------\\n\";\n        $res_str .= \"\\nInput localtime is : \";\n        foreach( $localtime_entry as $key => $value){\n                    $res_str .= \"$key : '$value' , \";\n        }\n        $res_str .= \"\\n------------\\n\";\n        foreach( $locale_arr as $locale_entry ){\n            foreach( $datetype_arr as $datetype_entry ) {\n                $res_str .= \"\\nIntlDateFormatter locale= $locale_entry ,datetype = $datetype_entry ,timetype =$datetype_entry \";\n                $fmt = ut_datefmt_create( $locale_entry , $datetype_entry ,$datetype_entry,$timezone);\n                $formatted1 = ut_datefmt_format( $fmt , $localtime_entry);\n                if( intl_get_error_code() == U_ZERO_ERROR){\n                    $res_str .= \"\\nFormatted localtime_array is : $formatted1\";\n                }else{\n                    $res_str .= \"\\nError while formatting as: '\".intl_get_error_message().\"'\";\n                }\n                //Parsing\n                $parsed_arr = ut_datefmt_localtime( $fmt, $formatted1 );\n                if( $parsed_arr){\n                    $res_str .= \"\\nParsed array is: \";\n                    foreach( $parsed_arr as $key => $value){\n                        $res_str .= \"$key : '$value' , \";\n                    }\n                }\n/*\n                else{\n                    //$res_str .= \"No values found from LocaleTime parsing.\";\n                    $res_str .= \"\\tError : '\".intl_get_error_message().\"'\";\n                }\n*/\n            }\n        }\n    }\n    return $res_str;\n}\ninclude_once( 'ut_common.inc' );\n// Run the test\nut_run();\n?>")).toMatchSnapshot();
  });
});
