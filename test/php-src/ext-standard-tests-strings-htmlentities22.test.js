// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/htmlentities22.phpt
  it("htmlentities() / htmlspecialchars() ENT_DISALLOWED with entities and no double encode", function () {
    expect(parser.parseCode("<?php\n$tests = array(\n    \"&#0;\", //C0\n    \"&#1;\",\n    \"&#x09;\",\n    \"&#x0A;\",\n    \"&#x0B;\",\n    \"&#x0C;\",\n    \"&#x0D;\", //note that HTML5 is unique in that it forbids this entity, but allows a literal U+0D\n    \"&#x0E;\",\n    \"&#x1F;\",\n    \"&#x20;\", //allowed always\n    \"&#x7F;\", //DEL\n    \"&#x80;\", //C1\n    \"&#x9F;\",\n    \"&#xA0;\", //allowed always\n    \"&#xD7FF;\", //surrogates\n    \"&#xD800;\",\n    \"&#xDFFF;\",\n    \"&#xE000;\", //allowed always\n    \"&#xFFFE;\", //nonchar\n    \"&#xFFFF;\",\n    \"&#xFDCF;\", //allowed always\n    \"&#xFDD0;\", //nonchar\n    \"&#xFDEF;\",\n    \"&#xFDF0;\", //allowed always\n    \"&#x2FFFE;\", //nonchar\n    \"&#x2FFFF;\",\n    \"&#x110000;\", //bad reference\n);\nfunction test($flag, $flag2=ENT_DISALLOWED, $charset=\"UTF-8\") {\n    global $tests;\n    $i = -1;\n    foreach ($tests as $test) {\n        $i++;\n        $a = htmlentities($test, $flag | $flag2, $charset, FALSE);\n        $b = htmlspecialchars($test, $flag | $flag2, $charset, FALSE);\n        if ($a == $b)\n            echo sprintf(\"%s\\t%s\", $test, $a==$test?\"NOT CHANGED\":\"CHANGED\"), \"\\n\";\n        else\n            echo sprintf(\"%s\\tCHANGED (%s, %s)\", $test, $a, $b), \"\\n\";\n    }\n}\necho \"*** Testing HTML 4.01 ***\\n\";\ntest(ENT_HTML401);\necho \"\\n*** Testing XHTML 1.0 ***\\n\";\ntest(ENT_XHTML);\necho \"\\n*** Testing HTML 5 ***\\n\";\ntest(ENT_HTML5);\necho \"\\n*** Testing XML 1.0 ***\\n\";\ntest(ENT_XML1);\necho \"\\n*** Testing 5 without the flag ***\\n\";\ntest(ENT_HTML5, 0);\necho \"\\n*** Testing HTML 5 with another single-byte encoding ***\\n\";\ntest(ENT_HTML5, ENT_DISALLOWED, \"Windows-1251\");\necho \"\\n*** Testing HTML 5 with another multibyte-byte encoding ***\\n\";\ntest(ENT_HTML5, ENT_DISALLOWED, \"SJIS\");\n?>")).toMatchSnapshot();
  });
});
