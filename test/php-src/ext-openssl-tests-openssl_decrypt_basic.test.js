// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/openssl/tests/openssl_decrypt_basic.phpt
  it("openssl_decrypt() tests dependent on openssl_encrypt", function () {
    expect(parser.parseCode("<?php\n$data = \"openssl_encrypt() and openssl_decrypt() tests\";\n$method = \"AES-128-CBC\";\n$password = \"openssl\";\n$ivlen = openssl_cipher_iv_length($method);\n$iv    = '';\nsrand(time() + ((int)(microtime(true) * 1000000) % 1000000));\nwhile(strlen($iv) < $ivlen) $iv .= chr(rand(0,255));\n$encrypted = openssl_encrypt($data, $method, $password, 0, $iv);\n$output = openssl_decrypt($encrypted, $method, $password, 0, $iv);\nvar_dump($output);\n$encrypted = openssl_encrypt($data, $method, $password, OPENSSL_RAW_DATA, $iv);\n$output = openssl_decrypt($encrypted, $method, $password, OPENSSL_RAW_DATA, $iv);\nvar_dump($output);\n// if we want to manage our own padding\n$padded_data = $data . str_repeat(' ', 16 - (strlen($data) % 16));\n$encrypted = openssl_encrypt($padded_data, $method, $password, OPENSSL_RAW_DATA|OPENSSL_ZERO_PADDING, $iv);\n$output = openssl_decrypt($encrypted, $method, $password, OPENSSL_RAW_DATA|OPENSSL_ZERO_PADDING, $iv);\nvar_dump(rtrim($output));\n$output2 = openssl_decrypt($encrypted, $method, $password, OPENSSL_RAW_DATA|OPENSSL_ZERO_PADDING, $iv, tag: '');\nvar_dump($output2 === $output);\n$output3 = openssl_decrypt($encrypted, $method, $password, OPENSSL_RAW_DATA|OPENSSL_ZERO_PADDING, $iv, tag: null);\nvar_dump($output3 === $output);\nif (in_array(\"bf-ecb\", openssl_get_cipher_methods())) {\n    // if we want to prefer variable length cipher setting\n    $encrypted = openssl_encrypt($data, \"bf-ecb\", $password, OPENSSL_DONT_ZERO_PAD_KEY);\n    $output = openssl_decrypt($encrypted, \"bf-ecb\", $password, OPENSSL_DONT_ZERO_PAD_KEY);\n    var_dump($output === $data);\n} else {\n    var_dump(true);\n}\n// It's okay to pass $tag for a non-authenticated cipher.\n// It will be populated with null in that case.\nopenssl_encrypt($data, $method, $password, 0, $iv, $tag);\nvar_dump($tag);\n?>")).toMatchSnapshot();
  });
});
