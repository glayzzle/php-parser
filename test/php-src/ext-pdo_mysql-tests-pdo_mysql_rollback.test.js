// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_rollback.phpt
  it("PDO::rollBack()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    MySQLPDOTest::createTestTable($db, MySQLPDOTest::detect_transactional_mysql_engine($db));\n    $db->beginTransaction();\n    $row = $db->query('SELECT COUNT(*) AS _num FROM test')->fetch(PDO::FETCH_ASSOC);\n    $num = $row['_num'];\n    $db->query(\"INSERT INTO test(id, label) VALUES (100, 'z')\");\n    $num++;\n    $row = $db->query('SELECT COUNT(*) AS _num FROM test')->fetch(PDO::FETCH_ASSOC);\n    if ($row['_num'] != $num)\n        printf(\"[001] INSERT has failed, test will fail\\n\");\n    $db->rollBack();\n    $num--;\n    $row = $db->query('SELECT COUNT(*) AS _num FROM test')->fetch(PDO::FETCH_ASSOC);\n    if ($row['_num'] != $num)\n        printf(\"[002] ROLLBACK has failed\\n\");\n    $db->beginTransaction();\n    $db->query(\"INSERT INTO test(id, label) VALUES (100, 'z')\");\n    $db->query('DROP TABLE IF EXISTS test2');\n    $db->query('CREATE TABLE test2(id INT)');\n    $num++;\n    try {\n        $db->rollBack();\n        $failed = false;\n    } catch (PDOException $e) {\n        $failed = true;\n    }\n    if (!$failed) {\n        printf(\"[003] Rollback should have failed\\n\");\n    }\n    $db->query('DROP TABLE IF EXISTS test2');\n    $db->query('CREATE TABLE test2(id INT) ENGINE=MyISAM');\n    $db->beginTransaction();\n    $db->query('INSERT INTO test2(id) VALUES (1)');\n    $db->rollBack();\n    $row = $db->query('SELECT COUNT(*) AS _num FROM test2')->fetch(PDO::FETCH_ASSOC);\n    if ($row['_num'] != 1)\n        printf(\"[003] ROLLBACK should have no effect\\n\");\n    $db->query('DROP TABLE IF EXISTS test2');\n    $db->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);\n    $db->beginTransaction();\n    $db->query('DELETE FROM test');\n    $db->rollBack();\n    var_dump($db->getAttribute(PDO::ATTR_AUTOCOMMIT));\n    $db->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);\n    $db->beginTransaction();\n    $db->query('DELETE FROM test');\n    $db->rollBack();\n    var_dump($db->getAttribute(PDO::ATTR_AUTOCOMMIT));\n    $db->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);\n    $db->beginTransaction();\n    $db->query('DELETE FROM test');\n    $db->commit();\n    var_dump($db->getAttribute(PDO::ATTR_AUTOCOMMIT));\n    $db->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);\n    $db->beginTransaction();\n    $db->query('DELETE FROM test');\n    $db->commit();\n    var_dump($db->getAttribute(PDO::ATTR_AUTOCOMMIT));\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
