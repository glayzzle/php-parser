// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_class_mysqli_driver_interface.phpt
  it("Interface of the class mysqli_driver", function () {
    expect(parser.parseCode("<?php\n$driver = new mysqli_driver();\nprintf(\"Parent class:\\n\");\nvar_dump(get_parent_class($driver));\nprintf(\"\\nMethods:\\n\");\n$methods = get_class_methods($driver);\n$expected_methods = [];\nforeach ($methods as $k => $method) {\n    if (isset($expected_methods[$method])) {\n        unset($expected_methods[$method], $methods[$k]);\n    }\n}\nif (!empty($expected_methods)) {\n    printf(\"Dumping list of missing methods.\\n\");\n    var_dump($expected_methods);\n}\nif (!empty($methods)) {\n    printf(\"Dumping list of unexpected methods.\\n\");\n    var_dump($methods);\n}\nif (empty($expected_methods) && empty($methods)) {\n    printf(\"ok\\n\");\n}\nprintf(\"\\nClass variables:\\n\");\n$variables = array_keys(get_class_vars(get_class($driver)));\nsort($variables);\nforeach ($variables as $var) {\n    printf(\"%s\\n\", $var);\n}\nprintf(\"\\nObject variables:\\n\");\n$variables = array_keys(get_object_vars($driver));\nforeach ($variables as $var) {\n    printf(\"%s\\n\", $var);\n}\nprintf(\"\\nMagic, magic properties:\\n\");\nassert(mysqli_get_client_info() === $driver->client_info);\nprintf(\"driver->client_info = '%s'\\n\", $driver->client_info);\nassert(mysqli_get_client_version() === $driver->client_version);\nprintf(\"driver->client_version = '%s'\\n\", $driver->client_version);\nprintf(\"driver->driver_version = '%s'\\n\", $driver->driver_version);\nassert(in_array($driver->report_mode, [\n    MYSQLI_REPORT_ALL,\n    MYSQLI_REPORT_STRICT,\n    MYSQLI_REPORT_STRICT|MYSQLI_REPORT_ERROR,\n    MYSQLI_REPORT_STRICT|MYSQLI_REPORT_INDEX,\n    MYSQLI_REPORT_ERROR,\n    MYSQLI_REPORT_ERROR|MYSQLI_REPORT_INDEX,\n    MYSQLI_REPORT_INDEX,\n    MYSQLI_REPORT_OFF\n]));\nprintf(\"driver->report_mode = '%s'\\n\", $driver->report_mode);\n$driver->report_mode = MYSQLI_REPORT_STRICT;\nassert($driver->report_mode === MYSQLI_REPORT_STRICT);\nprintf(\"driver->reconnect = '%s'\\n\", $driver->reconnect);\nprintf(\"\\nAccess to undefined properties:\\n\");\nprintf(\"driver->unknown = '%s'\\n\", @$driver->unknown);\nprint \"done!\";\n?>")).toMatchSnapshot();
  });
});
