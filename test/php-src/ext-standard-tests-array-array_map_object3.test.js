// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_map_object3.phpt
  it("Test array_map() function : object functionality - class methods as callback function", function () {
    expect(parser.parseCode("<?php\n/*\n * Testing array_map() for object functionality with following callback function variations:\n *   1) child class method using parent object\n *   2) parent class method using child object\n *   3) child class method using parent class\n *   4) parent class method using child class\n */\necho \"*** Testing array_map() : class methods as callback function ***\\n\";\n$arr1 = array(1, 5, 7);\nclass ParentClass\n{\n  public $var1 = 10;\n  public static function staticParent1($n) {\n    return $n;\n  }\n  private static function staticParent2($n) {\n    return $n;\n  }\n}\nclass ChildClass extends ParentClass\n{\n  var $parent_obj;\n  public function __construct ( ) {\n    $this->parent_obj = new ParentClass();\n  }\n  public $var2 = 5;\n  public static function staticChild($n) {\n    return $n;\n  }\n  public function nonstaticChild($n) {\n    return $n;\n  }\n}\n$childobj = new ChildClass();\n$parentobj = new ParentClass();\necho \"-- accessing parent method from child class --\\n\";\nvar_dump( array_map(array('ChildClass', 'staticParent1'), $arr1) );\necho \"-- accessing child method from parent class --\\n\";\ntry {\n    var_dump( array_map(array('ParentClass', 'staticChild'), $arr1) );\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"-- accessing parent method using child class object --\\n\";\nvar_dump( array_map(array($childobj, 'staticParent1'), $arr1) );\necho \"-- accessing child method using parent class object --\\n\";\ntry {\n    var_dump( array_map(array($parentobj, 'staticChild'), $arr1) );\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
