// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/exception_from_toString.phpt
  it("Test exceptions thrown from __toString() in various contexts", function () {
    expect(parser.parseCode("<?php\nclass BadStr {\n    public function __toString() {\n        throw new Exception(\"Exception\");\n    }\n}\n$str = \"a\";\n$num = 42;\n$badStr = new BadStr;\ntry { $x = $str . $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = $badStr . $str; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = $str .= $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($str);\ntry { $x = $num . $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = $badStr . $num; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = $num .= $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($num);\ntry { $x = $badStr .= $str; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($badStr);\ntry { $x = $badStr .= $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($badStr);\ntry { $x = \"x$badStr\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"{$badStr}x\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"$str$badStr\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"$badStr$str\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"x$badStr$str\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"x$str$badStr\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"{$str}x$badStr\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = \"{$badStr}x$str\"; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = (string) $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = include $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { echo $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\n${\"\"} = 42;\ntry { unset(${$badStr}); }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump(${\"\"});\nunset(${\"\"});\ntry { $x = ${$badStr}; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\ntry { $x = isset(${$badStr}); }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\n$obj = new stdClass;\ntry { $x = $obj->{$badStr} = $str; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($obj);\ntry { $str[0] = $badStr; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump($str);\n$obj = new DateInterval('P1D');\ntry { $x = $obj->{$badStr} = $str; }\ncatch (Exception $e) { echo $e->getMessage(), \"\\n\"; }\nvar_dump(!isset($obj->{\"\"}));\ntry { strlen($badStr); } catch (Exception $e) { echo \"Exception\\n\"; }\ntry { substr($badStr, 0); } catch (Exception $e) { echo \"Exception\\n\"; }\ntry { new ArrayObject([], 0, $badStr); } catch (Exception $e) { echo \"Exception\\n\"; }\n?>")).toMatchSnapshot();
  });
});
