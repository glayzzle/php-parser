// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/parse_str_basic3.phpt
  it("Test parse_str() function : basic functionality", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing parse_str() : basic functionality ***\\n\";\necho \"\\nTest string with array values and results array\\n\";\n$s1 = \"first=abc&a[]=123&a[]=false&b[]=str&c[]=3.5&a[]=last\";\nvar_dump(parse_str($s1, $res3_array));\nvar_dump($res3_array);\necho \"\\nTest string containing numerical array keys\\n\";\n$str = \"arr[1]=sid&arr[4]=bill\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\necho \"\\nTest string containing associative keys\\n\";\n$str = \"arr[first]=sid&arr[forth]=bill\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\necho \"\\nTest string with encoded data\\n\";\n$s1 = \"a=%3c%3d%3d%20%20foo+bar++%3d%3d%3e&b=%23%23%23Hello+World%23%23%23\";\nparse_str($s1, $res);\nvar_dump($res);\necho \"\\nTest string with single quotes characters\\n\";\n$s1 = \"firstname=Bill&surname=O%27Reilly\";\nvar_dump(parse_str($s1, $res));\nvar_dump($res);\necho \"\\nTest string with backslash characters\\n\";\n$s1 = \"sum=10%5c2%3d5\";\nvar_dump(parse_str($s1, $res));\nvar_dump($res);\necho \"\\nTest string with double quotes data\\n\";\n$s1 = \"str=A+string+with+%22quoted%22+strings\";\nvar_dump(parse_str($s1, $res));\nvar_dump($res);\necho \"\\nTest string with nulls\\n\";\n$s1 = \"str=A%20string%20with%20containing%20%00%00%00%20nulls\";\nvar_dump(parse_str($s1, $res));\nvar_dump($res);\necho \"\\nTest string with 2-dim array with numeric keys\\n\";\n$str = \"arr[3][4]=sid&arr[3][6]=fred\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\necho \"\\nTest string with 2-dim array with null keys\\n\";\n$str = \"arr[][]=sid&arr[][]=fred\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\necho \"\\nTest string with 2-dim array with non-numeric keys\\n\";\n$str = \"arr[one][four]=sid&arr[three][six]=fred\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\necho \"\\nTest string with 3-dim array with numeric keys\\n\";\n$str = \"arr[1][2][3]=sid&arr[1][2][6]=fred\";\nvar_dump(parse_str($str, $res));\nvar_dump($res);\n?>")).toMatchSnapshot();
  });
});
