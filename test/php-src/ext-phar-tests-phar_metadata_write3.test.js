// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/phar/tests/phar_metadata_write3.phpt
  it("Phar with unsafe object in metadata does not unserialize on reading a file.", function () {
    expect(parser.parseCode("<?php\nclass EchoesOnWakeup {\n    public function __wakeup() {\n        echo \"In wakeup\\n\";\n    }\n}\n$fname = __DIR__ . '/' . basename(__FILE__, '.php') . '.phar.php';\n$pname = 'phar://' . $fname;\n$file = \"<?php __HALT_COMPILER(); ?>\";\n$files = array();\n$files['a'] = array('cont' => 'contents of file a');\ninclude 'files/phar_test.inc';\necho \"Reading file contents through stream wrapper\\n\";\nforeach($files as $name => $cont) {\n    var_dump(file_get_contents($pname.'/'.$name));\n}\n$phar = new Phar($fname);\necho \"Original metadata\\n\";\nvar_dump($phar->getMetadata());\n$phar->setMetadata(new EchoesOnWakeup());\nunset($phar);\n// NOTE: Phar will use the cached value of metadata if setMetaData was called on that Phar path before.\n// Save the writes to the phar and use a different file path.\n$fname_new = \"$fname.copy.php\";\ncopy($fname, $fname_new);\n$phar = new Phar($fname_new);\necho \"Calling getMetadata\\n\";\nvar_dump($phar->getMetadata());\necho \"Calling getMetadata with no allowed_classes\\n\";\nvar_dump($phar->getMetadata(['allowed_classes' => []]));\necho \"Calling getMetadata with EchoesOnWakeup allowed\\n\";\nvar_dump($phar->getMetadata(['allowed_classes' => [EchoesOnWakeup::class]]));\n// Part of this is a test that there are no unexpected behaviors when both selMetadata and getMetadata are used\n$phar->setMetaData([new EchoesOnWakeup(), new stdClass()]);\necho \"Calling getMetadata with too low max_depth\\n\";\nvar_dump($phar->getMetadata(['max_depth' => 1]));\necho \"Calling getMetadata with some allowed classes\\n\";\nvar_dump($phar->getMetadata(['allowed_classes' => [EchoesOnWakeup::class]]));\necho \"Calling getMetadata with no options returns the original metadata value\\n\";\nvar_dump($phar->getMetadata());\nunset($phar);\n?>")).toMatchSnapshot();
  });
});
