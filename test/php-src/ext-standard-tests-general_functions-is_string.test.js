// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/general_functions/is_string.phpt
  it("Test is_string() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing is_string() with valid string values ***\\n\";\n// different valid strings\n/* string created using Heredoc (<<<) */\n$heredoc_string = <<<EOT\nThis is string defined\nusing heredoc.\nEOT;\n/* heredoc string with only numerics */\n$heredoc_numeric_string = <<<EOT\n123456 3993\n4849 string\nEOT;\n/* null heardoc string */\n$heredoc_empty_string = <<<EOT\nEOT;\n$heredoc_null_string = <<<EOT\nNULL\nEOT;\n$strings = array(\n  \"\",\n  \" \",\n  '',\n  ' ',\n  \"string\",\n  'string',\n  \"NULL\",\n  'null',\n  \"FALSE\",\n  'true',\n  \"\\x0b\",\n  \"\\0\",\n  '\\0',\n  '\\060',\n  \"\\070\",\n  \"0x55F\",\n  \"055\",\n  \"@#$#$%%$^^$%^%^$^&\",\n  $heredoc_string,\n  $heredoc_numeric_string,\n  $heredoc_empty_string,\n  $heredoc_null_string\n);\n/* loop to check that is_string() recognizes different\n   strings, expected output bool(true) */\n$loop_counter = 1;\nforeach ($strings as $string ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_string($string) );\n}\necho \"\\n*** Testing is_string() on non string values ***\\n\";\n// get a resource type variable\n$fp = fopen (__FILE__, \"r\");\n$dfp = opendir ( __DIR__ );\n// unset vars\n$unset_string1 = \"string\";\n$unset_string2 = 'string';\n$unset_heredoc = <<<EOT\nthis is heredoc string\nEOT;\n// unset the vars\nunset($unset_string1, $unset_string2, $unset_heredoc);\n// other types in a array\n$not_strings = array (\n  /* integers */\n  0,\n  1,\n  -1,\n  -0,\n  543915,\n  -5322,\n  0x0,\n  0x1,\n  0x55F,\n  -0xCCF,\n  0123,\n  -0654,\n  00,\n  01,\n  /* floats */\n  0.0,\n  1.0,\n  -1.0,\n  10.0000000000000000005,\n  .5e6,\n  -.5E7,\n  .5E+8,\n  -.5e+90,\n  1e5,\n  -1e5,\n  1E5,\n  -1E7,\n  /* objects */\n  new stdclass,\n  /* resources */\n  $fp,\n  $dfp,\n  /* arrays */\n  array(),\n  array(0),\n  array(1),\n  array(NULL),\n  array(null),\n  array(\"string\"),\n  array(true),\n  array(TRUE),\n  array(false),\n  array(FALSE),\n  array(1,2,3,4),\n  array(1 => \"One\", \"two\" => 2),\n  /* undefined and unset vars */\n  @$unset_string1,\n  @$unset_string2,\n  @$unset_heredoc,\n  @$undefined_var\n);\n/* loop through the $not_strings to see working of\n   is_string() on non string types, expected output bool(false) */\n$loop_counter = 1;\nforeach ($not_strings as $type ) {\n  echo \"-- Iteration $loop_counter --\\n\"; $loop_counter++;\n  var_dump( is_string($type) );\n}\necho \"Done\\n\";\n// close the resources used\nfclose($fp);\nclosedir($dfp);\n?>")).toMatchSnapshot();
  });
});
