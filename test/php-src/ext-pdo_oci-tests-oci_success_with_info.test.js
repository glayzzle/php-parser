// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_oci/tests/oci_success_with_info.phpt
  it("Handling OCI_SUCCESS_WITH_INFO", function () {
    expect(parser.parseCode("<?php\nfunction connectAsAdmin(): PDO {\n    return PDOTest::test_factory(__DIR__ . '/../../pdo_oci/tests/common.phpt');\n}\nfunction connectAsUser(string $username, string $password): PDO {\n    return new PDO(getenv('PDOTEST_DSN'), $username, $password);\n}\nfunction dropProfile(PDO $conn): void {\n    $conn->exec(<<<'SQL'\nBEGIN\n    EXECUTE IMMEDIATE 'DROP PROFILE BUG77120_PROFILE CASCADE';\nEXCEPTION\n    WHEN OTHERS THEN\n        IF SQLCODE != -2380 THEN\n            RAISE;\n        END IF;\nEND;\nSQL\n    );\n}\nfunction dropUser(PDO $conn): void {\n    $conn->exec(<<<'SQL'\nBEGIN\n    EXECUTE IMMEDIATE 'DROP USER BUG77120_USER CASCADE';\nEXCEPTION\n    WHEN OTHERS THEN\n        IF SQLCODE != -1918 THEN\n            RAISE;\n        END IF;\nEND;\nSQL\n    );\n}\nfunction triggerCompilationError(PDO $conn): void {\n    $conn->exec(<<<'SQL'\nCREATE OR REPLACE FUNCTION BUG77120(INT A) RETURN INT\nAS\nBEGIN\n    RETURN 0;\nEND;\nSQL\n    );\n}\nrequire __DIR__ . '/../../pdo/tests/pdo_test.inc';\n$conn = connectAsAdmin();\ndropUser($conn);\ndropProfile($conn);\n$password = bin2hex(random_bytes(8));\n$conn->exec('CREATE PROFILE BUG77120_PROFILE LIMIT PASSWORD_LIFE_TIME 1/86400 PASSWORD_GRACE_TIME 1');\n$conn->exec('CREATE USER BUG77120_USER IDENTIFIED BY \"' . $password . '\" PROFILE BUG77120_PROFILE');\n$conn->exec('GRANT CREATE SESSION TO BUG77120_USER');\n// let the password expire\nsleep(2);\n$conn = connectAsUser('BUG77120_USER', $password);\nvar_dump($conn->errorInfo());\n$conn = connectAsAdmin();\ndropUser($conn);\ndropProfile($conn);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);\ntriggerCompilationError($conn);\nvar_dump($conn->errorInfo());\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\ntriggerCompilationError($conn);\nvar_dump($conn->errorInfo());\n?>")).toMatchSnapshot();
  });
});
