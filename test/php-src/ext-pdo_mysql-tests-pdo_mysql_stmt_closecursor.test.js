// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_closecursor.phpt
  it("MySQL PDOStatement->closeCursor()", function () {
    expect(parser.parseCode("<?php\n    /* TODO the results look wrong, why do we get 2014 with buffered AND unbuffered queries */\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    function pdo_mysql_stmt_closecursor($db) {\n        // This one should fail. I let it fail to prove that closeCursor() makes a difference.\n        // If no error messages gets printed do not know if proper usage of closeCursor() makes any\n        // difference or not. That's why we need to cause an error here.\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n        $stmt1 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        // query() shall fail!\n        $stmt2 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        $stmt1->closeCursor();\n        // This is proper usage of closeCursor(). It shall prevent any further error messages.\n        if (MySQLPDOTest::isPDOMySQLnd()) {\n            $stmt1 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        } else {\n            // see pdo_mysql_stmt_unbuffered_2050.phpt for an explanation\n            unset($stmt1);\n            $stmt1 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        }\n        // fetch only the first rows and let closeCursor() clean up\n        $row1 = $stmt1->fetch(PDO::FETCH_ASSOC);\n        $stmt1->closeCursor();\n        $stmt2 = $db->prepare('UPDATE test SET label = ? WHERE id = ?');\n        $stmt2->bindValue(1, \"z\");\n        $stmt2->bindValue(2, $row1['id']);\n        $stmt2->execute();\n        $stmt2->closeCursor();\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);\n        // check if changing the fetch mode from unbuffered to buffered will\n        // cause any harm to a statement created prior to the change\n        $stmt1->execute();\n        $row2 = $stmt1->fetch(PDO::FETCH_ASSOC);\n        $stmt1->closeCursor();\n        if (!isset($row2['label']) || ('z' !== $row2['label']))\n            printf(\"Expecting array(id => 1, label => z) got %s\\n\", var_export($row2, true));\n        unset($stmt1);\n        $stmt1 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        // should work\n        $stmt2 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        $stmt1->closeCursor();\n        $stmt1 = $db->query('SELECT id, label FROM test ORDER BY id ASC');\n        // fetch only the first rows and let closeCursor() clean up\n        $row3 = $stmt1->fetch(PDO::FETCH_ASSOC);\n        $stmt1->closeCursor();\n        assert($row3 == $row2);\n        $stmt2 = $db->prepare('UPDATE test SET label = ? WHERE id = ?');\n        $stmt2->bindValue(1, \"a\");\n        $stmt2->bindValue(2, $row1['id']);\n        $stmt2->execute();\n        $stmt2->closeCursor();\n        $stmt1->execute();\n        $row4 = $stmt1->fetch(PDO::FETCH_ASSOC);\n        $stmt1->closeCursor();\n        assert($row4 == $row1);\n        $offset = 0;\n        $stmt = $db->prepare('SELECT id, label FROM test WHERE id > ? ORDER BY id ASC LIMIT 2');\n        $in = 0;\n        if (!$stmt->bindParam(1, $in))\n            printf(\"[%03d + 1] Cannot bind parameter, %s %s\\n\", $offset,\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        $stmt->execute();\n        $id = $label = null;\n        if (!$stmt->bindColumn(1, $id, PDO::PARAM_INT))\n            printf(\"[%03d + 2] Cannot bind integer column, %s %s\\n\", $offset,\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        if (!$stmt->bindColumn(2, $label, PDO::PARAM_STR))\n            printf(\"[%03d + 3] Cannot bind string column, %s %s\\n\", $offset,\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        while ($stmt->fetch(PDO::FETCH_BOUND))\n            printf(\"in = %d -> id = %s (%s) / label = %s (%s)\\n\",\n                $in,\n                var_export($id, true), gettype($id),\n                var_export($label, true), gettype($label));\n        $stmt->closeCursor();\n        $stmt->execute();\n    }\n    try {\n        printf(\"Testing emulated PS...\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 1);\n        if (1 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn on emulated prepared statements\\n\");\n        printf(\"Buffered...\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);\n        MySQLPDOTest::createTestTable($db);\n        pdo_mysql_stmt_closecursor($db);\n        printf(\"Unbuffered...\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n        MySQLPDOTest::createTestTable($db);\n        pdo_mysql_stmt_closecursor($db);\n        printf(\"Testing native PS...\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn off emulated prepared statements\\n\");\n        printf(\"Buffered...\\n\");\n        MySQLPDOTest::createTestTable($db);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);\n        pdo_mysql_stmt_closecursor($db);\n        printf(\"Unbuffered...\\n\");\n        MySQLPDOTest::createTestTable($db);\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n        pdo_mysql_stmt_closecursor($db);\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
