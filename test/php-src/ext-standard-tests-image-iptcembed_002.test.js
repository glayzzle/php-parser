// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/image/iptcembed_002.phpt
  it("iptcembed() valid jpg stream", function () {
    expect(parser.parseCode("<?php\n/*\n# source code to generate base64 use behind as $base64_1x1_jpeg\n# we don't want to be gd library dependant for this test\n$file=\"1x1.jpg\";\n$ret=imagejpeg(imagecreatetruecolor(1, 1), $file, 100);\necho md5(file_get_contents($file)).PHP_EOL;\necho base64_encode(file_get_contents($file)).PHP_EOL;\nunlink($file);\n*/\n/*\ntest description :\n1) create local file 1x1 jpeg (without iptc) (use base64 content to create file)\n2) generate iptcdata string with function iptc_make_tag describe behind\n3) use iptcembed php function with our 1x1 jpeg file and our iptcdata string\n4) write local file2 with iptcembed return content\n5) various check on file2 to verify that's a valid jpeg file with our tags\n*/\n#iptc_make_tag function from http://php.net/iptcembed\nfunction iptc_make_tag($rec, $data, $value)\n  {\n    $length = strlen($value);\n    $retval = chr(0x1C) . chr($rec) . chr($data);\n    if($length < 0x8000) { $retval .= chr($length >> 8) .  chr($length & 0xFF); }\n    else { $retval .= chr(0x80) .  chr(0x04) .  chr(($length >> 24) & 0xFF) .  chr(($length >> 16) & 0xFF) .  chr(($length >> 8) & 0xFF) .  chr($length & 0xFF); }\n    return $retval . $value;\n  }\n$file=\"1x1.jpg\";\n$file2=\"1x1_with_iptc_tags.jpg\";\n$base64_1x1_jpeg=\"/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIAAEAAQMBEQACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP8AP/oA/9k=\";\n#write file\n$fd=fopen($file,\"wb\");\nif ($fd) { fputs($fd,base64_decode($base64_1x1_jpeg)); fclose($fd); }\nelse { echo \"error can't write $file\".PHP_EOL;exit(1); }\n#check file md5\n$md5=md5_file($file);\nif ($md5!=\"07dd8594450e8c18ab8a79d7cb4573c7\") { echo \"md5 error\".PHP_EOL;exit(1); }\n#check jpeg properties\nlist($width, $height, $type, $attr) = getimagesize($file,$info);\nif ($width!=1) { echo \"width error\".PHP_EOL;exit(1); }\nif ($height!=1) { echo \"height error\".PHP_EOL;exit(1); }\nif ($type!=2) { echo \"type error\".PHP_EOL;exit(1); }\nif (!isset($info[\"APP0\"])) { echo \"APP0 error\".PHP_EOL;exit(1); }\n#our iptc tags\n$tags=array();\n$tags[\"2#105\"]= \"Tauren\";\n$tags[\"2#120\"]= \"Tauren with Trunk\";\n$tags[\"2#110\"]= \"Copyright 2004-2016, Blizzard\";\n$tags[\"2#025\"]= \"Tauren, Chaman, Blizzard\";\n$tags[\"2#090\"]= \"Thunder Bluffs\";\n#feed iptc string for iptcembed\n$iptc='';\nforeach ($tags as $tag => $string) { $rec=$tag[0]; $tag = substr($tag, 2); $iptc .= iptc_make_tag($rec, $tag, $string); }\n#check iptc string md5\nif (md5(base64_encode($iptc))!=\"7056c4b3060f92a4f9e5b7d0caa61859\") { echo \"iptc md5 error\".PHP_EOL;exit(1); }\n#use iptcembed to get jpeg stream content with iptc tags\n$content = iptcembed($iptc, $file,0);\n#write new image with iptc tags\nif ($content === false) {echo \"iptcembed error\".PHP_EOL;exit(1); }\n$fd=fopen($file2,\"wb\");\nif ($fd) { fputs($fd,$content); fclose($fd); }\nelse { echo \"error can't write $file2\".PHP_EOL;exit(1); }\n#check jpeg properties for new image with iptc tags\necho \"new generated image with itpc tags : $file2\".PHP_EOL;\n$ret = getimagesize($file2,$info);\nif ($ret===false) { echo \"getimagesize error\".PHP_EOL;exit(1); }\nlist($width, $height, $type, $attr) = $ret;\nif ($width!=1) { echo \"width error\".PHP_EOL;exit(1); }\nif ($height!=1) { echo \"height error\".PHP_EOL;exit(1); }\nif ($type!=2) { echo \"type error\".PHP_EOL;exit(1); }\nif (!isset($info[\"APP0\"])) { echo \"APP0 error\".PHP_EOL;exit(1); }\nif (!isset($info[\"APP13\"])) { echo \"APP13 error\".PHP_EOL;exit(1); }\n$error=0;\n$iptc_data_from_created_image = iptcparse($info['APP13']);\nforeach ($tags as $tag => $string) {\n  #check if tag exists\n  if (!isset($iptc_data_from_created_image[$tag])) {\n    echo \"error iptc tag $tag not found\".PHP_EOL;\n    $error++;\n  } else {\n    #check value\n    if ($iptc_data_from_created_image[$tag][0]!=$string) {\n      echo \"error tag $tag : bad value ($string != \".$iptc_data_from_created_image[$tag][0].\")\".PHP_EOL;\n      $error++;\n    }\n  }\n}\n#clean before exit\n@unlink($file);\n@unlink($file2);\nif ($error==0) { echo \"OK\".PHP_EOL;exit(0);}\necho \"something wrong: $error errors\".PHP_EOL;\n?>")).toMatchSnapshot();
  });
});
