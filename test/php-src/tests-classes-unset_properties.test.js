// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/classes/unset_properties.phpt
  it("Un-setting instance properties causes magic methods to be called when trying to access them from outside the magic\nmethods themselves.", function () {
    expect(parser.parseCode("<?php\nclass Test\n{\n    public    $publicProperty        = 'publicProperty set';\n    protected $protectedProperty     = 'protectedProperty set';\n    private   $privateProperty       = 'privateProperty set';\n    public function __get($name)\n    {\n        return '__get \"' . $name . '\"';\n    }\n    public function __set($name, $value)\n    {\n        $this->$name = $value;\n        echo '__set \"' . $name . '\" to \"' . $value . '\"';\n    }\n    public function __isset($name)\n    {\n        echo '__isset \"' . $name . '\"';\n        return isset($this->$name);\n    }\n    public function getPublicProperty()\n    {\n        return $this->publicProperty;\n    }\n    public function setPublicProperty($publicProperty)\n    {\n        $this->publicProperty = $publicProperty;\n    }\n    public function unsetProtectedProperty()\n    {\n        unset($this->protectedProperty);\n    }\n    public function getProtectedProperty()\n    {\n        return $this->protectedProperty;\n    }\n    public function setProtectedProperty($protectedProperty)\n    {\n        $this->protectedProperty = $protectedProperty;\n    }\n    public function unsetPrivateProperty()\n    {\n        unset($this->privateProperty);\n    }\n    public function getPrivateProperty()\n    {\n        return $this->privateProperty;\n    }\n    public function setPrivateProperty($privateProperty)\n    {\n        $this->privateProperty = $privateProperty;\n    }\n}\n// verifying public property\n$o = new Test;\necho $o->publicProperty;\necho \"\\n\";\nvar_export(isset($o->publicProperty));\necho \"\\n\";\nunset($o->publicProperty);\nisset($o->publicProperty);\necho \"\\n\";\necho $o->publicProperty;\necho \"\\n\";\necho $o->getPublicProperty();\necho \"\\n\";\necho $o->setPublicProperty('new publicProperty value via setter');\necho \"\\n\";\necho $o->publicProperty;\necho \"\\n\";\nunset($o->publicProperty);\n$o->publicProperty = 'new publicProperty value via public access';\necho \"\\n\";\nvar_export(isset($o->publicProperty));\necho \"\\n\";\necho $o->publicProperty;\necho \"\\n\\n\";\n// verifying protected property\necho $o->getProtectedProperty();\necho \"\\n\";\n$o->unsetProtectedProperty();\nvar_export(isset($o->protectedProperty));\necho \"\\n\";\necho $o->getProtectedProperty();\necho \"\\n\";\necho $o->setProtectedProperty('new protectedProperty value via setter');\necho \"\\n\";\nvar_export(isset($o->protectedProperty));\necho \"\\n\";\necho $o->getProtectedProperty();\necho \"\\n\\n\";\n// verifying private property\necho $o->getPrivateProperty();\necho \"\\n\";\n$o->unsetPrivateProperty();\nvar_export(isset($o->privateProperty));\necho \"\\n\";\necho $o->getPrivateProperty();\necho \"\\n\";\necho $o->setPrivateProperty('new privateProperty value via setter');\necho \"\\n\";\nvar_export(isset($o->privateProperty));\necho \"\\n\";\necho $o->getPrivateProperty();\necho \"\\n\\n\";\n?>")).toMatchSnapshot();
  });
});
