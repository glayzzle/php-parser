// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/mb_strcut.phpt
  it("mb_strcut()", function () {
    expect(parser.parseCode("<?php\nfunction MBStringChars($string, $encoding) {\n  $chars = mb_str_split($string, 1, $encoding);\n  return '[' . implode(' ', array_map(function($char) {\n    return join(unpack('H*', $char));\n  }, $chars)) . ']';\n}\nini_set('include_path', __DIR__);\ninclude_once('common.inc');\n// EUC-JP\n$euc_jp = pack('H*', '30313233a4b3a4cecab8bbfacef3a4cfc6fccbdcb8eca4c7a4b9a1a34555432d4a50a4f2bbc8a4c3a4c6a4a4a4dea4b9a1a3c6fccbdcb8eca4cfccccc5ddbdada4a4a1a3');\n// UTF-8\n$utf8    = pack('H*', 'e288ae2045e28b856461203d2051'); // has 2 multi-byte characters: [e288ae 20 45 e28b85 64 61 20 3d 20 51]\n// UTF-16LE\n$utf16le = pack('H*', '1a043804400438043b043b04380446043004200069007300200043007900720069006c006c0069006300');\nprint \"== EUC-JP ==\\n\";\nprint MBStringChars(mb_strcut($euc_jp,  6,   5,'EUC-JP'), 'EUC-JP') . \"\\n\";\nprint MBStringChars(mb_strcut($euc_jp,  5,   5,'EUC-JP'), 'EUC-JP') . \"\\n\";\nprint MBStringChars(mb_strcut($euc_jp,  0, 100,'EUC-JP'), 'EUC-JP') . \"\\n\";\n$str = mb_strcut($euc_jp, 100, 10,'EUC-JP');\n($str === \"\") ? print \"OK\\n\" : print \"No good\\n\";\n$str = mb_strcut($euc_jp, -100, 10,'EUC-JP');\n($str !== \"\") ?\tprint \"OK\\n\" : print \"No good\\n\";\nprint \"== UTF-8 ==\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 0, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 1, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 2, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 3, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 4, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 0, 5, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 1, 2, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 1, 3, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint MBStringChars(mb_strcut($utf8, 1, 4, 'UTF-8'), 'UTF-8') . \"\\n\";\nprint \"== UTF-16LE ==\\n\";\nprint MBStringChars(mb_strcut($utf16le, 0, 0, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 0, 1, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 0, 2, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 0, 3, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 1, 2, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 1, 3, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\nprint MBStringChars(mb_strcut($utf16le, 1, 4, 'UTF-16LE'), 'UTF-16LE') . \"\\n\";\n?>")).toMatchSnapshot();
  });
});
