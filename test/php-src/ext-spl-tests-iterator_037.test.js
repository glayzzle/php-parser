// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/spl/tests/iterator_037.phpt
  it("SPL: CachingIterator and __toString", function () {
    expect(parser.parseCode("<?php\nfunction test($ar, $flags)\n{\n    echo \"===$flags===\\n\";\n    $it = new CachingIterator($ar, 0);\n    try {\n        $it->setFlags($flags);\n    } catch (\\ValueError $e) {\n        echo 'Exception: ' . $e->getMessage() . \"\\n\";\n        var_dump($it->getFlags());\n        return;\n    }\n    var_dump($it->getFlags());\n    try {\n        foreach($it as $v)\n        {\n            var_dump((string)$it);\n        }\n    } catch (Exception $e) {\n        echo 'Exception: ' . $e->getMessage() . \"\\n\";\n    }\n}\nclass MyItem\n{\n    function __construct($value)\n    {\n        $this->value = $value;\n    }\n    function __toString()\n    {\n        return (string)$this->value;\n    }\n}\nclass MyArrayIterator extends ArrayIterator\n{\n    function __toString()\n    {\n        return $this->key() . ':' . $this->current();\n    }\n}\n$ar = new MyArrayIterator(array(1, 2, 3));\ntest($ar, CachingIterator::CALL_TOSTRING);\ntest($ar, CachingIterator::TOSTRING_USE_KEY);\ntest($ar, CachingIterator::TOSTRING_USE_CURRENT);\n$ar = new MyArrayIterator(array(new MyItem(1), new MyItem(2), new MyItem(3)));\ntest($ar, CachingIterator::TOSTRING_USE_INNER);\ntest($ar, CachingIterator::CALL_TOSTRING | CachingIterator::TOSTRING_USE_KEY);\ntest($ar, CachingIterator::CALL_TOSTRING | CachingIterator::TOSTRING_USE_CURRENT);\ntest($ar, CachingIterator::CALL_TOSTRING | CachingIterator::TOSTRING_USE_INNER);\ntest($ar, CachingIterator::TOSTRING_USE_KEY | CachingIterator::TOSTRING_USE_CURRENT);\ntest($ar, CachingIterator::TOSTRING_USE_KEY | CachingIterator::TOSTRING_USE_INNER);\necho \"===X===\\n\";\ntry\n{\n    $it = new CachingIterator($ar, CachingIterator::CALL_TOSTRING);\n    $it->setFlags(0);\n}\ncatch (Exception $e)\n{\n    echo 'Exception: ' . $e->getMessage() . \"\\n\";\n}\ntry\n{\n    $it = new CachingIterator($ar, CachingIterator::TOSTRING_USE_INNER);\n    $it->setFlags(0);\n}\ncatch (Exception $e)\n{\n    echo 'Exception: ' . $e->getMessage() . \"\\n\";\n}\n?>")).toMatchSnapshot();
  });
});
