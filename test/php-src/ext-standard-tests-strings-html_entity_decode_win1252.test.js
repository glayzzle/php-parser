// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/html_entity_decode_win1252.phpt
  it("Translation of HTML entities for encoding WIN-1252", function () {
    expect(parser.parseCode("<?php\n$arr = array(\n0x20AC => array(0x80, \"EURO SIGN\"),\n//0x81\t      \t#UNDEFINED\n0x201A => array(0x82, \"SINGLE LOW-9 QUOTATION MARK\"),\n0x0192 => array(0x83, \"LATIN SMALL LETTER F WITH HOOK\"),\n0x201E => array(0x84, \"DOUBLE LOW-9 QUOTATION MARK\"),\n0x2026 => array(0x85, \"HORIZONTAL ELLIPSIS\"),\n0x2020 => array(0x86, \"DAGGER\"),\n0x2021 => array(0x87, \"DOUBLE DAGGER\"),\n0x02C6 => array(0x88, \"MODIFIER LETTER CIRCUMFLEX ACCENT\"),\n0x2030 => array(0x89, \"PER MILLE SIGN\"),\n0x0160 => array(0x8A, \"LATIN CAPITAL LETTER S WITH CARON\"),\n0x2039 => array(0x8B, \"SINGLE LEFT-POINTING ANGLE QUOTATION MARK\"),\n0x0152 => array(0x8C, \"LATIN CAPITAL LIGATURE OE\"),\n//0x8D\t      \t#UNDEFINED\n0x017D => array(0x8E, \"LATIN CAPITAL LETTER Z WITH CARON\"),\n//0x8F\t      \t#UNDEFINED\n//0x90\t      \t#UNDEFINED\n0x2018 => array(0x91, \"LEFT SINGLE QUOTATION MARK\"),\n0x2019 => array(0x92, \"RIGHT SINGLE QUOTATION MARK\"),\n0x201C => array(0x93, \"LEFT DOUBLE QUOTATION MARK\"),\n0x201D => array(0x94, \"RIGHT DOUBLE QUOTATION MARK\"),\n0x2022 => array(0x95, \"BULLET\"),\n0x2013 => array(0x96, \"EN DASH\"),\n0x2014 => array(0x97, \"EM DASH\"),\n0x02DC => array(0x98, \"SMALL TILDE\"),\n0x2122 => array(0x99, \"TRADE MARK SIGN\"),\n0x0161 => array(0x9A, \"LATIN SMALL LETTER S WITH CARON\"),\n0x203A => array(0x9B, \"SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\"),\n0x0153 => array(0x9C, \"LATIN SMALL LIGATURE OE\"),\n//0x9D\t      \t#UNDEFINED\n0x017E => array(0x9E, \"LATIN SMALL LETTER Z WITH CARON\"),\n0x0178 => array(0x9F, \"LATIN CAPITAL LETTER Y WITH DIAERESIS\"),\n);\n$res = html_entity_decode(\"&#x81;\", ENT_QUOTES, 'WINDOWS-1252');\necho \"Special test for &#x81; (shouldn't decode):\\n\";\necho $res,\"\\n\\n\";\n$res = html_entity_decode(\"&#x8D;\", ENT_QUOTES, 'WINDOWS-1252');\necho \"Special test for &#x8D; (shouldn't decode):\\n\";\necho $res,\"\\n\\n\";\n$res = html_entity_decode(\"&#x8F;\", ENT_QUOTES, 'WINDOWS-1252');\necho \"Special test for &#x8F; (shouldn't decode):\\n\";\necho $res,\"\\n\\n\";\n$res = html_entity_decode(\"&#x90;\", ENT_QUOTES, 'WINDOWS-1252');\necho \"Special test for &#x90; (shouldn't decode):\\n\";\necho $res,\"\\n\\n\";\n$res = html_entity_decode(\"&#x9D;\", ENT_QUOTES, 'WINDOWS-1252');\necho \"Special test for &#x9D; (shouldn't decode):\\n\";\necho $res,\"\\n\\n\";\nforeach ($arr as $u => $v) {\n    $ent = sprintf(\"&#x%X;\", $u);\n    $res = html_entity_decode($ent, ENT_QUOTES, 'WINDOWS-1252');\n    $d = unpack(\"H*\", $res);\n    echo sprintf(\"%s: %s => %s\\n\", $v[1], $ent, $d[1]);\n    $ent = sprintf(\"&#x%X;\", $v[0]);\n    $res = html_entity_decode($ent, ENT_QUOTES, 'WINDOWS-1252');\n    if ($res[0] != \"&\" || $res[1] != \"#\")\n        $res = unpack(\"H*\", $res)[1];\n    echo sprintf(\"%s => %s\\n\\n\", $ent, $res);\n}\n?>")).toMatchSnapshot();
  });
});
