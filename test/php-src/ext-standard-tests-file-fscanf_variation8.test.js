// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/fscanf_variation8.phpt
  it("Test fscanf() function: usage variations - float formats with float values", function () {
    expect(parser.parseCode("<?php\n/* Test fscanf() to scan different float values using different format types */\n$file_path = __DIR__;\necho \"*** Test fscanf(): different float format types with different float values ***\\n\";\n// create a file\n$filename = \"$file_path/fscanf_variation8.tmp\";\n$file_handle = fopen($filename, \"w\");\nif($file_handle == false)\n  exit(\"Error:failed to open file $filename\");\n// different valid float values\n$valid_floats = array(\n-2147483649, // float value\n  2147483648,  // float value\n  -0x80000001, // float value, beyond max negative int\n  0x800000001, // float value, beyond max positive int\n  020000000001, // float value, beyond max positive int\n  -020000000001, // float value, beyond max negative int\n  0.0,\n  -0.1,\n  10.0000000000000000005,\n  10.5e+5,\n  1e5,\n  -1e5,\n  1e-5,\n  -1e-5,\n  1e+5,\n  -1e+5,\n  1E5,\n  -1E5,\n  1E+5,\n  -1E+5,\n  1E-5,\n  -1E-5,\n  .5e+7,\n  -.5e+7,\n  .6e-19,\n  -.6e-19,\n  .05E+44,\n  -.05E+44,\n  .0034E-30,\n  -.0034E-30\n);\n// various float formats\n$float_formats = array( \"%f\",\n                        \"%hf\", \"%lf\", \"%Lf\",\n                        \" %f\", \"%f \", \"% f\",\n                        \"\\t%f\", \"\\n%f\", \"%4f\",\n                        \"%30f\", \"%[0-9]\", \"%*f\",\n                 );\n$counter = 1;\n// writing to the file\nforeach($valid_floats as $float_value) {\n  @fprintf($file_handle, $float_value);\n  @fprintf($file_handle, \"\\n\");\n}\n// closing the file\nfclose($file_handle);\n// opening the file for reading\n$file_handle = fopen($filename, \"r\");\nif($file_handle == false) {\n  exit(\"Error:failed to open file $filename\");\n}\n$counter = 1;\n// reading the values from file using different float formats\nforeach($float_formats as $float_format) {\n  // rewind the file so that for every foreach iteration the file pointer starts from bof\n  rewind($file_handle);\n  echo \"\\n-- iteration $counter --\\n\";\n  while( !feof($file_handle) ) {\n    try {\n      var_dump(fscanf($file_handle,$float_format));\n    } catch (ValueError $exception) {\n      echo $exception->getMessage() . \"\\n\";\n    }\n  }\n  $counter++;\n}\necho \"\\n*** Done ***\";\n?>")).toMatchSnapshot();
  });
});
