// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/strings/htmlentities-utf-3.phpt
  it("Test get_next_char(), used by htmlentities()/htmlspecialchars(): validity of UTF-8 sequences", function () {
    expect(parser.parseCode("<?php\n/* conformance to Unicode 5.2, section 3.9, D92 */\n$val_ranges = array(\n    array(array(0x00, 0x7F)),\n    array(array(0xC2, 0xDF), array(0x80, 0xBF)),\n    array(array(0xE0, 0xE0), array(0xA0, 0xBF), array(0x80, 0xBF)),\n    array(array(0xE1, 0xEC), array(0x80, 0xBF), array(0x80, 0xBF)),\n    array(array(0xED, 0xED), array(0x80, 0x9F), array(0x80, 0xBF)),\n    array(array(0xEE, 0xEF), array(0x80, 0xBF), array(0x80, 0xBF)),\n    array(array(0xF0, 0xF0), array(0x90, 0xBF), array(0x80, 0xBF), array(0x80, 0xBF)),\n    array(array(0xF1, 0xF3), array(0x80, 0xBF), array(0x80, 0xBF), array(0x80, 0xBF)),\n    array(array(0xF4, 0xF4), array(0x80, 0x8F), array(0x80, 0xBF), array(0x80, 0xBF)),\n);\nfunction is_valid($seq) {\n    global $val_ranges;\n    $b = ord($seq[0]);\n    foreach ($val_ranges as $l) {\n        if ($b >= $l[0][0] && $b <= $l[0][1]) {\n            if (count($l) != strlen($seq)) {\n                return false;\n            }\n            for ($n = 1; $n < strlen($seq); $n++) {\n                if (ord($seq[$n]) < $l[$n][0] || ord($seq[$n]) > $l[$n][1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction concordance($s) {\n    $vhe = strlen(htmlspecialchars($s, ENT_QUOTES, \"UTF-8\")) > 0;\n    $v = is_valid($s);\n    return ($vhe === $v);\n}\nfor ($b1 = 0xC0; $b1 < 0xE0; $b1++) {\n    for ($b2 = 0x80; $b2 < 0xBF; $b2++) {\n        $s = chr($b1).chr($b2);\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n    }\n}\nfor ($b1 = 0xE0; $b1 < 0xEF; $b1++) {\n    for ($b2 = 0x80; $b2 < 0xBF; $b2++) {\n        $s = chr($b1).chr($b2).\"\\x80\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n        $s = chr($b1).chr($b2).\"\\xBF\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n    }\n}\nfor ($b1 = 0xF0; $b1 < 0xFF; $b1++) {\n    for ($b2 = 0x80; $b2 < 0xBF; $b2++) {\n        $s = chr($b1).chr($b2).\"\\x80\\x80\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n        $s = chr($b1).chr($b2).\"\\xBF\\x80\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n        $s = chr($b1).chr($b2).\"\\x80\\xBF\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n        $s = chr($b1).chr($b2).\"\\xBF\\xBF\";\n        if (!concordance($s))\n            echo \"Discordance for \".bin2hex($s),\"\\n\";\n    }\n}\necho \"Done.\\n\";\n?>")).toMatchSnapshot();
  });
});
