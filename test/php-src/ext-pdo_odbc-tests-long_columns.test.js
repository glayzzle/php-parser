// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_odbc/tests/long_columns.phpt
  it("PDO ODBC \"long\" columns", function () {
    expect(parser.parseCode("<?php\n// setup: set PDOTEST_DSN environment variable\n//        for MyODBC (MySQL) and MS SQL Server, you need to also set PDOTEST_USER and PDOTEST_PASS\n//\n// can use MS SQL Server on Linux - using unixODBC\n//   -RHEL6.2\n//   -download & instructions: http://www.microsoft.com/en-us/download/details.aspx?id=28160\n//      -Linux6\\sqlncli-11.0.1790.0.tar.gz (it calls RHEL6.x 'Linux6' for some reason)\n//   -follow instructions on web page and install script\n//   -may have to specify connection info in connection string without using a DSN (DSN-less connection)\n//      -for example:\n//            set PDOTEST_DSN='odbc:Driver=SQL Server Native Client 11.0;Server=10.200.51.179;Database=testdb'\n//            set PDOTEST_USER=sa\n//            set PDOTEST_PASS=Password01\n//\n// on Windows, the easy way to do this:\n// 1. install MS Access (part of MS Office) and include ODBC (Development tools feature)\n//       install the x86 build of the Drivers. You might not be able to load the x64 drivers.\n// 2. in Control Panel, search for ODBC and open \"Setup data sources (ODBC)\"\n// 3. click on System DSN tab\n// 4. click Add and choose \"Microsoft Access Driver (*.mdb, *.accdb)\" driver\n// 5. enter a DSN, ex: accdb12\n// 6. click 'Create' and select a file to save the database as\n//       -otherwise, you'll have to open MS Access, create a database, then load that file in this Window to map it to a DSN\n// 7. set the environment variable PDOTEST_DSN=\"odbc:<system dsn from step 5>\" ex: SET PDOTEST_DSN=odbc:accdb12\n//         -note: on Windows, \" is included in environment variable\n//\n// easy way to compile:\n// configure --disable-all --enable-cli --enable-zts --enable-pdo --with-pdo-odbc --enable-debug\n// configure --disable-all --enable-cli --enable-pdo --with-pdo-odbc=unixODBC,/usr,/usr --with-unixODBC=/usr --enable-debug\n//\nrequire 'ext/pdo/tests/pdo_test.inc';\n$db = PDOTest::test_factory('ext/pdo_odbc/tests/common.phpt');\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);\nif (false === $db->exec('CREATE TABLE TEST (id INT NOT NULL PRIMARY KEY, data CLOB)')) {\n    if (false === $db->exec('CREATE TABLE TEST (id INT NOT NULL PRIMARY KEY, data longtext)')) {\n        if (false === $db->exec('CREATE TABLE TEST (id INT NOT NULL PRIMARY KEY, data varchar(4000))')) {\n            die(\"BORK: don't know how to create a long column here:\\n\" . implode(\", \", $db->errorInfo()));\n        }\n    }\n}\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// the driver reads columns in blocks of 255 bytes and then reassembles those blocks into a single buffer.\n// test sizes around 255 to make sure that the reassembly works (and that the column is split into 255 byte blocks by the database)\n// also, test sizes below 255 to make sure that they work - and are not treated as a long column (should be read in a single read)\n$sizes = array(32, 53, 64, 79, 128, 253, 254, 255, 256, 257, 258, 1022, 1023, 1024, 1025, 1026, 510, 511, 512, 513, 514, 1278, 1279, 1280, 1281, 1282, 2046, 2047, 2048, 2049, 2050, 1534, 1535, 1536, 1537, 1538, 3070, 3071, 3072, 3073, 3074, 3998, 3999, 4000);\nfunction alpha_repeat($len) {\n    // use the alphabet instead of 'i' characters to make sure the blocks don't overlap when they are reassembled\n    $out = \"\";\n    while (strlen($out) < $len) {\n        $out .= \"abcdefghijklmnopqrstuvwxyz\";\n    }\n    return substr($out, 0, $len);\n}\n// don't use Prepared Statements. that fails on MS SQL server (works with Access, MyODBC), which is a separate failure, feature/code-path from what\n// this test does - nice to be able to test using MS SQL server\nforeach ($sizes as $num) {\n    $text = alpha_repeat($num);\n    $db->exec(\"INSERT INTO TEST VALUES($num, '$text')\");\n}\n// verify data\nforeach ($db->query('SELECT id, data from TEST ORDER BY LEN(data) ASC') as $row) {\n    $expect = alpha_repeat($row[0]);\n    if (strcmp($expect, $row[1])) {\n        echo \"Failed on size $row[id]:\\n\";\n        printf(\"Expected %d bytes, got %d\\n\", strlen($expect), strlen($row['data']));\n        echo ($expect) . \"\\n\";\n        echo ($row['data']) . \"\\n\";\n    } else {\n        echo \"Passed on size $row[id]\\n\";\n    }\n}\necho \"Finished\\n\";\n?>")).toMatchSnapshot();
  });
});
