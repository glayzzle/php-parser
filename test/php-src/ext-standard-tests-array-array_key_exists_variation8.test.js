// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_key_exists_variation8.phpt
  it("Test array_key_exists() function : usage variations - array keys are different data types", function () {
    expect(parser.parseCode("<?php\n/*\n * Pass an array where the keys are different data types as the $search argument\n * then pass many different data types as $key argument to test where array_key_exist()\n * returns true.\n */\necho \"*** Testing array_key_exists() : usage variations ***\\n\";\n//get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// heredoc string\n$heredoc = <<<EOT\nstring\nEOT;\n// different data types to be iterated over\n$inputs = array(\n       // int data\n/*1*/  'int' => array(\n       0 => 'zero',\n       1 => 'one',\n       12345 => 'positive',\n       -2345 => 'negative',\n       ),\n       // null data\n/*3*/ 'null uppercase' => array(\n       NULL => 'null 1',\n       ),\n       'null lowercase' => array(\n       null => 'null 2',\n       ),\n       // boolean data\n/*4*/ 'bool lowercase' => array(\n       true => 'lowert',\n       false => 'lowerf',\n       ),\n       'bool uppercase' => array(\n       TRUE => 'uppert',\n       FALSE => 'upperf',\n       ),\n       // empty data\n/*5*/ 'empty double quotes' => array(\n       \"\" => 'emptyd',\n       ),\n       'empty single quotes' => array(\n       '' => 'emptys',\n       ),\n       // string data\n/*6*/ 'string' => array(\n       \"stringd\" => 'stringd',\n       'strings' => 'strings',\n       $heredoc => 'stringh',\n       ),\n       // undefined data\n/*8*/ 'undefined' => array(\n       @$undefined_var => 'undefined',\n       ),\n       // unset data\n/*9*/ 'unset' => array(\n       @$unset_var => 'unset',\n       ),\n);\n// loop through each element of $inputs to check the behavior of array_key_exists()\n$iterator = 1;\nforeach($inputs as $type => $input) {\n    echo \"\\n-- Iteration $iterator: $type data --\\n\";\n    //iterate over again to get all different key values\n    foreach ($inputs as $new_type => $new_input) {\n        echo \"-- \\$key arguments are $new_type data:\\n\";\n        foreach ($new_input as $key => $search) {\n            var_dump(array_key_exists($key, $input));\n        }\n    }\n    $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
