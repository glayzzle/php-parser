// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/range_errors.phpt
  it("Test range() function (errors)", function () {
    expect(parser.parseCode("<?php\necho \"\\n*** Testing error conditions ***\\n\";\necho \"\\n-- Testing ( (low < high) && (step = 0) ) --\\n\";\ntry {\n    var_dump( range(1, 2, 0) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump( range(\"a\", \"b\", 0) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n\\n-- Testing ( (low > high) && (step = 0) ) --\\n\";\ntry {\n    var_dump( range(2, 1, 0) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump( range(\"b\", \"a\", 0) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n\\n-- Testing ( (low < high) && (high-low < step) ) --\\n\";\ntry {\n    var_dump( range(1.0, 7.0, 6.5) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n\\n-- Testing ( (low > high) && (low-high < step) ) --\\n\";\ntry {\n    var_dump( range(7.0, 1.0, 6.5) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n\\n-- Testing ( (low < high) && (high-low < step) ) for characters --\\n\";\ntry {\n    var_dump(range('a', 'z', 100));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n\\n-- Testing ( (low > high) && (low-high < step) ) for characters --\\n\";\ntry {\n    var_dump(range('z', 'a', 100));\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n-- Testing other conditions --\\n\";\ntry {\n    var_dump( range(-1, -2, 2) );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump( range(\"a\", \"j\", \"z\") );\n} catch (\\TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump( range(0, 1, \"140962482048819216326.24\") );\n} catch (\\ValueError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\necho \"\\n-- Testing Invalid steps --\\n\";\n$step_arr = array( \"string\", NULL, FALSE, \"\", \"\\0\" );\nforeach( $step_arr as $step ) {\n    try {\n        var_dump( range( 1, 5, $step ) );\n    } catch (\\TypeError | \\ValueError $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n}\n?>")).toMatchSnapshot();
  });
});
