// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_merge_variation4.phpt
  it("Test array_merge() function : usage variations - Diff. data types as array keys", function () {
    expect(parser.parseCode("<?php\n/*\n * Pass an array with different data types as keys to test how array_merge\n * adds it onto an existing array\n */\necho \"*** Testing array_merge() : usage variations ***\\n\";\n// Initialise function arguments not being substituted\n$arr = array ('one' => 1, 'two' => 2);\n//get an unset variable\n$unset_var = 10;\nunset ($unset_var);\n// heredoc string\n$heredoc = <<<EOT\nhello world\nEOT;\n// arrays with keys as different data types to be passed as $input\n$inputs = array(\n       // int data\n/*1*/  'int' => array(\n       0 => 'zero',\n       1 => 'one',\n       12345 => 'positive',\n       -2345 => 'negative',\n       ),\n       // null data\n/*4*/  'null uppercase' => array(\n       NULL => 'null 1',\n       ),\n/*5*/  'null lowercase' => array(\n       null => 'null 2',\n       ),\n       // boolean data\n/*6*/ 'bool lowercase' => array(\n       true => 'lowert',\n       false => 'lowerf',\n       ),\n/*7*/  'bool uppercase' => array(\n       TRUE => 'uppert',\n       FALSE => 'upperf',\n       ),\n       // empty data\n/*8*/ 'empty double quotes' => array(\n       \"\" => 'emptyd',\n       ),\n/*9*/  'empty single quotes' => array(\n       '' => 'emptys',\n       ),\n       // string data\n/*10*/ 'string' => array(\n       \"stringd\" => 'stringd',\n       'strings' => 'strings',\n       $heredoc => 'stringh',\n       ),\n       // undefined data\n/*11*/ 'undefined' => array(\n       @$undefined_var => 'undefined',\n       ),\n       // unset data\n/*12*/ 'unset' => array(\n       @$unset_var => 'unset',\n       ),\n);\n// loop through each element of $inputs to check the behavior of array_merge\n$iterator = 1;\nforeach($inputs as $key => $input) {\n  echo \"\\n-- Iteration $iterator: $key data --\\n\";\n  var_dump( array_merge($input, $arr) );\n  var_dump( array_merge($arr, $input) );\n  $iterator++;\n};\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
