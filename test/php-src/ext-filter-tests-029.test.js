// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/filter/tests/029.phpt
  it("filter_var() and FILTER_CALLBACK", function () {
    expect(parser.parseCode("<?php\n/* Simple callback function */\nfunction test($var) {\n    return strtoupper($var);\n}\nvar_dump(filter_var(\"data\", FILTER_CALLBACK, array(\"options\"=>\"test\")));\nvar_dump(filter_var(\"~!@#$%^&*()_QWERTYUIOPASDFGHJKLZXCVBNM<>>?\\\"}{:\", FILTER_CALLBACK, array(\"options\"=>\"test\")));\nvar_dump(filter_var(\"\", FILTER_CALLBACK, array(\"options\"=>\"test\")));\ntry {\n    filter_var(\"qwe\", FILTER_CALLBACK, array(\"options\"=>\"no such func\"));\n} catch (TypeError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\ntry {\n    filter_var(\"qwe\", FILTER_CALLBACK, array(\"options\"=>\"\"));\n} catch (TypeError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\ntry {\n    filter_var(\"qwe\", FILTER_CALLBACK);\n} catch (TypeError $exception) {\n    echo $exception->getMessage() . \"\\n\";\n}\n/* Simple class method callback */\nclass test_class {\n    static function test ($var) {\n        return strtolower($var);\n    }\n}\nvar_dump(filter_var(\"dAtA\", FILTER_CALLBACK, array(\"options\"=>array(\"test_class\", \"test\"))));\nvar_dump(filter_var(\"~!@#$%^&*()_QWERTYUIOPASDFGHJKLZXCVBNM<>>?\\\"}{:\", FILTER_CALLBACK, array(\"options\"=>array(\"test_class\",\"test\"))));\nvar_dump(filter_var(\"\", FILTER_CALLBACK, array(\"options\"=>array(\"test_class\",\"test\"))));\n/* empty function without return value */\nfunction test1($var) {\n}\nvar_dump(filter_var(\"data\", FILTER_CALLBACK, array(\"options\"=>\"test1\")));\nvar_dump(filter_var(\"~!@#$%^&*()_QWERTYUIOPASDFGHJKLZXCVBNM<>>?\\\"}{:\", FILTER_CALLBACK, array(\"options\"=>\"test1\")));\nvar_dump(filter_var(\"\", FILTER_CALLBACK, array(\"options\"=>\"test1\")));\n/* attempting to change data by reference */\nfunction test2(&$var) {\n    $var = 1;\n}\nvar_dump(filter_var(\"data\", FILTER_CALLBACK, array(\"options\"=>\"test2\")));\nvar_dump(filter_var(\"~!@#$%^&*()_QWERTYUIOPASDFGHJKLZXCVBNM<>>?\\\"}{:\", FILTER_CALLBACK, array(\"options\"=>\"test2\")));\nvar_dump(filter_var(\"\", FILTER_CALLBACK, array(\"options\"=>\"test2\")));\n/* thrown exception in the callback */\nfunction test3($var) {\n    throw new Exception(\"test\");\n}\ntry {\n    var_dump(filter_var(\"data\", FILTER_CALLBACK, array(\"options\"=>\"test3\")));\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
