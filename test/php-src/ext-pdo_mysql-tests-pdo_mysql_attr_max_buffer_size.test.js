// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_attr_max_buffer_size.phpt
  it("MySQL PDO->__construct(), PDO::MYSQL_ATTR_MAX_BUFFER_SIZE", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    function try_buffer_size($offset, $buffer_size) {\n        try {\n            $dsn = MySQLPDOTest::getDSN();\n            $user = PDO_MYSQL_TEST_USER;\n            $pass = PDO_MYSQL_TEST_PASS;\n            /* unsigned overflow possible ? */\n            $db = new PDO($dsn, $user, $pass,\n            array(\n                PDO::MYSQL_ATTR_MAX_BUFFER_SIZE => $buffer_size,\n                /* buffer is only relevant with native PS */\n                PDO::MYSQL_ATTR_DIRECT_QUERY => 0,\n                PDO::ATTR_EMULATE_PREPARES => 0,\n            ));\n            $db->exec('DROP TABLE IF EXISTS test');\n            $db->exec(sprintf('CREATE TABLE test(id INT, val LONGBLOB) ENGINE = %s', PDO_MYSQL_TEST_ENGINE));\n            // 10 * (10 * 1024) = 10 * (10 * 1k) = 100k\n            $db->exec('INSERT INTO test(id, val) VALUES (1, REPEAT(\"01234567890\", 10240))');\n            $stmt = $db->prepare('SELECT id, val FROM test');\n            $stmt->execute();\n            $id = $val = NULL;\n            $stmt->bindColumn(1, $id);\n            $stmt->bindColumn(2, $val);\n            while ($row = $stmt->fetch(PDO::FETCH_BOUND)) {\n                printf(\"[%03d] id = %d, val = %s... (length: %d)\\n\",\n                    $offset, $id, substr($val, 0, 10), strlen($val));\n            }\n            $db->exec('DROP TABLE IF EXISTS test');\n        } catch (PDOException $e) {\n            printf(\"[%03d] %s, [%s] %s\\n\",\n                $offset,\n                $e->getMessage(),\n                (is_object($db)) ? $db->errorCode() : 'n/a',\n                (is_object($db)) ? implode(' ', $db->errorInfo()) : 'n/a');\n        }\n    }\n    try_buffer_size(1, -1);\n    try_buffer_size(2, 1000);\n    try_buffer_size(4, 2000);\n    try {\n        try_buffer_size(3, NULL);\n    } catch (TypeError $e) {\n        echo $e->getMessage(), \"\\n\";\n    }\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
