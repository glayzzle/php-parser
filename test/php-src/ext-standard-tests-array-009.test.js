// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/009.phpt
  it("Test key(), current(), next() & reset() functions", function () {
    expect(parser.parseCode("<?php\n$basic_arrays = array (\n  array(0),  // array with element as 0\n  array(1),  // array with single element\n  array(1,2, 3, -1, -2, -3),               // array of integers\n  array(1.1, 2.2, 3.3, -1.1, -2.2, -3.3),  // array of floats\n  array('a', 'b', 'c', \"ab\", \"ac\", \"ad\"),  // string array\n  array(\"a\" => \"apple\", \"b\" => \"book\", \"c\" => \"cook\"),  // associative array\n  array('d' => 'drink', 'p' => 'port', 's' => 'set'),   // another associative array\n  array(1 => 'One', 2 => 'two', 3 => \"three\")           // associative array with key as integers\n);\n$varient_arrays = array (\n   array(),    // empty array\n   array(\"\"),  // array with null string\n   array(NULL),// array with NULL\n   array(null),// array with null\n   array(NULL, true, null, \"\", 1), // mixed array\n   array(-1 => \"test\", -2 => \"rest\", 2 => \"two\",\n         \"\" => \"string\", 0 => \"zero\", \"\" => \"\" ) // mixed array\n);\necho \"*** Testing basic operations ***\\n\";\n$loop_count = 1;\nforeach ($basic_arrays as $sub_array )  {\n  echo \"-- Iteration $loop_count --\\n\";\n  $loop_count++;\n  $c = count ($sub_array);\n  $c++; // increment by one to create the situation of accessing beyond array size\n  while ( $c ) {\n    var_dump( current($sub_array)); // current element\n    var_dump( key($sub_array) );    // key of the current element\n    var_dump( next($sub_array) );   // move to next element\n    $c --;\n  }\n  var_dump( reset($sub_array) );    // reset the internal pointer to first element\n  var_dump( key($sub_array) );      // access the array after reset\n  var_dump( $sub_array );           // dump the array to see that its intact\n  echo \"\\n\";\n}\necho \"\\n*** Testing possible variations ***\\n\";\n$loop_count = 1;\nforeach ($varient_arrays as $sub_array )  {\n  echo \"-- Iteration $loop_count --\\n\";\n  $loop_count++;\n  $c = count ($sub_array);\n  $c++; // increment by one to create the situation of accessing beyond array size\n  while ( $c ) {\n    var_dump( current($sub_array)); // current element\n    var_dump( key($sub_array) );    // key of the current element\n    var_dump( next($sub_array) );   // move to next element\n    $c --;\n  }\n  var_dump( reset($sub_array) );    // reset the internal pointer to first element\n  var_dump( key($sub_array) );      // access the array after reset\n  var_dump( $sub_array );           // dump the array to see that its intact\n  echo \"\\n\";\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
