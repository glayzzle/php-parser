// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/bug68371.phpt
  it("PDO MySQL Bug #38671 (PDO#getAttribute() cannot be called with platform-specific attribute names)", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n$pdo = MySQLPDOTest::factory();\n$pdo->setAttribute (\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n$attrs = array(\n    // Extensive test: default value and set+get values\n    PDO::ATTR_EMULATE_PREPARES\t\t=> array(null, 1, 0),\n    PDO::MYSQL_ATTR_DIRECT_QUERY\t=> array(null, 0, 1),\n    PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => array(null, 0, 1),\n    // Just test the default\n    PDO::ATTR_AUTOCOMMIT\t\t\t=> array(null),\n    PDO::ATTR_PREFETCH\t\t\t\t=> array(null),\n    PDO::ATTR_TIMEOUT\t\t\t\t=> array(null),\n    PDO::ATTR_ERRMODE\t\t\t\t=> array(null),\n    PDO::ATTR_SERVER_VERSION\t\t=> array(null),\n    PDO::ATTR_CLIENT_VERSION\t\t=> array(null),\n    PDO::ATTR_SERVER_INFO\t\t\t=> array(null),\n    PDO::ATTR_CONNECTION_STATUS\t\t=> array(null),\n    PDO::ATTR_CASE\t\t\t\t\t=> array(null),\n    PDO::ATTR_CURSOR_NAME\t\t\t=> array(null),\n    PDO::ATTR_CURSOR\t\t\t\t=> array(null),\n    PDO::ATTR_ORACLE_NULLS\t\t\t=> array(null),\n    PDO::ATTR_PERSISTENT\t\t\t=> array(null),\n    PDO::ATTR_STATEMENT_CLASS\t\t=> array(null),\n    PDO::ATTR_FETCH_TABLE_NAMES\t\t=> array(null),\n    PDO::ATTR_FETCH_CATALOG_NAMES\t=> array(null),\n    PDO::ATTR_DRIVER_NAME\t\t\t=> array(null),\n    PDO::ATTR_STRINGIFY_FETCHES\t\t=> array(null),\n    PDO::ATTR_MAX_COLUMN_LEN\t\t=> array(null),\n    PDO::ATTR_DEFAULT_FETCH_MODE\t=> array(null),\n);\nforeach ($attrs as $a => $vals) {\n    foreach ($vals as $v) {\n        try {\n            if (!isset($v)) {\n                var_dump($pdo->getAttribute($a));\n            } else {\n                $pdo->setAttribute($a, $v);\n                if ($pdo->getAttribute($a) === $v) {\n                    echo \"OK\\n\";\n                } else {\n                    throw new \\Exception('KO');\n                }\n            }\n        } catch (\\Exception $e) {\n            if ($e->getCode() == 'IM001') {\n                echo \"ERR\\n\";\n            } else {\n                echo \"ERR {$e->getMessage()}\\n\";\n            }\n        }\n    }\n}\n?>")).toMatchSnapshot();
  });
});
