// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/lang/bug22510.phpt
  it("Bug #22510 (segfault among complex references)", function () {
    expect(parser.parseCode("<?php\nclass foo\n{\n    public $list = array();\n    function finalize() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        $cl = &$this->list;\n    }\n    function &method1() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        return @$this->foo;\n    }\n    function &method2() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        return $this->foo;\n    }\n    function method3() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        return @$this->foo;\n    }\n}\nclass bar\n{\n    function run1() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        $this->instance = new foo();\n        $this->instance->method1($this);\n        $this->instance->method1($this);\n    }\n    function run2() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        $this->instance = new foo();\n        $this->instance->method2($this);\n        $this->instance->method2($this);\n    }\n    function run3() {\n        print __CLASS__.\"::\".__FUNCTION__.\"\\n\";\n        $this->instance = new foo();\n        $this->instance->method3($this);\n        $this->instance->method3($this);\n    }\n}\nfunction ouch(&$bar) {\n    print __FUNCTION__.\"\\n\";\n    @$a = $a;\n    $bar->run1();\n}\nfunction ok1(&$bar) {\n    print __FUNCTION__.\"\\n\";\n    $bar->run1();\n}\nfunction ok2(&$bar) {\n    print __FUNCTION__.\"\\n\";\n    @$a = $a;\n    $bar->run2();\n}\nfunction ok3(&$bar) {\n    print __FUNCTION__.\"\\n\";\n    @$a = $a;\n    $bar->run3();\n}\n$foo = new bar();\n$bar =& $foo;\nok1($bar);\n$bar->instance->finalize();\nprint \"done!\\n\";\nok2($bar);\n$bar->instance->finalize();\nprint \"done!\\n\";\nok3($bar);\n$bar->instance->finalize();\nprint \"done!\\n\";\nouch($bar);\n$bar->instance->finalize();\nprint \"I'm alive!\\n\";\n?>")).toMatchSnapshot();
  });
});
