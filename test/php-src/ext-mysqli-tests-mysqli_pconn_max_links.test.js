// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mysqli/tests/mysqli_pconn_max_links.phpt
  it("Persistent connections and mysqli.max_links", function () {
    expect(parser.parseCode("<?php\n    require_once(\"connect.inc\");\n    require_once('table.inc');\n    if (!mysqli_query($link, 'DROP USER pcontest') ||\n        !mysqli_query($link, 'DROP USER pcontest@localhost') ||\n        !mysqli_query($link, 'CREATE USER pcontest@\"%\" IDENTIFIED BY \"pcontest\"') ||\n        !mysqli_query($link, 'CREATE USER pcontest@localhost IDENTIFIED BY \"pcontest\"') ||\n        !mysqli_query($link, sprintf(\"GRANT SELECT ON TABLE %s.test TO pcontest@'%%'\", $db)) ||\n        !mysqli_query($link, sprintf(\"GRANT SELECT ON TABLE %s.test TO pcontest@'localhost'\", $db))) {\n        printf(\"[000] Init failed, [%d] %s\\n\",\n            mysqli_errno($plink), mysqli_error($plink));\n    }\n    try {\n        mysqli_get_links_stats(1);\n    } catch (ArgumentCountError $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n    echo \"Before pconnect:\";\n    var_dump(mysqli_get_links_stats());\n    if (!$plink = my_mysqli_connect('p:' . $host, 'pcontest', 'pcontest', $db, $port, $socket))\n        printf(\"[001] Cannot connect using the second DB user created during SKIPIF, [%d] %s\\n\",\n            mysqli_connect_errno(), mysqli_connect_error());\n    echo \"After pconnect:\";\n    var_dump(mysqli_get_links_stats());\n    ob_start();\n    phpinfo();\n    $phpinfo = strip_tags(ob_get_contents());\n    ob_end_clean();\n    $phpinfo = substr($phpinfo, strpos($phpinfo, 'MysqlI Support => enabled'), 500);\n    if (!preg_match('@Active Persistent Links\\s+=>\\s+(\\d+)@ismU', $phpinfo, $matches))\n        printf(\"[002] Cannot get # active persistent links from phpinfo()\\n\");\n    $num_plinks = $matches[1];\n    if (!$res = mysqli_query($plink, 'SELECT id, label FROM test WHERE id = 1'))\n        printf(\"[003] Cannot run query on persistent connection of second DB user, [%d] %s\\n\",\n            mysqli_errno($plink), mysqli_error($plink));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[004] Cannot run fetch result, [%d] %s\\n\",\n            mysqli_errno($plink), mysqli_error($plink));\n    mysqli_free_result($res);\n    var_dump($row);\n    // change the password for the second DB user and kill the persistent connection\n    if ((!mysqli_query($link, 'SET PASSWORD FOR pcontest = \"newpass\"') &&\n            !mysqli_query($link, 'SET PASSWORD FOR pcontest = PASSWORD(\"newpass\")'))||\n            !mysqli_query($link, 'FLUSH PRIVILEGES'))\n        printf(\"[005] Cannot change PW of second DB user, [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n        // change the password for the second DB user and kill the persistent connection\n    if ((!mysqli_query($link, 'SET PASSWORD FOR pcontest@localhost = \"newpass\"') &&\n        !mysqli_query($link, 'SET PASSWORD FOR pcontest@localhost = PASSWORD(\"newpass\")')) ||\n            !mysqli_query($link, 'FLUSH PRIVILEGES'))\n        printf(\"[006] Cannot change PW of second DB user, [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    // persistent connections cannot be closed but only be killed\n    $pthread_id = mysqli_thread_id($plink);\n    if (!mysqli_query($link, sprintf('KILL %d', $pthread_id)))\n        printf(\"[007] Cannot KILL persistent connection of second DB user, [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    // give the server a second to really kill the thread\n    sleep(1);\n    if (!$res = mysqli_query($link, \"SHOW FULL PROCESSLIST\"))\n        printf(\"[008] [%d] %s\\n\", mysqli_errno($link), mysqli_error($link));\n    $running_threads = array();\n    while ($row = mysqli_fetch_assoc($res))\n        $running_threads[$row['Id']] = $row;\n    mysqli_free_result($res);\n    if (isset($running_threads[$pthread_id]))\n        printf(\"[009] Persistent connection has not been killed\\n\");\n    echo \"Before second pconnect:\";\n    var_dump(mysqli_get_links_stats());\n    // this fails and we have 0 (<= $num_plinks) connections\n    if ($plink = @my_mysqli_connect('p:' . $host, 'pcontest', 'pcontest', $db, $port, $socket))\n        printf(\"[010] Can connect using the old password, [%d] %s\\n\",\n            mysqli_connect_errno($link), mysqli_connect_error($link));\n    echo \"After second pconnect:\";\n    var_dump(mysqli_get_links_stats());\n    ob_start();\n    phpinfo();\n    $phpinfo = strip_tags(ob_get_contents());\n    ob_end_clean();\n    $phpinfo = substr($phpinfo, stripos($phpinfo, 'MysqlI Support => enabled'), 500);\n    if (!preg_match('@Active Persistent Links\\s+=>\\s+(\\d+)@ismU', $phpinfo, $matches))\n        printf(\"[010] Cannot get # of active persistent links from phpinfo()\\n\");\n    var_dump(mysqli_get_links_stats());\n    $num_plinks_kill = $matches[1];\n    $sstats = mysqli_get_links_stats();\n    if ($sstats['active_plinks'] != $num_plinks_kill) {\n        printf(\"[010.2] Num of active plinks differ %s %s\\n\", $sstats['active_plinks'], $num_plinks_kill);\n    }\n    if ($num_plinks_kill > $num_plinks)\n        printf(\"[011] Expecting Active Persistent Links < %d, got %d\\n\", $num_plinks, $num_plinks_kill);\n    if (!$plink = my_mysqli_connect('p:' . $host, 'pcontest', 'newpass', $db, $port, $socket))\n        printf(\"[012] Cannot connect using the new password, [%d] %s\\n\",\n            mysqli_connect_errno(), mysqli_connect_error());\n    if (!$res = mysqli_query($plink, 'SELECT id, label FROM test WHERE id = 1'))\n        printf(\"[013] Cannot run query on persistent connection of second DB user, [%d] %s\\n\",\n            mysqli_errno($plink), mysqli_error($plink));\n    if (!$row = mysqli_fetch_assoc($res))\n        printf(\"[014] Cannot run fetch result, [%d] %s\\n\",\n            mysqli_errno($plink), mysqli_error($plink));\n    mysqli_free_result($res);\n    var_dump($row);\n    if ($plink2 = my_mysqli_connect('p:' . $host, 'pcontest', 'newpass', $db, $port, $socket)) {\n        printf(\"[015] Can open more persistent connections than allowed, [%d] %s\\n\",\n            mysqli_connect_errno(), mysqli_connect_error());\n        var_dump(mysqli_get_links_stats());\n    }\n    ob_start();\n    phpinfo();\n    $phpinfo = strip_tags(ob_get_contents());\n    ob_end_clean();\n    $phpinfo = substr($phpinfo, stripos($phpinfo, 'MysqlI Support => enabled'), 500);\n    if (!preg_match('@Active Persistent Links\\s+=>\\s+(\\d+)@ismU', $phpinfo, $matches))\n        printf(\"[016] Cannot get # of active persistent links from phpinfo()\\n\");\n    $num_plinks = $matches[1];\n    if ($num_plinks > (int)ini_get('mysqli.max_persistent'))\n        printf(\"[017] mysqli.max_persistent=%d allows %d open connections!\\n\", ini_get('mysqli.max_persistent'),$num_plinks);\n    mysqli_query($link, 'REVOKE ALL PRIVILEGES, GRANT OPTION FROM pcontest');\n    mysqli_query($link, 'DROP USER pcontest');\n    mysqli_close($link);\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
