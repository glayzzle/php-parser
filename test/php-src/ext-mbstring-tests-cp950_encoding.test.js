// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/mbstring/tests/cp950_encoding.phpt
  it("Exhaustive test of verification and conversion of CP950 text", function () {
    expect(parser.parseCode("<?php\ninclude('encoding_tests.inc');\nsrand(1000); // Make results consistent\nmb_substitute_character(0x25); // '%'\nreadConversionTable(__DIR__ . '/data/CP950.txt', $toUnicode, $fromUnicode);\n// Non-reversible mappings (two different CP950 codepoints map to same Unicode codepoint)\n$fromUnicode[\"\\x25\\x50\"] = \"\\xA2\\xA4\";\n$fromUnicode[\"\\x25\\x5E\"] = \"\\xA2\\xA5\";\n$fromUnicode[\"\\x25\\x61\"] = \"\\xA2\\xA7\";\n$fromUnicode[\"\\x25\\x6A\"] = \"\\xA2\\xA6\";\n$fromUnicode[\"\\x25\\x6D\"] = \"\\xA2\\x7E\";\n$fromUnicode[\"\\x25\\x6E\"] = \"\\xA2\\xA1\";\n$fromUnicode[\"\\x25\\x6F\"] = \"\\xA2\\xA3\";\n$fromUnicode[\"\\x25\\x70\"] = \"\\xA2\\xA2\";\n// CP950 explicitly maps some unused Big5 codepoint ranges to Unicode \"Private User Area\" codepoints\nfunction addPUAMapping($hi, $lo, $unicode) {\n  global $fromUnicode, $toUnicode;\n  $cp950 = pack('n', ($hi << 8) + $lo);\n  $unicode = pack('n', $unicode);\n  $fromUnicode[$unicode] = $cp950;\n  $toUnicode[$cp950] = $unicode;\n}\nfor ($hi = 0x81; $hi <= 0x8D; $hi++) {\n  for ($lo = 0x40; $lo <= 0x7E; $lo++)\n    addPUAMapping($hi, $lo, 0xEEB8 + (157 * ($hi - 0x81)) + ($lo - 0x40));\n  for ($lo = 0xA1; $lo <= 0xFE; $lo++)\n    addPUAMapping($hi, $lo, 0xEEB8 + (157 * ($hi - 0x81)) + ($lo - 0x62));\n}\nfor ($hi = 0x8E; $hi <= 0xA0; $hi++) {\n  for ($lo = 0x40; $lo <= 0x7E; $lo++)\n    addPUAMapping($hi, $lo, 0xE311 + (157 * ($hi - 0x8E)) + ($lo - 0x40));\n  for ($lo = 0xA1; $lo <= 0xFE; $lo++)\n    addPUAMapping($hi, $lo, 0xE311 + (157 * ($hi - 0x8E)) + ($lo - 0x62));\n}\n$hi = 0xC6;\nfor ($lo = 0xA1; $lo <= 0xFE; $lo++)\n  addPUAMapping($hi, $lo, 0xF672 + (157 * ($hi - 0xC6)) + ($lo - 0x62));\nfor ($hi = 0xC7; $hi <= 0xC8; $hi++) {\n  for ($lo = 0x40; $lo <= 0x7E; $lo++)\n    addPUAMapping($hi, $lo, 0xF672 + (157 * ($hi - 0xC6)) + ($lo - 0x40));\n  for ($lo = 0xA1; $lo <= 0xFE; $lo++)\n    addPUAMapping($hi, $lo, 0xF672 + (157 * ($hi - 0xC6)) + ($lo - 0x62));\n}\nfor ($hi = 0xFA; $hi <= 0xFE; $hi++) {\n  for ($lo = 0x40; $lo <= 0x7E; $lo++)\n    addPUAMapping($hi, $lo, 0xE000 + (157 * ($hi - 0xFA)) + ($lo - 0x40));\n  for ($lo = 0xA1; $lo <= 0xFE; $lo++)\n    addPUAMapping($hi, $lo, 0xE000 + (157 * ($hi - 0xFA)) + ($lo - 0x62));\n}\nfindInvalidChars($toUnicode, $invalid, $truncated);\ntestAllValidChars($toUnicode, 'CP950', 'UTF-16BE', false);\ntestAllInvalidChars($invalid, $toUnicode, 'CP950', 'UTF-16BE', \"\\x00%\");\ntestTruncatedChars($truncated, 'CP950', 'UTF-16BE', \"\\x00%\");\necho \"Tested CP950 -> UTF-16BE\\n\";\ntestAllValidChars($fromUnicode, 'UTF-16BE', 'CP950', false);\nfindInvalidChars($fromUnicode, $invalid, $unused, array_fill_keys(range(0,0xFF), 2));\nconvertAllInvalidChars($invalid, $fromUnicode, 'UTF-16BE', 'CP950', '%');\necho \"Tested UTF-16BE -> CP950\\n\";\n// Test \"long\" illegal character markers\nmb_substitute_character(\"long\");\nconvertInvalidString(\"\\x80\", \"%\", \"CP950\", \"UTF-8\");\nconvertInvalidString(\"\\x26\\x09\", \"U+2609\", \"UTF-16BE\", \"CP950\");\necho \"Done!\\n\";\n?>")).toMatchSnapshot();
  });
});
