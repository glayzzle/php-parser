// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/math/bug30695.phpt
  it("Bug #30695 (32 bit issues)", function () {
    expect(parser.parseCode("<?php\n    function toUTF8( $char_code )\n    {\n        switch ( $char_code )\n        {\n            case 0:\n                $char = chr( 0 );\n                break;\n            case !($char_code & 0xffffff80): // 7 bit\n                $char = chr( $char_code );\n                break;\n            case !($char_code & 0xfffff800): // 11 bit\n                $char = ( chr(0xc0 | (($char_code >> 6) & 0x1f)) .\n                          chr(0x80 | ($char_code & 0x3f)) );\n                break;\n            case !($char_code & 0xffff0000): // 16 bit\n                $char = ( chr(0xe0 | (($char_code >> 12) & 0x0f)) .\n                          chr(0x80 | (($char_code >> 6) & 0x3f)) .\n                          chr(0x80 | ($char_code & 0x3f)) );\n                break;\n            case !($char_code & 0xffe00000): // 21 bit\n                $char = ( chr(0xf0 | (($char_code >> 18) & 0x07)) .\n                          chr(0x80 | (($char_code >> 12) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 6) & 0x3f)) .\n                          chr(0x80 | ($char_code & 0x3f)) );\n                break;\n            case !($char_code & 0xfc000000): // 26 bit\n                $char = ( chr(0xf8 | (($char_code >> 24) & 0x03)) .\n                          chr(0x80 | (($char_code >> 18) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 12) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 6) & 0x3f)) .\n                          chr(0x80 | ($char_code & 0x3f)) );\n                break;\n            default: // 31 bit\n                $char = ( chr(0xfc | (($char_code >> 30) & 0x01)) .\n                          chr(0x80 | (($char_code >> 24) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 18) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 12) & 0x3f)) .\n                          chr(0x80 | (($char_code >> 6) & 0x3f)) .\n                          chr(0x80 | ($char_code & 0x3f)) );\n        }\n        return $char;\n    }\n    echo \"\\n\", toUTF8(65), \"\\n\", toUTF8(233), \"\\n\", toUTF8(1252), \"\\n\", toUTF8(20095), \"\\n\";\n?>")).toMatchSnapshot();
  });
});
