// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/pdo_mysql/tests/pdo_mysql_stmt_closecursor_empty.phpt
  it("MySQL PDOStatement->closeCursor()", function () {
    expect(parser.parseCode("<?php\n    require_once(__DIR__ . DIRECTORY_SEPARATOR . 'mysql_pdo_test.inc');\n    $db = MySQLPDOTest::factory();\n    try {\n        $db->setAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY, 0);\n        if (0 != $db->getAttribute(PDO::MYSQL_ATTR_DIRECT_QUERY))\n            printf(\"[002] Unable to turn off emulated prepared statements\\n\");\n        $db->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);\n        MySQLPDOTest::createTestTable($db);\n        $stmt = $db->prepare('SELECT id, label FROM test WHERE id > ? ORDER BY id ASC LIMIT 2');\n        $in = 0;\n        if (!$stmt->bindParam(1, $in))\n            printf(\"[003] Cannot bind parameter, %s %s\\n\",\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        $stmt->execute();\n        $id = $label = null;\n        if (!$stmt->bindColumn(1, $id, PDO::PARAM_INT))\n            printf(\"[004] Cannot bind integer column, %s %s\\n\",\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        if (!$stmt->bindColumn(2, $label, PDO::PARAM_STR))\n            printf(\"[005] Cannot bind string column, %s %s\\n\",\n                $stmt->errorCode(), var_export($stmt->errorInfo(), true));\n        while ($stmt->fetch(PDO::FETCH_BOUND))\n            printf(\"in = %d -> id = %s (%s) / label = %s (%s)\\n\",\n                $in,\n                var_export($id, true), gettype($id),\n                var_export($label, true), gettype($label));\n        $stmt->closeCursor();\n        $stmt->execute();\n        while ($stmt->fetch(PDO::FETCH_BOUND))\n            printf(\"in = %d -> id = %s (%s) / label = %s (%s)\\n\",\n                $in,\n                var_export($id, true), gettype($id),\n                var_export($label, true), gettype($label));\n    } catch (PDOException $e) {\n        printf(\"[001] %s [%s] %s\\n\",\n            $e->getMessage(), $db->errorCode(), implode(' ', $db->errorInfo()));\n    }\n    $db->exec('DROP TABLE IF EXISTS test');\n    print \"done!\";\n?>")).toMatchSnapshot();
  });
});
