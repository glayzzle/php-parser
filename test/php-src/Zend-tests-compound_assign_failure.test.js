// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/compound_assign_failure.phpt
  it("Behavior of failing compound assignment", function () {
    expect(parser.parseCode("<?php\ntry {\n    $a = 1;\n    $a %= 0;\n} catch (Error $e) { var_dump($a); }\ntry {\n    $a = 1;\n    $a >>= -1;\n} catch (Error $e) { var_dump($a); }\ntry {\n    $a = 1;\n    $a <<= -1;\n} catch (Error $e) { var_dump($a); }\nset_error_handler(function($type, $msg) { throw new Exception($msg); });\ntry {\n    $a = [];\n    $a .= \"foo\";\n} catch (Throwable $e) { var_dump($a); }\ntry {\n    $a = \"foo\";\n    $a .= [];\n} catch (Throwable $e) { var_dump($a); }\n$x = new stdClass;\ntry { $x += 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x += new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x += new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x -= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x -= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x -= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x *= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x *= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x *= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x /= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x /= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x /= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x %= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x %= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x %= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x **= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x **= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x **= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x ^= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x ^= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x ^= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x &= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x &= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x &= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x |= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x |= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x |= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x <<= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x <<= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x <<= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = new stdClass;\ntry { $x >>= 1; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = 1;\ntry { $x >>= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n$x = \"foo\";\ntry { $x >>= new stdClass; }\ncatch (Throwable $e) {}\nvar_dump($x);\n?>")).toMatchSnapshot();
  });
});
