// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/snmp/tests/snmp_getvalue.phpt
  it("Function snmp_getvalue", function () {
    expect(parser.parseCode("<?php\nrequire_once(__DIR__.'/snmp_include.inc');\n//EXPECTF format is quickprint OFF\nsnmp_set_quick_print(false);\necho \"Get with SNMP_VALUE_LIBRARY\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_LIBRARY);\nvar_dump(snmpget($hostname, $community, '.1.3.6.1.2.1.1.1.0', $timeout, $retries));\necho \"Get with SNMP_VALUE_PLAIN\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\nvar_dump(snmpget($hostname, $community, '.1.3.6.1.2.1.1.1.0', $timeout, $retries));\necho \"Get with SNMP_VALUE_OBJECT\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_OBJECT);\n$z = snmpget($hostname, $community, '.1.3.6.1.2.1.1.1.0', $timeout, $retries);\necho gettype($z).\"\\n\";\nvar_dump($z->type);\nvar_dump($z->value);\necho \"Get with SNMP_VALUE_OBJECT | SNMP_VALUE_PLAIN\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_OBJECT | SNMP_VALUE_PLAIN);\n$z = snmpget($hostname, $community, '.1.3.6.1.2.1.1.1.0', $timeout, $retries);\necho gettype($z).\"\\n\";\nvar_dump($z->type);\nvar_dump($z->value);\necho \"Get with SNMP_VALUE_OBJECT for BITS OID\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_OBJECT);\n$z = snmpget($hostname, $community, '.1.3.6.1.2.1.88.1.4.2.1.3.6.95.115.110.109.112.100.95.108.105.110.107.68.111.119.110', $timeout, $retries);\necho gettype($z).\"\\n\";\nvar_dump($z->type);\nvar_dump($z->value);\necho \"Get with SNMP_VALUE_OBJECT | SNMP_VALUE_PLAIN for BITS OID\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_OBJECT | SNMP_VALUE_PLAIN);\n$z = snmpget($hostname, $community, '.1.3.6.1.2.1.88.1.4.2.1.3.6.95.115.110.109.112.100.95.108.105.110.107.68.111.119.110', $timeout, $retries);\necho gettype($z).\"\\n\";\nvar_dump($z->type);\nvar_dump(is_numeric($z->value));\nvar_dump(is_string($z->value));\nvar_dump(bin2hex($z->value));\necho \"Check parsing of different OID types\\n\";\nsnmp_set_valueretrieval(SNMP_VALUE_PLAIN);\nvar_dump(count(snmp2_walk($hostname, $community, '.', $timeout, $retries)));\n?>")).toMatchSnapshot();
  });
});
