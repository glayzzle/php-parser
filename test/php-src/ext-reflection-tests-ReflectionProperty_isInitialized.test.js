// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/reflection/tests/ReflectionProperty_isInitialized.phpt
  it("Test ReflectionProperty::isInitialized()", function () {
    expect(parser.parseCode("<?php\nclass A {\n    public static ?string $ssv = null;\n    public static ?string $ss;\n    public static $s;\n    public ?int $iv = null;\n    public ?int $i;\n    public $n;\n    private int $p;\n}\nclass B extends A { }\necho \"Static properties:\\n\";\nvar_dump((new ReflectionProperty(A::class, 'ssv'))->isInitialized());\nvar_dump((new ReflectionProperty(A::class, 'ss'))->isInitialized());\nvar_dump((new ReflectionProperty(A::class, 's'))->isInitialized());\necho \"Declared properties:\\n\";\n$a = new A;\nvar_dump((new ReflectionProperty($a, 'iv'))->isInitialized($a));\nvar_dump((new ReflectionProperty($a, 'i'))->isInitialized($a));\nvar_dump((new ReflectionProperty($a, 'n'))->isInitialized($a));\necho \"Declared properties after unset:\\n\";\nunset($a->iv);\nunset($a->i);\nunset($a->n);\nvar_dump((new ReflectionProperty($a, 'i'))->isInitialized($a));\nvar_dump((new ReflectionProperty($a, 'iv'))->isInitialized($a));\nvar_dump((new ReflectionProperty($a, 'n'))->isInitialized($a));\necho \"Dynamic properties:\\n\";\n$a->d = null;\n$rp = new ReflectionProperty($a, 'd');\nvar_dump($rp->isInitialized($a));\nunset($a->d);\nvar_dump($rp->isInitialized($a));\necho \"Visibility handling:\\n\";\n$rp = new ReflectionProperty('A', 'p');\nvar_dump($rp->isInitialized($a));\nvar_dump($rp->isInitialized($a));\necho \"Object type:\\n\";\n$rp = new ReflectionProperty('B', 'i');\nvar_dump($rp->isInitialized($a));\ntry {\n    var_dump($rp->isInitialized(new stdClass));\n} catch (ReflectionException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\ntry {\n    var_dump($rp->isInitialized());\n} catch (TypeError $e) {\n    echo $e->getMessage(), \"\\n\";\n}\nclass WithMagic {\n    public $prop;\n    public int $intProp;\n    public function __isset($name) {\n        echo \"__isset($name)\\n\";\n        return true;\n    }\n    public function __get($name) {\n        echo \"__get($name)\\n\";\n        return \"foobar\";\n    }\n}\necho \"Class with __isset:\\n\";\n$obj = new WithMagic;\nunset($obj->prop);\n$rp = new ReflectionProperty('WithMagic', 'prop');\nvar_dump($rp->isInitialized($obj));\n$rp = new ReflectionProperty('WithMagic', 'intProp');\nvar_dump($rp->isInitialized($obj));\n?>")).toMatchSnapshot();
  });
});
