// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/file/is_writable_variation1.phpt
  it("Test is_writable() and its alias is_writeable() function: usage variations - diff. path notations", function () {
    expect(parser.parseCode("<?php\n/* test is_writable() & is_writeable() with file having different filepath notation */\nrequire __DIR__.'/file.inc';\necho \"*** Testing is_writable(): usage variations ***\\n\";\n$file_path = __DIR__;\nmkdir(\"$file_path/is_writable_variation1\");\n// create a new temporary file\n$fp = fopen(\"$file_path/is_writable_variation1/bar.tmp\", \"w\");\nfclose($fp);\n/* array of files to be tested to check if they are writable\n   using is_writable() function */\n$files_arr = array(\n  \"$file_path/is_writable_variation1/bar.tmp\",\n  /* Testing a file trailing slash */\n  \"$file_path/is_writable_variation1/bar.tmp/\",\n  /* Testing file with double slashes */\n  \"$file_path/is_writable_variation1//bar.tmp\",\n  \"$file_path//is_writable_variation1//bar.tmp\",\n  \"$file_path/is_writable_variation1/*.tmp\",\n  \"$file_path/is_writable_variation1/b*.tmp\",\n  /* Testing Binary safe */\n  \"$file_path/is_writable_variation1\".chr(0).\"bar.tmp\",\n  \"$file_path\".chr(0).\"is_writable_variation1/bar.tmp\",\n  \"$file_path\".chr(0).\"is_writable_variation1/bar.tmp\",\n  /* Testing directories */\n  \".\",  // current directory, exp: bool(true)\n  \"$file_path/is_writable_variation1\"  // temp directory, exp: bool(true)\n);\n$counter = 1;\n/* loop through to test each element in the above array\n   is a writable file */\nforeach($files_arr as $file) {\n  echo \"-- Iteration $counter --\\n\";\n  try {\n    var_dump( is_writable($file) );\n  } catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n  try {\n    var_dump( is_writeable($file) );\n  } catch (Error $e) {\n    echo $e->getMessage(), \"\\n\";\n  }\n  $counter++;\n  clearstatcache();\n}\necho \"Done\\n\";\n?>")).toMatchSnapshot();
  });
});
