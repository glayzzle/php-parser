// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/count_recursive.phpt
  it("Test count() function", function () {
    expect(parser.parseCode("<?php\necho \"*** Testing basic functionality of count() function ***\\n\";\nprint \"-- Testing arrays --\\n\";\n$arr = array(1, array(3, 4, array(6, array(8))));\nprint \"COUNT_NORMAL: should be 2, is \".count($arr, COUNT_NORMAL).\"\\n\";\nprint \"COUNT_RECURSIVE: should be 8, is \".count($arr, COUNT_RECURSIVE).\"\\n\";\nprint \"-- Testing hashes --\\n\";\n$arr = array(\"a\" => 1, \"b\" => 2, array(\"c\" => 3, array(\"d\" => 5)));\nprint \"COUNT_NORMAL: should be 3, is \".count($arr, COUNT_NORMAL).\"\\n\";\nprint \"COUNT_RECURSIVE: should be 6, is \".count($arr, COUNT_RECURSIVE).\"\\n\";\nprint \"-- Testing various types with no second argument --\\n\";\nprint \"COUNT_NORMAL: should be 2, is \".count(array(\"a\", array(\"b\"))).\"\\n\";\n$arr = array('a'=>array(NULL, NULL, NULL), 1=>array(NULL=>1, 1=>NULL),\n    array(array(array(array(array(NULL))))));\nprint \"-- Testing really cool arrays --\\n\";\nprint \"COUNT_NORMAL: should be 3, is \".count($arr, COUNT_NORMAL).\"\\n\";\nprint \"COUNT_RECURSIVE: should be 13, is \".count($arr, COUNT_RECURSIVE).\"\\n\";\necho \"\\n*** Testing possible variations of count() function on arrays ***\";\n$count_array = array(\n  array(),\n  array( 1 => \"string\"),\n  array( \"\" => \"string\", 0 => \"a\", NULL => \"b\", -1 => \"c\",\n         array(array(array(NULL)))),\n  array( -2 => 12, array(array(1, 2, array(array(\"0\"))))),\n  array( \"a\" => 1, \"b\" => -2.344, \"b\" => \"string\", \"c\" => NULL, \"d\" => -2.344),\n  array( 4 => 1, 3 => -2.344, \"3\" => \"string\", \"2\" => NULL,\n         1 => -2.344, array()),\n  array( TRUE => TRUE, FALSE => FALSE, \"\" => \"\", \" \" => \" \",\n     NULL => NULL, \"\\x000\" => \"\\x000\", \"\\000\" => \"\\000\"),\n  array( NULL, 1 => \"Hi\", \"string\" => \"hello\",\n         array(\"\" => \"World\", \"-2.34\" => \"a\", \"0\" => \"b\"))\n);\n$i = 0;\nforeach ($count_array as $count_value) {\n  echo \"\\n-- Iteration $i --\\n\";\n  print \"COUNT_NORMAL is \".count($count_value, COUNT_NORMAL).\"\\n\";\n  print \"COUNT_RECURSIVE is \".count($count_value, COUNT_RECURSIVE).\"\\n\";\n  $i++;\n}\nprint \"\\n-- Testing count() on an empty sub-array --\\n\";\n$arr = array(1, array(3, 4, array()));\nprint \"COUNT_NORMAL: should be 2, is \".count($arr, COUNT_NORMAL).\"\\n\";\nprint \"COUNT_RECURSIVE: should be 5, is \".count($arr, COUNT_RECURSIVE).\"\\n\";\necho \"\\n-- Testing count() on objects with Countable interface --\\n\";\nclass count_class implements Countable {\n  private $var_private;\n  public $var_public;\n  protected $var_protected;\n  public function count(): int {\n    return 3;\n  }\n}\n$obj = new count_class();\nprint \"COUNT_NORMAL: should be 3, is \".count($obj).\"\\n\";\necho \"\\n-- Testing count() on resource type --\\n\";\n$resource1 = fopen( __FILE__, \"r\" );  // Creating file(stream type) resource\n$resource2 = opendir( \".\" );  // Creating dir resource\n/* creating an array with resources as elements */\n$arr_resource = array(\"a\" => $resource1, \"b\" => $resource2);\nvar_dump(count($arr_resource));\necho \"\\n-- Testing count() on arrays containing references --\\n\";\n$arr = array(1, array(\"a\", \"b\", \"c\"));\n$arr[2] = &$arr[1];\necho \"Count normal\" . \\PHP_EOL;\nvar_dump(count($arr, COUNT_NORMAL));\necho \"Count recursive\" . \\PHP_EOL;\nvar_dump(count($arr, COUNT_RECURSIVE));\n/* closing the resource handles */\nfclose( $resource1 );\nclosedir( $resource2 );\n?>")).toMatchSnapshot();
  });
});
