// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/intl/tests/collator_asort.phpt
  it("asort()", function () {
    expect(parser.parseCode("<?php\n/*\n * Sort associative arrays using various locales.\n */\n$test_num = 1;\n/*\n * Sort various arrays in specified locale.\n */\nfunction sort_arrays( $locale, $test_arrays, $sort_flag = Collator::SORT_REGULAR )\n{\n    $res_str = '';\n    $coll = ut_coll_create( $locale );\n    foreach( $test_arrays as $test_array )\n    {\n        // Try to sort test data.\n        $res_val = ut_coll_asort( $coll, $test_array, $sort_flag );\n        // Return output data.\n        $res_dump = \"\\n\" . dump( $test_array ) .\n                    \"\\n Result: \" . dump( $res_val );\n        // Preppend test signature to output string\n        $md5 = md5( $res_dump );\n        global $test_num;\n        $res_str .= \"\\n\\n\".\n                    \"Test $test_num.$md5:\" .\n                    $res_dump;\n        ++$test_num;\n    }\n    return $res_str;\n}\n/*\n * Test main function.\n */\nfunction ut_main()\n{\n    global $test_num;\n    $test_num = 1;\n    $res_str = '';\n    // Sort an array in SORT_REGULAR mode using en_US locale.\n    $test_params = array(\n        array( 'd' => 'y'  ,\n               'c' => 'i'  ,\n               'a' => 'k'  ),\n        array( 'a' => 'a'  ,\n               'b' => 'aaa',\n               'c' => 'aa' ),\n        array( 'a'  => 'a' ,\n               'aaa'=> 'a' ,\n               'aa' => 'a' ),\n        array( '1' => 'abc',\n               '5' => '!'  ,\n               '2' => null ,\n               '7' => ''   ),\n        array( '1' => '100',\n               '2' => '25' ,\n               '3' => '36' ),\n        array( '1' => 5    ,\n               '2' => '30' ,\n               '3' => 2    )\n    );\n    $res_str .= sort_arrays( 'en_US', $test_params );\n    // Sort an array in SORT_STRING mode using en_US locale.\n    $test_params = array(\n        array( '1' => '100',\n               '2' => '25' ,\n               '3' => '36' ),\n        array( '1' => 5    ,\n               '2' => '30' ,\n               '3' => 2    ),\n        array( '1' => 'd'  ,\n               '2' => ''   ,\n               '3' => ' a' ),\n        array( '1' => 'y'  ,\n               '2' => 'k'  ,\n               '3' => 'i'  )\n    );\n    $res_str .= sort_arrays( 'en_US', $test_params, Collator::SORT_STRING );\n    // Sort a non-ASCII array using ru_RU locale.\n    $test_params = array(\n        array( 'п' => 'у',\n               'б' => 'в',\n               'е' => 'а' ),\n        array( '1' => 'п',\n               '4' => '',\n               '7' => 'd',\n               '2' => 'пп' )\n    );\n    $res_str .= sort_arrays( 'ru_RU', $test_params );\n    // Sort an array using Lithuanian locale.\n    $test_params = array(\n        array( 'd' => 'y',\n               'c' => 'i',\n               'a' => 'k' )\n    );\n    $res_str .= sort_arrays( 'lt_LT', $test_params );\n    return $res_str . \"\\n\";\n}\ninclude_once( 'ut_common.inc' );\nut_run();\n?>")).toMatchSnapshot();
  });
});
