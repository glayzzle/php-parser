// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // Zend/tests/bug32290.phpt
  it("Bug #32290 (calling call_user_func_array() ends in infinite loop within child class)", function () {
    expect(parser.parseCode("<?php\nclass TestA\n{\n    public function doSomething($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        return --$i;\n    }\n    public function doSomethingThis($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        return --$i;\n    }\n    public function doSomethingParent($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        return --$i;\n    }\n    public function doSomethingParentThis($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        return --$i;\n    }\n    public static function doSomethingStatic($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        return --$i;\n    }\n}\nclass TestB extends TestA\n{\n    public function doSomething($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        $i++;\n        if ($i >= 5) return 5;\n        return call_user_func_array(array(\"TestA\", \"doSomething\"), array($i));\n    }\n    public function doSomethingThis($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        $i++;\n        if ($i >= 5) return 5;\n        return call_user_func_array(array($this, \"TestA::doSomethingThis\"), array($i));\n    }\n    public function doSomethingParent($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        $i++;\n        if ($i >= 5) return 5;\n        return call_user_func_array(array(\"parent\", \"doSomethingParent\"), array($i));\n    }\n    public function doSomethingParentThis($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        $i++;\n        if ($i >= 5) return 5;\n        return call_user_func_array(array($this, \"parent::doSomethingParentThis\"), array($i));\n    }\n    public static function doSomethingStatic($i)\n    {\n        echo __METHOD__ . \"($i)\\n\";\n        $i++;\n        if ($i >= 5) return 5;\n        return call_user_func_array(array(\"TestA\", \"doSomethingStatic\"), array($i));\n    }\n}\n$x = new TestB();\necho \"===A===\\n\";\nvar_dump($x->doSomething(1));\necho \"\\n===B===\\n\";\nvar_dump($x->doSomethingThis(1));\necho \"\\n===C===\\n\";\nvar_dump($x->doSomethingParent(1));\necho \"\\n===D===\\n\";\nvar_dump($x->doSomethingParentThis(1));\necho \"\\n===E===\\n\";\nvar_dump($x->doSomethingStatic(1));\n?>")).toMatchSnapshot();
  });
});
