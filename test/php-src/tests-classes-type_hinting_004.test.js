// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // tests/classes/type_hinting_004.phpt
  it("Ensure type hints are enforced for functions invoked as callbacks.", function () {
    expect(parser.parseCode("<?php\n  echo \"---> Type hints with callback function:\\n\";\n  class A  {  }\n  function f1(A $a)  {\n      echo \"in f1;\\n\";\n  }\n  function f2(A $a = null)  {\n      echo \"in f2;\\n\";\n  }\n  try {\n    call_user_func('f1', 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func('f1', new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func('f2', 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func('f2');\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func('f2', new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func('f2', null);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  echo \"\\n\\n---> Type hints with callback static method:\\n\";\n  class C {\n      static function f1(A $a) {\n          if (isset($this)) {\n              echo \"in C::f1 (instance);\\n\";\n          } else {\n              echo \"in C::f1 (static);\\n\";\n          }\n      }\n      static function f2(A $a = null) {\n          if (isset($this)) {\n              echo \"in C::f2 (instance);\\n\";\n          } else {\n              echo \"in C::f2 (static);\\n\";\n          }\n      }\n  }\n  try {\n    call_user_func(array('C', 'f1'), 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array('C', 'f1'), new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array('C', 'f2'), 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array('C', 'f2'));\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array('C', 'f2'), new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array('C', 'f2'), null);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  echo \"\\n\\n---> Type hints with callback instance method:\\n\";\n  class D {\n      function f1(A $a) {\n          if (isset($this)) {\n              echo \"in C::f1 (instance);\\n\";\n          } else {\n              echo \"in C::f1 (static);\\n\";\n          }\n      }\n      function f2(A $a = null) {\n          if (isset($this)) {\n              echo \"in C::f2 (instance);\\n\";\n          } else {\n              echo \"in C::f2 (static);\\n\";\n          }\n      }\n  }\n  $d = new D;\n  try {\n    call_user_func(array($d, 'f1'), 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array($d, 'f1'), new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array($d, 'f2'), 1);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array($d, 'f2'));\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array($d, 'f2'), new A);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n  try {\n    call_user_func(array($d, 'f2'), null);\n  } catch (Error $ex) {\n    echo \"{$ex->getCode()}: {$ex->getMessage()} - {$ex->getFile()}({$ex->getLine()})\\n\\n\";\n  }\n?>")).toMatchSnapshot();
  });
});
