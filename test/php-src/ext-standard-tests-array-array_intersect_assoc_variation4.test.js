// eslint-disable prettier/prettier
const parser = require("../main");

describe("php-src tests", function () {
  // ext/standard/tests/array/array_intersect_assoc_variation4.phpt
  it("Test array_intersect_assoc() function : usage variations - different arrays for 'arr2' argument", function () {
    expect(parser.parseCode("<?php\n/*\n* Passing different types of arrays to $arr2 argument and testing whether\n* array_intersect_assoc() behaves in an expected way with the other arguments passed to the function.\n* The $arr1 argument passed is a fixed array.\n*/\necho \"*** Testing array_intersect_assoc() : Passing different types of arrays to \\$arr2 argument ***\\n\";\n/* Different heredoc strings passed as argument to $arr2 */\n// heredoc with blank line\n$blank_line = <<<EOT\nEOT;\n// heredoc with multiline string\n$multiline_string = <<<EOT\nhello world\nThe big brown fox jumped over;\nthe lazy dog\nThis is a double quoted string\nEOT;\n// heredoc with different whitespaces\n$diff_whitespaces = <<<EOT\nhello\\r world\\t\n1111\\t\\t != 2222\\v\\v\nheredoc\\ndouble quoted string. with\\vdifferent\\fwhite\\vspaces\nEOT;\n// heredoc with quoted strings and numeric values\n$numeric_string = <<<EOT\n11 < 12. 123 >22\n'single quoted string'\n\"double quoted string\"\n2222 != 1111.\\t 0000 = 0000\\n\nEOT;\n// array to be passsed to $arr1 argument\n$arr1 = array (\n  1, 1.1, 1.3, 1 => true, \"hello\", \"one\", NULL, 2,\n  'world', true, false, 3 => \"b\\tbbb\", \"aaaa\\r\",\n  $numeric_string, \"h3\" => $diff_whitespaces, \"true\" => true,\n  \"one\" => \"ten\", 4 => \"four\", \"two\" => 2, 6 => \"six\",\n  '', null => \"null\", '' => 'emptys'\n);\n// arrays to be passed to $arr2 argument\n$arrays = array (\n/*1*/  array(1, 2), // array with default keys and numeric values\n       array(1.1, 1.2, 1.3), // array with default keys & float values\n       array(false,true), // array with default keys and boolean values\n       array(), // empty array\n/*5*/  array(NULL), // array with NULL\n       array(\"a\\v\\f\",\"aaaa\\r\",\"b\",\"b\\tbbb\",\"c\",\"\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}\"),  // array with double quoted strings\n       array('a\\v\\f','aaaa\\r','b','b\\tbbb','c','\\[\\]\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\{\\}'),  // array with single quoted strings\n       array($blank_line, \"h2\" => $multiline_string, \"h3\" => $diff_whitespaces, $numeric_string),  // array with heredocs\n       // associative arrays\n/*9*/  array(1 => \"one\", 2 => \"two\", 6 => \"six\"),  // explicit numeric keys, string values\n       array(\"one\" => 1, \"two\" => 2, \"three\" => 3 ),  // string keys & numeric values\n       array( 1 => 10, 2 => 20, 4 => 40, 3 => 30),  // explicit numeric keys and numeric values\n       array( \"one\" => \"ten\", \"two\" => \"twenty\", \"three\" => \"thirty\"),  // string key/value\n       array(\"one\" => 1, 2 => \"two\", 4 => \"four\"),  //mixed\n       // associative array, containing null/empty/boolean values as key/value\n/*14*/ array(NULL => \"NULL\", null => \"null\", \"NULL\" => NULL, \"null\" => null),\n       array(true => \"true\", false => \"false\", \"false\" => false, \"true\" => true),\n       array(\"\" => \"emptyd\", '' => 'emptys', \"emptyd\" => \"\", 'emptys' => ''),\n       array(1 => '', 2 => \"\", 3 => NULL, 4 => null, 5 => false, 6 => true),\n       array('' => 1, \"\" => 2, NULL => 3, null => 4, false => 5, true => 6),\n       // array with repetitive keys\n/*19*/ array(\"One\" => 1, \"two\" => 2, \"One\" => 10, \"two\" => 20, \"three\" => 3)\n);\n// loop through each sub-array within $arrays to check the behavior of array_intersect_assoc()\n$iterator = 1;\nforeach($arrays as $arr2) {\n  echo \"-- Iteration $iterator --\\n\";\n  // Calling array_intersect_assoc() with default arguments\n  var_dump( array_intersect_assoc($arr1, $arr2) );\n  // Calling array_intersect_assoc() with more arguments\n  // additional argument passed is the same as $arr1 argument\n  var_dump( array_intersect_assoc($arr1, $arr2, $arr1) );\n  $iterator++;\n}\necho \"Done\";\n?>")).toMatchSnapshot();
  });
});
